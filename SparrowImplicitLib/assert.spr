import meta.featherNodes, meta.sparrowNodes, meta.nodeKinds
import std.vector, std.algorithms, std.string

[macro]
    /**
     * Helper used to check a pre-/post- condition in debug environment
     *
     * This will check if the given expression is false, and if so, will generate
     * an error message and continue. This will only happen if DEBUG is defined and
     * true. Otherwise, it will expand to nothing.
     *
     * If DEBUG is not set, this will not evaluate the expression.
     *
     * @param cond      The condition we need to test
     * @param message   Optional message to be displayed if the check fails
     */
    fun assert(cond: AstNode, message: AstNode = AstNode()): AstNode
        if !isValidAndTrue(DEBUG)
            return mkNop(cond location)
        return _assertMacroBody(cond, message)

    /**
     * Helper used to check a pre-/post- condition in debug environment
     *
     * This is similar to assert, but it will evaluate the expression even if DEBUG
     * is not set. If DEBUG is not set, will will not check the expression.
     *
     * @param cond      The condition we need to test
     * @param message   Optional message to be displayed if the check fails
     */
    fun verify(cond: AstNode, message: AstNode = AstNode()): AstNode
        if !isValidAndTrue(DEBUG)
            return cond
        return _assertMacroBody(cond, message)

[ct]
    fun _nodeCompare(l,r: AstNode) = (l location) < (r location)

    /// Macro that creates the expansion of the assert/verify
    fun _assertMacroBody(cond, message: AstNode): AstNode
        // Extract information about the assert condition
        let loc = cond location
        let filename = loc.sourceCode filename
        let lineNum: Int = loc.start.line

        // Extract the list of variables directly appearing the the expression
        var varsList: Vector(AstNode)
        _extractVars(cond, varsList)

        // Sort all the variables by location
        sort(varsList.all, \_nodeCompare)

        // Now start creating the print body, in case the expression check fails
        var prints: Vector(AstNode)
        _addPrint(loc, prints, mkStringLiteral(loc, filename))
        _addPrint(loc, prints, mkStringLiteral(loc, "("))
        _addPrint(loc, prints, mkIntLiteral(loc, lineNum))
        _addPrint(loc, prints, mkStringLiteral(loc, "): assertion failure: check "))

        // Build the annotated expression string
        // Walk over the list of variables, and if possible add the var value
        // Print all the expression string in between
        let expr: String = loc getCorrespondingCode
        var lastIdx = 0
        for i = 0..varsList.size
            let v = varsList(i)
            let vl = v location
            if vl.end.line != loc.start.line
                break  // Stop expanding variables when we are going on another line

            let endPos = vl.end.col - loc.start.col
            if endPos != lastIdx
                // Print the expression sting up until (and containing) the var
                let exprPart = expr.subrange(lastIdx, endPos-lastIdx)
                _addPrint(loc, prints, mkStringLiteral(loc, exprPart))

                // Add a block for printing the value of the write
                // Ensure that this is printable
                var argsToEval = mkNodeList(loc)
                addToNodeList(argsToEval, mkInfixOp(loc, "<<", mkIdentifier(loc, "cout"), v clone))
                let cond = mkFunApplication(loc, mkIdentifier(loc, "isValid"), argsToEval)
                // if body
                var varPrints: AstNode Vector
                _addPrint(loc, varPrints, mkStringLiteral(loc, "[="))
                _addPrint(loc, varPrints, v clone)
                _addPrint(loc, varPrints, mkStringLiteral(loc, "]"))
                let varPrintsBlock = mkLocalSpace(loc, varPrints.all)
                // if statement
                prints += mkIf(loc, cond, varPrintsBlock, AstNode(), true)
            lastIdx = Int(endPos)
        // Write the last part of the expression (if any)
        let sz = expr size
        if lastIdx < sz
            let exprPart = expr.subrange(lastIdx, sz-lastIdx)
            _addPrint(loc, prints, mkStringLiteral(loc, exprPart))

        // Now, the last part of the printing
        _addPrint(loc, prints, mkStringLiteral(loc, " has failed"))
        if message isSet
            _addPrint(loc, prints, mkStringLiteral(loc, ": "))
            _addPrint(loc, prints, message)
        _addPrint(loc, prints, mkStringLiteral(loc, "\n"))

        let printsBlock = mkLocalSpace(loc, prints.all)

        // Build the resulting code:
        // if !cond <printsBlock>
        let res = mkIf(loc, mkPrefixOp(loc, "!", mkParenthesisExp(loc, cond)), printsBlock, AstNode())
        return res

    /// Adds a print statement node to the destination vector
    fun _addPrint(loc: Location, dest: !Vector(AstNode), toPrint: AstNode)
        dest += mkInfixOp(loc, "<<", mkIdentifier(loc, "cout"), toPrint)

    /// Extract all the variables from the given node
    fun _extractVars(node: AstNode, varsList: !Vector(AstNode))
        let nk = node nodeKind
        if nk == nkSparrowExpIdentifier
            node semanticCheck
            let exp = node explanation
            if (exp isSet) && (exp nodeKind) == nkFeatherExpVarRef
                varsList += node
        else
            for child = node children
                if child isSet
                    _extractVars(child, varsList)
