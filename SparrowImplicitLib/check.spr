module check

import std.string(String)
import std.map(Map)
import std.function(Function)

//! An object that is able to generate values of the given type, possibly in a random fashion
[initCtor]
datatype Gen(t: Type)
    using ValueType = t
    _generator: Function(t, UInt)

concept _Generator(x) if isValid(x(UInt(0)))

fun mkGen(t: Type, generator: _Generator const): Gen(t)
    using FunType = Function(t, UInt)
    return Gen(t)(FunType(generator))

fun ()(this: !Gen, sizeHint: UInt): ValueType = _generator(sizeHint)

fun isValid(this: Gen const): Bool = _generator isSet

concept GenType(x)                  \
    if typeOf(x.ValueType) == Type  \
    && typeOf(x.isValid) == Bool  \
    && typeOf(x(0)) == x.ValueType

//! Arbitrary prototype
//fun arbitrary(t: Type): t Gen

//! Arbitrary definition for the integer types
fun arbitrary(t: Type): t Gen if Integer(#$t)
    return mkGen(t, \_Impl.NumericGen(t).gen)

//! Configuration options for our check function
[initCtor]
datatype CheckConfig
    numTests, maxAttempts: UInt
    isVerbose: Bool
fun ctor(this: !CheckConfig)
    numTests = 100
    maxAttempts = 5*numTests
    isVerbose = false

//! A value to be tested
//! Along with the actual value we also hold whether the value is trivial and its
//! classifier
datatype TestableValue(t: Type)
    using ValueType = t

    value: t
    isTrivial: Bool
    classifier: String

fun ctor(this: !TestableValue, value: this.ValueType const)
    this.value ctor value
    this.isTrivial ctor false
    this.classifier ctor ""

//! Concept that matches all TestableValues instances
concept TestableValuesRange(x: Range) if (
       isValid(x.RetType.ValueType)
    && x.RetType == TestableValue(x.RetType.ValueType)
    )

//! Function that checks a range of testable values against a predicate
//!
//! This will extract values from the input range and applies the predicate on
//! them. Makes sure that the predicate holds for all these values. Reports the
//! statistics of running the tests.
fun check(values: TestableValuesRange, pred: AnyType const): Bool \
        = check(values, pred, "") \
    if !isValid(pred.v1)
fun check(values: TestableValuesRange, predMsg: AnyType const): Bool \
        = check(values, predMsg.v1, predMsg.v2) \
    if isValid(predMsg.v1)
fun check(values: TestableValuesRange, pred: AnyType const, msg: StringRef, config: CheckConfig = CheckConfig()): Bool
    cout << "* Checking " << msg << endl
    var classes: Map(String, UInt)

    var numTrivial = 0
    var n = 0
    for val = values
        // Check the value's class
        if val.isTrivial
            ++numTrivial
        if val.classifier != ""
            ++classes(val.classifier)

        // If verbose, print the test
        if config.isVerbose
            cout << "Test " << n << ":\n" << val.value << endl

        // Check if the property holds for the value
        if !pred(val.value)
            cout << "FAILURE: Falsifiable after " << (n+1) << " tests, for input:\n" << val.value << endl
            return false

        if ++n >= config.numTests
            break

    // Print summary results
    cout << "OK, passed " << n << " tests"
    if numTrivial > 0
        cout << " (" << numTrivial*100/n << "% trivial)"
    cout << "." << endl

    // Print distribution of classes
    classes.remove("")
    if !classes.isEmpty
        for c = classes.keys
            let percent = classes(c)*100/n
            cout << percent << "% : " << c << endl
        // TODO: sort the classes before displaying them

    return true

//! Function that generates arbitrary testable values of the given type
fun forAll(t: Type) = _Impl.ForAllGenerator(t)(t arbitrary)
//! Function that generates arbitrary testable values from the given generator
fun forAll(gen: GenType) = _Impl.ForAllGenerator(gen.ValueType)(gen)
//! Function that generates testable values from the given range
fun forAll(r: Range) = _Impl.ForAllRangeGenerator(typeOf(r))(r)

//! Filter functionality - filters the testable values against the given predicate
fun forWhich(r: TestableValuesRange, pred: AnyType const) = _Impl.ForWhichRange(typeOf(r), typeOf(pred))(r, pred)

//! Sets the triviality of the testable values according to the result of the predicate
fun withTrivials(r: TestableValuesRange, pred: AnyType const) = _Impl.TrivialsRange(typeOf(r), typeOf(pred))(r, pred)
//! Sets the classifier of the testable values according to the result of the predicate
fun withClassifier(r: TestableValuesRange, pred: AnyType const) = _Impl.ClassifierRange(typeOf(r), typeOf(pred))(r, pred)

////////////////////////////////////////////////////////////////////////////////
// Combinators
//

concept FreqGenType(x) if(
       Integer(x.v1)
    && GenType(x.v2)
    )

//! Returns a generator that generates elements from the range
fun elements(r: Range): r.RetType Gen = _Impl.ElementsGen(typeOf(r))(r).gen

//! Given a set of generators, this will randomly chose one of them
fun oneOf(gens: Range): gens.RetType if GenType(#$gens.RetType)
    if gens.isEmpty return gens.RetType()
    var gensc = gens
    gensc advance randBetween(0, (gens rangeSize))
    return gensc.front

//! Same as oneOf, but for each generator we also have its frequency
fun frequency(gens: Range): typeOf((#$gens.RetType).v2) if FreqGenType(#$gens.RetType)
    if gens.isEmpty return typeOf((#$gens.RetType).v2)()

    // Compute the sum of frequencies
    var sum = 0
    for fg = gens
        sum += fg.v1
    if sum == 0 return typeOf((#$gens.RetType).v2)()

    // Select a random number in the total sum of frequencies
    let toSelect = randBetween(0, sum)
    // Select the right generator from the distribution
    var curAcc = 0
    for fg = gens
        if curAcc <= toSelect && toSelect < curAcc + fg.v1
            return fg.v2
        curAcc += fg.v1
    return typeOf((#$gens.RetType).v2)()

fun randBetween(min, max: Integer): commonType(typeOf(min), typeOf(max))
    using T = commonType(typeOf(min), typeOf(max))
    using RAND_MAX = 0x7fffffff
    let offset: T = T(Double(_Impl.rand()) / RAND_MAX * Double(max - min))
    return T(min) + offset

package _Impl
    [native("rand")]
    fun rand(): UInt

    package NumericGen(t: Type) if UnsignedInteger(#$t)
        fun gen(sizeHint: UInt) = t(randBetween(0, 6 + sizeHint))

    package NumericGen(t: Type) if SignedInteger(#$t)
        fun gen(sizeHint: UInt): t
            let h: Int = sizeHint + 3
            return t(randBetween(-h, h+1))

    datatype ForAllGenerator(t: Type)
        using RetType = TestableValue(t)
        using _T = t

        _gen: Gen(t)
        _count: UInt

    fun ctor(this, other: !ForAllGenerator)
        this._gen ctor other._gen
        this._count ctor other._count

    fun ctor(this: !ForAllGenerator, gen: Gen(this._T) const)
        this._gen ctor gen
        this._count = 0

    fun isEmpty(this: ForAllGenerator const)                = !_gen.isValid
    fun front(this: !ForAllGenerator): RetType              = RetType(_gen(_count))
    fun popFront(this: !ForAllGenerator)                    { ++_count }

    [initCtor]
    datatype ForAllRangeGenerator(rangeType: Type)
        using RetType = TestableValue(rangeType.RetType)

        _range: rangeType

    fun isEmpty(this: ForAllRangeGenerator const)                = _range.isEmpty
    fun front(this: !ForAllRangeGenerator): RetType         = RetType(_range.front)
    fun popFront(this: !ForAllRangeGenerator)                    { _range.popFront }

    datatype ForWhichRange(rangeType, predType: Type) \
            if typeOf((#$predType)((#$rangeType front).value)) == Bool
        _range: rangeType
        _pred: predType
        _lastVal: RetType

        using RetType = -@rangeType.RetType
        using _RangeType = rangeType
        using _PredType = predType

    fun ctor(this: !ForWhichRange, range: this._RangeType, pred: this._PredType)
        this._range ctor range
        this._pred ctor pred
        this._lastVal ctor
        this._popUntilValid

    fun isEmpty(this: ForWhichRange const)                = _range.isEmpty()
    fun front(this: ForWhichRange const): RetType         = _lastVal
    fun popFront(this: !ForWhichRange)                    { _range.popFront(); this._popUntilValid }

    fun _popUntilValid(this: !ForWhichRange)
        while !_range.isEmpty
            _lastVal = _range.front()
            if _pred(_lastVal.value)
                break
            _range.popFront()

    [initCtor]
    datatype TrivialsRange(rangeType, predType: Type) \
            if typeOf((#$predType)((#$rangeType front).value)) == Bool
        using RetType = -@rangeType.RetType

        _range: rangeType
        _pred: predType

    fun isEmpty(this: TrivialsRange const)                = _range.isEmpty()
    fun popFront(this: !TrivialsRange)                    { _range.popFront() }
    fun front(this: !TrivialsRange): RetType
        let res = _range.front
        res.isTrivial = _pred(res.value)
        return res

    [initCtor]
    datatype ClassifierRange(rangeType, predType: Type) \
            if typeOf((#$predType)((#$rangeType front).value)) == String
        using RetType = -@rangeType.RetType

        _range: rangeType
        _pred: predType

    fun isEmpty(this: ClassifierRange const)                = _range.isEmpty()
    fun popFront(this: !ClassifierRange)                    { _range.popFront() }
    fun front(this: !ClassifierRange): RetType
        let res = _range.front
        res.classifier = _pred(res.value)
        return res

    datatype ElementsGen(rangeType: Type)
        using ElementType = -@rangeType.RetType
        using _RangeType = rangeType

        _range: rangeType
        _count: SizeType

    fun ctor(this: !ElementsGen, range: this._RangeType)
        this._range ctor range
        this._count ctor (range rangeSize)

    fun ()(this: !ElementsGen, sizeHint: UInt): ElementType
        let r = _range
        r advance randBetween(0, Int(_count))
        return r.front

    fun gen(this: !ElementsGen): Gen(ElementType) = ife(_count>0, mkGen(ElementType, this), Gen(ElementType)())
