import ir
import std.string

//[ct] fun dumpProlog(os: @OutStream, sps: @SparrowPrologSystem)
[ct] fun dumpProlog(os: @StringOutputStream, sps: @SparrowPrologSystem)
    //Impl.dumpPrologSystem(os, sps);
    //testStringOutputStream
    var sos: OutStream = StringOutputStream()
    sos <<< 1
    cout << sos.result << endl
    testStream(os)
    //os << flush;

[ct]
fun testStream(os: @OutStream)
    os << 1

package Impl
    [ct] fun dumpPrologSystem(os: @OutStream, sps: @SparrowPrologSystem)
        for p: @SparrowPredicate = sps.predicates.all()
            dumpSprPredicate(os, p);

    [ct] fun dumpSprPredicate(os: @OutStream, pred: @SparrowPredicate)
        // Dump the type sets
        //for typeSet: @LTypeSet = pred.typeSets.all()
        //{
        //    os << typeSet << endl;
        //}
        //os << flush;

        var genNative = allowNativeCodeGen && pred.canBeNative

        // Header line
        os << "fun " << pred.name
        if ( genNative )
            os << "_native";
        dumpParameters(os, pred, genNative)
        if ( genNative )
            os << ": Bool";
        else
            os << ": Predicate";
        os << endl

        // If we have local variables, create a scope and put the variables in it
        var withScope = !pred.localVars.isEmpty()
        var tab: StringRef = "    "
        if ( withScope )
            os << "{" << endl
            for lv: @ExpressionPtr = pred.localVars.all()
                os << "    var " << lv.get().data << ": "
                dumpType(os, pred, lv.get(), false, genNative)
                if ( genNative )
                    // Don't initialize native integers
                    var typeSet: @LTypeSet = pred.typeSets(lv.get().typeSetIdx)
                    if ( typeSet.type.isNumberOnly() )
                        os << " = Uninitialized()";
                os << ';' << endl
            os << "    return "
            tab = StringRef("        ")
        else
            os << "    =  ";

        // Conditions for all the clauses
        var first = true
        for i = 0..pred.clauses.size()
            if ( first )
                first = false;
            else
                os << tab << "|| ";

            dumpClause(os, pred, pred.clauses(i).get())
            os << endl
        os << tab << ";" << endl

        if ( withScope )
            os << "}" << endl;

        if ( genNative )
            dumpNativeWrapper(os, pred);
    [ct] fun dumpParameters(os: @OutStream, pred: @SparrowPredicate, genNative: Bool)
        if ( pred.arity > 0 )
            os << "("
            for i = 0..pred.paramVars.size()
                var param: @Parameter = pred.paramVars(i)
                if ( i>0 )
                    os << ", ";
                os << "_" << (i+1) << ": "
                var isRef = !genNative || param.isOutput
                dumpType(os, pred, param.expr.get(), isRef, genNative)
                //if ( param.isInput )
                //    os << "<in>";
                //if ( param.isOutput )
                //    os << "<out>";
            os << ")"
        ;

    [ct] fun dumpClause(os: @OutStream, pred: @SparrowPredicate, clause: @PredicateClause)
        var condWritten = false
        dumpBoundArgs(os, pred, clause, condWritten)
        dumpClauseConditions(os, pred, clause, condWritten)
        if ( !condWritten )
            os << " true";
    [ct] fun dumpBoundArgs(os: @OutStream, pred: @SparrowPredicate, clause: @PredicateClause, condWritten: @Bool)
        var genNative = allowNativeCodeGen && pred.canBeNative

        for i = 0..clause.args.size()
            var arg: @ExpressionPtr = clause.args(i)
            if ( arg.isSet() && arg.get().kind != ekVar )
                if ( !condWritten )
                    condWritten = true;
                else
                    os << " && ";

                os << "_" << (i+1)

                var idx = arg.get().paramIdx
                assert(idx >= 0)
                var param: @Parameter = pred.paramVars(idx)
                if ( genNative && param.isInput )
                    os << " == ";
                else if ( genNative && param.isOutput )
                    os << " =/ ";
                else
                    os << " /=/ ";

                dumpExpr(os, pred, arg.get());
            ;
        ;

    [ct] fun dumpClauseConditions(os: @OutStream, pred: @SparrowPredicate, clause: @PredicateClause, condWritten: @Bool)
        for cond: @ConditionPtr = clause.conditions.all()
            if ( !condWritten )
                condWritten = true;
            else
                os << " && ";

            if ( cond.get().kind == ckPredCall )
                dumpPredCall(os, pred, clause, cond.get());
            else
                dumpIsExpr(os, pred, clause, cond.get());
        ;

    [ct] fun dumpPredCall(os: @OutStream, pred: @SparrowPredicate, clause: @PredicateClause, predCall: @Condition)
        var genNative = allowNativeCodeGen && pred.canBeNative
        var isRecursive = predCall.predName == clause.name
        if ( isRecursive )
            if ( genNative )
                os << predCall.predName << "_native(";
            else
                os << "rec(\\" << predCall.predName << ", ";
        else
            os << predCall.predName << '(';
        for i = 0..predCall.args.size()
            if ( i>0 )
                os << ", ";
            dumpExpr(os, pred, predCall.args(i).get());
        os << ')'

    [ct] fun dumpIsExpr(os: @OutStream, pred: @SparrowPredicate, clause: @PredicateClause, isExpr: @Condition)
        var left: @Expression = isExpr.args(0).get()
        var right: @Expression = isExpr.args(1).get()
        var genNative = allowNativeCodeGen && pred.canBeNative

        dumpExpr(os, pred, left)
        os << ife(genNative, " =/ ", " /=/ ")
        dumpExpr(os, pred, right)

    [ct] fun dumpExpr(os: @OutStream, pred: @SparrowPredicate, expr: @Expression)
        var genNative = allowNativeCodeGen && pred.canBeNative

        if ( expr.kind == ekAtom )
            os << '"' << expr.data << '"';
        else if ( expr.kind == ekNumber )
            os << expr.data;
        else if ( expr.kind == ekVar )
            os << expr.data;
        else if ( expr.kind == ekAntiQuote )
            os << "aq<" << expr.data << '>';
        else if ( expr.kind == ekOpPlus )
            dumpBinExpr(os, pred, expr.left.get(), expr.right.get(), ife(genNative, " + ", " /+/ "));
        else if ( expr.kind == ekOpMinus )
            dumpBinExpr(os, pred, expr.left.get(), expr.right.get(), ife(genNative, " - ", " /-/ "));
        else if ( expr.kind == ekOpMul )
            dumpBinExpr(os, pred, expr.left.get(), expr.right.get(), ife(genNative, " * ", " |*| "));
        else if ( expr.kind == ekOpDiv )
            dumpBinExpr(os, pred, expr.left.get(), expr.right.get(), ife(genNative, " / ", " |/| "));
        else
            os << "<invalid expression kind:" << expr.kind << ">";
        //os << ':';
        //dumpType(os, pred, expr, false, false);

    [ct] fun dumpBinExpr(os: @OutStream, pred: @SparrowPredicate, left, right: @Expression, op: StringRef)
        os << '('
        dumpExpr(os, pred, left)
        os << op
        dumpExpr(os, pred, right)
        os << ')'

    [ct] fun dumpType(os: @OutStream, pred: @SparrowPredicate, expr: @Expression, isRef, genNative: Bool)
        if ( isRef )
            os << "@";

        if ( expr === null )
            dumpAtomType(os, genNative)
            return

        assert(expr.typeSetIdx >= 0)
        var typeSet: @LTypeSet = pred.typeSets(expr.typeSetIdx)
        if ( typeSet.type.isNumberOnly() )
            dumpIntegerType(os, genNative);
        else if ( typeSet.type.isAtomOnly() )
            dumpAtomType(os, genNative);
        else
            dumpAtomType(os, genNative);     // Defaults to atom type
        //os << '{' << expr.typeSetIdx << '}';

    [ct] fun dumpIntegerType(os: @OutStream, genNative: Bool)
        if ( genNative )
            os << "Int";
        else
            os << "LInt";

    [ct] fun dumpAtomType(os: @OutStream, genNative: Bool)
        if ( genNative )
            os << "String";
        else
            os << "LStr";

    [ct] fun dumpNativeWrapper(os: @OutStream, pred: @SparrowPredicate)
        dumpWrapperClass(os, pred)

        // Express the logic predicate in terms of the wrapper class
        os << "fun " << pred.name
        dumpParameters(os, pred, false)
        os << ": Predicate = " << pred.name << "_pred_wrapper("
        for i = 0..pred.paramVars.size()
            if ( i > 0 )
                os << ", ";
            os << "_" << (i+1);
        os << ");" << endl

    [ct] fun dumpWrapperClass(os: @OutStream, pred: @SparrowPredicate)
        var tab: StringRef = "    "
        var tab2: StringRef = "        "
        var tab3: StringRef = "            "

        os << "class " << pred.name << "_pred_wrapper" << endl
        os << "{" << endl

        // Ctor
        if ( pred.arity > 0 )
            os << tab << "fun ctor"
            dumpParameters(os, pred, false)
            os << endl
            os << tab << '{' << endl
            for i = 0..pred.paramVars.size()
                os << tab2 << "this._" << (i+1) << " ctor " << "_" << (i+1) << ";" << endl;
            os << tab << '}' << endl

        // Call operator

        os << tab << "fun (): Bool" << endl
        os << tab << '{' << endl
        // Checks for the input parameters
        for i = 0..pred.paramVars.size()
            var p: @Parameter = pred.paramVars(i)
            if ( p.isInput )
                if ( i==0 )
                    os << tab2 << "if ( ";
                else
                    os << " || ";
                os << "_" << (i+1) << ".isNull()";
            ;
        if ( !pred.paramVars.isEmpty() )
            os << " )" << endl
            os << tab3 << "return false;" << endl
        // Create some values for the output parameters
        for i = 0..pred.paramVars.size()
            var p: @Parameter = pred.paramVars(i)
            if ( p.isOutput )
                os << tab2 << "_" << (i+1) << " = "
                dumpType(os, pred, p.expr.get(), false, true)
                os << "();" << endl
            ;
        // The call to the native function
        os << tab2 << "return " << pred.name << "_native("
        for i = 0..pred.paramVars.size()
            if ( i > 0 )
                os << ", ";
            os << "_" << (i+1) << ".get()";
        os << ");" << endl
        os << tab << '}' << endl

        // The variables corresponding to the parameters
        for i = 0..pred.paramVars.size()
            var p: @Parameter = pred.paramVars(i)
            os << tab << "var _" << (i+1) << ": "
            dumpType(os, pred, p.expr.get(), false, false)
            os << ';' << endl

        os << "}" << endl
    ;

