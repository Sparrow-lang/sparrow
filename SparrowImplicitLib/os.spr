module os

import std.string(String)

[native("exit")]
fun exit(code: Int)

fun systemCall(cmd: StringRef): Int
    return _Impl.system(cmd.cStr)

datatype File
    _handle: @Byte

[protected]
    fun ctor(this: @File)
        _handle := null

    fun ctor(this: @File, handle: @Byte)
        this._handle := handle

    fun ctor(this: @File, filename: StringRef, mode: StringRef = "r")
        this._handle := _Impl.fopen(filename.cStr, mode.cStr)

    // Move ctor and operator
    fun ctor(this, other: @File)
        this._handle := other._handle
        other._handle := null

    fun dtor(this: @File)
        this.close

    fun =(this, other: @File)
        this._handle := other._handle
        other._handle := null

fun openFile(filename: StringRef, mode: StringRef = "r"): File
    return File(_Impl.fopen(filename.cStr, mode.cStr))

fun close(this: @File)
    if this.isOpen
        _Impl.fclose(_handle)
    _handle := null

fun flush(this: @File)       = ife(this.isOpen, _Impl.fflush(_handle), -1)

fun isOpen(this: @File)      = _handle !== null
fun isEof(this: @File)       = 0 != _Impl.feof(_handle)

fun readChar(this: @File): Char = Char(_Impl.fgetc(_handle))
fun readLine(this: @File): String
    var res: String = 256
    var cstr: @Char = _Impl.fgets(res(0), 256, _handle)
    if cstr === null
        res.clear
    else
        res.resize(cStringLen(cstr))
    return res

fun write(this: @File, data: StringRef): Int
    var res: Int = _Impl.fwrite(reinterpretCast(@Byte, data.begin), 1, UInt(data.size), _handle)
    return res

fun all(this: @File) = FileRange(this)

datatype FileRange
    using RetType = Char

    _file: @File
    _isEmpty: Bool
    _cur: Char

fun ctor(this: @FileRange, file: @File)
    this._file := file
    _isEmpty = true
    _cur ctor
    if !_file.isEof
        _cur = _file.readChar
        _isEmpty = false

[protected]
    fun isEmpty(s: @FileRange) = s._isEmpty
    fun front(s: @FileRange)   = s._cur
    fun popFront(s: @FileRange)
        // Try reading a char; we don't know yet about eof, we need to check it afterwards
        s._cur = s._file.readChar
        if s._file.isEof
            s._isEmpty = true

package _Impl
    [native("system")]  fun system(x: @Char): Int

    [native("fopen")]   fun fopen(filename, mode: @Char): @Byte
    [native("fclose")]  fun fclose(handle: @Byte)
    [native("fflush")]  fun fflush(handle: @Byte): Int
    [native("feof")]    fun feof(handle: @Byte): Int
    [native("fgetc")]   fun fgetc(handle: @Byte): Int
    [native("fgets")]   fun fgets(buffer: @Char, bufSize: Int, handle: @Byte): @Char
    [native("fread")]   fun fread(buffer: @Byte, size, count: UInt, handle: @Byte): UInt
    [native("fwrite")]  fun fwrite(buffer: @Byte, size, count: UInt, handle: @Byte): UInt
