module par.parFor

import config
import tasks = par.tasks
import std.ranges, std.tuple, std.newDelete
import bitOper

concept Partitioner(x) \
    if isValid(x.RangeType) \
    && isValid(x.partStart()) \
    && isValid(x.partition(valueOfType(x.RangeType), 0))

fun parFor(r: Range, f: AnyType) if isValid(f(r.front()))
    Impl.parFor(r, f, DefaultPartitioner(typeOf(r))())

fun parFor(r: Range, f: AnyType, part: !Partitioner) if isValid(f(r.front()))
    Impl.parFor(r, f, part)

datatype DefaultPartitioner(rangeType: Type)
    using RangeType = BoundedRange(rangeType)

    _maxDepth: Int

fun partStart(this: !DefaultPartitioner)
    let p: Int = getAvailableCoresNum
    var depth = 1
    while 2 !<<! depth < p
        ++depth

    _maxDepth = 1 + depth

fun partition(this: !DefaultPartitioner, r: Range, depth: Int) : RangeType * RangeType
    var splitIdx = 0
    let sz: Int = r rangeSize
    if depth <= _maxDepth
        splitIdx = (sz+1) / 2  // split in half
    let r1 = RangeType(r, 0, splitIdx)
    let r2 = RangeType(r, splitIdx, sz-splitIdx)

    return r1 ~ r2

datatype BoundedRange(baseRangeType: Type)
    _baseRange: baseRangeType
    _count: SizeType

    using RetType = baseRangeType.RetType
    using _RangeType = baseRangeType

fun ctor(this: !BoundedRange, r: this._RangeType)
    _baseRange ctor r
    _count = (_baseRange rangeSize)

fun ctor(this, r: !BoundedRange, nSkip, nTake: SizeType)
    _baseRange ctor r._baseRange
    _baseRange advance nSkip
    _count ctor nTake

fun isEmpty(this: BoundedRange const)                = _count == 0 || _baseRange.isEmpty()
fun front(this: BoundedRange const): this.RetType    = _baseRange.front()
fun popFront(this: !BoundedRange)                    { _baseRange.popFront(); --_count; }

package Impl
    fun parFor(r: Range, f: AnyType, part: !Partitioner)
        // Tell the partitioner that we are starting work
        part partStart

        // Create a root task and wait until it's executed
        var range: part.RangeType = r
        using PartType = typeOf(part)
        tasks.spawnRootAndWait(Impl.mkParForTask(range, f, (PartType Ptr)(part), 0))

    datatype ParForTask(rangeType, funcType, partType: Type)
        prefix: tasks.TaskPrefix
        range: rangeType
        func: funcType
        part: partType
        depth: Int

        using RangeType = rangeType
        using _FuncType = funcType
        using _PartType = partType

    fun ctor(this: !ParForTask, r: this.RangeType, f: this._FuncType, part: this._PartType, depth: Int)
        this.range ctor r
        this.func ctor f
        this.part ctor part
        this.depth ctor depth

    fun execute(this: !ParForTask)
        // Check if we need to split the range
        let split = part.partition(range, depth)

        // Do we have a split?
        let splitValid = !(split.v1 isEmpty) && !(split.v2 isEmpty)

        if splitValid
            // Create two new tasks for the splits
            var cont: @tasks.EmptyTask = new(tasks.EmptyTask)
            tasks.setContinuation(this, cont)
            var t1: @ParForTask = allocParForTask(split.v1, func, part, depth+1)
            var t2: @ParForTask = allocParForTask(split.v2, func, part, depth+1)
            tasks.spawn(cont, t1, t2)
        else
            // No more splitting; execute the function serially
            for val: RangeType.RetType = range
                func(val)

    fun mkParForTask(r: Range, f: AnyType, part: AnyType, depth: Int) \
        = ParForTask(typeOf(r), typeOf(f), typeOf(part))(r, f, part, depth)
    fun allocParForTask(r: Range, f: AnyType, part: AnyType, depth: Int) \
        = new(ParForTask(typeOf(r), typeOf(f), typeOf(part)), r, f, part, depth)
