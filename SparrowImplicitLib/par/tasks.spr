module par.tasks

[public] import tasksImpl.taskType(TaskType, TaskPrefix, getPrefix)
[public] import tasksImpl.emptyTask(EmptyTask, execute, >>, description)
import Impl = tasksImpl.tasksMain(initTaskBasic, initAsRoot, initAsChildOf, doSpawn, doSpawnAndWait)
import tp = tasksImpl.taskPrefix
//import tasksImpl.debug
import tasksImpl.workerImpl
import schedulerIf = tasksImpl.schedulerIf


fun spawnRootAndWait(task: @TaskType)
    [ct] if isValidAndTrue(tasksImpl.traceCalls) && isValid(cout << task)
        cout << "spawnRootAndWait(" << task << ")" << endl

    Impl.initAsRoot(task)

    schedulerIf.spawnRootAndWait(getPrefix(task))

fun spawn(curTask, childTask: @TaskType)
    getPrefix(curTask) addRefCount 1
    Impl.doSpawn(curTask, childTask)
fun spawn(curTask, t1, t2: @TaskType)
    getPrefix(curTask) addRefCount 2
    Impl.doSpawn(curTask, t2)
    Impl.doSpawn(curTask, t1)
fun spawn(curTask, t1, t2, t3: @TaskType)
    getPrefix(curTask) addRefCount 3
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawn(curTask, t1)
fun spawn(curTask, t1, t2, t3, t4: @TaskType)
    getPrefix(curTask) addRefCount 4
    Impl.doSpawn(curTask, t4)
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawn(curTask, t1)
fun spawn(curTask, t1, t2, t3, t4, t5: @TaskType)
    getPrefix(curTask) addRefCount 5
    Impl.doSpawn(curTask, t5)
    Impl.doSpawn(curTask, t4)
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawn(curTask, t1)
fun spawn(curTask, t1, t2, t3, t4, t5, t6: @TaskType)
    getPrefix(curTask) addRefCount 6
    Impl.doSpawn(curTask, t6)
    Impl.doSpawn(curTask, t5)
    Impl.doSpawn(curTask, t4)
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawn(curTask, t1)
fun spawn(curTask, t1, t2, t3, t4, t5, t6, t7: @TaskType)
    getPrefix(curTask) addRefCount 7
    Impl.doSpawn(curTask, t7)
    Impl.doSpawn(curTask, t6)
    Impl.doSpawn(curTask, t5)
    Impl.doSpawn(curTask, t4)
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawn(curTask, t1)

fun wait(curTask: @TaskType)
    getPrefix(curTask) addRefCount 1
    schedulerIf.waitForAll(getPrefix(curTask))

fun spawnAndWait(curTask, t1: @TaskType)
    getPrefix(curTask) addRefCount 2
    Impl.doSpawnAndWait(curTask, t1)
fun spawnAndWait(curTask, t1, t2: @TaskType)
    getPrefix(curTask) addRefCount 3
    Impl.doSpawn(curTask, t2)
    Impl.doSpawnAndWait(curTask, t1)
fun spawnAndWait(curTask, t1, t2, t3: @TaskType)
    getPrefix(curTask) addRefCount 4
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawnAndWait(curTask, t1)
fun spawnAndWait(curTask, t1, t2, t3, t4: @TaskType)
    getPrefix(curTask) addRefCount 5
    Impl.doSpawn(curTask, t4)
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawnAndWait(curTask, t1)
fun spawnAndWait(curTask, t1, t2, t3, t4, t5: @TaskType)
    getPrefix(curTask) addRefCount 6
    Impl.doSpawn(curTask, t5)
    Impl.doSpawn(curTask, t4)
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawnAndWait(curTask, t1)
fun spawnAndWait(curTask, t1, t2, t3, t4, t5, t6: @TaskType)
    getPrefix(curTask) addRefCount 7
    Impl.doSpawn(curTask, t6)
    Impl.doSpawn(curTask, t5)
    Impl.doSpawn(curTask, t4)
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawnAndWait(curTask, t1)
fun spawnAndWait(curTask, t1, t2, t3, t4, t5, t6, t7: @TaskType)
    getPrefix(curTask) addRefCount 8
    Impl.doSpawn(curTask, t7)
    Impl.doSpawn(curTask, t6)
    Impl.doSpawn(curTask, t5)
    Impl.doSpawn(curTask, t4)
    Impl.doSpawn(curTask, t3)
    Impl.doSpawn(curTask, t2)
    Impl.doSpawnAndWait(curTask, t1)

fun setContinuation(curTask, cont: @TaskType)
    Impl.initTaskBasic(cont)

    // The continuation has the same parent, depth & worker as the current task
    getPrefix(cont).parent = getPrefix(curTask).parent
    getPrefix(cont).depth = getPrefix(curTask).depth
    getPrefix(cont).worker = getPrefix(curTask).worker

    // The current task doesn't have a valid parent anymore
    getPrefix(curTask).parent reset

    // Chain the continuation to the current task
    //assert(getPrefix(curTask).cont isNull)
    getPrefix(curTask).cont = getPrefix(cont)

fun enqueue(task: @TaskType)
    Impl.initAsRoot(task)
    schedulerIf.enqueue(getPrefix(task))
