module par.tasksImpl.scheduler

import tasksMain(initAsRoot)
import taskType(TaskType)
import taskPrefix(TaskPtr, TaskPrefix)
import emptyTask(EmptyTask, execute)
import workerImpl(Worker, worker, setWaitingWorker, waitingWorker/*, tracer*/)
//import debug(Tracer)
import taskQueue(TaskQueue, TasksPrinter)
import par.tls
import std.ranges(..)

///////////////////////////////////////////////////////////////////////////////
// Main scheduler interface

fun schedSpawn(task: TaskPtr)
    var taskWorker: @Worker = worker(task.get())

    [ct] if isValidAndTrue(traceCalls)
        tracer(taskWorker) << "schedSpawn(" << task.get() << ")" << endl
    task.get() assertValid

    // Announce new work in the task system
    taskWorker.taskSystem onTaskAvailable

    // Push the task at the front of the local work queue
    taskWorker.work pushFront task

fun schedWaitForAll(parent: TaskPtr, child: TaskPtr)
    var taskWroker: @Worker = parent.get() worker

    [ct] if isValidAndTrue(traceCalls)
        tracer(taskWroker) << "schedWaitForAll(" << parent.get() << ", " << child.get() << ")" << endl
    if child isSet
        child.get() assertValid
    parent.get() assertValid

    // Ensure the right depth is set in the worker
    var oldDepth = taskWroker.curDepth
    taskWroker.curDepth = parent.get().depth

    parent.get() setWaitingWorker taskWroker

    schedDoWait(taskWroker, child, parent)

    // Restore the old depth
    taskWroker.curDepth = oldDepth

fun schedSpawnRootAndWait(task: TaskPtr)
    var taskWroker: @Worker = task.get() worker

    [ct] if isValidAndTrue(traceCalls)
        tracer(taskWroker) << "schedSpawnRootAndWait(" << task.get() << ")" << endl
    task.get() assertValid

    // Ensure the right depth is set in the worker
    var oldDepth = taskWroker.curDepth
    taskWroker.curDepth = 0

    // Create a dummy task to wait for
    var waitingTask: EmptyTask
    initAsRoot(waitingTask)
    waitingTask.prefix setRefCount 2
    task.get().parent = TaskPtr(waitingTask.prefix)

    // This is the task we are waiting for
    waitingTask.prefix setWaitingWorker taskWroker

    // Execute the root task and wait for it
    schedDoWait(taskWroker, task, TaskPtr(waitingTask.prefix))

    // Restore the old depth
    taskWroker.curDepth = oldDepth

fun schedEnqueue(task: TaskPtr)
    var taskWroker: @Worker = task.get() worker

    [ct] if isValidAndTrue(traceCalls)
        tracer(taskWroker) << "schedEnqueue(" << task.get() << ")" << endl
    task.get() assertValid

    // Announce new work in the task system
    taskWroker.taskSystem onTaskAvailable

    // Enqueue the task
    taskWroker.taskSystem.globalQueue pushFront task


///////////////////////////////////////////////////////////////////////////////
// Task execution logic

[native('par.tasksImpl.scheduler.schedDoWait')]
fun schedDoWait(worker: @Worker, toExecute, waitingTask: TaskPtr)

    using maxRetriesBeforeGoingIdle = 1
    var numRetries = maxRetriesBeforeGoingIdle

    /* execution policy:
        - if given a task, execute it
        - if the last executing task has a continuation, execute it
        - extract tasks from the local queue (from front)
        - extract tasks from the shared queue (from back)
        - steal tasks from other local queues (from back)

        - stop when our waitingTask refCount reaches 1.
    */

    var nextToExecute: TaskPtr = toExecute
    while true
        [ct] if isValidAndTrue(traceCalls)
            tracer(worker)<< "work: " << TasksPrinter(toExecute, worker.work) << endl

        // If we have a continuation, execute it
        toExecute = nextToExecute
        nextToExecute reset

        // If we don't have something to execute,
        // extract something from our local queue
        if toExecute isNull
            // Get item from the front: most recent
            toExecute = (worker.work popFront)

        // Try stealing something from global queue
        if toExecute isNull
            // Get item from the back: FIFO style
            toExecute = (worker.taskSystem.globalQueue popBack)
            [ct] if isValidAndTrue(traceCalls)
                if toExecute isSet
                    tracer(worker)<< "Found task in global queue\n"

        // Steal work from other queues
        if toExecute isNull
            // Try different queues until we find one we can steal from
            var numStealAttempts = 2*(worker.taskSystem numAvailableWorkers)
            for i = 1..numStealAttempts
                // Get a queue from another worker; chose it randomly
                var otherQueue: @TaskQueue = (worker.taskSystem getRandomTaskQueue)
                // Get item from the back: try to take as much work as possible
                toExecute = (otherQueue popBack)
                if toExecute isSet
                    // Change the worker for the stolen task
                    toExecute.get().worker = reinterpretCast(@Byte, worker)

                    [ct] if isValidAndTrue(traceCalls)
                        tracer(worker)<< "************************* Task stolen: " << toExecute.get() << "\n\n\n"

                    // Stop trying to steal
                    break

        // Try to execute what we've selected
        if toExecute isSet
            nextToExecute = (toExecute.get() executeTask)
            numRetries = maxRetriesBeforeGoingIdle

        // Check if we executed all the children for our waiting task
        // This is our terminating condition
        if waitingTask isSet
            // If the task has a continuation, make sure we wait on it
            while waitingTask.get().cont isSet
                waitingTask = waitingTask.get().cont
                // Account for the wait of the continuation
                waitingTask.get() incrementRefCount

            // Check if we executed all its children
            if (waitingTask.get() refCount) == 1
                waitingTask.get() setRefCount 0
                break

        if toExecute isNull
            // Nothing to execute
            if numRetries == 0
                worker goIdle
                numRetries = maxRetriesBeforeGoingIdle
            else
                // Try several times to steal tasks
                // Going to sleep is more expensive
                sleep(0)
        else
            --numRetries

    // Trace remaining work
    [ct] if isValidAndTrue(traceCalls)
        tracer(worker) << "task " << waitingTask.get() << " can continue; remaining work: " << TasksPrinter(TaskPtr(), worker.work) << endl

fun executeTask(task: @TaskPrefix): TaskPtr
    var taskWroker: @Worker = task worker

    // TODO: check cancellation
    if false
        return TaskPtr()

    // Execute the task
    [ct] if isValidAndTrue(traceCalls)
        tracer(taskWroker) << "executing task " << task << "; parent=" << task.parent.get() << endl
    task.executeFn(task)

    // Now check if we can execute the parent

    // If the continuation is set, we shouldn't have a parent
    //if task.cont isSet
        //assert(task.parent isNull)

    // If no parent set, just return
    if task.parent isNull
        return TaskPtr()

    // Decrement the ref count in the parent, as a result of the cur execution
    var cnt = task.parent.get() decrementRefCount

    // Did we finished executing every child of the parent?
    if cnt == 0
        // If we are waiting on the parent task, make sure it's waiting worker is awake
        var ww: @Worker = task.parent.get() waitingWorker
        if ww !== taskWroker && ww !== null
            ww tryWakeUp

        // Enqueue the parent task for execution
        [ct] if isValidAndTrue(traceCalls)
            tracer(taskWroker) << "Can continue with the parent task: " << task.parent.get() << endl
        return task.parent

    return TaskPtr()
