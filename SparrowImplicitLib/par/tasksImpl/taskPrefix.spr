module par.tasksImpl.taskPrefix

import std.ptr
import std.ptr, std.string
import par.atomic

using TaskPtr = TaskPrefix Ptr

datatype TaskPrefix
    //! The function to be called to execute the task (along with its 'this' offset)
    /*private*/ executeFn: FunctionPtr(Null rt, @TaskPrefix)
    /*private*/ taskOffset: DiffType

    //! The parent task of this task null for root tasks
    /*private*/ parent: TaskPrefix Ptr
    //! The number of children + waits for this task
    /*private*/ refCount: Int Atomic
    //! The continuation of this task
    /*private*/ cont: TaskPrefix Ptr

    //! The worker that this task belongs to
    //! Use casts to avoid direct dependency
    /*private*/ worker: UntypedPtr
    // TODO: should this be atomic?

    //! The worker that waits for this task to finish
    //! Use casts to avoid direct dependency
    /*private*/ waitingWorker: UntypedPtr

    //! Used for chaining the tasks in the task queue
    /*private*/ prev: TaskPrefix Ptr
    /*private*/ next: TaskPrefix Ptr

    //! Used for debugging
    /*private*/ desc: String
    /*private*/ depth: Int

fun >>(t: TaskPrefix, os: !OutStream)
    if t === null
        os << "<null>"
    else
        if !(t.desc isEmpty)
            os << '"' << t.desc << '"'
        os << '<' << UntypedPtr(t) << ", " << (t.depth) << "," << (t.refCount load) << '>'

fun refCount(task: !TaskPrefix): Int = task.refCount load

fun setRefCount(task: !TaskPrefix, count: Int) { task.refCount = count; }
fun addRefCount(task: !TaskPrefix, count: Int) { task.refCount += count; }
fun incrementRefCount(task: !TaskPrefix) = ++task.refCount
fun decrementRefCount(task: !TaskPrefix) = --task.refCount

fun assertValid(task: !TaskPrefix)
    [ct] if isValidAndTrue(DEBUG)
        using ExecuteFnType = FunctionPtr(Null rt, @TaskPrefix)

        assert(task !== null)
        assert(task.executeFn != ExecuteFnType())
        assert(task.worker isSet)
