module par.tasksImpl.taskQueue

import taskPrefix(TaskPrefix, TaskPtr)
import par.locks
import std.ptr

//! Holds a queue of tasks
//!
//! Local worker will add elements at the front of the queue and also removes
//! elements from its front
//! Other workers can steal work from the back of the queue.
//!
//! We use an intrinsic double-linked list to store the queue.
//! The methods are synchronized to protect 2 threads popping elements.
datatype TaskQueue
    //! Points to the first element in the queue
    _first: TaskPrefix Ptr
    //! Points to the last valid element in the queue
    _last: TaskPrefix Ptr

    //! Mutex used to protect the extraction of tasks from both ends
    _mutex: Mutex
    // TODO: use a spin-mutex here

fun empty(q: !TaskQueue): Bool
    let lock: ScopedLock(Mutex) = q._mutex
    return q._first isNull

fun size(q: !TaskQueue): SizeType
    let lock: ScopedLock(Mutex) = q._mutex
    return q uncheckedSize

fun uncheckedSize(q: !TaskQueue): SizeType
    var count: SizeType = 0
    var p: TaskPtr = q._first
    while p isSet
        ++count
        p = p.get().next
    return count

fun pushFront(q: !TaskQueue, task: TaskPtr)
    let lock: ScopedLock(Mutex) = q._mutex

    // don't care what prev is
    task.get().next = q._first
    if q._first isSet
        q._first.get().prev = task
    else
        q._last = task
    q._first = task

    //assert(q._first isSet)
    //assert(q._last isSet)
    //assert(q._last.get().next isNull)
fun popFront(q: !TaskQueue): TaskPtr
    let lock: ScopedLock(Mutex) = q._mutex

    if q._first isNull
        return TaskPtr()

    let res = q._first
    q._first = res.get().next
    if q._first isNull
        q._last.reset

    //if q._last isSet
        //assert(q._last.get().next isNull)

    return res
fun popBack(q: !TaskQueue): TaskPtr
    let lock: ScopedLock(Mutex) = q._mutex

    if q._last isNull
        return TaskPtr()

    let res = q._last
    if q._first == q._last
        q._first.reset
        q._last.reset
    else
        q._last = res.get().prev
        q._last.get().next.reset

    //if q._last isSet
        //assert(q._last.get().next isNull)

    return res

[initCtor] datatype TasksPrinter
    _first: TaskPtr
    list: @TaskQueue

fun >> (tasks: TasksPrinter, os: !OutStream)
    if tasks._first isSet
        os << 'task='
        os << tasks._first.get() << " + "
    var p: TaskPtr = tasks.list._first
    while p isSet
        os << p.get() << ' '
        p = p.get().next
