module par.tasksImpl.taskSystem

import internalWorkerThread(InternalWorkerThread)
import worker(Worker, IdleCounter)
import taskQueue(TaskQueue)
import par.thread
import std.ptr, std.vector
//import assert

datatype TaskSystem
    //! The global queue of tasks
    globalQueue: TaskQueue

    //! All the workers in the system
    workers: (Worker Ptr) Vector

    //! The internal threads that are doing all the work
    _threads: (Thread Ptr) Vector
    //! Object that counts the number of threads that are idle
    idleCounter: IdleCounter

[protected]
    fun ctor(this: !TaskSystem) {}

    fun dtor(this: !TaskSystem) {}

var globalTaskSystem: TaskSystem Ptr

fun initTaskSystem(numWorkers: UInt = 0)
    // Create the task system object
    //assert(globalTaskSystem isNull)
    globalTaskSystem = new(TaskSystem)

    // Create the required threads
    if numWorkers == 0
        numWorkers = getAvailableCoresNum()
    //numWorkers = 1
    var ts: @TaskSystem = globalTaskSystem.get()
    for i=0..numWorkers
        let worker = ts createWorker
        let p: Thread Ptr = new(Thread, InternalWorkerThread(worker))
        ts._threads.pushBack(p)

fun getInitTaskSystem: TaskSystem Ptr
    // TODO: Make sure this is initialized only once
    if globalTaskSystem isNull
        initTaskSystem
    return globalTaskSystem

fun createWorker(ts: TaskSystem Ptr): Worker Ptr
    let id: Int = ts.get().workers size
    let p: Worker Ptr = new(Worker, ts.get(), id, ts.get().idleCounter)
    ts.get().workers.pushBack(p)
    return p

// TODO: make it random
var cnt: Int = 0

fun getRandomTaskQueue(ts: !TaskSystem): @TaskQueue
    // TODO: make the selection truly random
    let worker: Worker Ptr = ts.workers(++cnt % (ts.workers size))
    return worker.get().work

fun onTaskAvailable(ts: !TaskSystem)
    // Do something only if we have at least one idle worker
    if ts.idleCounter hasIdle
        for w: Worker Ptr = ts.workers.all
            // If we can wake up one worker, exit
            if w.get() tryWakeUp
                return

//! Get the number of currently available workers
fun numAvailableWorkers(ts: !TaskSystem): SizeType = (ts.workers size) - (ts.idleCounter numIdleWorkers)
