module par.tasksImpl.tasksMain

import taskType(TaskType, getPrefix)
import schedulerIf = schedulerIf(localWorker, spawn, spawnAndWaitForAll)
import taskPrefix(TaskPrefix)

datatype ExecuteHelper(T: Type)

fun doExecute(T: Type, prefix: @TaskPrefix): Null
    var obj: @T = (UntypedPtr(prefix) ptrAdd prefix.taskOffset).asRefOf(T)
    obj execute
    return Null()

fun getExecuteFn(T: Type): FunctionPtr(Null rt, @TaskPrefix) = \doExecute(T, TaskPrefix())

//! Initializes the fields required for a task
fun initTaskBasic(obj: !TaskType)
    // Init the execute function
    var prefix: @TaskPrefix = getPrefix(obj)
    prefix.taskOffset = (UntypedPtr(obj) ptrDiff UntypedPtr(prefix))
    prefix.executeFn = getExecuteFn(typeOf(obj))

    // Get its description (if it has one)
    [ct] if isValidAndTrue(typeOf(obj description) == String)
        prefix.desc = (obj description)

//! Initializes a root task
fun initAsRoot(task: !TaskType)
    initTaskBasic(task)
    getPrefix(task).worker = schedulerIf.localWorker()

//! Initializes a child task
fun initAsChildOf(task, parent: !TaskType)
    initTaskBasic(task)
    getPrefix(task).parent = getPrefix(parent)
    getPrefix(task).depth = 1+getPrefix(parent).depth
    getPrefix(task).worker = getPrefix(parent).worker

//! Initialize a child task and spawn it
fun doSpawn(curTask, childTask: !TaskType)
    initAsChildOf(childTask, curTask)
    schedulerIf.spawn(getPrefix(childTask))

//! Initialize a child task, then spawn it and wait
fun doSpawnAndWait(curTask, childTask: !TaskType)
    initAsChildOf(childTask, curTask)
    schedulerIf.spawnAndWaitForAll(getPrefix(curTask), getPrefix(childTask))
