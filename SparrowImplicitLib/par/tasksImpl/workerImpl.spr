module par.tasksImpl.workerImpl

import taskPrefix(TaskPrefix, TaskPtr)
import debug(Tracer)
import taskQueue(TaskQueue)
import idleCounter(IdleCounter)
//import scheduler(schedDoWait)

import par.tls, par.semaphore, par.atomic, par.locks, par.thread
import std.string, std.vector

using traceCalls = true

////////////////////////////////////////////////////////////////////////////////
// Worker datatype & functions

//! A worker class describes a thread that is doing some work on our task system
datatype Worker
    taskSystem: @TaskSystem
    work: TaskQueue
    workerId: Int
    curDepth: Int

    //! The global counter that keeps track on how many internal threads are idle
    _idleCounter: @IdleCounter
    //! Non-zero if this thread has work to do
    _isBusy: Int Atomic
    //! Semaphore used when sleeping
    _waitSem: Semaphore

fun ctor(this: @Worker, taskSystem: @TaskSystem, workerId: Int, idleCounter: @IdleCounter)
    this.taskSystem := taskSystem
    this.workerId = workerId
    this.curDepth = 0
    this._idleCounter := idleCounter
    this._isBusy store 0
    this._waitSem ctor 0

fun dtor(this: @Worker) {}

using WorkerPtr = Worker Ptr

var _tlsWorker: Tls(@Worker)

fun localWorker: Worker Ptr
    var worker: Worker Ptr = _tlsWorker get
    if worker isNull
        worker = (getInitTaskSystem createWorker)
        _tlsWorker = worker.get()
    return worker

fun setLocalWorker(worker: Worker Ptr)
    _tlsWorker = worker.get()

fun goIdle(w: @Worker)
    if compareAndSwap(w._isBusy, 0, 1)
        // Change the global counter
        w._idleCounter goIdle

        [ct] if isValidAndTrue(traceCalls)
            tracer(w) << "going idle; we have " << (w._idleCounter.cnt load) << " idle workers" << endl

        // Actually wake up the thread
        w._waitSem acquire

        [ct] if isValidAndTrue(traceCalls)
            tracer(w) << "woke up; we have " << (w._idleCounter.cnt load) << " idle workers" << endl

fun tryWakeUp(w: @Worker): Bool
    //[ct] if isValidAndTrue(traceCalls)
    //    tracer(w) << "trying to wake up; _isBusy= " << (w._isBusy load) << endl
    // If the thread was now busy, and we can set it to busy,
    // release the semaphore to wake up the thread
    if compareAndSwap(w._isBusy, 1, 0)
        [ct] if isValidAndTrue(traceCalls)
            tracer(w) << "waking up; we have " << (w._idleCounter.cnt load) << " idle workers" << endl

        w._waitSem release

        // Make sure the counter will not count us anymore
        w._idleCounter wakeUp
        return true
    return false

fun tracer(this: @Worker) = Tracer(workerId, curDepth)

////////////////////////////////////////////////////////////////////////////////
// TaskPrexix functions

fun worker(task: @TaskPrefix): @Worker = reinterpretCast(@Worker, task.worker.get())
fun waitingWorker(task: @TaskPrefix): @Worker = reinterpretCast(@Worker, task.waitingWorker.get())
fun setWaitingWorker(task: @TaskPrefix, w: @Worker) { task.waitingWorker = reinterpretCast(@Byte, w); }

////////////////////////////////////////////////////////////////////////////////
// TaskSystem datatype

datatype TaskSystem
    //! The global queue of tasks
    globalQueue: TaskQueue

    //! All the workers in the system
    workers: (Worker Ptr) Vector

    //! The internal threads that are doing all the work
    _threads: (Thread Ptr) Vector
    //! Object that counts the number of threads that are idle
    idleCounter: IdleCounter

[protected]
    fun ctor(this: @TaskSystem) {}

    fun dtor(this: @TaskSystem) {}

var globalTaskSystem: TaskSystem Ptr

fun initTaskSystem(numWorkers: UInt = 0)
    // Create the task system object
    //assert(globalTaskSystem isNull)
    globalTaskSystem = new(TaskSystem)

    // Create the required threads
    if numWorkers == 0
        numWorkers = getAvailableCoresNum()
    //numWorkers = 1
    var ts = globalTaskSystem
    for i=0..numWorkers
        let worker = ts createWorker
        let p: Thread Ptr = new(Thread, InternalWorkerThread(worker))
        (ts.get)._threads.pushBack(p)

fun getInitTaskSystem: TaskSystem Ptr
    // TODO: Make sure this is initialized only once
    if globalTaskSystem isNull
        initTaskSystem
    return globalTaskSystem

fun createWorker(ts: TaskSystem Ptr): Worker Ptr
    let id: Int = ts.get().workers size
    let p: Worker Ptr = new(Worker, ts.get(), id, ts.get().idleCounter)
    ts.get().workers.pushBack(p)
    return p

// TODO: make it random
var cnt: Int = 0

fun getRandomTaskQueue(ts: @TaskSystem): @TaskQueue
    // TODO: make the selection truly random
    let worker: Worker Ptr = ts.workers(++cnt % (ts.workers size))
    return worker.get().work

fun onTaskAvailable(ts: @TaskSystem)
    // Do something only if we have at least one idle worker
    if ts.idleCounter hasIdle
        for w: Worker Ptr = ts.workers.all
            // If we can wake up one worker, exit
            if w.get() tryWakeUp
                return

//! Get the number of currently available workers
fun numAvailableWorkers(ts: @TaskSystem): SizeType = (ts.workers size) - (ts.idleCounter numIdleWorkers)

////////////////////////////////////////////////////////////////////////////////
// InternalWorkerThread datatype

//! Class that represents an internal worker thread
//! This tries to execute as much work as possible
//! If no work is available, this goes to sleep
[initCtor] datatype InternalWorkerThread
    //! The worker associated with this thread
    _worker: Worker Ptr

fun ()(this: @InternalWorkerThread)
    setLocalWorker(_worker)
    schedDoWait(_worker.get(), TaskPtr(), TaskPtr())

// Defined in scheduler.spr
[native('par.tasksImpl.scheduler.schedDoWait')]
fun schedDoWait(worker: @Worker, toExecute, waitingTask: TaskPtr)

