module par.thread

import config
import std.newDelete
//import assert

//! Datatype describing a thread ID
[bitcopiable]
datatype ThreadId
    id: ULong

fun ctor(this: !ThreadId, id: ULong)
    this.id ctor id
fun ctor(this: !ThreadId, h: NativeThreadHandle)
    this.id ctor
    _Impl.pthread_threadid_np(h, id)
fun >>(tid: !ThreadId, os: !OutStream)
    os << tid.id

[bitcopiable]
datatype Thread
    _handle: NativeThreadHandle

//! Construct the Thread with a functor
//! The functor can have state, not just executing code
fun ctor(this: !Thread, f: @AnyType) if isValid(f())
    _handle = _Impl.startThread(f)

//! Cannot copy construct or assign a Thread object
[private] fun ctor(this, other: !Thread)
[private] fun =(this, other: !Thread)

//! Destructor. Detach the thread if joinable
fun dtor(this: !Thread)
    if this isJoinable
        this detach

fun >>(t: !Thread, os: !OutStream)
    if _handle != NativeThreadHandle()
        os << "Thread(" << _handle << ")"
    else
        os << "Thread(null)"

//! Swap the content of two Thread objects
//fun swap(lhs, rhs: @Thread)
//    var tmp = lhs._handle swap rhs._handle

//! Test if the thread is joinable (e.g., still active)
fun isJoinable(t: Thread) = t._handle != NativeThreadHandle()

//! Wait for the thread to finish
//! This shouldn't be called from the same thread
fun join(t: !Thread)
    //assert(t isJoinable)
    //assert((t getId) !== curThreadId)
    let res = _Impl.pthread_join(t._handle, UntypedPtr())
    //assert(res == 0)
    t._handle = NativeThreadHandle()

//! Detaches the given thread object from the actual thread of execution
//! The actual thread may continue to execute after this call
fun detach(t: !Thread)
    //assert(t isJoinable)
    let res = _Impl.pthread_detach(t._handle)
    //assert(res == 0)
    t._handle = NativeThreadHandle()

//! Get the ID of the given thread
fun getId(t: Thread): ThreadId = ThreadId(t._handle)

//! Get the native handle of the given thread
fun getNativeHandle(t: Thread): NativeThreadHandle = t._handle

//! Get the current thread id
fun curThreadId: ThreadId = ThreadId(NativeThreadHandle())

//! Tries to suspend the current thread to let other threads execute
fun yield = _Impl.sched_yield()

//! Sleep the given amount of milliseconds
fun sleep(durMs: UInt)
    let req = _Impl.TimeSpec(durMs/1000, (durMs%1000)*1000000)
    let rem = _Impl.TimeSpec(0, 0)
    _Impl.nanosleep(req, rem)

package _Impl
    using ThreadFun = FunctionPtr(UntypedPtr, UntypedPtr)

    [initCtor]
    datatype Closure(FType: Type)
        f: FType

    fun threadFun(closureType: Type, arg: UntypedPtr): UntypedPtr
        let self: @closureType = arg asRefOf closureType
        self.f()
        self delete
        return UntypedPtr()

    fun getFunPtr(closureType: Type): ThreadFun = \threadFun(closureType, UntypedPtr())

    fun startThread(f: AnyType): NativeThreadHandle
        using ClosureType = Closure(typeOf(f))
        let closurePtr: @ClosureType = new(ClosureType, f)
        var handle: NativeThreadHandle
        let arg = UntypedPtr(closurePtr)
        let status = pthread_create(handle, UntypedPtr(), getFunPtr(ClosureType), arg)
        return handle

    [initCtor, bitcopiable] datatype TimeSpec
        tv_sec, tv_nsec: Long

    [native("pthread_create")] fun pthread_create(handle: !NativeThreadHandle, attr: UntypedPtr, f: ThreadFun, arg: UntypedPtr): Int
    [native("pthread_join")] fun pthread_join(handle: NativeThreadHandle, valPtr: UntypedPtr): Int
    [native("pthread_detach")] fun pthread_detach(handle: NativeThreadHandle): Int
    [native("pthread_self")] fun pthread_self: NativeThreadHandle

    [native("pthread_threadid_np")] fun pthread_threadid_np(t: NativeThreadHandle, res: !ULong): Int

    [native("sched_yield")] fun sched_yield
    [native("nanosleep")] fun nanosleep(req, rem: !TimeSpec): Int

