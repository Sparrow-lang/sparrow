module par.tls

import config
import std.newDelete

datatype Tls(T: Type) if sizeOf(T) <= sizeOf(UntypedPtr)
    _tls: _Impl.TlsCommon

    using ValueType = T

fun ctor(this: !Tls)
    [ct] if TypeOp.isRef(ValueType)
        _tls ctor \_destructPtr(ValueType, UntypedPtr())
    else
        _tls ctor

fun =(this: !Tls, other: typeOf(this))
    _tls setValue (other._tls getValue)
fun =(this: !Tls, val: this.ValueType)
    _tls setValue UntypedPtr(val)

fun get(this: Tls): ValueType
    [ct] if TypeOp.isRef(ValueType)
        return reinterpretCast(ValueType, (_tls getValue).data)
    else
        return (_tls getValue) asRefOf ValueType

fun _destructPtr(t: Type, p: UntypedPtr): Null
    delete(reinterpretCast(t, p.data))
    return Null()

package _Impl
    using DtorFun = FunctionPtr(Null, UntypedPtr)

    datatype TlsCommon
        key: KeyT

    fun ctor(this: !TlsCommon)
        pthread_key_create(key, DtorFun())
    fun ctor(this: !TlsCommon, dtorFun: DtorFun)
        pthread_key_create(key, dtorFun)

    fun dtor(this: !TlsCommon)
        pthread_key_delete(key)

    fun setValue(tls: TlsCommon, val: UntypedPtr) = pthread_setspecific(tls.key, val)
    fun getValue(tls: TlsCommon): UntypedPtr = pthread_getspecific(tls.key)

    using KeyT = UInt64

    [native("pthread_key_create")] fun pthread_key_create(k: !KeyT, dtorFun: DtorFun): Int
    [native("pthread_key_delete")] fun pthread_key_delete(k: KeyT): Int
    [native("pthread_setspecific")] fun pthread_setspecific(k: KeyT, val: UntypedPtr): Int
    [native("pthread_getspecific")] fun pthread_getspecific(k: KeyT): UntypedPtr
