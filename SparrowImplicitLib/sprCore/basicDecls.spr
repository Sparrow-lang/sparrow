
////////////////////////////////////////////////////////////////////////////////
/// Most basic types

[ct]
    [bitcopiable, native("Type"), noDefault]
    datatype Type {}

[ct, protected]
    [native("_Type_ctor")] fun ctor(this: !Type)
    [native("_Type_copy_ctor")] fun ctor(this: !Type, other: Type)

[noDefault, bitcopiable]
    datatype Uninitialized

    [native("Null")]    datatype Null

    [native("i1")]      datatype Bool

    [native("i8")]      datatype Int8
    [native("u8")]      datatype UInt8
    [native("i16")]     datatype Int16
    [native("u16")]     datatype UInt16
    [native("i32")]     datatype Int
    [native("u32")]     datatype UInt32
    [native("i64")]     datatype Int64
    [native("u64")]     datatype UInt64

    [native("float")]   datatype Float32
    [native("double")]  datatype Float

    [native("i8")]      datatype Char

using Int32 = Int
using Float64 = Float

[protected]
    fun ctor(this: Uninitialized) {}
    fun ctor(this, other: Uninitialized) {}
    fun dtor(this: Uninitialized) {}

    // Everything can be initialized with 'Uninitialized', and does nothing
    [public]
    fun ctor(this: !AnyType, nothing: Uninitialized) {}

[protected]
    fun ctor(this: Null) {}
    fun ctor(this, other: Null) {}
    fun dtor(this: Null) {}

    [native("_zero_init_1")] fun ctor(this: !Bool)
    [native("_ass_1_1")] fun ctor(this: !Bool, src: Bool)
    fun dtor(this: Bool) {}
    [autoCt, native("_ass_1_1")] fun = (this: !Bool, other: Bool): Bool

    [native("_zero_init_8")] fun ctor(this: !Int8)
    [native("_ass_8_8")] fun ctor(this: !Int8, src: Int8)
    [native("_ass_8_8")] fun ctor(this: !Int8, src: Char)
    [native("_ass_8_8")] fun ctor(this: !Int8, src: UInt8)
    [native("_ass_8_16")] fun ctor(this: !Int8, src: Int16)
    [native("_ass_8_16")] fun ctor(this: !Int8, src: UInt16)
    [native("_ass_8_32")] fun ctor(this: !Int8, src: Int32)
    [native("_ass_8_32")] fun ctor(this: !Int8, src: UInt32)
    [native("_ass_8_64")] fun ctor(this: !Int8, src: Int64)
    [native("_ass_8_64")] fun ctor(this: !Int8, src: UInt64)
    [native("_ass_i8_f")] fun ctor(this: !Int8, src: Float32)
    [native("_ass_i8_d")] fun ctor(this: !Int8, src: Float64)
    fun dtor(this: Int8) {}
    [native("_ass_8_8")] fun = (this: !Int8, other: Int8)

    [native("_zero_init_8")] fun ctor(this: !UInt8)
    [native("_ass_8_8")] fun ctor(this: !UInt8, src: Int8)
    [native("_ass_8_8")] fun ctor(this: !UInt8, src: UInt8)
    [native("_ass_8_16")] fun ctor(this: !UInt8, src: Int16)
    [native("_ass_8_16")] fun ctor(this: !UInt8, src: UInt16)
    [native("_ass_8_32")] fun ctor(this: !UInt8, src: Int32)
    [native("_ass_8_32")] fun ctor(this: !UInt8, src: UInt32)
    [native("_ass_8_64")] fun ctor(this: !UInt8, src: Int64)
    [native("_ass_8_64")] fun ctor(this: !UInt8, src: UInt64)
    [native("_ass_u8_f")] fun ctor(this: !UInt8, src: Float32)
    [native("_ass_u8_d")] fun ctor(this: !UInt8, src: Float64)
    fun dtor(this: UInt8) {}
    [native("_ass_8_8")] fun = (this: !UInt8, other: UInt8)

    [native("_zero_init_16")] fun ctor(this: !Int16)
    [native("_ass_16_8s")] fun ctor(this: !Int16, src: Int8)
    [native("_ass_16_8z")] fun ctor(this: !Int16, src: UInt8)
    [native("_ass_16_16")] fun ctor(this: !Int16, src: Int16)
    [native("_ass_16_16")] fun ctor(this: !Int16, src: UInt16)
    [native("_ass_16_32")] fun ctor(this: !Int16, src: Int32)
    [native("_ass_16_32")] fun ctor(this: !Int16, src: UInt32)
    [native("_ass_16_64")] fun ctor(this: !Int16, src: Int64)
    [native("_ass_16_64")] fun ctor(this: !Int16, src: UInt64)
    [native("_ass_i16_f")] fun ctor(this: !Int16, src: Float32)
    [native("_ass_i16_d")] fun ctor(this: !Int16, src: Float64)
    fun dtor(this: Int16) {}
    [native("_ass_16_16")] fun = (this: !Int16, other: Int16)

    [native("_zero_init_16")] fun ctor(this: !UInt16)
    [native("_ass_16_8z")] fun ctor(this: !UInt16, src: Int8)
    [native("_ass_16_8z")] fun ctor(this: !UInt16, src: UInt8)
    [native("_ass_16_16")] fun ctor(this: !UInt16, src: Int16)
    [native("_ass_16_16")] fun ctor(this: !UInt16, src: UInt16)
    [native("_ass_16_32")] fun ctor(this: !UInt16, src: Int32)
    [native("_ass_16_32")] fun ctor(this: !UInt16, src: UInt32)
    [native("_ass_16_64")] fun ctor(this: !UInt16, src: Int64)
    [native("_ass_16_64")] fun ctor(this: !UInt16, src: UInt64)
    [native("_ass_u16_f")] fun ctor(this: !UInt16, src: Float32)
    [native("_ass_u16_d")] fun ctor(this: !UInt16, src: Float64)
    fun dtor(this: UInt16) {}
    [native("_ass_16_16")] fun = (this: !UInt16, other: UInt16)

    [native("_zero_init_32")] fun ctor(this: !Int32)
    [native("_ass_32_8s")] fun ctor(this: !Int32, src: Int8)
    [native("_ass_32_8z")] fun ctor(this: !Int32, src: UInt8)
    [native("_ass_32_16s")] fun ctor(this: !Int32, src: Int16)
    [native("_ass_32_16z")] fun ctor(this: !Int32, src: UInt16)
    [native("_ass_32_32")] fun ctor(this: !Int32, src: Int32)
    [native("_ass_32_32")] fun ctor(this: !Int32, src: UInt32)
    [native("_ass_32_64")] fun ctor(this: !Int32, src: Int64)
    [native("_ass_32_64")] fun ctor(this: !Int32, src: UInt64)
    [native("_ass_i32_f")] fun ctor(this: !Int32, src: Float32)
    [native("_ass_i32_d")] fun ctor(this: !Int32, src: Float64)
    [native("_ass_32_8z")] fun ctor(this: !Int32, src: Char)
    fun dtor(this: Int32) {}
    [native("_ass_32_32")] fun = (this: !Int32, other: Int32)

    [native("_zero_init_32")] fun ctor(this: !UInt32)
    [native("_ass_32_8z")] fun ctor(this: !UInt32, src: Int8)
    [native("_ass_32_8z")] fun ctor(this: !UInt32, src: UInt8)
    [native("_ass_32_16z")] fun ctor(this: !UInt32, src: Int16)
    [native("_ass_32_16z")] fun ctor(this: !UInt32, src: UInt16)
    [native("_ass_32_32")] fun ctor(this: !UInt32, src: Int32)
    [native("_ass_32_32")] fun ctor(this: !UInt32, src: UInt32)
    [native("_ass_32_64")] fun ctor(this: !UInt32, src: Int64)
    [native("_ass_32_64")] fun ctor(this: !UInt32, src: UInt64)
    [native("_ass_u32_f")] fun ctor(this: !UInt32, src: Float32)
    [native("_ass_u32_d")] fun ctor(this: !UInt32, src: Float64)
    fun dtor(this: UInt32) {}
    [native("_ass_32_32")] fun = (this: !UInt32, other: UInt32)

    [native("_zero_init_64")] fun ctor(this: !Int64)
    [native("_ass_64_8s")] fun ctor(this: !Int64, src: Int8)
    [native("_ass_64_8z")] fun ctor(this: !Int64, src: UInt8)
    [native("_ass_64_16s")] fun ctor(this: !Int64, src: Int16)
    [native("_ass_64_16z")] fun ctor(this: !Int64, src: UInt16)
    [native("_ass_64_32s")] fun ctor(this: !Int64, src: Int32)
    [native("_ass_64_32z")] fun ctor(this: !Int64, src: UInt32)
    [native("_ass_64_64")] fun ctor(this: !Int64, src: Int64)
    [native("_ass_64_64")] fun ctor(this: !Int64, src: UInt64)
    [native("_ass_i64_f")] fun ctor(this: !Int64, src: Float32)
    [native("_ass_i64_d")] fun ctor(this: !Int64, src: Float64)
    fun dtor(this: Int64) {}
    [native("_ass_64_64")] fun = (this: !Int64, other: Int64)

    [native("_zero_init_64")] fun ctor(this: !UInt64)
    [native("_ass_64_8z")] fun ctor(this: !UInt64, src: Int8)
    [native("_ass_64_8z")] fun ctor(this: !UInt64, src: UInt8)
    [native("_ass_64_16z")] fun ctor(this: !UInt64, src: Int16)
    [native("_ass_64_16z")] fun ctor(this: !UInt64, src: UInt16)
    [native("_ass_64_32z")] fun ctor(this: !UInt64, src: Int32)
    [native("_ass_64_32z")] fun ctor(this: !UInt64, src: UInt32)
    [native("_ass_64_64")] fun ctor(this: !UInt64, src: Int64)
    [native("_ass_64_64")] fun ctor(this: !UInt64, src: UInt64)
    [native("_ass_u64_f")] fun ctor(this: !UInt64, src: Float32)
    [native("_ass_u64_d")] fun ctor(this: !UInt64, src: Float64)
    fun dtor(this: UInt64) {}
    [native("_ass_64_64")] fun = (this: !UInt64, other: UInt64)

    [native("_zero_init_f")] fun ctor(this: !Float32)
    [native("_ass_f_i8")] fun ctor(this: !Float32, src: Int8)
    [native("_ass_f_u8")] fun ctor(this: !Float32, src: UInt8)
    [native("_ass_f_i16")] fun ctor(this: !Float32, src: Int16)
    [native("_ass_f_u16")] fun ctor(this: !Float32, src: UInt16)
    [native("_ass_f_i32")] fun ctor(this: !Float32, src: Int32)
    [native("_ass_f_u32")] fun ctor(this: !Float32, src: UInt32)
    [native("_ass_f_i64")] fun ctor(this: !Float32, src: Int64)
    [native("_ass_f_u64")] fun ctor(this: !Float32, src: UInt64)
    [native("_ass_f_f")] fun ctor(this: !Float32, src: Float32)
    [native("_ass_f_d")] fun ctor(this: !Float32, src: Float64)
    fun dtor(this: Float32) {}
    [native("_ass_f_f")] fun = (this: !Float32, other: Float32)

    [native("_zero_init_d")] fun ctor(this: !Float64)
    [native("_ass_d_i8")] fun ctor(this: !Float64, src: Int8)
    [native("_ass_d_u8")] fun ctor(this: !Float64, src: UInt8)
    [native("_ass_d_i16")] fun ctor(this: !Float64, src: Int16)
    [native("_ass_d_u16")] fun ctor(this: !Float64, src: UInt16)
    [native("_ass_d_i32")] fun ctor(this: !Float64, src: Int32)
    [native("_ass_d_u32")] fun ctor(this: !Float64, src: UInt32)
    [native("_ass_d_i64")] fun ctor(this: !Float64, src: Int64)
    [native("_ass_d_u64")] fun ctor(this: !Float64, src: UInt64)
    [native("_ass_d_f")] fun ctor(this: !Float64, src: Float32)
    [native("_ass_d_d")] fun ctor(this: !Float64, src: Float64)
    fun dtor(this: Float64) {}
    [native("_ass_d_d")] fun = (this: !Float64, other: Float64)

    [native("_zero_init_8")] fun ctor(this: !Char)
    [native("_ass_8_8")] fun ctor(this: !Char, src: Char)
    [native("_ass_8_8")] fun ctor(this: !Char, src: Int8)
    [native("_ass_8_32")] fun ctor(this: !Char, src: Int32)
    fun dtor(this: Char) {}
    [native("_ass_8_8")] fun = (this: !Char, other: Char)

concept SmallInteger(x)             \
    if typeOf(x) == Int8            \
    || typeOf(x) == UInt8           \
    || typeOf(x) == Int16           \
    || typeOf(x) == UInt16          \


concept BigInteger(x)               \
    if typeOf(x) == Int32           \
    || typeOf(x) == UInt32          \
    || typeOf(x) == Int64           \
    || typeOf(x) == UInt64          \


concept SignedInteger(x)            \
    if typeOf(x) == Int8            \
    || typeOf(x) == Int16           \
    || typeOf(x) == Int32           \
    || typeOf(x) == Int64           \


concept UnsignedInteger(x)          \
    if typeOf(x) == UInt8           \
    || typeOf(x) == UInt16          \
    || typeOf(x) == UInt32          \
    || typeOf(x) == UInt64          \


concept Integer(x)                  \
    if SmallInteger(x)              \
    || BigInteger(x)                \


concept FloatingPointNumber(x)      \
    if typeOf(x) == Float32         \
    || typeOf(x) == Float64         \


concept Number(x)                   \
    if Integer(x)                   \
    || FloatingPointNumber(x)       \


datatype NumericLimits(t: Type) if t == Int8
    using maxValue = Int8(0x7f)
    using minValue = Int8(0x80)
datatype NumericLimits(t: Type) if t == UInt8
    using maxValue = UInt8(0xff)
    using minValue = UInt8(0x00)

datatype NumericLimits(t: Type) if t == Int16
    using maxValue = Int16(0x7fff)
    using minValue = Int16(0x8000)
datatype NumericLimits(t: Type) if t == UInt16
    using maxValue = UInt16(0xfff)
    using minValue = UInt16(0x000)

datatype NumericLimits(t: Type) if t == Int32
    using maxValue = Int32(0x7fffffff)
    using minValue = Int32(0x80000000)
datatype NumericLimits(t: Type) if t == UInt32
    using maxValue = UInt32(0xffffffff)
    using minValue = UInt32(0x00000000)

datatype NumericLimits(t: Type) if t == Int64
    using maxValue = Int64(0x7fffffffffffffffL)
    using minValue = Int64(0x8000000000000000L)
datatype NumericLimits(t: Type) if t == UInt64
    using maxValue = UInt64(0xffffffffffffffffL)
    using minValue = UInt64(0x0000000000000000L)

////////////////////////////////////////////////////////////////////////////////
/// operator precedence
///

using oper_precedence_default   = 100

using oper_precedence___dot__   = 10000
using oper_precedence___fapp__  = 10000
using oper_precedence___pre__   = 990

using oper_precedence_=     = 50
using oper_precedence_:=    = 50
using oper_precedence_+=    = 50
using oper_precedence_-=    = 50
using oper_precedence_*=    = 50
using oper_precedence_/=    = 50
using oper_precedence_%=    = 50

using oper_precedence_||    = 200
using oper_precedence_^^    = 220
using oper_precedence_&&    = 240

using oper_precedence_<     = 300
using oper_precedence_>     = 300
using oper_precedence_<=    = 300
using oper_precedence_>=    = 300

using oper_precedence_==    = 400
using oper_precedence_!=    = 400
using oper_precedence_===   = 400
using oper_precedence_!==   = 400

using oper_precedence_+     = 500
using oper_precedence_-     = 500
using oper_precedence_*     = 550
using oper_precedence_/     = 550
using oper_precedence_%     = 550

using oper_precedence_<<    = 50
using oper_precedence_<<<   = 50
using oper_precedence_>>    = 50

using oper_assoc_=          = -1
using oper_assoc_:=         = -1

////////////////////////////////////////////////////////////////////////////////
/// operations on Bool & Char
///

[autoCt, protected]
    [native("$logicalOr")] fun || (x, y: Bool): Bool
    [native("$logicalAnd")] fun && (x, y: Bool): Bool
    [native("_Bool_opXor")] fun ^^ (x, y: Bool): Bool
    [native("_Bool_opEQ")] fun == (x, y: Bool): Bool
    [native("_Bool_opNE")] fun != (x, y: Bool): Bool
    [native("_Bool_opNeg")] fun ! (x: Bool): Bool

    [native("_Char_opEQ")] fun == (x, y: Char): Bool
    [native("_Char_opNE")] fun != (x, y: Char): Bool
    [native("_Char_opLT")] fun < (x, y: Char): Bool
    [native("_Char_opGT")] fun > (x, y: Char): Bool
    [native("_Char_opLE")] fun <= (x, y: Char): Bool
    [native("_Char_opGE")] fun >= (x, y: Char): Bool

////////////////////////////////////////////////////////////////////////////////
/// Numeric operations
///

[autoCt, protected]
    [native("_Int8_opEQ")] fun == (x, y: Int8): Bool
    [native("_UInt8_opEQ")] fun == (x, y: UInt8): Bool
    [native("_Int16_opEQ")] fun == (x, y: Int16): Bool
    [native("_UInt16_opEQ")] fun == (x, y: UInt16): Bool
    [native("_Int32_opEQ")] fun == (x, y: Int32): Bool
    [native("_UInt32_opEQ")] fun == (x, y: UInt32): Bool
    [native("_Int64_opEQ")] fun == (x, y: Int64): Bool
    [native("_UInt64_opEQ")] fun == (x, y: UInt64): Bool
    [native("_Float32_opEQ")] fun == (x, y: Float32): Bool
    [native("_Float64_opEQ")] fun == (x, y: Float64): Bool

    [native("_Int8_opNE")] fun != (x, y: Int8): Bool
    [native("_UInt8_opNE")] fun != (x, y: UInt8): Bool
    [native("_Int16_opNE")] fun != (x, y: Int16): Bool
    [native("_UInt16_opNE")] fun != (x, y: UInt16): Bool
    [native("_Int32_opNE")] fun != (x, y: Int32): Bool
    [native("_UInt32_opNE")] fun != (x, y: UInt32): Bool
    [native("_Int64_opNE")] fun != (x, y: Int64): Bool
    [native("_UInt64_opNE")] fun != (x, y: UInt64): Bool
    [native("_Float32_opNE")] fun != (x, y: Float32): Bool
    [native("_Float64_opNE")] fun != (x, y: Float64): Bool

    [native("_Int8_opLT")] fun < (x, y: Int8): Bool
    [native("_UInt8_opLT")] fun < (x, y: UInt8): Bool
    [native("_Int16_opLT")] fun < (x, y: Int16): Bool
    [native("_UInt16_opLT")] fun < (x, y: UInt16): Bool
    [native("_Int32_opLT")] fun < (x, y: Int32): Bool
    [native("_UInt32_opLT")] fun < (x, y: UInt32): Bool
    [native("_Int64_opLT")] fun < (x, y: Int64): Bool
    [native("_UInt64_opLT")] fun < (x, y: UInt64): Bool
    [native("_Float32_opLT")] fun < (x, y: Float32): Bool
    [native("_Float64_opLT")] fun < (x, y: Float64): Bool

    [native("_Int8_opGT")] fun > (x, y: Int8): Bool
    [native("_UInt8_opGT")] fun > (x, y: UInt8): Bool
    [native("_Int16_opGT")] fun > (x, y: Int16): Bool
    [native("_UInt16_opGT")] fun > (x, y: UInt16): Bool
    [native("_Int32_opGT")] fun > (x, y: Int32): Bool
    [native("_UInt32_opGT")] fun > (x, y: UInt32): Bool
    [native("_Int64_opGT")] fun > (x, y: Int64): Bool
    [native("_UInt64_opGT")] fun > (x, y: UInt64): Bool
    [native("_Float32_opGT")] fun > (x, y: Float32): Bool
    [native("_Float64_opGT")] fun > (x, y: Float64): Bool

    [native("_Int8_opLE")] fun <= (x, y: Int8): Bool
    [native("_UInt8_opLE")] fun <= (x, y: UInt8): Bool
    [native("_Int16_opLE")] fun <= (x, y: Int16): Bool
    [native("_UInt16_opLE")] fun <= (x, y: UInt16): Bool
    [native("_Int32_opLE")] fun <= (x, y: Int32): Bool
    [native("_UInt32_opLE")] fun <= (x, y: UInt32): Bool
    [native("_Int64_opLE")] fun <= (x, y: Int64): Bool
    [native("_UInt64_opLE")] fun <= (x, y: UInt64): Bool
    [native("_Float32_opLE")] fun <= (x, y: Float32): Bool
    [native("_Float64_opLE")] fun <= (x, y: Float64): Bool

    [native("_Int8_opGE")] fun >= (x, y: Int8): Bool
    [native("_UInt8_opGE")] fun >= (x, y: UInt8): Bool
    [native("_Int16_opGE")] fun >= (x, y: Int16): Bool
    [native("_UInt16_opGE")] fun >= (x, y: UInt16): Bool
    [native("_Int32_opGE")] fun >= (x, y: Int32): Bool
    [native("_UInt32_opGE")] fun >= (x, y: UInt32): Bool
    [native("_Int64_opGE")] fun >= (x, y: Int64): Bool
    [native("_UInt64_opGE")] fun >= (x, y: UInt64): Bool
    [native("_Float32_opGE")] fun >= (x, y: Float32): Bool
    [native("_Float64_opGE")] fun >= (x, y: Float64): Bool

    [native("_Int8_opPlus")] fun + (x, y: Int8): Int8
    [native("_UInt8_opPlus")] fun + (x, y: UInt8): UInt8
    [native("_Int16_opPlus")] fun + (x, y: Int16): Int16
    [native("_UInt16_opPlus")] fun + (x, y: UInt16): UInt16
    [native("_Int32_opPlus")] fun + (x, y: Int32): Int32
    [native("_UInt32_opPlus")] fun + (x, y: UInt32): UInt32
    [native("_Int64_opPlus")] fun + (x, y: Int64): Int64
    [native("_UInt64_opPlus")] fun + (x, y: UInt64): UInt64
    [native("_Float32_opPlus")] fun + (x, y: Float32): Float32
    [native("_Float64_opPlus")] fun + (x, y: Float64): Float64

    [native("_Int8_opMinus")] fun - (x, y: Int8): Int8
    [native("_UInt8_opMinus")] fun - (x, y: UInt8): UInt8
    [native("_Int16_opMinus")] fun - (x, y: Int16): Int16
    [native("_UInt16_opMinus")] fun - (x, y: UInt16): UInt16
    [native("_Int32_opMinus")] fun - (x, y: Int32): Int32
    [native("_UInt32_opMinus")] fun - (x, y: UInt32): UInt32
    [native("_Int64_opMinus")] fun - (x, y: Int64): Int64
    [native("_UInt64_opMinus")] fun - (x, y: UInt64): UInt64
    [native("_Float32_opMinus")] fun - (x, y: Float32): Float32
    [native("_Float64_opMinus")] fun - (x, y: Float64): Float64

    [native("_Int8_opMul")] fun * (x, y: Int8): Int8
    [native("_UInt8_opMul")] fun * (x, y: UInt8): UInt8
    [native("_Int16_opMul")] fun * (x, y: Int16): Int16
    [native("_UInt16_opMul")] fun * (x, y: UInt16): UInt16
    [native("_Int32_opMul")] fun * (x, y: Int32): Int32
    [native("_UInt32_opMul")] fun * (x, y: UInt32): UInt32
    [native("_Int64_opMul")] fun * (x, y: Int64): Int64
    [native("_UInt64_opMul")] fun * (x, y: UInt64): UInt64
    [native("_Float32_opMul")] fun * (x, y: Float32): Float32
    [native("_Float64_opMul")] fun * (x, y: Float64): Float64

    [native("_Int8_opDiv")] fun / (x, y: Int8): Int8
    [native("_UInt8_opDiv")] fun / (x, y: UInt8): UInt8
    [native("_Int16_opDiv")] fun / (x, y: Int16): Int16
    [native("_UInt16_opDiv")] fun / (x, y: UInt16): UInt16
    [native("_Int32_opDiv")] fun / (x, y: Int32): Int32
    [native("_UInt32_opDiv")] fun / (x, y: UInt32): UInt32
    [native("_Int64_opDiv")] fun / (x, y: Int64): Int64
    [native("_UInt64_opDiv")] fun / (x, y: UInt64): UInt64
    [native("_Float32_opDiv")] fun / (x, y: Float32): Float32
    [native("_Float64_opDiv")] fun / (x, y: Float64): Float64

    [native("_Int8_opMod")] fun % (x, y: Int8): Int8
    [native("_UInt8_opMod")] fun % (x, y: UInt8): UInt8
    [native("_Int16_opMod")] fun % (x, y: Int16): Int16
    [native("_UInt16_opMod")] fun % (x, y: UInt16): UInt16
    [native("_Int32_opMod")] fun % (x, y: Int32): Int32
    [native("_UInt32_opMod")] fun % (x, y: UInt32): UInt32
    [native("_Int64_opMod")] fun % (x, y: Int64): Int64
    [native("_UInt64_opMod")] fun % (x, y: UInt64): UInt64
    [native("_Float32_opMod")] fun % (x, y: Float32): Float32
    [native("_Float64_opMod")] fun % (x, y: Float64): Float64

    // Unary +
    [native("_Int8_opPlus1")] fun + (x: Int8): Int8
    [native("_UInt8_opPlus1")] fun + (x: UInt8): UInt8
    [native("_Int16_opPlus1")] fun + (x: Int16): Int16
    [native("_UInt16_opPlus1")] fun + (x: UInt16): UInt16
    [native("_Int32_opPlus1")] fun + (x: Int32): Int32
    [native("_UInt32_opPlus1")] fun + (x: UInt32): UInt32
    [native("_Int64_opPlus1")] fun + (x: Int64): Int64
    [native("_UInt64_opPlus1")] fun + (x: UInt64): UInt64
    [native("_Float32_opPlus1")] fun + (x: Float32): Float32
    [native("_Float64_opPlus1")] fun + (x: Float64): Float64

    // Unary - (only for signed types)
    [native("_Int8_opMinus1")] fun - (x: Int8): Int8
    [native("_Int16_opMinus1")] fun - (x: Int16): Int16
    [native("_Int32_opMinus1")] fun - (x: Int32): Int32
    [native("_Int64_opMinus1")] fun - (x: Int64): Int64
    [native("_Float32_opMinus1")] fun - (x: Float32): Float32
    [native("_Float64_opMinus1")] fun - (x: Float64): Float64

    fun pre_++(n: !Int8): Int8 { n+=Int8(1); return n; }
    fun pre_++(n: !UInt8): UInt8 { n+=UInt8(1); return n; }
    fun pre_++(n: !Int16): Int16 { n+=Int16(1); return n; }
    fun pre_++(n: !UInt16): UInt16 { n+=UInt16(1); return n; }
    fun pre_++(n: !Int32): Int32 { n+=1; return n; }
    fun pre_++(n: !UInt32): UInt32 { n+=UInt32(1); return n; }
    fun pre_++(n: !Int64): Int64 { n+=Int64(1); return n; }
    fun pre_++(n: !UInt64): UInt64 { n+=UInt64(1); return n; }

    fun pre_--(n: !Int8): Int8 { n-=Int8(1); return n; }
    fun pre_--(n: !UInt8): UInt8 { n-=UInt8(1); return n; }
    fun pre_--(n: !Int16): Int16 { n-=Int16(1); return n; }
    fun pre_--(n: !UInt16): UInt16 { n-=UInt16(1); return n; }
    fun pre_--(n: !Int32): Int32 { n-=1; return n; }
    fun pre_--(n: !UInt32): UInt32 { n-=UInt32(1); return n; }
    fun pre_--(n: !Int64): Int64 { n-=Int64(1); return n; }
    fun pre_--(n: !UInt64): UInt64 { n-=UInt64(1); return n; }

    fun post_++(n: !Int8): Int8 { let old = n; n+=Int8(1); return old; }
    fun post_++(n: !UInt8): UInt8 { let old = n; n+=UInt8(1); return old; }
    fun post_++(n: !Int16): Int16 { let old = n; n+=Int16(1); return old; }
    fun post_++(n: !UInt16): UInt16 { let old = n; n+=UInt16(1); return old; }
    fun post_++(n: !Int32): Int32 { let old = n; n+=1; return old; }
    fun post_++(n: !UInt32): UInt32 { let old = n; n+=UInt32(1); return old; }
    fun post_++(n: !Int64): Int64 { let old = n; n+=Int64(1); return old; }
    fun post_++(n: !UInt64): UInt64 { let old = n; n+=UInt64(1); return old; }

    fun post_--(n: !Int8): Int8 { let old = n; n-=Int8(1); return old; }
    fun post_--(n: !UInt8): UInt8 { let old = n; n-=UInt8(1); return old; }
    fun post_--(n: !Int16): Int16 { let old = n; n-=Int16(1); return old; }
    fun post_--(n: !UInt16): UInt16 { let old = n; n-=UInt16(1); return old; }
    fun post_--(n: !Int32): Int32 { let old = n; n-=1; return old; }
    fun post_--(n: !UInt32): UInt32 { let old = n; n-=UInt32(1); return old; }
    fun post_--(n: !Int64): Int64 { let old = n; n-=Int64(1); return old; }
    fun post_--(n: !UInt64): UInt64 { let old = n; n-=UInt64(1); return old; }

////////////////////////////////////////////////////////////////////////////////
/// StringRef
///

/// String class that DOES NOT have ownership of the characters; it simply refers to another string
[bitcopiable, native("StringRef")]
datatype StringRef
    using RetType = @Char

    begin, end: UntypedPtr

[protected]
    fun ctor(this: !StringRef)
        begin ctor UntypedPtr()
        end ctor UntypedPtr()

    fun ctor(this: !StringRef, size: Int)
        begin = malloc(size + 1)
        end = (begin ptrAdd size)
        (end asRefOf Int8) = Int8(0)
    fun ctor(this: !StringRef, other: StringRef)
        begin = other.begin
        end = other.end
    fun ctor(this: !StringRef, begin, end: UntypedPtr)
        this.begin = begin
        this.end = end
    fun dtor(this: StringRef) {}

    fun isEmpty(this: StringRef)            = (end ptrDiff begin) == 0
    fun size(this: StringRef): Int     = (end ptrDiff begin)

    fun front(this: StringRef): @Char                 = begin asRefOf Char
    fun back(this: StringRef): @Char                  = end ptrSub 1 asRefOf Char
    fun ()(this: StringRef) : @Char                   = begin asRefOf Char
    fun ()(this: StringRef, index: Int): @Char   = begin ptrAdd index asRefOf Char
    fun at(this: StringRef, index: Int): @Char   = begin ptrAdd index asRefOf Char

    fun popFront(this: !StringRef)                { begin = (begin ptrAdd 1); }
    fun popBack(this: !StringRef)                 { end = (begin ptrSub 1); }
    fun popFront(this: !StringRef, n: Int)   { begin = (begin ptrAdd n); }
    fun popBack(this: !StringRef, n: Int)    { end = (begin ptrAdd n); }

    fun subrange(this: StringRef, index: Int, num: Int): StringRef
        return StringRef(begin ptrAdd index, begin ptrAdd (index+num))

    fun cStr(this: StringRef): @Char = begin asRefOf Char

fun = (this: !StringRef, src: StringRef): !StringRef
    begin = src.begin
    end = src.end
    return this

[protected, autoCt]
fun == (this, other: StringRef): Bool
    let s = this.size
    if s != other.size
        return false
    var i: Int = 0
    while i<s ; i+=1
        if this.at(i) != other.at(i) return false
    return true

[autoCt, native("_String_fromCString")]
fun fromCString(s: @Char): StringRef
    let len = cStringLen(s)
    var res: StringRef
    res.begin = UntypedPtr(s)
    res.end = (res.begin ptrAdd len)
    return res

fun cStringLen(s: @Char): Int
    var len: Int = 0
    var p: UntypedPtr = s
    while p.asRefOf(Int8) != Int8(0) ; p = (p ptrAdd 1)
        len++
    return len

[autoCt]
    fun char(this: StringRef): Char
        if this.isEmpty return Char()
        else return this.at(0)

    fun + (x,y: StringRef): StringRef
        let sz1 = x.size()
        let sz2 = y.size()
        var res: StringRef = sz1 + sz2
        memcpy(res.begin, x.begin, sz1)
        memcpy(res.begin ptrAdd sz1, y.begin, sz2)
        return res

    fun + (x: StringRef, y: Char): StringRef
        let sz1 = x.size()
        let sz2 = 1
        var res: StringRef = sz1 + sz2
        memcpy(res.begin, x.begin, sz1)
        memcpy(res.begin ptrAdd sz1, UntypedPtr(y), sz2)

        return res

////////////////////////////////////////////////////////////////////////////////
/// Some common functions used by various standard parts of the library
///

fun cast()
fun reinterpretCast()
fun construct()
[ct]
    fun sizeOf(): Int
    fun typeOf(): Type
    fun isValid(): Bool
    fun isValidAndTrue(): Bool
    fun valueIfValid(): Bool
    fun ctEval()
    [native("$injectBackendCode")] fun injectBackendCode(code: StringRef)
    [native("$injectBackendCodeCt")] fun injectBackendCodeCt(code: StringRef)

/// Type used to represent an untyped pointer
[bitcopiable]
datatype UntypedPtr = @Int8

[protected]
    fun ctor(this: !UntypedPtr)
        this.data := null
    fun ctor(this: !UntypedPtr, other: UntypedPtr)
        this.data := other.data
    fun ctor(this: !UntypedPtr, val: @AnyType)
        this.data := reinterpretCast(@Int8, val)
    fun ctor(this: !UntypedPtr, nullptr: Null)
        this.data := null
    fun asRefOf(this: UntypedPtr, t: Type): @t = reinterpretCast(@t, this.data)

    [native("ptrAdd"), autoCt] fun ptrAdd(p: UntypedPtr, n: Int): UntypedPtr
    [native("ptrSub"), autoCt] fun ptrSub(p: UntypedPtr, n: Int): UntypedPtr
    [native("ptrDiff"), autoCt] fun ptrDiff(p1, p2: UntypedPtr): Int

[autoCt]
    [native("implOpRefEQ")] fun implOpRefEQ(x,y: @Int8): Bool
    [native("implOpRefNE")] fun implOpRefNE(x,y: @Int8): Bool
    [native("isNullRef")] fun isNullRef(x: @Int8): Bool

    [native("implOpRefEQ")] fun implOpRefEQ(x,y: UntypedPtr): Bool
    [native("implOpRefNE")] fun implOpRefNE(x,y: UntypedPtr): Bool
    [native("isNullRef")] fun isNullRef(x: UntypedPtr): Bool

/// This implements the ternary operator from other languages: cond ? alt1 : alt2
[ct, native("$meta.ife")] fun ife()

////////////////////////////////////////////////////////////////////////////////
/// Type helpers
///

package TypeOp
    [ct]
        [native("$typeDescription")] fun description(t: Type): StringRef
        [native("$typeHasStorage")] fun hasStorage(t: Type): Bool
        [native("$typeMode")] fun mode(t: Type): Int    // 0=unspecified, 1=rt, 2=ct
        [native("$typeCanBeUsedAtRt")] fun canBeUsedAtRt(t: Type): Bool
        [native("$typeNumRef")] fun numRef(t: Type): Int
        [native("$typeChangeMode")] fun changeMode(t: Type, mode: Int): Type
        [native("$typeChangeRefCount")] fun changeRefCount(t: Type, numRef: Int): Type
        [native("$typeRemoveCat")] fun removeCat(t: Type): Type
        [native("$typeIsBitcopiable")] fun isBitcopiable(t: Type): Bool

    [ctGeneric]
        fun isRef(t: Type) = 0<numRef(t)
        fun addRef(t: Type) = changeRefCount(t, numRef(t)+1)
        fun removeRef(t: Type) = ife(isRef(t), changeRefCount(t, numRef(t)-1), t)
        fun removeAllRef(t: Type) = changeRefCount(t, 0)
        fun atLeastOneRef(t: Type): Type = ife(isRef(t), t, addRef(t))

    //! Generate a mutable copy of the given value -- only type manipulation, no body
    fun copyVal(val: AnyType): !typeOf(val)
    fun copyVal(val: @AnyType): !removeRef(typeOf(val))

/// Add reference operator
[ct, native("$typeAddRef")] fun pre_@ (t: Type): Type
//[ctGeneric] fun pre_@ (t: Type) = TypeOp.addRef(t)
/// Remove reference operator
[ctGeneric] fun pre_-@ (t: Type) = TypeOp.removeRef(t)
/// Operator to ensure at least one refenrence
[ctGeneric] fun pre_!@ (t: Type) = TypeOp.atLeastOneRef(t)

/// Comparison between types
[ct, native("$typeEQ")] fun == (x, y: Type): Bool

[ct, native("$ct")] fun ct(t: Type): Type
[ct, native("$rt")] fun rt(t: Type): Type

[ct, native('$const')] fun const(t: Type): Type
[ct, native('$mut')] fun mut(t: Type): Type
[ct, native('$tmp')] fun tmp(t: Type): Type
[ct, native('$mut')] fun pre_!(t: Type): Type

[ct, native("$convertsTo")] fun convertsTo(src, dest: Type): Bool
[ct, native("$staticBuffer")] fun static_buffer(n: Int): Type
[ct, native("$commonType")] fun commonType(t, u: Type): Type

//! Transforms from mutable to temp
fun move(x: !AnyType): typeOf(x) tmp = reinterpretCast(typeOf(x) tmp, x)
//! Transform from temp to mutable (for genericity, also accept mut->mut)
fun tmpToMut(x: AnyType tmp): !typeOf(x) = reinterpretCast(!typeOf(x), x)
fun tmpToMut(x: !AnyType): !typeOf(x) = x

/// Concept that is satisfied by any type
concept AnyType(x) // Always true

/// Gets an object of the given type
fun valueOfType(t: Type): t
fun #$(t: Type): t

////////////////////////////////////////////////////////////////////////////////
/// Some low-level helper functions
///

[native("malloc")] fun malloc(size: Int): UntypedPtr
[native("calloc")] fun calloc(size, count: Int): UntypedPtr
[native("realloc"), autoCt] fun realloc(p: UntypedPtr, size: Int): UntypedPtr
[native("free"), autoCt] fun free(p: UntypedPtr)
[native("_spr_memcpy"), autoCt] fun memcpy(dest, src: UntypedPtr, size: Int)
[native("_spr_memmove"), autoCt] fun memmove(dest, src: UntypedPtr, size: Int)
[native("_spr_memset"), autoCt] fun memset(dest: UntypedPtr, val: Int8, count: Int)
[native("system")] fun systemNative(x: @Char)
[native("sleep")] fun sleep(x: Int)

////////////////////////////////////////////////////////////////////////////////
/// Range is such a fundamental concept
///

concept Range(x) if (
       typeOf(x.RetType) == Type
    && typeOf(x.isEmpty) == Bool
    && typeOf(x.front) == x.RetType
    && isValid(x.popFront)
)

