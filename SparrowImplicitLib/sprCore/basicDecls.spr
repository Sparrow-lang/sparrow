
////////////////////////////////////////////////////////////////////////////////
/// Most basic types

[ct]
    [bitcopiable, native("Type"), noDefault]
    datatype Type {}

[ct, protected]
    [native("_Type_ctor")] fun ctor(this: !Type)
    [native("_Type_copy_ctor")] fun ctor(this: !Type, other: Type)
    //fun dtor(this: @Type) {}

[noDefault, bitcopiable]
    datatype Uninitialized {}

    [native("Null")]            datatype Null {}

    [native("i1")]              datatype Bool {}
    [native("i8")]              datatype Byte {}
    [convert, native("u8")]     datatype UByte {}
    [convert, native("i16")]    datatype Short {}
    [convert, native("u16")]    datatype UShort {}
    [convert, native("i32")]    datatype Int {}
    [convert, native("u32")]    datatype UInt {}
    [convert, native("i64")]    datatype Long {}
    [convert, native("u64")]    datatype ULong {}
    [convert, native("u64")]    datatype SizeType {}
    [convert, native("i64")]    datatype DiffType {}
    [convert, native("float")]  datatype Float {}
    [convert, native("double")] datatype Double {}
    [native("i8")]              datatype Char {}

[protected]
    fun ctor(this: Uninitialized) {}
    fun ctor(this, other: Uninitialized) {}
    fun dtor(this: Uninitialized) {}

    // Everything can be initialized with 'Uninitialized', and does nothing
    [public]
    fun ctor(this: !AnyType, nothing: Uninitialized) {}

[protected]
    fun ctor(this: Null) {}
    fun ctor(this, other: Null) {}
    fun dtor(this: Null) {}

    // TODO (mut): Remove references from below

    [native("_zero_init_1")] fun ctor(this: @Bool)
    [native("_ass_1_1")] fun ctor(this: @Bool, src: Bool)
    fun dtor(this: @Bool) {}
    [autoCt, native("_ass_1_1")] fun = (this: @Bool, other: Bool): Bool

    [native("_zero_init_8")] fun ctor(this: @Byte)
    [native("_ass_8_8")] fun ctor(this: @Byte, src: Byte)
    [native("_ass_8_8")] fun ctor(this: @Byte, src: Char)
    [native("_ass_8_8")] fun ctor(this: @Byte, src: UByte)
    [native("_ass_8_16")] fun ctor(this: @Byte, src: Short)
    [native("_ass_8_16")] fun ctor(this: @Byte, src: UShort)
    [native("_ass_8_32")] fun ctor(this: @Byte, src: Int)
    [native("_ass_8_32")] fun ctor(this: @Byte, src: UInt)
    [native("_ass_8_64")] fun ctor(this: @Byte, src: Long)
    [native("_ass_8_64")] fun ctor(this: @Byte, src: ULong)
    [native("_ass_8_64")] fun ctor(this: @Byte, src: SizeType)
    [native("_ass_8_64")] fun ctor(this: @Byte, src: DiffType)
    [native("_ass_i8_f")] fun ctor(this: @Byte, src: Float)
    [native("_ass_i8_d")] fun ctor(this: @Byte, src: Double)
    fun dtor(this: Byte) {}
    [native("_ass_8_8")] fun = (this: @Byte, other: Byte)

    [native("_zero_init_8")] fun ctor(this: @UByte)
    [native("_ass_8_8"), convert] fun ctor(this: @UByte, src: Byte)
    [native("_ass_8_8")] fun ctor(this: @UByte, src: UByte)
    [native("_ass_8_16")] fun ctor(this: @UByte, src: Short)
    [native("_ass_8_16")] fun ctor(this: @UByte, src: UShort)
    [native("_ass_8_32")] fun ctor(this: @UByte, src: Int)
    [native("_ass_8_32")] fun ctor(this: @UByte, src: UInt)
    [native("_ass_8_64")] fun ctor(this: @UByte, src: Long)
    [native("_ass_8_64")] fun ctor(this: @UByte, src: ULong)
    [native("_ass_8_64")] fun ctor(this: @UByte, src: SizeType)
    [native("_ass_8_64")] fun ctor(this: @UByte, src: DiffType)
    [native("_ass_u8_f")] fun ctor(this: @UByte, src: Float)
    [native("_ass_u8_d")] fun ctor(this: @UByte, src: Double)
    fun dtor(this: UByte) {}
    [native("_ass_8_8")] fun = (this: @UByte, other: UByte)

    [native("_zero_init_16")] fun ctor(this: @Short)
    [native("_ass_16_8s"), convert] fun ctor(this: @Short, src: Byte)
    [native("_ass_16_8z"), convert] fun ctor(this: @Short, src: UByte)
    [native("_ass_16_16")] fun ctor(this: @Short, src: Short)
    [native("_ass_16_16")] fun ctor(this: @Short, src: UShort)
    [native("_ass_16_32")] fun ctor(this: @Short, src: Int)
    [native("_ass_16_32")] fun ctor(this: @Short, src: UInt)
    [native("_ass_16_64")] fun ctor(this: @Short, src: Long)
    [native("_ass_16_64")] fun ctor(this: @Short, src: ULong)
    [native("_ass_16_64")] fun ctor(this: @Short, src: SizeType)
    [native("_ass_16_64")] fun ctor(this: @Short, src: DiffType)
    [native("_ass_i16_f")] fun ctor(this: @Short, src: Float)
    [native("_ass_i16_d")] fun ctor(this: @Short, src: Double)
    fun dtor(this: Short) {}
    [native("_ass_16_16")] fun = (this: @Short, other: Short)

    [native("_zero_init_16")] fun ctor(this: @UShort)
    [native("_ass_16_8z"), convert] fun ctor(this: @UShort, src: Byte)
    [native("_ass_16_8z"), convert] fun ctor(this: @UShort, src: UByte)
    [native("_ass_16_16"), convert] fun ctor(this: @UShort, src: Short)
    [native("_ass_16_16")] fun ctor(this: @UShort, src: UShort)
    [native("_ass_16_32")] fun ctor(this: @UShort, src: Int)
    [native("_ass_16_32")] fun ctor(this: @UShort, src: UInt)
    [native("_ass_16_64")] fun ctor(this: @UShort, src: Long)
    [native("_ass_16_64")] fun ctor(this: @UShort, src: ULong)
    [native("_ass_16_64")] fun ctor(this: @UShort, src: SizeType)
    [native("_ass_16_64")] fun ctor(this: @UShort, src: DiffType)
    [native("_ass_u16_f")] fun ctor(this: @UShort, src: Float)
    [native("_ass_u16_d")] fun ctor(this: @UShort, src: Double)
    fun dtor(this: UShort) {}
    [native("_ass_16_16")] fun = (this: @UShort, other: UShort)

    [native("_zero_init_32")] fun ctor(this: @Int)
    [native("_ass_32_8s"), convert] fun ctor(this: @Int, src: Byte)
    [native("_ass_32_8z"), convert] fun ctor(this: @Int, src: UByte)
    [native("_ass_32_16s"), convert] fun ctor(this: @Int, src: Short)
    [native("_ass_32_16z"), convert] fun ctor(this: @Int, src: UShort)
    [native("_ass_32_32")] fun ctor(this: @Int, src: Int)
    [native("_ass_32_32")] fun ctor(this: @Int, src: UInt)
    [native("_ass_32_64")] fun ctor(this: @Int, src: Long)
    [native("_ass_32_64")] fun ctor(this: @Int, src: ULong)
    [native("_ass_32_64")] fun ctor(this: @Int, src: SizeType)
    [native("_ass_32_64")] fun ctor(this: @Int, src: DiffType)
    [native("_ass_i32_f")] fun ctor(this: @Int, src: Float)
    [native("_ass_i32_d")] fun ctor(this: @Int, src: Double)
    [native("_ass_32_8z")] fun ctor(this: @Int, src: Char)
    fun dtor(this: Int) {}
    [native("_ass_32_32")] fun = (this: @Int, other: Int)

    [native("_zero_init_32")] fun ctor(this: @UInt)
    [native("_ass_32_8z"), convert] fun ctor(this: @UInt, src: Byte)
    [native("_ass_32_8z"), convert] fun ctor(this: @UInt, src: UByte)
    [native("_ass_32_16z"), convert] fun ctor(this: @UInt, src: Short)
    [native("_ass_32_16z"), convert] fun ctor(this: @UInt, src: UShort)
    [native("_ass_32_32"), convert] fun ctor(this: @UInt, src: Int)
    [native("_ass_32_32")] fun ctor(this: @UInt, src: UInt)
    [native("_ass_32_64")] fun ctor(this: @UInt, src: Long)
    [native("_ass_32_64")] fun ctor(this: @UInt, src: ULong)
    [native("_ass_32_64")] fun ctor(this: @UInt, src: SizeType)
    [native("_ass_32_64")] fun ctor(this: @UInt, src: DiffType)
    [native("_ass_u32_f")] fun ctor(this: @UInt, src: Float)
    [native("_ass_u32_d")] fun ctor(this: @UInt, src: Double)
    fun dtor(this: UInt) {}
    [native("_ass_32_32")] fun = (this: @UInt, other: UInt)

    [native("_zero_init_64")] fun ctor(this: @Long)
    [native("_ass_64_8s"), convert] fun ctor(this: @Long, src: Byte)
    [native("_ass_64_8z"), convert] fun ctor(this: @Long, src: UByte)
    [native("_ass_64_16s"), convert] fun ctor(this: @Long, src: Short)
    [native("_ass_64_16z"), convert] fun ctor(this: @Long, src: UShort)
    [native("_ass_64_32s"), convert] fun ctor(this: @Long, src: Int)
    [native("_ass_64_32z"), convert] fun ctor(this: @Long, src: UInt)
    [native("_ass_64_64")] fun ctor(this: @Long, src: Long)
    [native("_ass_64_64")] fun ctor(this: @Long, src: ULong)
    [native("_ass_64_64"), convert] fun ctor(this: @Long, src: SizeType)
    [native("_ass_64_64"), convert] fun ctor(this: @Long, src: DiffType)
    [native("_ass_i64_f")] fun ctor(this: @Long, src: Float)
    [native("_ass_i64_d")] fun ctor(this: @Long, src: Double)
    fun dtor(this: Long) {}
    [native("_ass_64_64")] fun = (this: @Long, other: Long)

    [native("_zero_init_64")] fun ctor(this: @ULong)
    [native("_ass_64_8z"), convert] fun ctor(this: @ULong, src: Byte)
    [native("_ass_64_8z"), convert] fun ctor(this: @ULong, src: UByte)
    [native("_ass_64_16z"), convert] fun ctor(this: @ULong, src: Short)
    [native("_ass_64_16z"), convert] fun ctor(this: @ULong, src: UShort)
    [native("_ass_64_32z"), convert] fun ctor(this: @ULong, src: Int)
    [native("_ass_64_32z"), convert] fun ctor(this: @ULong, src: UInt)
    [native("_ass_64_64"), convert] fun ctor(this: @ULong, src: Long)
    [native("_ass_64_64")] fun ctor(this: @ULong, src: ULong)
    [native("_ass_64_64"), convert] fun ctor(this: @ULong, src: SizeType)
    [native("_ass_64_64"), convert] fun ctor(this: @ULong, src: DiffType)
    [native("_ass_u64_f")] fun ctor(this: @ULong, src: Float)
    [native("_ass_u64_d")] fun ctor(this: @ULong, src: Double)
    fun dtor(this: @ULong) {}
    [native("_ass_64_64")] fun = (this: @ULong, other: ULong)

    [native("_zero_init_64")] fun ctor(this: @SizeType)
    [native("_ass_64_8z"), convert] fun ctor(this: @SizeType, src: Byte)
    [native("_ass_64_8z"), convert] fun ctor(this: @SizeType, src: UByte)
    [native("_ass_64_16z"), convert] fun ctor(this: @SizeType, src: Short)
    [native("_ass_64_16z"), convert] fun ctor(this: @SizeType, src: UShort)
    [native("_ass_64_32z"), convert] fun ctor(this: @SizeType, src: Int)
    [native("_ass_64_32z"), convert] fun ctor(this: @SizeType, src: UInt)
    [native("_ass_64_64")] fun ctor(this: @SizeType, src: Long)
    [native("_ass_64_64")] fun ctor(this: @SizeType, src: ULong)
    [native("_ass_64_64")] fun ctor(this: @SizeType, src: SizeType)
    [native("_ass_64_64"), convert] fun ctor(this: @SizeType, src: DiffType)
    [native("_ass_u64_f")] fun ctor(this: @SizeType, src: Float)
    [native("_ass_u64_d")] fun ctor(this: @SizeType, src: Double)
    fun dtor(this: SizeType) {}
    [native("_ass_64_64")] fun = (this: @SizeType, other: SizeType)

    [native("_zero_init_64")] fun ctor(this: @DiffType)
    [native("_ass_64_8s"), convert] fun ctor(this: @DiffType, src: Byte)
    [native("_ass_64_8z"), convert] fun ctor(this: @DiffType, src: UByte)
    [native("_ass_64_16s"), convert] fun ctor(this: @DiffType, src: Short)
    [native("_ass_64_16z"), convert] fun ctor(this: @DiffType, src: UShort)
    [native("_ass_64_32s"), convert] fun ctor(this: @DiffType, src: Int)
    [native("_ass_64_32z"), convert] fun ctor(this: @DiffType, src: UInt)
    [native("_ass_64_64")] fun ctor(this: @DiffType, src: Long)
    [native("_ass_64_64")] fun ctor(this: @DiffType, src: ULong)
    [native("_ass_64_64")] fun ctor(this: @DiffType, src: SizeType)
    [native("_ass_64_64")] fun ctor(this: @DiffType, src: DiffType)
    [native("_ass_i64_f")] fun ctor(this: @DiffType, src: Float)
    [native("_ass_i64_d")] fun ctor(this: @DiffType, src: Double)
    fun dtor(this: DiffType) {}
    [native("_ass_64_64")] fun = (this: @DiffType, other: DiffType)

    [native("_zero_init_f")] fun ctor(this: @Float)
    [native("_ass_f_i8"), convert] fun ctor(this: @Float, src: Byte)
    [native("_ass_f_u8"), convert] fun ctor(this: @Float, src: UByte)
    [native("_ass_f_i16"), convert] fun ctor(this: @Float, src: Short)
    [native("_ass_f_u16"), convert] fun ctor(this: @Float, src: UShort)
    [native("_ass_f_i32"), convert] fun ctor(this: @Float, src: Int)
    [native("_ass_f_u32"), convert] fun ctor(this: @Float, src: UInt)
    [native("_ass_f_i64"), convert] fun ctor(this: @Float, src: Long)
    [native("_ass_f_u64"), convert] fun ctor(this: @Float, src: ULong)
    [native("_ass_f_i64"), convert] fun ctor(this: @Float, src: SizeType)
    [native("_ass_f_u64"), convert] fun ctor(this: @Float, src: DiffType)
    [native("_ass_f_f")] fun ctor(this: @Float, src: Float)
    [native("_ass_f_d")] fun ctor(this: @Float, src: Double)
    fun dtor(this: Float) {}
    [native("_ass_f_f")] fun = (this: @Float, other: Float)

    [native("_zero_init_d")] fun ctor(this: @Double)
    [native("_ass_d_i8"), convert] fun ctor(this: @Double, src: Byte)
    [native("_ass_d_u8"), convert] fun ctor(this: @Double, src: UByte)
    [native("_ass_d_i16"), convert] fun ctor(this: @Double, src: Short)
    [native("_ass_d_u16"), convert] fun ctor(this: @Double, src: UShort)
    [native("_ass_d_i32"), convert] fun ctor(this: @Double, src: Int)
    [native("_ass_d_u32"), convert] fun ctor(this: @Double, src: UInt)
    [native("_ass_d_i64"), convert] fun ctor(this: @Double, src: Long)
    [native("_ass_d_u64"), convert] fun ctor(this: @Double, src: ULong)
    [native("_ass_d_i64"), convert] fun ctor(this: @Double, src: SizeType)
    [native("_ass_d_u64"), convert] fun ctor(this: @Double, src: DiffType)
    [native("_ass_d_f"), convert] fun ctor(this: @Double, src: Float)
    [native("_ass_d_d")] fun ctor(this: @Double, src: Double)
    fun dtor(this: Double) {}
    [native("_ass_d_d")] fun = (this: @Double, other: Double)

    [native("_zero_init_8")] fun ctor(this: @Char)
    [native("_ass_8_8")] fun ctor(this: @Char, src: Char)
    [native("_ass_8_8")] fun ctor(this: @Char, src: Byte)
    [native("_ass_8_8")] fun ctor(this: @Char, src: UByte)
    [native("_ass_8_16")] fun ctor(this: @Char, src: Short)
    [native("_ass_8_16")] fun ctor(this: @Char, src: UShort)
    [native("_ass_8_32")] fun ctor(this: @Char, src: Int)
    [native("_ass_8_32")] fun ctor(this: @Char, src: UInt)
    [native("_ass_8_64")] fun ctor(this: @Char, src: Long)
    [native("_ass_8_64")] fun ctor(this: @Char, src: ULong)
    [native("_ass_8_64")] fun ctor(this: @Char, src: SizeType)
    [native("_ass_8_64")] fun ctor(this: @Char, src: DiffType)
    fun dtor(this: Char) {}
    [native("_ass_8_8")] fun = (this: @Char, other: Char)

concept SmallInteger(x)             \
    if typeOf(x) == Byte            \
    || typeOf(x) == UByte           \
    || typeOf(x) == Short           \
    || typeOf(x) == UShort          \


concept BigInteger(x)               \
    if typeOf(x) == Int             \
    || typeOf(x) == UInt            \
    || typeOf(x) == Long            \
    || typeOf(x) == ULong           \
    || typeOf(x) == SizeType        \
    || typeOf(x) == DiffType        \


concept SignedInteger(x)            \
    if typeOf(x) == Byte            \
    || typeOf(x) == Short           \
    || typeOf(x) == Int             \
    || typeOf(x) == Long            \
    || typeOf(x) == DiffType        \


concept UnsignedInteger(x)          \
    if typeOf(x) == UByte           \
    || typeOf(x) == UShort          \
    || typeOf(x) == UInt            \
    || typeOf(x) == ULong           \
    || typeOf(x) == SizeType        \


concept Integer(x)                  \
    if SmallInteger(x)              \
    || BigInteger(x)                \


concept FloatingPointNumber(x)      \
    if typeOf(x) == Float           \
    || typeOf(x) == Double          \


concept Number(x)                   \
    if Integer(x)                   \
    || FloatingPointNumber(x)       \


datatype NumericLimits(t: Type) if t == Byte
    using maxValue = Byte(0x7f)
    using minValue = Byte(0x80)
datatype NumericLimits(t: Type) if t == UByte
    using maxValue = UByte(0xff)
    using minValue = UByte(0x00)

datatype NumericLimits(t: Type) if t == Short
    using maxValue = Short(0x7fff)
    using minValue = Short(0x8000)
datatype NumericLimits(t: Type) if t == UShort
    using maxValue = UShort(0xfff)
    using minValue = UShort(0x000)

datatype NumericLimits(t: Type) if t == Int
    using maxValue = Int(0x7fffffff)
    using minValue = Int(0x80000000)
datatype NumericLimits(t: Type) if t == UInt
    using maxValue = UInt(0xffffffff)
    using minValue = UInt(0x00000000)

datatype NumericLimits(t: Type) if t == Long
    using maxValue = Long(0x7fffffffffffffffL)
    using minValue = Long(0x8000000000000000L)
datatype NumericLimits(t: Type) if t == ULong
    using maxValue = ULong(0xffffffffffffffffL)
    using minValue = ULong(0x0000000000000000L)

////////////////////////////////////////////////////////////////////////////////
/// operator precedence
///

using oper_precedence_default   = 100

using oper_precedence___dot__   = 10000
using oper_precedence___fapp__  = 10000
using oper_precedence___pre__   = 990

using oper_precedence_=     = 50
using oper_precedence_:=    = 50
using oper_precedence_+=    = 50
using oper_precedence_-=    = 50
using oper_precedence_*=    = 50
using oper_precedence_/=    = 50
using oper_precedence_%=    = 50

using oper_precedence_||    = 200
using oper_precedence_^^    = 220
using oper_precedence_&&    = 240

using oper_precedence_<     = 300
using oper_precedence_>     = 300
using oper_precedence_<=    = 300
using oper_precedence_>=    = 300

using oper_precedence_==    = 400
using oper_precedence_!=    = 400
using oper_precedence_===   = 400
using oper_precedence_!==   = 400

using oper_precedence_+     = 500
using oper_precedence_-     = 500
using oper_precedence_*     = 550
using oper_precedence_/     = 550
using oper_precedence_%     = 550

using oper_precedence_<<    = 50
using oper_precedence_<<<   = 50
using oper_precedence_>>    = 50

using oper_assoc_=          = -1
using oper_assoc_:=         = -1

////////////////////////////////////////////////////////////////////////////////
/// operations on Bool & Char
///

[autoCt, protected]
    [native("$logicalOr")] fun || (x, y: Bool): Bool
    [native("$logicalAnd")] fun && (x, y: Bool): Bool
    [native("_Bool_opXor")] fun ^^ (x, y: Bool): Bool
    [native("_Bool_opEQ")] fun == (x, y: Bool): Bool
    [native("_Bool_opNE")] fun != (x, y: Bool): Bool
    [native("_Bool_opNeg")] fun ! (x: Bool): Bool

    [native("_Char_opEQ")] fun == (x, y: Char): Bool
    [native("_Char_opNE")] fun != (x, y: Char): Bool
    [native("_Char_opLT")] fun < (x, y: Char): Bool
    [native("_Char_opGT")] fun > (x, y: Char): Bool
    [native("_Char_opLE")] fun <= (x, y: Char): Bool
    [native("_Char_opGE")] fun >= (x, y: Char): Bool

////////////////////////////////////////////////////////////////////////////////
/// Numeric operations
///

[autoCt, protected]
    [native("_Byte_opEQ")] fun == (x, y: Byte): Bool
    [native("_UByte_opEQ")] fun == (x, y: UByte): Bool
    [native("_Short_opEQ")] fun == (x, y: Short): Bool
    [native("_UShort_opEQ")] fun == (x, y: UShort): Bool
    [native("_Int_opEQ")] fun == (x, y: Int): Bool
    [native("_UInt_opEQ")] fun == (x, y: UInt): Bool
    [native("_Long_opEQ")] fun == (x, y: Long): Bool
    [native("_ULong_opEQ")] fun == (x, y: ULong): Bool
    [native("_SizeType_opEQ")] fun == (x, y: SizeType): Bool
    [native("_DiffType_opEQ")] fun == (x, y: DiffType): Bool
    [native("_Float_opEQ")] fun == (x, y: Float): Bool
    [native("_Double_opEQ")] fun == (x, y: Double): Bool

    [native("_Byte_opNE")] fun != (x, y: Byte): Bool
    [native("_UByte_opNE")] fun != (x, y: UByte): Bool
    [native("_Short_opNE")] fun != (x, y: Short): Bool
    [native("_UShort_opNE")] fun != (x, y: UShort): Bool
    [native("_Int_opNE")] fun != (x, y: Int): Bool
    [native("_UInt_opNE")] fun != (x, y: UInt): Bool
    [native("_Long_opNE")] fun != (x, y: Long): Bool
    [native("_ULong_opNE")] fun != (x, y: ULong): Bool
    [native("_SizeType_opNE")] fun != (x, y: SizeType): Bool
    [native("_DiffType_opNE")] fun != (x, y: DiffType): Bool
    [native("_Float_opNE")] fun != (x, y: Float): Bool
    [native("_Double_opNE")] fun != (x, y: Double): Bool

    [native("_Byte_opLT")] fun < (x, y: Byte): Bool
    [native("_UByte_opLT")] fun < (x, y: UByte): Bool
    [native("_Short_opLT")] fun < (x, y: Short): Bool
    [native("_UShort_opLT")] fun < (x, y: UShort): Bool
    [native("_Int_opLT")] fun < (x, y: Int): Bool
    [native("_UInt_opLT")] fun < (x, y: UInt): Bool
    [native("_Long_opLT")] fun < (x, y: Long): Bool
    [native("_ULong_opLT")] fun < (x, y: ULong): Bool
    [native("_SizeType_opLT")] fun < (x, y: SizeType): Bool
    [native("_DiffType_opLT")] fun < (x, y: DiffType): Bool
    [native("_Float_opLT")] fun < (x, y: Float): Bool
    [native("_Double_opLT")] fun < (x, y: Double): Bool

    [native("_Byte_opGT")] fun > (x, y: Byte): Bool
    [native("_UByte_opGT")] fun > (x, y: UByte): Bool
    [native("_Short_opGT")] fun > (x, y: Short): Bool
    [native("_UShort_opGT")] fun > (x, y: UShort): Bool
    [native("_Int_opGT")] fun > (x, y: Int): Bool
    [native("_UInt_opGT")] fun > (x, y: UInt): Bool
    [native("_Long_opGT")] fun > (x, y: Long): Bool
    [native("_ULong_opGT")] fun > (x, y: ULong): Bool
    [native("_SizeType_opGT")] fun > (x, y: SizeType): Bool
    [native("_DiffType_opGT")] fun > (x, y: DiffType): Bool
    [native("_Float_opGT")] fun > (x, y: Float): Bool
    [native("_Double_opGT")] fun > (x, y: Double): Bool

    [native("_Byte_opLE")] fun <= (x, y: Byte): Bool
    [native("_UByte_opLE")] fun <= (x, y: UByte): Bool
    [native("_Short_opLE")] fun <= (x, y: Short): Bool
    [native("_UShort_opLE")] fun <= (x, y: UShort): Bool
    [native("_Int_opLE")] fun <= (x, y: Int): Bool
    [native("_UInt_opLE")] fun <= (x, y: UInt): Bool
    [native("_Long_opLE")] fun <= (x, y: Long): Bool
    [native("_ULong_opLE")] fun <= (x, y: ULong): Bool
    [native("_SizeType_opLE")] fun <= (x, y: SizeType): Bool
    [native("_DiffType_opLE")] fun <= (x, y: DiffType): Bool
    [native("_Float_opLE")] fun <= (x, y: Float): Bool
    [native("_Double_opLE")] fun <= (x, y: Double): Bool

    [native("_Byte_opGE")] fun >= (x, y: Byte): Bool
    [native("_UByte_opGE")] fun >= (x, y: UByte): Bool
    [native("_Short_opGE")] fun >= (x, y: Short): Bool
    [native("_UShort_opGE")] fun >= (x, y: UShort): Bool
    [native("_Int_opGE")] fun >= (x, y: Int): Bool
    [native("_UInt_opGE")] fun >= (x, y: UInt): Bool
    [native("_Long_opGE")] fun >= (x, y: Long): Bool
    [native("_ULong_opGE")] fun >= (x, y: ULong): Bool
    [native("_SizeType_opGE")] fun >= (x, y: SizeType): Bool
    [native("_DiffType_opGE")] fun >= (x, y: DiffType): Bool
    [native("_Float_opGE")] fun >= (x, y: Float): Bool
    [native("_Double_opGE")] fun >= (x, y: Double): Bool

    [native("_Byte_opPlus")] fun + (x, y: Byte): Byte
    [native("_UByte_opPlus")] fun + (x, y: UByte): UByte
    [native("_Short_opPlus")] fun + (x, y: Short): Short
    [native("_UShort_opPlus")] fun + (x, y: UShort): UShort
    [native("_Int_opPlus")] fun + (x, y: Int): Int
    [native("_UInt_opPlus")] fun + (x, y: UInt): UInt
    [native("_Long_opPlus")] fun + (x, y: Long): Long
    [native("_ULong_opPlus")] fun + (x, y: ULong): ULong
    [native("_SizeType_opPlus")] fun + (x, y: SizeType): SizeType
    [native("_DiffType_opPlus")] fun + (x, y: DiffType): DiffType
    [native("_Float_opPlus")] fun + (x, y: Float): Float
    [native("_Double_opPlus")] fun + (x, y: Double): Double

    [native("_Byte_opMinus")] fun - (x, y: Byte): Byte
    [native("_UByte_opMinus")] fun - (x, y: UByte): UByte
    [native("_Short_opMinus")] fun - (x, y: Short): Short
    [native("_UShort_opMinus")] fun - (x, y: UShort): UShort
    [native("_Int_opMinus")] fun - (x, y: Int): Int
    [native("_UInt_opMinus")] fun - (x, y: UInt): UInt
    [native("_Long_opMinus")] fun - (x, y: Long): Long
    [native("_ULong_opMinus")] fun - (x, y: ULong): ULong
    [native("_SizeType_opMinus")] fun - (x, y: SizeType): SizeType
    [native("_DiffType_opMinus")] fun - (x, y: DiffType): DiffType
    [native("_Float_opMinus")] fun - (x, y: Float): Float
    [native("_Double_opMinus")] fun - (x, y: Double): Double

    [native("_Byte_opMul")] fun * (x, y: Byte): Byte
    [native("_UByte_opMul")] fun * (x, y: UByte): UByte
    [native("_Short_opMul")] fun * (x, y: Short): Short
    [native("_UShort_opMul")] fun * (x, y: UShort): UShort
    [native("_Int_opMul")] fun * (x, y: Int): Int
    [native("_UInt_opMul")] fun * (x, y: UInt): UInt
    [native("_Long_opMul")] fun * (x, y: Long): Long
    [native("_ULong_opMul")] fun * (x, y: ULong): ULong
    [native("_SizeType_opMul")] fun * (x, y: SizeType): SizeType
    [native("_DiffType_opMul")] fun * (x, y: DiffType): DiffType
    [native("_Float_opMul")] fun * (x, y: Float): Float
    [native("_Double_opMul")] fun * (x, y: Double): Double

    [native("_Byte_opDiv")] fun / (x, y: Byte): Byte
    [native("_UByte_opDiv")] fun / (x, y: UByte): UByte
    [native("_Short_opDiv")] fun / (x, y: Short): Short
    [native("_UShort_opDiv")] fun / (x, y: UShort): UShort
    [native("_Int_opDiv")] fun / (x, y: Int): Int
    [native("_UInt_opDiv")] fun / (x, y: UInt): UInt
    [native("_Long_opDiv")] fun / (x, y: Long): Long
    [native("_ULong_opDiv")] fun / (x, y: ULong): ULong
    [native("_SizeType_opDiv")] fun / (x, y: SizeType): SizeType
    [native("_DiffType_opDiv")] fun / (x, y: DiffType): DiffType
    [native("_Float_opDiv")] fun / (x, y: Float): Float
    [native("_Double_opDiv")] fun / (x, y: Double): Double

    [native("_Byte_opMod")] fun % (x, y: Byte): Byte
    [native("_UByte_opMod")] fun % (x, y: UByte): UByte
    [native("_Short_opMod")] fun % (x, y: Short): Short
    [native("_UShort_opMod")] fun % (x, y: UShort): UShort
    [native("_Int_opMod")] fun % (x, y: Int): Int
    [native("_UInt_opMod")] fun % (x, y: UInt): UInt
    [native("_Long_opMod")] fun % (x, y: Long): Long
    [native("_ULong_opMod")] fun % (x, y: ULong): ULong
    [native("_SizeType_opMod")] fun % (x, y: SizeType): SizeType
    [native("_DiffType_opMod")] fun % (x, y: DiffType): DiffType
    [native("_Float_opMod")] fun % (x, y: Float): Float
    [native("_Double_opMod")] fun % (x, y: Double): Double

    // Unary +
    [native("_Byte_opPlus1")] fun + (x: Byte): Byte
    [native("_UByte_opPlus1")] fun + (x: UByte): UByte
    [native("_Short_opPlus1")] fun + (x: Short): Short
    [native("_UShort_opPlus1")] fun + (x: UShort): UShort
    [native("_Int_opPlus1")] fun + (x: Int): Int
    [native("_UInt_opPlus1")] fun + (x: UInt): UInt
    [native("_Long_opPlus1")] fun + (x: Long): Long
    [native("_ULong_opPlus1")] fun + (x: ULong): ULong
    [native("_SizeType_opPlus1")] fun + (x: SizeType): SizeType
    [native("_DiffType_opPlus1")] fun + (x: DiffType): DiffType
    [native("_Float_opPlus1")] fun + (x: Float): Float
    [native("_Double_opPlus1")] fun + (x: Double): Double

    // Unary - (only for signed types)
    [native("_Byte_opMinus1")] fun - (x: Byte): Byte
    [native("_Short_opMinus1")] fun - (x: Short): Short
    [native("_Int_opMinus1")] fun - (x: Int): Int
    [native("_Long_opMinus1")] fun - (x: Long): Long
    [native("_DiffType_opMinus1")] fun - (x: DiffType): DiffType
    [native("_Float_opMinus1")] fun - (x: Float): Float
    [native("_Double_opMinus1")] fun - (x: Double): Double

    fun pre_++(n: !Byte): Byte { n+=Byte(1); return n; }
    fun pre_++(n: !UByte): UByte { n+=UByte(1); return n; }
    fun pre_++(n: !Short): Short { n+=Short(1); return n; }
    fun pre_++(n: !UShort): UShort { n+=UShort(1); return n; }
    fun pre_++(n: !Int): Int { n+=1; return n; }
    fun pre_++(n: !UInt): UInt { n+=UInt(1); return n; }
    fun pre_++(n: !Long): Long { n+=Long(1); return n; }
    fun pre_++(n: !ULong): ULong { n+=ULong(1); return n; }
    fun pre_++(n: !SizeType): SizeType { n+=SizeType(1); return n; }
    fun pre_++(n: !DiffType): DiffType { n+=DiffType(1); return n; }

    fun pre_--(n: !Byte): Byte { n-=Byte(1); return n; }
    fun pre_--(n: !UByte): UByte { n-=UByte(1); return n; }
    fun pre_--(n: !Short): Short { n-=Short(1); return n; }
    fun pre_--(n: !UShort): UShort { n-=UShort(1); return n; }
    fun pre_--(n: !Int): Int { n-=1; return n; }
    fun pre_--(n: !UInt): UInt { n-=UInt(1); return n; }
    fun pre_--(n: !Long): Long { n-=Long(1); return n; }
    fun pre_--(n: !ULong): ULong { n-=ULong(1); return n; }
    fun pre_--(n: !SizeType): SizeType { n-=SizeType(1); return n; }
    fun pre_--(n: !DiffType): DiffType { n-=DiffType(1); return n; }

    fun post_++(n: !Byte): Byte { let old = n; n+=Byte(1); return old; }
    fun post_++(n: !UByte): UByte { let old = n; n+=UByte(1); return old; }
    fun post_++(n: !Short): Short { let old = n; n+=Short(1); return old; }
    fun post_++(n: !UShort): UShort { let old = n; n+=UShort(1); return old; }
    fun post_++(n: !Int): Int { let old = n; n+=1; return old; }
    fun post_++(n: !UInt): UInt { let old = n; n+=UInt(1); return old; }
    fun post_++(n: !Long): Long { let old = n; n+=Long(1); return old; }
    fun post_++(n: !ULong): ULong { let old = n; n+=ULong(1); return old; }
    fun post_++(n: !SizeType): SizeType { let old = n; n+=SizeType(1); return old; }
    fun post_++(n: !DiffType): DiffType { let old = n; n+=DiffType(1); return old; }

    fun post_--(n: !Byte): Byte { let old = n; n-=Byte(1); return old; }
    fun post_--(n: !UByte): UByte { let old = n; n-=UByte(1); return old; }
    fun post_--(n: !Short): Short { let old = n; n-=Short(1); return old; }
    fun post_--(n: !UShort): UShort { let old = n; n-=UShort(1); return old; }
    fun post_--(n: !Int): Int { let old = n; n-=1; return old; }
    fun post_--(n: !UInt): UInt { let old = n; n-=UInt(1); return old; }
    fun post_--(n: !Long): Long { let old = n; n-=Long(1); return old; }
    fun post_--(n: !ULong): ULong { let old = n; n-=ULong(1); return old; }
    fun post_--(n: !SizeType): SizeType { let old = n; n-=SizeType(1); return old; }
    fun post_--(n: !DiffType): DiffType { let old = n; n-=DiffType(1); return old; }

////////////////////////////////////////////////////////////////////////////////
/// StringRef
///

/// String class that DOES NOT have ownership of the characters; it simply refers to another string
[bitcopiable, native("StringRef")]
datatype StringRef
    using RetType = @Char

    begin: @Byte
    end: @Byte

[protected]
    fun ctor(this: !StringRef)
        begin := null
        end := null

    fun ctor(this: !StringRef, size: SizeType)
        begin := malloc(size + 1)
        end := ptrAdd(begin, size)
        end = Byte(0)
    fun ctor(this: !StringRef, other: StringRef)
        begin := other.begin
        end := other.end
    fun ctor(this: !StringRef, begin, end: @Byte)
        this.begin := begin
        this.end := end
    fun dtor(this: !StringRef) {}

    fun isEmpty(this: StringRef)            = ptrDiff(end, begin) == 0
    fun size(this: StringRef): SizeType     = ptrDiff(end, begin)

    fun front(this: StringRef): @Char                 = reinterpretCast(@Char, begin)
    fun back(this: StringRef): @Char                  = reinterpretCast(@Char, ptrSub(end, 1))
    fun ()(this: StringRef) : @Char                   = reinterpretCast(@Char, begin)
    fun ()(this: StringRef, index: SizeType): @Char   = reinterpretCast(@Char, ptrAdd(begin, index))
    fun at(this: StringRef, index: SizeType): @Char   = reinterpretCast(@Char, ptrAdd(begin, index))

    fun popFront(this: !StringRef)                { begin := ptrAdd(begin, 1); }
    fun popBack(this: !StringRef)                 { end := ptrSub(end, 1); }
    fun popFront(this: !StringRef, n: SizeType)   { begin := ptrAdd(begin, n); }
    fun popBack(this: !StringRef, n: SizeType)    { end := ptrSub(end, n); }

    fun subrange(this: StringRef, index: SizeType, num: SizeType): StringRef
        return StringRef(ptrAdd(begin, index), ptrAdd(begin, index+num))

    fun cStr(this: StringRef): @Char = reinterpretCast(@Char, begin)

fun = (this: !StringRef, src: StringRef): !StringRef
    begin := src.begin
    end := src.end

    return this

[protected, autoCt]
fun == (this, other: StringRef): Bool
    let s = this.size
    if s != other.size
        return false
    var i: SizeType = 0
    while i<s ; i+=1
        if this.at(i) != other.at(i) return false
    return true

    //return 0 == strcmp(begin, other.begin)

[autoCt, native("_String_fromCString")]
fun fromCString(s: @Char): StringRef
    let len = cStringLen(s)
    var res: StringRef
    res.begin := reinterpretCast(@Byte, s)
    res.end := ptrAdd(res.begin, len)
    return res

fun cStringLen(s: @Char): SizeType
    var p: @Byte
    p := reinterpretCast(@Byte, s)
    let len: SizeType = 0
    while p != Byte(0) ; p:=ptrAdd(p, 1)
        len = len+1
    return len

[autoCt]
    fun char(this: StringRef): Char
        if this.isEmpty return Char()
        else return this.at(0)

    fun + (x,y: StringRef): StringRef
        let sz1 = x.size()
        let sz2 = y.size()
        var res: StringRef = sz1 + sz2
        memcpy(res.begin, x.begin, sz1)
        memcpy(ptrAdd(res.begin, sz1), y.begin, sz2)
        return res

    fun + (x: StringRef, y: Char): StringRef
        let sz1 = x.size()
        let sz2 = 1
        var res: StringRef = sz1 + sz2
        memcpy(res.begin, x.begin, sz1)
        memcpy(ptrAdd(res.begin, sz1), reinterpretCast(@Byte, y), sz2)

        return res

////////////////////////////////////////////////////////////////////////////////
/// Some common functions used by various standard parts of the library
///

fun cast()
fun reinterpretCast()
fun construct()
[ct]
    fun sizeOf(): SizeType
    fun typeOf(): Type
    fun isValid(): Bool
    fun isValidAndTrue(): Bool
    fun valueIfValid(): Bool
    fun ctEval()
    [native("$injectBackendCode")] fun injectBackendCode(code: StringRef)
    [native("$injectBackendCodeCt")] fun injectBackendCodeCt(code: StringRef)

/// Type used to represent an untyped pointer
[bitcopiable]
datatype UntypedPtr = @Byte

[autoCt]
    [native("implOpRefEQ")] fun implOpRefEQ(x,y: @Byte): Bool
    [native("implOpRefNE")] fun implOpRefNE(x,y: @Byte): Bool
    [native("isNullRef")] fun isNullRef(x: @Byte): Bool

    [native("implOpRefEQ")] fun implOpRefEQ(x,y: UntypedPtr): Bool
    [native("implOpRefNE")] fun implOpRefNE(x,y: UntypedPtr): Bool
    [native("isNullRef")] fun isNullRef(x: UntypedPtr): Bool

/// This implements the ternary operator from other languages: cond ? alt1 : alt2
[ct, native("$meta.ife")] fun ife()

////////////////////////////////////////////////////////////////////////////////
/// Type helpers
///

package TypeOp
    [ct]
        [native("$typeDescription")] fun description(t: Type): StringRef
        [native("$typeHasStorage")] fun hasStorage(t: Type): Bool
        [native("$typeMode")] fun mode(t: Type): Int    // 0=unspecified, 1=rt, 2=ct
        [native("$typeCanBeUsedAtRt")] fun canBeUsedAtRt(t: Type): Bool
        [native("$typeNumRef")] fun numRef(t: Type): Int
        [native("$typeChangeMode")] fun changeMode(t: Type, mode: Int): Type
        [native("$typeChangeRefCount")] fun changeRefCount(t: Type, numRef: Int): Type
        [native("$typeRemoveCat")] fun removeCat(t: Type): Type
        [native("$typeIsBitcopiable")] fun isBitcopiable(t: Type): Bool

    [ctGeneric]
        fun isRef(t: Type) = 0<numRef(t)
        fun addRef(t: Type) = changeRefCount(t, numRef(t)+1)
        fun removeRef(t: Type) = ife(isRef(t), changeRefCount(t, numRef(t)-1), t)
        fun removeAllRef(t: Type) = changeRefCount(t, 0)
        fun atLeastOneRef(t: Type): Type = ife(isRef(t), t, addRef(t))

    fun copyVal(val: AnyType const): typeOf(val)
    fun copyVal(val: !AnyType): typeOf(val)
    fun copyVal(val: @AnyType): removeRef(typeOf(val))

/// Add reference operator
[ct, native("$typeAddRef")] fun pre_@ (t: Type): Type
//[ctGeneric] fun pre_@ (t: Type) = TypeOp.addRef(t)
/// Remove reference operator
[ctGeneric] fun pre_-@ (t: Type) = TypeOp.removeRef(t)
/// Operator to ensure at least one refenrence
[ctGeneric] fun pre_!@ (t: Type) = TypeOp.atLeastOneRef(t)

/// Comparison between types
[ct, native("$typeEQ")] fun == (x, y: Type): Bool

[ct, native("$ct")] fun ct(t: Type): Type
[ct, native("$rt")] fun rt(t: Type): Type

[ct, native('$const')] fun const(t: Type): Type
[ct, native('$mut')] fun mut(t: Type): Type
[ct, native('$tmp')] fun tmp(t: Type): Type
[ct, native('$mut')] fun pre_!(t: Type): Type

[ct, native("$convertsTo")] fun convertsTo(src, dest: Type): Bool
[ct, native("$staticBuffer")] fun static_buffer(n: SizeType): Type
[ct, native("$commonType")] fun commonType(t, u: Type): Type

/// Concept that is satisfied by any type
concept AnyType(x) // Always true

/// Gets an object of the given type
fun valueOfType(t: Type): t
fun #$(t: Type): t

////////////////////////////////////////////////////////////////////////////////
/// Some low-level helper functions
///

[native("malloc")] fun malloc(size: SizeType): @Byte
[native("calloc")] fun calloc(size, count: SizeType): @Byte
[native("realloc"), autoCt] fun realloc(p: @Byte, size: SizeType): @Byte
[native("free"), autoCt] fun free(p: @Byte)
[native("ptrAdd"), autoCt] fun ptrAdd(p: @Byte, n: SizeType): @Byte
[native("ptrSub"), autoCt] fun ptrSub(p: @Byte, n: SizeType): @Byte
[native("ptrDiff"), autoCt] fun ptrDiff(p1, p2: @Byte): DiffType
[native("ptrAdd"), autoCt] fun ptrAdd(p: UntypedPtr, n: SizeType): UntypedPtr
[native("ptrSub"), autoCt] fun ptrSub(p: UntypedPtr, n: SizeType): UntypedPtr
[native("ptrDiff"), autoCt] fun ptrDiff(p1, p2: UntypedPtr): DiffType
[native("_spr_memcpy"), autoCt] fun memcpy(dest, src: @Byte, size: SizeType)
[native("_spr_memmove"), autoCt] fun memmove(dest, src: @Byte, size: SizeType)
[native("_spr_memset"), autoCt] fun memset(dest: @Byte, val: Byte, count: SizeType)
[native("strcmp"), autoCt] fun strcmp(lhs, rhs: @Byte): Int
[native("system")] fun systemNative(x: @Char)
[native("sleep")] fun sleep(x: Int)

////////////////////////////////////////////////////////////////////////////////
/// Range is such a fundamental concept
///

concept Range(x) if (
       typeOf(x.RetType) == Type
    && typeOf(x.isEmpty) == Bool
    && typeOf(x.front) == x.RetType
    && isValid(x.popFront)
)

