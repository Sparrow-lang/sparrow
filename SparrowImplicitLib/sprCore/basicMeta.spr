import basicDecls(UntypedPtr, Byte, StringRef, Null, pre_@)

[ct]
    /// The type used to represent a compiler AST node
    [bitcopiable]
    datatype CompilerAstNode = @Byte

    /// Taking an AST node, this will evaluate the node and produce the corresponding code
    /// Opposite of astLift
    [native("$meta.astEval")]
    fun astEval(node: CompilerAstNode): CompilerAstNode

    /// Given any Sparrow node as parameter, this will transform it into an AST node
    /// Opposite of astEval
    [native("$meta.astLift")]
    fun astLift(node: CompilerAstNode): CompilerAstNode
