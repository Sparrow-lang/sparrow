import basicDecls(Number, Char, Bool, StringRef, Int8, UInt8, Int16, UInt16, Int, Int32, UInt32, Int64, UInt64, Float32, Float64, Float, Range)
import streamBasic(FlushHelperClass)

var cout: ConsoleOutputStream

datatype ConsoleOutputStream
    ;

fun <<<(this: ConsoleOutputStream, x: Number)       { _Impl.write(x) }
fun <<<(this: ConsoleOutputStream, x: Char)         { _Impl.write(x) }
fun <<<(this: ConsoleOutputStream, x: Bool)         { if x ; this <<< "true" else this <<< "false" }
fun <<<(this: ConsoleOutputStream, x: StringRef)    { for c = x { _Impl.write(c) } }

// This stream supports flush
[protected]
fun flush(this: ConsoleOutputStream, x: FlushHelperClass) { _Impl.flushOutput }

package _Impl
    [native("writeInt8")] fun write(x: Int8)
    [native("writeInt8")] fun write(x: UInt8)
    [native("writeInt16")] fun write(x: Int16)
    [native("writeInt16")] fun write(x: UInt16)
    [native("writeInt32")] fun write(x: Int32)
    [native("writeUInt32")] fun write(x: UInt32)
    [native("writeInt64")] fun write(x: Int64)
    [native("writeUInt64")] fun write(x: UInt64)
    [native("writeFloat32")] fun write(x: Float32)
    [native("writeFloat64")] fun write(x: Float64)
    [native("writeChar")] fun write(x: Char)

    [native("flushOutput")] fun flushOutput

