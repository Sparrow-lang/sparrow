;rtct

; Initializations
define void @_zero_init_1(i1* %$this) alwaysinline
{
  store i1 0, i1* %$this
  ret void
}
define void @_zero_init_8(i8* %$this) alwaysinline
{
  store i8 0, i8* %$this
  ret void
}
define void @_zero_init_16(i16* %$this) alwaysinline
{
  store i16 0, i16* %$this
  ret void
}
define void @_zero_init_32(i32* %$this) alwaysinline
{
  store i32 0, i32* %$this
  ret void
}
define void @_zero_init_64(i64* %$this) alwaysinline
{
  store i64 0, i64* %$this
  ret void
}
define void @_zero_init_f(float* %$this) alwaysinline
{
  store float 0.0, float* %$this
  ret void
}
define void @_zero_init_d(double* %$this) alwaysinline
{
  store double 0.0, double* %$this
  ret void
}

; Same type assignments
define void @_ass_1_1(i1* %$this, i1 %src) alwaysinline
{
  store i1 %src, i1* %$this
  ret void
}
define void @_ass_8_8(i8* %$this, i8 %src) alwaysinline
{
  store i8 %src, i8* %$this
  ret void
}
define void @_ass_16_16(i16* %$this, i16 %src) alwaysinline
{
  store i16 %src, i16* %$this
  ret void
}
define void @_ass_32_32(i32* %$this, i32 %src) alwaysinline
{
  store i32 %src, i32* %$this
  ret void
}
define void @_ass_64_64(i64* %$this, i64 %src) alwaysinline
{
  store i64 %src, i64* %$this
  ret void
}
define void @_ass_f_f(float* %$this, float %src) alwaysinline
{
  store float %src, float* %$this
  ret void
}
define void @_ass_d_d(double* %$this, double %src) alwaysinline
{
  store double %src, double* %$this
  ret void
}

; Truncates
define void @_ass_8_16(i8* %$this, i16 %src) alwaysinline
{
  %1 = trunc i16 %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_8_32(i8* %$this, i32 %src) alwaysinline
{
  %1 = trunc i32 %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_8_64(i8* %$this, i64 %src) alwaysinline
{
  %1 = trunc i64 %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_16_32(i16* %$this, i32 %src) alwaysinline
{
  %1 = trunc i32 %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_16_64(i16* %$this, i64 %src) alwaysinline
{
  %1 = trunc i64 %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_32_64(i32* %$this, i64 %src) alwaysinline
{
  %1 = trunc i64 %src to i32
  store i32 %1, i32* %$this
  ret void
}

; Extends
define void @_ass_16_8s(i16* %$this, i8 %src) alwaysinline
{
  %1 = sext i8 %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_16_8z(i16* %$this, i8 %src) alwaysinline
{
  %1 = zext i8 %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_32_8s(i32* %$this, i8 %src) alwaysinline
{
  %1 = sext i8 %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_32_8z(i32* %$this, i8 %src) alwaysinline
{
  %1 = zext i8 %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_32_16s(i32* %$this, i16 %src) alwaysinline
{
  %1 = sext i16 %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_32_16z(i32* %$this, i16 %src) alwaysinline
{
  %1 = zext i16 %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_64_8s(i64* %$this, i8 %src) alwaysinline
{
  %1 = sext i8 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_8z(i64* %$this, i8 %src) alwaysinline
{
  %1 = zext i8 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_16s(i64* %$this, i16 %src) alwaysinline
{
  %1 = sext i16 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_16z(i64* %$this, i16 %src) alwaysinline
{
  %1 = zext i16 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_32s(i64* %$this, i32 %src) alwaysinline
{
  %1 = sext i32 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_32z(i64* %$this, i32 %src) alwaysinline
{
  %1 = zext i32 %src to i64
  store i64 %1, i64* %$this
  ret void
}

; Floating to integral
define void @_ass_i8_f(i8* %$this, float %src) alwaysinline
{
  %1 = fptosi float %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_i8_d(i8* %$this, double %src) alwaysinline
{
  %1 = fptosi double %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_u8_f(i8* %$this, float %src) alwaysinline
{
  %1 = fptoui float %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_u8_d(i8* %$this, double %src) alwaysinline
{
  %1 = fptoui double %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_i16_f(i16* %$this, float %src) alwaysinline
{
  %1 = fptosi float %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_i16_d(i16* %$this, double %src) alwaysinline
{
  %1 = fptosi double %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_u16_f(i16* %$this, float %src) alwaysinline
{
  %1 = fptoui float %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_u16_d(i16* %$this, double %src) alwaysinline
{
  %1 = fptoui double %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_i32_f(i32* %$this, float %src) alwaysinline
{
  %1 = fptosi float %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_i32_d(i32* %$this, double %src) alwaysinline
{
  %1 = fptosi double %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_u32_f(i32* %$this, float %src) alwaysinline
{
  %1 = fptoui float %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_u32_d(i32* %$this, double %src) alwaysinline
{
  %1 = fptoui double %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_i64_f(i64* %$this, float %src) alwaysinline
{
  %1 = fptosi float %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_i64_d(i64* %$this, double %src) alwaysinline
{
  %1 = fptosi double %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_u64_f(i64* %$this, float %src) alwaysinline
{
  %1 = fptoui float %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_u64_d(i64* %$this, double %src) alwaysinline
{
  %1 = fptoui double %src to i64
  store i64 %1, i64* %$this
  ret void
}

; Something to floating
define void @_ass_f_i8(float* %$this, i8 %src) alwaysinline
{
  %1 = sitofp i8 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_u8(float* %$this, i8 %src) alwaysinline
{
  %1 = uitofp i8 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_i16(float* %$this, i16 %src) alwaysinline
{
  %1 = sitofp i16 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_u16(float* %$this, i16 %src) alwaysinline
{
  %1 = uitofp i16 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_i32(float* %$this, i32 %src) alwaysinline
{
  %1 = sitofp i32 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_u32(float* %$this, i32 %src) alwaysinline
{
  %1 = uitofp i32 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_i64(float* %$this, i64 %src) alwaysinline
{
  %1 = sitofp i64 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_u64(float* %$this, i64 %src) alwaysinline
{
  %1 = uitofp i64 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_d(float* %$this, double %src) alwaysinline
{
  %1 = fptrunc double %src to float
  store float %1, float* %$this
  ret void
}

define void @_ass_d_i8(double* %$this, i8 %src) alwaysinline
{
  %1 = sitofp i8 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_u8(double* %$this, i8 %src) alwaysinline
{
  %1 = uitofp i8 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_i16(double* %$this, i16 %src) alwaysinline
{
  %1 = sitofp i16 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_u16(double* %$this, i16 %src) alwaysinline
{
  %1 = uitofp i16 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_i32(double* %$this, i32 %src) alwaysinline
{
  %1 = sitofp i32 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_u32(double* %$this, i32 %src) alwaysinline
{
  %1 = uitofp i32 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_i64(double* %$this, i64 %src) alwaysinline
{
  %1 = sitofp i64 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_u64(double* %$this, i64 %src) alwaysinline
{
  %1 = uitofp i64 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_f(double* %$this, float %src) alwaysinline
{
  %1 = fpext float %src to double
  store double %1, double* %$this
  ret void
}


define i1 @_Bool_opAssign(i1* %x, i1 %y) alwaysinline
{
  store i1 %y, i1* %x
  ret i1 %y
}
define i1 @_Bool_opOr(i1 %x, i1 %y) alwaysinline
{
  %1 = or i1 %x, %y
  ret i1 %1
}
define i1 @_Bool_opXor(i1 %x, i1 %y) alwaysinline
{
  %1 = xor i1 %x, %y
  ret i1 %1
}
define i1 @_Bool_opAnd(i1 %x, i1 %y) alwaysinline
{
  %1 = and i1 %x, %y
  ret i1 %1
}
define i1 @_Bool_opEQ(i1 %x, i1 %y) alwaysinline
{
  %1 = icmp eq i1 %x, %y
  ret i1 %1
}
define i1 @_Bool_opNE(i1 %x, i1 %y) alwaysinline
{
  %1 = icmp ne i1 %x, %y
  ret i1 %1
}
define i1 @_Bool_opNeg(i1 %x) alwaysinline
{
  %1 = xor i1 %x, 1
  ret i1 %1
}

define i8 @_Int8_opAssign(i8* %x, i8 %y) alwaysinline
{
  store i8 %y, i8* %x
  ret i8 %y
}
define i1 @_Int8_opEQ(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp eq i8 %x, %y
  ret i1 %1
}
define i1 @_Int8_opNE(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp ne i8 %x, %y
  ret i1 %1
}
define i1 @_Int8_opLT(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp slt i8 %x, %y
  ret i1 %1
}
define i1 @_Int8_opGT(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp sgt i8 %x, %y
  ret i1 %1
}
define i1 @_Int8_opLE(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp sle i8 %x, %y
  ret i1 %1
}
define i1 @_Int8_opGE(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp sge i8 %x, %y
  ret i1 %1
}
define i8 @_Int8_opPlus(i8 %x, i8 %y) alwaysinline
{
  %1 = add i8 %x, %y
  ret i8 %1
}
define i8 @_Int8_opMinus(i8 %x, i8 %y) alwaysinline
{
  %1 = sub i8 %x, %y
  ret i8 %1
}
define i8 @_Int8_opMul(i8 %x, i8 %y) alwaysinline
{
  %1 = mul i8 %x, %y
  ret i8 %1
}
define i8 @_Int8_opDiv(i8 %x, i8 %y) alwaysinline
{
  %1 = sdiv i8 %x, %y
  ret i8 %1
}
define i8 @_Int8_opMod(i8 %x, i8 %y) alwaysinline
{
  %1 = srem i8 %x, %y
  ret i8 %1
}
define i8 @_Int8_opPlus1(i8 %x) alwaysinline
{
  ret i8 %x
}
define i8 @_Int8_opMinus1(i8 %x) alwaysinline
{
  %1 = sub i8 0, %x
  ret i8 %1
}

define i8 @_UInt8_opAssign(i8* %x, i8 %y) alwaysinline
{
  store i8 %y, i8* %x
  ret i8 %y
}
define i1 @_UInt8_opEQ(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp eq i8 %x, %y
  ret i1 %1
}
define i1 @_UInt8_opNE(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp ne i8 %x, %y
  ret i1 %1
}
define i1 @_UInt8_opLT(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp ult i8 %x, %y
  ret i1 %1
}
define i1 @_UInt8_opGT(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp ugt i8 %x, %y
  ret i1 %1
}
define i1 @_UInt8_opLE(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp ule i8 %x, %y
  ret i1 %1
}
define i1 @_UInt8_opGE(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp uge i8 %x, %y
  ret i1 %1
}
define i8 @_UInt8_opPlus(i8 %x, i8 %y) alwaysinline
{
  %1 = add i8 %x, %y
  ret i8 %1
}
define i8 @_UInt8_opMinus(i8 %x, i8 %y) alwaysinline
{
  %1 = sub i8 %x, %y
  ret i8 %1
}
define i8 @_UInt8_opMul(i8 %x, i8 %y) alwaysinline
{
  %1 = mul i8 %x, %y
  ret i8 %1
}
define i8 @_UInt8_opDiv(i8 %x, i8 %y) alwaysinline
{
  %1 = udiv i8 %x, %y
  ret i8 %1
}
define i8 @_UInt8_opMod(i8 %x, i8 %y) alwaysinline
{
  %1 = urem i8 %x, %y
  ret i8 %1
}
define i8 @_UInt8_opPlus1(i8 %x) alwaysinline
{
  ret i8 %x
}

define i16 @_Int16_opAssign(i16* %x, i16 %y) alwaysinline
{
  store i16 %y, i16* %x
  ret i16 %y
}
define i1 @_Int16_opEQ(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp eq i16 %x, %y
  ret i1 %1
}
define i1 @_Int16_opNE(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp ne i16 %x, %y
  ret i1 %1
}
define i1 @_Int16_opLT(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp slt i16 %x, %y
  ret i1 %1
}
define i1 @_Int16_opGT(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp sgt i16 %x, %y
  ret i1 %1
}
define i1 @_Int16_opLE(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp sle i16 %x, %y
  ret i1 %1
}
define i1 @_Int16_opGE(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp sge i16 %x, %y
  ret i1 %1
}
define i16 @_Int16_opPlus(i16 %x, i16 %y) alwaysinline
{
  %1 = add i16 %x, %y
  ret i16 %1
}
define i16 @_Int16_opMinus(i16 %x, i16 %y) alwaysinline
{
  %1 = sub i16 %x, %y
  ret i16 %1
}
define i16 @_Int16_opMul(i16 %x, i16 %y) alwaysinline
{
  %1 = mul i16 %x, %y
  ret i16 %1
}
define i16 @_Int16_opDiv(i16 %x, i16 %y) alwaysinline
{
  %1 = sdiv i16 %x, %y
  ret i16 %1
}
define i16 @_Int16_opMod(i16 %x, i16 %y) alwaysinline
{
  %1 = srem i16 %x, %y
  ret i16 %1
}
define i16 @_Int16_opPlus1(i16 %x) alwaysinline
{
  ret i16 %x
}
define i16 @_Int16_opMinus1(i16 %x) alwaysinline
{
  %1 = sub i16 0, %x
  ret i16 %1
}

define i16 @_UInt16_opAssign(i16* %x, i16 %y) alwaysinline
{
  store i16 %y, i16* %x
  ret i16 %y
}
define i1 @_UInt16_opEQ(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp eq i16 %x, %y
  ret i1 %1
}
define i1 @_UInt16_opNE(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp ne i16 %x, %y
  ret i1 %1
}
define i1 @_UInt16_opLT(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp ult i16 %x, %y
  ret i1 %1
}
define i1 @_UInt16_opGT(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp ugt i16 %x, %y
  ret i1 %1
}
define i1 @_UInt16_opLE(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp ule i16 %x, %y
  ret i1 %1
}
define i1 @_UInt16_opGE(i16 %x, i16 %y) alwaysinline
{
  %1 = icmp uge i16 %x, %y
  ret i1 %1
}
define i16 @_UInt16_opPlus(i16 %x, i16 %y) alwaysinline
{
  %1 = add i16 %x, %y
  ret i16 %1
}
define i16 @_UInt16_opMinus(i16 %x, i16 %y) alwaysinline
{
  %1 = sub i16 %x, %y
  ret i16 %1
}
define i16 @_UInt16_opMul(i16 %x, i16 %y) alwaysinline
{
  %1 = mul i16 %x, %y
  ret i16 %1
}
define i16 @_UInt16_opDiv(i16 %x, i16 %y) alwaysinline
{
  %1 = udiv i16 %x, %y
  ret i16 %1
}
define i16 @_UInt16_opMod(i16 %x, i16 %y) alwaysinline
{
  %1 = urem i16 %x, %y
  ret i16 %1
}
define i16 @_UInt16_opPlus1(i16 %x) alwaysinline
{
  ret i16 %x
}

define i32 @_Int32_opAssign(i32* %x, i32 %y) alwaysinline
{
  store i32 %y, i32* %x
  ret i32 %y
}
define i1 @_Int32_opEQ(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp eq i32 %x, %y
  ret i1 %1
}
define i1 @_Int32_opNE(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp ne i32 %x, %y
  ret i1 %1
}
define i1 @_Int32_opLT(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp slt i32 %x, %y
  ret i1 %1
}
define i1 @_Int32_opGT(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp sgt i32 %x, %y
  ret i1 %1
}
define i1 @_Int32_opLE(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp sle i32 %x, %y
  ret i1 %1
}
define i1 @_Int32_opGE(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp sge i32 %x, %y
  ret i1 %1
}
define i32 @_Int32_opPlus(i32 %x, i32 %y) alwaysinline
{
  %1 = add i32 %x, %y
  ret i32 %1
}
define i32 @_Int32_opMinus(i32 %x, i32 %y) alwaysinline
{
  %1 = sub i32 %x, %y
  ret i32 %1
}
define i32 @_Int32_opMul(i32 %x, i32 %y) alwaysinline
{
  %1 = mul i32 %x, %y
  ret i32 %1
}
define i32 @_Int32_opDiv(i32 %x, i32 %y) alwaysinline
{
  %1 = sdiv i32 %x, %y
  ret i32 %1
}
define i32 @_Int32_opMod(i32 %x, i32 %y) alwaysinline
{
  %1 = srem i32 %x, %y
  ret i32 %1
}
define i32 @_Int32_opPlus1(i32 %x) alwaysinline
{
  ret i32 %x
}
define i32 @_Int32_opMinus1(i32 %x) alwaysinline
{
  %1 = sub i32 0, %x
  ret i32 %1
}

define i32 @_UInt32_opAssign(i32* %x, i32 %y) alwaysinline
{
  store i32 %y, i32* %x
  ret i32 %y
}
define i1 @_UInt32_opEQ(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp eq i32 %x, %y
  ret i1 %1
}
define i1 @_UInt32_opNE(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp ne i32 %x, %y
  ret i1 %1
}
define i1 @_UInt32_opLT(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp ult i32 %x, %y
  ret i1 %1
}
define i1 @_UInt32_opGT(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp ugt i32 %x, %y
  ret i1 %1
}
define i1 @_UInt32_opLE(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp ule i32 %x, %y
  ret i1 %1
}
define i1 @_UInt32_opGE(i32 %x, i32 %y) alwaysinline
{
  %1 = icmp uge i32 %x, %y
  ret i1 %1
}
define i32 @_UInt32_opPlus(i32 %x, i32 %y) alwaysinline
{
  %1 = add i32 %x, %y
  ret i32 %1
}
define i32 @_UInt32_opMinus(i32 %x, i32 %y) alwaysinline
{
  %1 = sub i32 %x, %y
  ret i32 %1
}
define i32 @_UInt32_opMul(i32 %x, i32 %y) alwaysinline
{
  %1 = mul i32 %x, %y
  ret i32 %1
}
define i32 @_UInt32_opDiv(i32 %x, i32 %y) alwaysinline
{
  %1 = udiv i32 %x, %y
  ret i32 %1
}
define i32 @_UInt32_opMod(i32 %x, i32 %y) alwaysinline
{
  %1 = urem i32 %x, %y
  ret i32 %1
}
define i32 @_UInt32_opPlus1(i32 %x) alwaysinline
{
  ret i32 %x
}

define i64 @_Int64_opAssign(i64* %x, i64 %y) alwaysinline
{
  store i64 %y, i64* %x
  ret i64 %y
}
define i1 @_Int64_opEQ(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}
define i1 @_Int64_opNE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}
define i1 @_Int64_opLT(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp slt i64 %x, %y
  ret i1 %1
}
define i1 @_Int64_opGT(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp sgt i64 %x, %y
  ret i1 %1
}
define i1 @_Int64_opLE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp sle i64 %x, %y
  ret i1 %1
}
define i1 @_Int64_opGE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp sge i64 %x, %y
  ret i1 %1
}
define i64 @_Int64_opPlus(i64 %x, i64 %y) alwaysinline
{
  %1 = add i64 %x, %y
  ret i64 %1
}
define i64 @_Int64_opMinus(i64 %x, i64 %y) alwaysinline
{
  %1 = sub i64 %x, %y
  ret i64 %1
}
define i64 @_Int64_opMul(i64 %x, i64 %y) alwaysinline
{
  %1 = mul i64 %x, %y
  ret i64 %1
}
define i64 @_Int64_opDiv(i64 %x, i64 %y) alwaysinline
{
  %1 = sdiv i64 %x, %y
  ret i64 %1
}
define i64 @_Int64_opMod(i64 %x, i64 %y) alwaysinline
{
  %1 = srem i64 %x, %y
  ret i64 %1
}
define i64 @_Int64_opPlus1(i64 %x) alwaysinline
{
  ret i64 %x
}
define i64 @_Int64_opMinus1(i64 %x) alwaysinline
{
  %1 = sub i64 0, %x
  ret i64 %1
}

define i64 @_UInt64_opAssign(i64* %x, i64 %y) alwaysinline
{
  store i64 %y, i64* %x
  ret i64 %y
}
define i1 @_UInt64_opEQ(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}
define i1 @_UInt64_opNE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}
define i1 @_UInt64_opLT(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ult i64 %x, %y
  ret i1 %1
}
define i1 @_UInt64_opGT(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ugt i64 %x, %y
  ret i1 %1
}
define i1 @_UInt64_opLE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ule i64 %x, %y
  ret i1 %1
}
define i1 @_UInt64_opGE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp uge i64 %x, %y
  ret i1 %1
}
define i64 @_UInt64_opPlus(i64 %x, i64 %y) alwaysinline
{
  %1 = add i64 %x, %y
  ret i64 %1
}
define i64 @_UInt64_opMinus(i64 %x, i64 %y) alwaysinline
{
  %1 = sub i64 %x, %y
  ret i64 %1
}
define i64 @_UInt64_opMul(i64 %x, i64 %y) alwaysinline
{
  %1 = mul i64 %x, %y
  ret i64 %1
}
define i64 @_UInt64_opDiv(i64 %x, i64 %y) alwaysinline
{
  %1 = udiv i64 %x, %y
  ret i64 %1
}
define i64 @_UInt64_opMod(i64 %x, i64 %y) alwaysinline
{
  %1 = urem i64 %x, %y
  ret i64 %1
}
define i64 @_UInt64_opPlus1(i64 %x) alwaysinline
{
  ret i64 %x
}

define float @_Float32_opAssign(float* %x, float %y) alwaysinline
{
  store float %y, float* %x
  ret float %y
}
define i1 @_Float32_opEQ(float %x, float %y) alwaysinline
{
  %1 = fcmp ueq float %x, %y
  ret i1 %1
}
define i1 @_Float32_opNE(float %x, float %y) alwaysinline
{
  %1 = fcmp une float %x, %y
  ret i1 %1
}
define i1 @_Float32_opLT(float %x, float %y) alwaysinline
{
  %1 = fcmp ult float %x, %y
  ret i1 %1
}
define i1 @_Float32_opGT(float %x, float %y) alwaysinline
{
  %1 = fcmp ugt float %x, %y
  ret i1 %1
}
define i1 @_Float32_opLE(float %x, float %y) alwaysinline
{
  %1 = fcmp ule float %x, %y
  ret i1 %1
}
define i1 @_Float32_opGE(float %x, float %y) alwaysinline
{
  %1 = fcmp uge float %x, %y
  ret i1 %1
}
define float @_Float32_opPlus(float %x, float %y) alwaysinline
{
  %1 = fadd float %x, %y
  ret float %1
}
define float @_Float32_opMinus(float %x, float %y) alwaysinline
{
  %1 = fsub float %x, %y
  ret float %1
}
define float @_Float32_opMul(float %x, float %y) alwaysinline
{
  %1 = fmul float %x, %y
  ret float %1
}
define float @_Float32_opDiv(float %x, float %y) alwaysinline
{
  %1 = fdiv float %x, %y
  ret float %1
}
define float @_Float32_opPlus1(float %x) alwaysinline
{
  ret float %x
}
define float @_Float32_opMinus1(float %x) alwaysinline
{
  %1 = fsub float 0.0, %x
  ret float %1
}

define double @_Float64_opAssign(double* %x, double %y) alwaysinline
{
  store double %y, double* %x
  ret double %y
}
define i1 @_Float64_opEQ(double %x, double %y) alwaysinline
{
  %1 = fcmp ueq double %x, %y
  ret i1 %1
}
define i1 @_Float64_opNE(double %x, double %y) alwaysinline
{
  %1 = fcmp une double %x, %y
  ret i1 %1
}
define i1 @_Float64_opLT(double %x, double %y) alwaysinline
{
  %1 = fcmp ult double %x, %y
  ret i1 %1
}
define i1 @_Float64_opGT(double %x, double %y) alwaysinline
{
  %1 = fcmp ugt double %x, %y
  ret i1 %1
}
define i1 @_Float64_opLE(double %x, double %y) alwaysinline
{
  %1 = fcmp ule double %x, %y
  ret i1 %1
}
define i1 @_Float64_opGE(double %x, double %y) alwaysinline
{
  %1 = fcmp uge double %x, %y
  ret i1 %1
}
define double @_Float64_opPlus(double %x, double %y) alwaysinline
{
  %1 = fadd double %x, %y
  ret double %1
}
define double @_Float64_opMinus(double %x, double %y) alwaysinline
{
  %1 = fsub double %x, %y
  ret double %1
}
define double @_Float64_opMul(double %x, double %y) alwaysinline
{
  %1 = fmul double %x, %y
  ret double %1
}
define double @_Float64_opDiv(double %x, double %y) alwaysinline
{
  %1 = fdiv double %x, %y
  ret double %1
}
define double @_Float64_opPlus1(double %x) alwaysinline
{
  ret double %x
}
define double @_Float64_opMinus1(double %x) alwaysinline
{
  %1 = fsub double 0.0, %x
  ret double %1
}

define i8 @_Char_opAssign(i8* %x, i8 %y) alwaysinline
{
  store i8 %y, i8* %x
  ret i8 %y
}
define i1 @_Char_opEQ(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp eq i8 %x, %y
  ret i1 %1
}
define i1 @_Char_opNE(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp ne i8 %x, %y
  ret i1 %1
}
define i1 @_Char_opLT(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp slt i8 %x, %y
  ret i1 %1
}
define i1 @_Char_opGT(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp sgt i8 %x, %y
  ret i1 %1
}
define i1 @_Char_opLE(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp sle i8 %x, %y
  ret i1 %1
}
define i1 @_Char_opGE(i8 %x, i8 %y) alwaysinline
{
  %1 = icmp sge i8 %x, %y
  ret i1 %1
}

define i64 @_SizeType_opAssign(i64* %x, i64 %y) alwaysinline
{
  store i64 %y, i64* %x
  ret i64 %y
}
define i1 @_SizeType_opEQ(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}
define i1 @_SizeType_opNE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}
define i1 @_SizeType_opLT(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ult i64 %x, %y
  ret i1 %1
}
define i1 @_SizeType_opGT(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ugt i64 %x, %y
  ret i1 %1
}
define i1 @_SizeType_opLE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ule i64 %x, %y
  ret i1 %1
}
define i1 @_SizeType_opGE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp uge i64 %x, %y
  ret i1 %1
}
define i64 @_SizeType_opPlus(i64 %x, i64 %y) alwaysinline
{
  %1 = add i64 %x, %y
  ret i64 %1
}
define i64 @_SizeType_opPlusInt(i64 %x, i32 %y) alwaysinline
{
  %1 = sext i32 %y to i64
  %2 = add i64 %x, %1
  ret i64 %2
}
define i64 @_SizeType_opPlusInt1(i32 %x, i64 %y) alwaysinline
{
  %1 = sext i32 %x to i64
  %2 = add i64 %1, %y
  ret i64 %2
}
define i64 @_SizeType_opMinus(i64 %x, i64 %y) alwaysinline
{
  %1 = sub i64 %x, %y
  ret i64 %1
}
define i64 @_SizeType_opMinusInt(i64 %x, i32 %y) alwaysinline
{
  %1 = sext i32 %y to i64
  %2 = sub i64 %x, %1
  ret i64 %2
}
define i64 @_SizeType_opMinusInt1(i32 %x, i64 %y) alwaysinline
{
  %1 = sext i32 %x to i64
  %2 = sub i64 %1, %y
  ret i64 %2
}
define i64 @_SizeType_opMul(i64 %x, i64 %y) alwaysinline
{
  %1 = mul i64 %x, %y
  ret i64 %1
}
define i64 @_SizeType_opDiv(i64 %x, i64 %y) alwaysinline
{
  %1 = udiv i64 %x, %y
  ret i64 %1
}
define i64 @_SizeType_opMod(i64 %x, i64 %y) alwaysinline
{
  %1 = urem i64 %x, %y
  ret i64 %1
}
define i64 @_SizeType_opPlus1(i64 %x) alwaysinline
{
  ret i64 %x
}

define i64 @_DiffType_opAssign(i64* %x, i64 %y) alwaysinline
{
  store i64 %y, i64* %x
  ret i64 %y
}
define i1 @_DiffType_opEQ(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}
define i1 @_DiffType_opNE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}
define i1 @_DiffType_opLT(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp slt i64 %x, %y
  ret i1 %1
}
define i1 @_DiffType_opGT(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp sgt i64 %x, %y
  ret i1 %1
}
define i1 @_DiffType_opLE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp sle i64 %x, %y
  ret i1 %1
}
define i1 @_DiffType_opGE(i64 %x, i64 %y) alwaysinline
{
  %1 = icmp sge i64 %x, %y
  ret i1 %1
}
define i64 @_DiffType_opPlus(i64 %x, i64 %y) alwaysinline
{
  %1 = add i64 %x, %y
  ret i64 %1
}
define i64 @_DiffType_opPlusInt(i64 %x, i32 %y) alwaysinline
{
  %1 = sext i32 %y to i64
  %2 = add i64 %x, %1
  ret i64 %2
}
define i64 @_DiffType_opPlusInt1(i32 %x, i64 %y) alwaysinline
{
  %1 = sext i32 %x to i64
  %2 = add i64 %1, %y
  ret i64 %2
}
define i64 @_DiffType_opMinus(i64 %x, i64 %y) alwaysinline
{
  %1 = sub i64 %x, %y
  ret i64 %1
}
define i64 @_DiffType_opMinusInt(i64 %x, i32 %y) alwaysinline
{
  %1 = sext i32 %y to i64
  %2 = sub i64 %x, %1
  ret i64 %2
}
define i64 @_DiffType_opMinusInt1(i32 %x, i64 %y) alwaysinline
{
  %1 = sext i32 %x to i64
  %2 = sub i64 %1, %y
  ret i64 %2
}
define i64 @_DiffType_opMul(i64 %x, i64 %y) alwaysinline
{
  %1 = mul i64 %x, %y
  ret i64 %1
}
define i64 @_DiffType_opDiv(i64 %x, i64 %y) alwaysinline
{
  %1 = sdiv i64 %x, %y
  ret i64 %1
}
define i64 @_DiffType_opMod(i64 %x, i64 %y) alwaysinline
{
  %1 = srem i64 %x, %y
  ret i64 %1
}
define i64 @_DiffType_opPlus1(i64 %x) alwaysinline
{
  ret i64 %x
}
define i64 @_DiffType_opMinus1(i64 %x) alwaysinline
{
  %1 = sub i64 0, %x
  ret i64 %1
}
