import sprCore.basicDecls(AnyType, Number, Char, Bool, StringRef, Int8, Int, Int64, UInt64, Float, Null, isValid, &&, !, oper_precedence___fapp__, oper_precedence___dot__, typeOf, UntypedPtr)

// An output stream must accept the basic types
concept OutStream(x) if (
       isValid(x.<<<(1))
    && isValid(x.<<<(1L))
    && isValid(x.<<<(1.0))
    && isValid(x.<<<('c'.char))
    && isValid(x.<<<('string'))
    )

// If we define an ">>" operator in the type itself, make sure we can support the standard "<<" notation
fun << (s: !OutStream, x: AnyType): typeOf(s) if isValid(x >> s)
    x >> s
    return s

// If no ">>" operator is defined in the class, then try to place the input element in the stream
// The stream class must define an "<<<" operator for this element
fun << (s: !OutStream, x: AnyType): typeOf(s) if !isValid(x.>>(s)) && isValid(s.<<<(x))
    s.<<<(x)
    return s

let endl: EndLineHelperClass
let flush: FlushHelperClass

datatype EndLineHelperClass
    ;
fun >>(this: EndLineHelperClass, os: !OutStream)
    os << '\n'
datatype FlushHelperClass
    ;
fun >>(this: FlushHelperClass, os: !OutStream)
    [ct] if isValid(os.flush)
        os.flush

// TODO: make this work for streams other than ConsoleOutputStream
fun >>(p: UntypedPtr, os: !OutStream)
    _Impl.writeRef(p)

package _Impl
    [native("writePointer")] fun writeRef(x: UntypedPtr)
