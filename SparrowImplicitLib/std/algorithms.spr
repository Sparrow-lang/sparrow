module std.algorithms

import tuple(Tuple, ~)
import ranges

concept Swappable(x) if isValid(x.swap(x))

/// Return the maximum of the two values
fun max(value1, value2: AnyType): typeOf(value1)
    if value1 < value2
        return value2
    return value1

/// Return the minimum of the two values
fun min(value1, value2: AnyType): typeOf(value1)
    if value2 < value1
        return value2
    return value1

/// Return the maximum of the two values, given the less predicate
fun max(value1, value2: AnyType, lessPred: AnyType): typeOf(value1) if isValid(lessPred(value1, value2))
    if lessPred(value1, value2)
        return value2
    return value1

/// Return the minimum of the two values, given the less predicate
fun min(value1, value2: AnyType, lessPred: AnyType): typeOf(value1) if typeOf(lessPred(value1, value2)) == Bool
    if lessPred(value2, value1)
        return value2
    return value1

[autoCt]
    /// Swaps the two objects
    fun swap(a, b: !AnyType) if typeOf(a) == typeOf(b) && !Swappable(a)
        let tmp = a
        a = b
        b = tmp
    fun swap(a, b: !Swappable) if typeOf(a) == typeOf(b)
        a.swap(b)

/// Find the given value in the given range
fun find(r: Range, value: AnyType): typeOf(r) if isValid(*r == value)
    var rc = r
    while !!rc && !(*rc == value)
        ++rc
    return rc

/// Find in the range the first value that satisfy the given predicate
fun findIf(r: Range, pred: AnyType): typeOf(r) if typeOf(pred(*r)) == Bool
    var rc = r
    while !!rc && !pred(*rc)
        ++rc
    return rc

/// Finds the index of the given value in the range
/// Returns -1 if not found
fun indexOf(r: Range, value: AnyType): SizeType if isValid(*r == value)
    let n: !SizeType = 0
    for v: r.RetType = r
        if v == value
            return n
        ++n
    return SizeType(DiffType(-1))

/// Finds the index of the value that satisfy the given predicate
/// Returns -1 if not found
fun indexOfIf(r: Range, pred: AnyType): SizeType if typeOf(pred(*r)) == Bool
    let n: !SizeType = 0
    for v: r.RetType = r
        if pred(v)
            return n
        ++n
    return SizeType(DiffType(-1))

/// Find the first value from r1 that matches any value in r2
/// Returns the subrange of r1 that starts with that value
fun findFirstOf(r1, r2: Range): typeOf(r1) if isValid(*r1 == *r2)
    var r1c = r1
    while !!r1c ; r1c popFront
        for val: r2.RetType = r2
            if *r1c == val
                return r1c
    return r1c
/// Same as above, but uses a predicate for comparison
fun findFirstOfIf(r1, r2: Range, pred: AnyType): typeOf(r1) if typeOf(pred(*r1, *r2)) == Bool
    var r1c = r1
    while !!r1c ; r1c popFront
        for val: r2.RetType = r2
            if pred(*r1c, val)
                return r1c
    return r1c

/// Count how many values from the give range has the given value
fun count(range: Range, value: AnyType): SizeType if isValid(*range == value)
    let n: !SizeType = 0
    for v: range.RetType = range
        if v == value
            ++n
    return n

/// Count how many values from the given range satisfies the given predicate
fun countIf(range: Range, pred: AnyType): SizeType if typeOf(pred(*range)) == Bool
    let n: !SizeType = 0
    for v: range.RetType = range
        if pred(v)
            ++n
    return n

/// Check if the two given ranges are equal
fun equal(r1, r2: Range): Bool if isValid(*r1 == *r2)
    var r1c = r1
    var r2c = r2
    while !!r1c && !!r2c && *r1c == *r2c
        r1c popFront
        r2c popFront
    return !r1c && !r2c

/// Check if the two given ranges are satisfying the given equal predicate
fun equalIf(r1, r2: Range, pred: AnyType): Bool if typeOf(pred(*r1, *r2)) == Bool
    var r1c = r1
    var r2c = r2
    while !!r1c && !!r2c && pred(*r1c, *r2c)
        r1c popFront
        r2c popFront
    return !r1c && !r2c

/// Check if r1 starts with r2
fun startsWith(r1, r2: Range): Bool if isValid(*r1 == *r2)
    var r1c = r1
    var r2c = r2
    while !!r1c && !!r2c && *r1c == *r2c
        r1c popFront
        r2c popFront
    return !r2c

/// Check if r1 starts with r2 (according to the given equal predicate)
fun startsWithIf(r1, r2: Range, pred: AnyType): Bool if typeOf(pred(*r1, *r2)) == Bool
    var r1c = r1
    var r2c = r2
    while !!r1c && !!r2c && pred(*r1c, *r2c)
        r1c popFront
        r2c popFront
    return !r2c

/// Find the first occurrence of r2 in r1
/// Complexity: O(n^2)
fun findRange(r1, r2: Range): typeOf(r1) if isValid(*r1 == *r2)
    if !r1 || !r2
        return r1

    // Special case: r2 has only one value
    var tmp = r2
    tmp popFront
    if tmp isEmpty
        return find(r1, *r2)

    // General case
    var r1c = r1
    while !!r1c
        if r1c startsWith r2
            return r1c
        r1c popFront
    return r1c

/// Find the first occurrence of r2 in r1, according to the given equal predicate
/// Complexity: O(n^2)
fun findRangeIf(r1, r2: Range, pred: AnyType): typeOf(r1) if typeOf(pred(*r1, *r2)) == Bool
    if !r1 || !r2
        return r1

    var r1c = r1
    while !!r1c
        if startsWithIf(r1c, r2, pred)
            return r1c
        r1c popFront
    return r1c

/// Returns the index of the first occurrence of r2 in r1
/// Returns -1 if not found
/// Complexity: O(n^2)
fun indexOfRange(r1, r2: Range): SizeType if isValid(*r1 == *r2)
    if !r1 || !r2
        return SizeType(DiffType(-1))

    // Special case: r2 has only one value
    var tmp = r2
    tmp popFront
    if tmp isEmpty
        return indexOf(r1, *r2)

    // General case
    var r1c = r1
    var idx = 0
    while !!r1c
        if r1c startsWith r2
            return idx
        r1c popFront
        ++idx
    return SizeType(DiffType(-1))

/// Returns the position of the minimum element from the range
fun minElement(range: Range): typeOf(range) if isValid(*range < *range)
    if !range
        return range
    var rc = range
    var res = range
    rc popFront
    while !!rc ; rc popFront
        if *rc < *res
            res = rc
    return res

/// Returns the position of the minimum element from the range, according to the given less predicate
fun minElementIf(range: Range, pred: AnyType): typeOf(range) if typeOf(pred(*range, *range)) == Bool
    if !range
        return range
    var rc = range
    var res = range
    rc popFront
    while !!rc ; rc popFront
        if pred(*rc, *res)
            res = rc
    return res

/// Returns the position of the maximum element from the range
fun maxElement(range: Range): typeOf(range) if isValid(*range < *range)
    if !range
        return range
    var rc = range
    var res = range
    rc popFront
    while !!rc ; rc popFront
        if *res < *rc
            res = rc
    return res

/// Returns the position of the maximum element from the range, according to the given less predicate
fun maxElementIf(range: Range, pred: AnyType): typeOf(range) if typeOf(pred(*range, *range)) == Bool
    if !range
        return range
    var rc = range
    var res = range
    rc popFront
    while !!rc ; rc popFront
        if pred(*res, *rc)
            res = rc
    return res

/// Returns the minimum and the maximum positions from the range
fun minMaxElement(range: Range): typeOf(range ~ range) if isValid(*range < *range)
    if !range
        return range ~ range
    var minRes = range
    var maxRes = range
    var rc = range
    rc popFront
    while !!rc
        if *minRes < *rc
            minRes = rc
        else if *rc < *maxRes
            maxRes = rc
        rc popFront
    return minRes ~ maxRes

/// Returns the minimum and the maximum positions from the range, according to the given less predicate
fun minMaxElementIf(range: Range, pred: AnyType): typeOf(range ~ range) if typeOf(pred(*range, *range)) == Bool
    if !range
        return range ~ range
    var minRes = range
    var maxRes = range
    var rc = range
    rc popFront
    while !!rc
        if pred(*minRes, *rc)
            minRes = rc
        else if pred(*rc, *maxRes)
            maxRes = rc
        rc popFront
    return minRes ~ maxRes

/// Compare the given ranges; emulates a less function
fun compare(r1, r2: Range): Bool if isValid(*r1 < *r2)
    var r1c = r1
    var r2c = r2
    while !!r1c && !!r2c
        if !(*r1c < *r2c)
            return false
        r1c popFront
        r2c popFront
    return !!r2c

/// Compare the given ranges according to the given less predicate; emulates a less function
fun compare(r1, r2: Range, pred: AnyType): Bool if typeOf(pred(*r1, *r2)) == Bool
    var r1c = r1
    var r2c = r2
    while !!r1c && !!r2c
        if !pred(*r1c, *r2c)
            return false
        r1c popFront
        r2c popFront
    return !!r2c

/// Check if the given range is sorted
fun isSorted(range: Range): Bool if isValid(*range < *range)
    if !range
        return true
    var rc = range
    var next = range
    next popFront
    while !!next
        if *next < *rc
            return false
        rc = next
        next popFront
    return true

/// Check if the given range is sorted according to the given less predicate
fun isSorted(range: Range, pred: AnyType): Bool if typeOf(pred(*range, *range)) == Bool
    if !range
        return true
    var rc = range
    var next = range
    next popFront
    while !!next
        if pred(*next, *rc)
            return false
        rc = next
        next popFront
    return true

/// Applies the given functor in a fold fashion, from left, starting from the given seed
fun foldLeft(range: Range, function: AnyType, seed: AnyType): TypeOp.removeCat(typeOf(seed)) \
        if isValid(TypeOp.copyVal(seed) = TypeOp.copyVal(function)(seed, #$range.RetType))
    var t = seed
    for v: range.RetType = range
        t = function(t, v)
    return t

/// Applies the given functor in a fold fashion, from right, starting from the given seed
fun foldRight(range: BidirRange, function: AnyType, seed: AnyType): TypeOp.removeCat(typeOf(seed)) \
        if isValid(TypeOp.copyVal(seed) = TypeOp.copyVal(function)(seed, *range))
    return foldLeft(retro(range), function, seed)

/// Copies the content of r1 over the content of r2
/// returns the position in r2 where we stopped copying
fun copy(r1, r2: Range): typeOf(r2) if isValid(*r2 = *r1)
    var r1c = r1
    var r2c = r2
    while !!r1c && !!r2c
        *r2c = *r1c
        ++r1c
        ++r2c
    return r2c

/// Replaces a value in the given range
fun replace(r: Range, oldVal, newVal: AnyType) \
        if isValid(*r == oldVal) && isValid(*r = newVal)
    for v: r.RetType = r
        if v == oldVal
            v = newVal

/// Replaces all the value that match a predicate with the given value
fun replaceIf(r: Range, pred: AnyType, newVal: AnyType) \
        if isValid(pred(*r)) && isValid(*r = newVal)
    for v: r.RetType = r
        if pred(v)
            v = newVal

/// Reverse the values in the given range
fun reverse(range: BidirRange)
    var rc = range
    while true
        if !rc
            return
        var t: rc.RetType = rc--
        if !rc
            return
        *rc swap t
        rc popFront

/// Merges r1 and r2 according to the standard less order, and copy the values into dest
/// Dest needs to be large enough to fit r1 and r2
/// Returns the amount of dst that is
fun merge(r1, r2, dest: Range): typeOf(dest) \
        if isValid(*r2 < *r1) && isValid(*dest = *r1) && isValid(*dest = *r2)
    var r1c = r1
    var r2c = r2
    var destc = dest
    while !!r1c && !!r2c
        if *r2c < *r1c
            *destc = *r2c
            r2c popFront
        else
            *destc = *r1c
            r1c popFront
        destc popFront
    return r2c copy (r1c copy destc);  // Copy any remaining items

/// Merges r1 and r2 according to the given less predicate, and copy the values into dest
/// Dest needs to be large enough to fit r1 and r2
/// Returns the amount of dst that is
fun merge(r1, r2, dest: Range, pred: AnyType): typeOf(dest) \
        if isValid(pred(*r2, *r1)) && isValid(*dest = *r1) && isValid(*dest = *r2)
    var r1c = r1
    var r2c = r2
    var destc = dest
    while !!r1c && !!r2c
        if pred(*r2c, *r1c)
            *destc = *r2c
            r2c popFront
        else
            *destc = *r1c
            r1c popFront
        destc popFront
    return r2c copy (r1c copy destc);  // Copy any remaining items

/// Sorts the given range
fun sort(range: RandomAccessRange)
    if !!range
        _quickSort(range, 0, rangeSize(range) - 1)

/// Sorts the given range according to the given less predicate
fun sort(range: RandomAccessRange, pred: AnyType) if typeOf(pred(*range, *range)) == Bool
    if !!range
        _quickSort(range, 0, rangeSize(range) - 1, pred)

/// Apply quick sort to sort the given range
fun _quickSort(range: RandomAccessRange, m, n: SizeType)
    if m >= n || n == SizeType(DiffType(-1))
        return

    let p = (m + n) / 2
    range(m) swap range(p)

    let mv = range(m)
    var i = m + 1
    var j = n
    while i <= j
        while i <= n && range(i) <= mv
            ++i
        while j >= m && range(j) > mv
            --j
        if i < j ; range(i) swap range(j)
    range(m) swap range(j)
    _quickSort(range, m, j-1)
    _quickSort(range, j+1, n)

/// Apply quick sort to sort the given range, according to the given less predicate
fun _quickSort(range: RandomAccessRange, m, n: SizeType, pred: AnyType)
    if m >= n || n == SizeType(DiffType(-1))
        return

    let p = (m + n) / 2
    range(m) swap range(p)

    let mv = range(m)
    var i = m + 1
    var j = n
    while i <= j
        while i <= n && !pred(mv, range(i))
            ++i
        while j >= m && pred(mv, range(j))
            --j
        if i < j ; range(i) swap range(j)
    range(m) swap range(j)
    _quickSort(range, m, j-1, pred)
    _quickSort(range, j+1, n, pred)

/// Apply a binary search to find a value in a sorted range
fun binarySearch(range: RandomAccessRange, value: AnyType): Bool \
        if isValid(value == *range)
    var rc = range
    while !!rc
        let sz = rc size
        let mid = (sz - 1) / 2
        let t = rc(mid)
        if value == t
            return true
        if value < t
            rc.popBack(sz - mid)
        else
            rc.popFront(mid + 1)
    return false

/// Apply a binary search to find a value in a sorted range, according to the given less predicate
fun binarySearch(range: RandomAccessRange, value: AnyType, pred: AnyType): Bool \
        if typeOf(pred(value, *range)) == Bool
    var rc = range
    while !!rc
        let sz = rc size
        let mid = (sz - 1) / 2
        let t = rc(mid)
        if pred(value, t)
            rc.popBack(sz - mid)
        else if pred(t, value)
            rc.popFront(mid + 1)
        else
            return true
    return false
