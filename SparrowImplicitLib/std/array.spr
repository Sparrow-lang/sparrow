module std.array

import contiguousMemoryRange(ContiguousMemoryRange)
import rawPtr(RawPtr, allocRawPtr)
import ranges(rangeSize, ..)

datatype Array(valueType: Type)
    using ValueType = valueType
    using RangeType = ContiguousMemoryRange(valueType)

    _begin, _end: RawPtr(ValueType)

[protected]
    fun ctorFromCt(this: !Array, src: Array ct)
        [ct] let size = src size
        this ctor size
        [ct] for i = 0..size
            this(i) = src(i)

    fun ctor(this: !Array, other: typeOf(this))
        let size = other.size

        _begin = allocRawPtr(ValueType, size)
        _end = _begin.advance(DiffType(size))

        var dst = _begin
        var src = other._begin

        while dst != _end
            dst.value  ctor src.value
            dst = dst.advance
            src = src.advance

    fun ctor(this: !Array, size: SizeType)
        _begin = allocRawPtr(ValueType, size)
        _end = _begin.advance(DiffType(size))

        var p = _begin

        while p != _end ; p = p.advance
            p.value ctor

    fun ctor(this: !Array, size: SizeType, value: this.ValueType)
        _begin = allocRawPtr(ValueType, size)
        _end = _begin.advance(DiffType(size))

        var p = _begin

        while p != _end ; p = p.advance
            p.value ctor value

    fun ctor(this: !Array, range: Range) if typeOf(range) != Array
        if !range.isEmpty
            let size = rangeSize(range)

            _begin = allocRawPtr(ValueType, size)
            _end = _begin.advance(DiffType(size))

            var p = _begin

            for v = range
                p.value ctor v
                p = p.advance

    fun dtor(this: !Array)
        if this.isEmpty
            return

        var p = _begin

        while p != _end ; p = p.advance
            p.value dtor
        _begin.freePtr

    fun size(this: Array): SizeType
        return _end.diff(_begin)

    fun isEmpty(this: Array): Bool
        return _begin == _end

    fun assign(this: !Array, range: Range)
        var r = this.all
        var rc = range

        while !r.isEmpty && !rc.isEmpty
            r.front dtor
            r.front ctor rc.front
            r.popFront
            rc.popFront

        while !r.isEmpty ; r.popFront
            r.front dtor
            r.front ctor

    fun swap(this: !Array, other: !typeOf(this))
        var tmp = _begin
        _begin = other._begin
        other._begin = tmp
        tmp = _end
        _end = other._end
        other._end = tmp

    fun at(this: Array, index: SizeType): @ValueType
        return _begin.advance(DiffType(index)).value
    fun ()(this: Array, index: SizeType): @ValueType
        return _begin.advance(DiffType(index)).value

    fun all(this: Array): RangeType
        return RangeType(_begin, _end)

    fun subrange(this: Array, index: SizeType, num: SizeType): RangeType
        return RangeType(_begin.advance(DiffType(index)), _begin.advance(DiffType(index + num)))

    fun =(this: !Array, other: typeOf(this)): @typeOf(this)
        var tmp = other

        tmp.swap(this)

        return this

    fun ==(this, other: Array): Bool
        if this.size != other.size
            return false

        var r1 = this.all
        var r2 = other.all

        while !r1.isEmpty
            if !(r1.front == r2.front)
                return false
            r1.popFront
            r2.popFront

        return true

    fun !=(this, other: Array): Bool
        return !(this == other)

    fun >>(this: Array, os: !OutStream) if isValid(os << #$ValueType)
        var first = true
        for el = this.all
            if first
                first = false
            else
                os << ", "
            os << el
    fun _dumpThis(this: Array, prefix: StringRef)
        cout << prefix << "dumping " << TypeOp.description(Array) << ": " << mkStreamRefWrapper(this) << endl
        cout << "    begin: " << mkStreamRefWrapper(_begin.untypedPtr) << endl
        cout << "    end: " << mkStreamRefWrapper(_end.untypedPtr) << endl

