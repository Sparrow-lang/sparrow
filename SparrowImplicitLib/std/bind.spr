module std.bind

fun mkBindAll(ftor, a1: AnyType) \
    = BindAll1(-@typeOf(ftor), -@typeOf(a1))(ftor, a1) \
    if isValid(ftor(a1))
fun mkBindAll(ftor, a1, a2: AnyType) \
    = BindAll2(-@typeOf(ftor), -@typeOf(a1), -@typeOf(a2))(ftor, a1, a2) \
    if isValid(ftor(a1, a2))
fun mkBindAll(ftor, a1, a2, a3: AnyType) \
    = BindAll3(-@typeOf(ftor), -@typeOf(a1), -@typeOf(a2), -@typeOf(a3))(ftor, a1, a2, a3) \
    if isValid(ftor(a1, a2, a3))
fun mkBindAll(ftor, a1, a2, a3, a4: AnyType) \
    = BindAll4(-@typeOf(ftor), -@typeOf(a1), -@typeOf(a2), -@typeOf(a3), -@typeOf(a4))(ftor, a1, a2, a3, a4) \
    if isValid(ftor(a1, a2, a3, a4))
fun mkBindAll(ftor, a1, a2, a3, a4, a5: AnyType) \
    = BindAll5(-@typeOf(ftor), -@typeOf(a1), -@typeOf(a2), -@typeOf(a3), -@typeOf(a4), -@typeOf(a5))(ftor, a1, a2, a3, a4, a5) \
    if isValid(ftor(a1, a2, a3, a4, a5))

[initCtor]
datatype BindAll1(ftorType, T1: Type)
    using arity = 0

    ftor: ftorType
    a1: T1

[initCtor]
datatype BindAll2(ftorType, T1, T2: Type)
    using arity = 0

    ftor: ftorType
    a1: T1
    a2: T2

[initCtor]
datatype BindAll3(ftorType, T1, T2, T3: Type)
    using arity = 0

    ftor: ftorType
    a1: T1
    a2: T2
    a3: T3

[initCtor]
datatype BindAll4(ftorType, T1, T2, T3, T4: Type)
    using arity = 0

    ftor: ftorType
    a1: T1
    a2: T2
    a3: T3
    a4: T4

[initCtor]
datatype BindAll5(ftorType, T1, T2, T3, T4, T5: Type)
    using arity = 0

    ftor: ftorType
    a1: T1
    a2: T2
    a3: T3
    a4: T4
    a5: T5

[protected]
    fun ()(this: BindAll1) = ftor(a1)
    fun ()(this: BindAll2) = ftor(a1, a2)
    fun ()(this: BindAll3) = ftor(a1, a2, a3)
    fun ()(this: BindAll4) = ftor(a1, a2, a3, a4)
    fun ()(this: BindAll5) = ftor(a1, a2, a3, a4, a5)

    fun >>(this: BindAll1, os: !OutStream) { os << 'BindAll(' << a1 << ')' }
    fun >>(this: BindAll2, os: !OutStream) { os << 'BindAll(' << a1 << ', ' << a2 << ')' }
    fun >>(this: BindAll3, os: !OutStream) { os << 'BindAll(' << a1 << ', ' << a2 << ', ' << a3 << ')' }
    fun >>(this: BindAll4, os: !OutStream) { os << 'BindAll(' << a1 << ', ' << a2 << ', ' << a3 << ', ' << a4 << ')' }
    fun >>(this: BindAll5, os: !OutStream) { os << 'BindAll(' << a1 << ', ' << a2 << ', ' << a3 << ', ' << a4 << ', ' << a5 << ')' }

