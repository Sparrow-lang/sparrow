module std.defaultHashFunction

import ranges
import bitOper
import string(String)

datatype DefaultHashFunction(type: Type)
    using ValueType = type

[protected]
    fun ()(this: DefaultHashFunction, arg: !this.ValueType) = defaultHash(arg)

fun defaultHash(arg: Char)        = _doHash(Byte(arg), _seed)
//fun defaultHash(arg: Integer)     = _doHash(arg, _seed)
fun defaultHash(arg: Integer)     = SizeType(arg)
fun defaultHash(arg: StringRef)   = _doHash(arg, _seed)
fun defaultHash(arg: String const)     = _doHash(arg.asStringRef(), _seed)

using _seed = 0xfadef00d

/// FNV hash generator
fun _doHash(key: StringRef, start: SizeType): SizeType
    var hash = start
    for i = 0..key.size
        hash = (hash !^! SizeType(Byte(key(i)))) * 0x01000193
    return hash

fun _doHash(value, start: SizeType): SizeType
    return (start !^! value) * 0x01000193
