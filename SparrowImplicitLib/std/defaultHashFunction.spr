module std.defaultHashFunction

import ranges
import bitOper
import string(String)

datatype DefaultHashFunction(type: Type)
    using ValueType = type

[protected]
    fun ()(this: DefaultHashFunction, arg: !this.ValueType) = defaultHash(arg)

fun defaultHash(arg: Char)        = _doHash(UInt64(Int8(arg)), _seed)
//fun defaultHash(arg: Integer)     = _doHash(arg, _seed)
fun defaultHash(arg: Integer)     = UInt64(arg)
fun defaultHash(arg: StringRef)   = _doHash(arg, _seed)
fun defaultHash(arg: String)      = _doHash(arg.asStringRef(), _seed)

using _seed = UInt64(0xfadef00d)

/// FNV hash generator
fun _doHash(key: StringRef, start: UInt64): UInt64
    var hash = start
    for i = 0..key.size
        hash = (hash !^! UInt64(Int8(key(i)))) * UInt64(0x01000193)
    return hash

fun _doHash(value, start: UInt64): UInt64
    return (start !^! value) * UInt64(0x01000193)
