module std.ptr

import newDelete(delete)

[initCtor, bitcopiable]
datatype Ptr(type: Type)
    using ValueType = type

    _ptr: @ValueType

[protected]
    fun =(this: @Ptr, ref: @this.ValueType) = _ptr := ref

    fun < (this, other: Ptr)          = ptrDiff(reinterpretCast(@Byte, this._ptr), reinterpretCast(@Byte, other._ptr)) < DiffType(0)

    fun get(this: Ptr)         = _ptr
    fun isNull(this: Ptr)                  = _ptr === null
    fun isSet(this: Ptr)                   = _ptr !== null

    fun reset(this: @Ptr)                  = _ptr := null
    fun reset(this: @Ptr, ref: @this.ValueType)  = _ptr := ref
    fun release(this: @Ptr)                { delete(_ptr); }

    fun swap(this: @Ptr, other: typeOf(this))
        let t: @ValueType = _ptr
        _ptr := other._ptr
        other._ptr := t

    fun >>(this: Ptr, os: @OutStream) if isValid(os << #$ValueType)
        if ( _ptr !== null )
            os << "Ptr(" << _ptr << ")"
        else
            os << "Ptr(null)"
        os << flush

    fun .(this: Ptr) = _ptr

fun mkPtr(v: @AnyType) = Ptr(-@typeOf(v))(v);
fun reinterpretPtr(t: Type, ptr: AnyType): Ptr(t) //if isValid(p.isNull()) && isValid(p.get())
    return Ptr(t)(reinterpretCast(@t, ptr.get()))
