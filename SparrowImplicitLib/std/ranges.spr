module std.ranges

import math = math(floor)
import tuple(MakePair)
import staticArray(mkValues)

/// A bidirection range is a range in which we can also extract elements from
/// the back
concept BidirRange(x: Range) if (
       typeOf(x.back) == x.RetType
    && isValid(x.popBack)
)

/// A random access range allows obtaining the size and accessing elements by index
concept RandomAccessRange(x: BidirRange) if (
       typeOf(x.size) == SizeType
    && typeOf(x(0)) == x.RetType
)

///////////////////////////////////////////////////////////////////////////////
// Common operators on Ranges
//

/// Advances and return the new front value of the range
fun pre_++(r: @Range): r.RetType
    r.popFront
    return r.front
/// Advances and return the old front value of the range
fun post_++(r: @Range): r.RetType
    let res: r.RetType = r.front
    r.popFront
    return res
/// Pops back and return the new back value of the range
fun pre_--(r: @BidirRange): r.RetType
    r.popBack
    return r.back
/// Pops back and return the old back value of the range
fun post_--(r: @BidirRange): r.RetType
    let res: r.RetType = r.back
    r.popBack
    return res
/// Returns true if the range is empty
fun pre_!(r: @Range) = r.isEmpty
/// Returns true if the range is not empty
fun pre_!!(r: @Range) = !r.isEmpty
/// Get the front value of the range
fun pre_*(r: @Range): r.RetType = r.front

// Call operator on range == range.front
//fun post_()(r: @Range) = r.front


///////////////////////////////////////////////////////////////////////////////
// General range operations
//

/// Gets the size of the range -- generic case
fun rangeSize(range: Range): SizeType
    var n: SizeType = 0
    while !range.isEmpty ; range.popFront
        ++n
    return n
/// Gets the size of the range -- random-access-range case
fun rangeSize(range: RandomAccessRange): SizeType
    return range.size

/// Advances the given number of positions -- does not check for range validity
fun advance(range: @Range, n: SizeType)
    while (n--) > 0
        range.popFront

/// Advances while the predicate is satisfied; checks the range validity
fun advanceIf(range: @Range, pred: AnyType) if isValid(pred(range.front))
    while !range.isEmpty && pred(range.front)
        range.popFront

/// Removes from back the given number of positions -- does not check for range validity
fun retract(range: @BidirRange, n: SizeType)
    while (n--) > 0
        range.popBack

/// Removes from back while the predicate is satisfied; checks the range validity
fun retractIf(range: @BidirRange, pred: AnyType) if isValid(pred(range.back))
    while !(range.isEmpty) && pred(range.back)
        range.popBack

///////////////////////////////////////////////////////////////////////////////
// Numeric ranges
//

fun numericRange(start, end: Number) = NumericRangeInc(commonType(typeOf(start), typeOf(end)))(start, end)
fun numericRange(start, end, step: Number) = NumericRangeWithStep(commonType(typeOf(start), typeOf(end)))(start, end, step)

fun ..(start, end: Number) = NumericRangeInc(commonType(typeOf(start), typeOf(end)))(start, end)
fun ...(start, end: Number) = NumericRangeInc(commonType(typeOf(start), typeOf(end)))(start, end, true)
fun post_..(start: Number) = NumericRangeInc(typeOf(start))(start, NumericLimits(typeOf(start)).maxValue)

fun ../(range: Range, step: Number) = NumericRangeWithStep(range.RetType)(range, step)


///////////////////////////////////////////////////////////////////////////////
// Range constructors
//

/// Reverses the given (bi-directional) range
fun retro(range: BidirRange) = RetroRange(typeOf(range))(range)

/// Restricts the range to the given number of elements
fun take(range: Range, count: SizeType) = TakeRange(typeOf(range))(range, count)

/// Skip the first 'count' elements from the range
fun skip(range: Range, count: SizeType): typeOf(range) { advance(range, count); return range; }

/// Take elements from the range while the given predicate is satisfied
fun takeWhile(range: Range, pred: AnyType) = TakeWhileRange(typeOf(range), typeOf(pred))(range, pred)
fun takeWhile(range: Range, pred: AnyType, count: SizeType) = take(takeWhile(range, pred), count)

/// Take elements from the range until the predicate is satisfied
fun takeUntil(range: Range, pred: AnyType) = TakeUntilRange(typeOf(range), typeOf(pred))(range, pred)
fun takeUntil(range: Range, pred: AnyType, count: SizeType) = take(takeUntil(range, pred), count)

/// Apply a predicate filter to the given range
fun filter(range: Range, pred: AnyType) = FilteredRange(typeOf(range), typeOf(pred))(range, pred)

/// Transforms (maps) the given range through the given functor
fun transform(range: Range, function: AnyType) = TransformedRange(typeOf(range), typeOf(function))(range, function)
fun map(range: Range, function: AnyType) = TransformedRange(typeOf(range), typeOf(function))(range, function)

// TODO: Fix the error that is causing us to make this RT
//[rt]
/// Repeats the given value to for a range of the same value
fun repeat(value: AnyType) = RepeatRange(typeOf(value))(value)
fun repeat(value: AnyType, count: SizeType) = take(repeat(value), count)

/// Chain two ranges together to form a concatenated range
fun chain(range1, range2: Range) = ChainRange(typeOf(range1), typeOf(range2))(range1, range2)
fun ++(range1, range2: Range) = ChainRange(typeOf(range1), typeOf(range2))(range1, range2)

/// Range that takes elements with a give stride (every step skips some elements)
fun stride(range: Range, strideStep: SizeType) = StridedRange(typeOf(range))(range, strideStep)

/// Range that takes the elements in a radial fashion: i, i+1, i-1, i+2, i-2, ...
fun radial(range: Range, index: SizeType) = RadialRange(typeOf(range))(range, index)

// TODO: Fix the error that is causing us to make this RT
//[rt]
/// Creates an infinite/counted range by repeating the elements from the given range
/// as long as it takes
fun cycle(range: Range) = CyclicRange(typeOf(range))(range)
fun cycle(range: Range, count: SizeType) = CyclicCountedRange(typeOf(range))(range, count)

/// Generate a range by applying the given function to get the values for the range
fun generate(function: AnyType) = GeneratedRange(typeOf(function))(function)
fun generate(function: AnyType, count: SizeType) = take(generate(function), count)

/// Generate a chain-reaction range
/// Starts with the given value, then calls the given functor on the value to obtain the next value,
/// then calls again the functor on the new value, and so on
fun generate1(start: AnyType, function: AnyType) = Generated1Range(typeOf(start), typeOf(function))(start, function)
fun generate1(start: AnyType, function: AnyType, count: SizeType) = take(generate1(start, function), count)

/// Given two ranges, combine the values from the two ranges together to produce one single range
fun zip(range1, range2: Range, function: AnyType) = ZippedRange(typeOf(range1), typeOf(range2), typeOf(function))(range1, range2, function)
fun zip(range1, range2: Range) = zip(range1, range2, MakePair(-@typeOf(range1.front), -@typeOf(range2.front))())

/// Scans left a range for the given functor and initial accumulator value
fun scanLeft(acc: AnyType, range: Range, function: AnyType) = ScanLeftRange(typeOf(acc), typeOf(range), typeOf(function))(acc, range, function)


///////////////////////////////////////////////////////////////////////////////
// Classes that implement ranges
//

datatype NumericRangeInc(valueType: Type) if Number(#$valueType)
    _begin, _end: valueType
    _closed: Bool
    using _step = valueType(1)

    using RetType = valueType

fun ctor(this: @NumericRangeInc, start, end: this.RetType)
    this._begin ctor start
    this._end ctor end
    this._closed ctor false

fun ctor(this: @NumericRangeInc, start, end: this.RetType, closed: Bool)
    this._begin ctor start
    this._end ctor end
    this._closed ctor closed

[protected]
    fun isEmpty(this: NumericRangeInc)                  = ife(_closed, _begin > _end, _begin >= _end)
    fun front(this: NumericRangeInc): RetType           = _begin
    fun popFront(this: @NumericRangeInc)                { _begin += _step }

    fun back(this: NumericRangeInc): RetType            = _begin + RetType(this.size-1)
    fun popBack(this: @NumericRangeInc)                 { _end -= _step }

    fun size(this: NumericRangeInc): SizeType           = SizeType(ife(_closed, RetType(_end-_begin+1), _end-_begin))

    fun popFront(this: @NumericRangeInc, n: SizeType)   { _begin += RetType(n) }
    fun popBack(this: @NumericRangeInc, n: SizeType)    { _end -= RetType(n) }

    fun ()(this: NumericRangeInc, n: SizeType): RetType = _begin + RetType(n)

datatype NumericRangeWithStep(valueType: Type) if Number(#$valueType)
    _begin, _end, _step: valueType
    _closed: Bool

    using RetType = valueType

fun ctor(this: @NumericRangeWithStep, other: @NumericRangeInc(this.RetType))
    this._begin ctor other._begin
    this._end ctor other._end
    this._closed ctor other._closed
    if _begin <= _end
        _step = valueType(1)
    else
        _step = valueType(-1)

fun ctor(this: @NumericRangeWithStep, other: @NumericRangeInc(this.RetType), step: this.RetType)
    this._begin ctor other._begin
    this._end ctor other._end
    this._closed ctor other._closed
    this._step ctor step

fun ctor(this: @NumericRangeWithStep, start, end: this.RetType)
    this._begin ctor start
    this._end ctor end
    this._closed ctor false
    if start <= end
        _step = valueType(1)
    else
        _step = valueType(-1)

fun ctor(this: @NumericRangeWithStep, start, end: this.RetType, closed: Bool)
    this._begin ctor start
    this._end ctor end
    this._closed ctor closed
    if start <= end
        _step = valueType(1)
    else
        _step = valueType(-1)

fun ctor(this: @NumericRangeWithStep, start, end, step: this.RetType)
    this._begin ctor start
    this._end ctor end
    this._step ctor step
    this._closed ctor false

fun isEmpty(this: NumericRangeWithStep): Bool
    if _closed
        return ife(_step < 0, _begin < _end, _begin > _end)
    else
        return ife(_step < 0, _begin <= _end, _begin >= _end)
fun front(this: NumericRangeWithStep): RetType              = _begin
fun popFront(this: @NumericRangeWithStep)                   { _begin += _step }

fun back(this: NumericRangeWithStep): RetType               = _begin + RetType(this.size-1)*_step
fun popBack(this: @NumericRangeWithStep)                    { _end -= _step }

fun size(this: NumericRangeWithStep): SizeType              = SizeType(math.floor(ife(_closed, _end-_begin, _end-_begin+_step)/_step))

fun popFront(this: @NumericRangeWithStep, n: SizeType)      { _begin += RetType(n*_step) }
fun popBack(this: @NumericRangeWithStep, n: SizeType)       { _end -= RetType(n*_step) }

fun ()(this: NumericRangeWithStep, n: SizeType): RetType    = _begin + RetType(n*_step)

[initCtor]
datatype RetroRange(rangeType: Type) if BidirRange(#$rangeType)
    _range: rangeType

    using RetType = rangeType.RetType

[protected]
    fun isEmpty(this: @RetroRange)          = _range.isEmpty
    fun front(this: @RetroRange): RetType   = _range.back
    fun popFront(this: @RetroRange)         { _range.popBack }

    fun back(this: @RetroRange): RetType    = _range.front
    fun popBack(this: @RetroRange)          { _range.popFront }

[initCtor]
datatype TakeRange(rangeType: Type) if Range(#$rangeType)
    _range: rangeType
    _count: SizeType

    using RetType = rangeType.RetType

[protected]
    fun isEmpty(this: @TakeRange)           = _count == 0 || _range.isEmpty
    fun front(this: @TakeRange): RetType    = _range.front
    fun popFront(this: @TakeRange)          { _range.popFront; --_count }

[initCtor]
datatype TakeWhileRange(rangeType: Type, predType: Type) \
        if Range(#$rangeType) && typeOf((#$predType)(#$rangeType front)) == Bool
    _range: rangeType
    _pred: predType

    using RetType = rangeType.RetType

[protected]
    fun isEmpty(this: @TakeWhileRange)          = _range.isEmpty || !_pred(_range.front)
    fun front(this: @TakeWhileRange): RetType   = _range.front
    fun popFront(this: @TakeWhileRange)         { _range.popFront }

[initCtor]
datatype TakeUntilRange(rangeType: Type, predType: Type) \
        if Range(#$rangeType) && typeOf((#$predType)(#$rangeType front)) == Bool
    _range: rangeType
    _pred: predType
    _shouldStop: Bool = false

    using RetType = rangeType.RetType

[protected]
    fun isEmpty(this: @TakeUntilRange)          = _range.isEmpty || _shouldStop
    fun front(this: @TakeUntilRange): RetType   = _range.front
    fun popFront(this: @TakeUntilRange)
        let lastVal = _range.front
        _range.popFront
        _shouldStop = _pred(lastVal)

datatype FilteredRange(rangeType, predType: Type) \
        if Range(#$rangeType) && typeOf((#$predType)(#$rangeType front)) == Bool
    _range: rangeType
    _pred: predType
    _lastVal: RetType

    using RetType = -@rangeType.RetType
    using _RangeType = rangeType
    using _PredType = predType

fun ctor(this: @FilteredRange, range: this._RangeType, pred: this._PredType)
    this._range ctor range
    this._pred ctor pred
    this._lastVal ctor
    this._popUntilValid

[protected]
    fun isEmpty(this: @FilteredRange)        = _range.isEmpty
    fun front(this: @FilteredRange): RetType = _lastVal
    fun popFront(this: @FilteredRange)       { _range.popFront; this._popUntilValid }

    fun _popUntilValid(this: @FilteredRange)
        while !_range.isEmpty
            _lastVal = _range.front
            if _pred(_lastVal)
                break
            _range.popFront

[initCtor]
datatype TransformedRange(rangeType, funType: Type) \
        if Range(#$rangeType) && isValid((#$funType)(#$rangeType front))
    _range: rangeType
    _function: funType
    _curVal: RetType = RetType()
    _hasValue: Bool = false

    using RetType = -@typeOf((#$funType)(#$rangeType front))

[protected]
    fun isEmpty(this: @TransformedRange)    = _range.isEmpty
    fun front(this: @TransformedRange): RetType
        if !_hasValue
            _curVal = _function(_range.front)
            _hasValue = true
        return _curVal
    fun popFront(this: @TransformedRange)   { _range.popFront; _hasValue = false }

[initCtor]
datatype RepeatRange(valueType: Type)
    _value: valueType

    using RetType = valueType

[protected]
    fun isEmpty(this: @RepeatRange): Bool   = false
    fun front(this: @RepeatRange): RetType  = _value
    fun popFront(this: @RepeatRange)        {}

[initCtor]
datatype ChainRange(rangeType1: Type, rangeType2: Type) \
        if Range(#$rangeType1) && Range(#$rangeType2)
    _range1: rangeType1
    _range2: rangeType2

    using RetType = commonType(rangeType1.RetType, rangeType2.RetType)

[protected]
    fun isEmpty(this: @ChainRange)          = _range1.isEmpty && _range2.isEmpty
    fun front(this: @ChainRange): RetType   = ife(_range1.isEmpty, _range2.front, _range1.front)
    fun popFront(this: @ChainRange)
        if _range1.isEmpty
            _range2.popFront
        else
            _range1.popFront

[initCtor]
datatype StridedRange(rangeType: Type) if Range(#$rangeType)
    _range: rangeType
    _strideStep: SizeType

    using RetType = rangeType.RetType

[protected]
    fun isEmpty(this: @StridedRange)        = _range.isEmpty
    fun front(this: @StridedRange): RetType = _range.front
    fun popFront(this: @StridedRange)
        let s = _strideStep
        while !_range.isEmpty && s > 0
            s = s - 1
            _range.popFront

[initCtor]
datatype RadialRange(rangeType: Type) if RandomAccessRange(#$rangeType)
    _range: rangeType
    _index: SizeType
    _count: SizeType = 0
    _step: DiffType = 1
    _sign: DiffType = 1

    using RetType = rangeType.RetType

[protected]
    fun isEmpty(this: @RadialRange)         = _range.isEmpty || _count == _range.size
    fun front(this: @RadialRange): RetType  = _range(_index)
    fun popFront(this: @RadialRange)
        _index = _index + _step * _sign
        _step = _step + 1
        _sign = -_sign
        _count = _count + 1
        while (_index < 0 || _index >= _range.size) && _count < _range.size
            _index = _index + _step * _sign
            _step = _step + 1
            _sign = -_sign

datatype CyclicRange(rangeType: Type) if Range(#$rangeType)
    _range, _base: rangeType

    using RetType = rangeType.RetType
    using _RangeType = rangeType

fun ctor(this: @CyclicRange, range: this._RangeType)
    this._range ctor range
    this._base ctor range

[protected]
    fun isEmpty(this: @CyclicRange): Bool   = false
    fun front(this: @CyclicRange): RetType  = _range.front
    fun popFront(this: @CyclicRange)
        _range.popFront
        if _range.isEmpty
            _range = _base

datatype CyclicCountedRange(rangeType: Type) if Range(#$rangeType)
    _range, _base: rangeType
    _count: SizeType

    using RetType = rangeType.RetType
    using _RangeType = rangeType

fun ctor(this: @CyclicCountedRange, range: this._RangeType, count: SizeType)
    this._range ctor range
    this._count ctor count
    this._base ctor range

[protected]
    fun isEmpty(this: @CyclicCountedRange)          = _count == 0
    fun front(this: @CyclicCountedRange): RetType   = _range.front
    fun popFront(this: @CyclicCountedRange)
        _range.popFront
        if _range.isEmpty
            if _count > 0
                _range = _base
                --_count

datatype GeneratedRange(functionType: Type)
    _function: functionType
    _current: RetType

    using RetType = typeOf((#$functionType)())
    using _FunType = functionType

fun ctor(this: @GeneratedRange, function: this._FunType)
    this._function ctor function
    this._current ctor this._function()

[protected]
    fun isEmpty(this: @GeneratedRange): Bool    = false
    fun front(this: @GeneratedRange): RetType   = _current
    fun popFront(this: @GeneratedRange)         { _current = _function() }

[initCtor]
datatype Generated1Range(elType, functionType: Type) //if isValid(elType(#$functionType)(#$elType))
    _current: RetType
    _function: functionType

    using RetType = elType

[protected]
    fun isEmpty(this: @Generated1Range): Bool   = false
    fun front(this: @Generated1Range): RetType  = _current
    fun popFront(this: @Generated1Range)        { _current = _function(_current) }

[initCtor]
datatype ZippedRange(rangeType1, rangeType2: Type, functionType: Type) if Range(#$rangeType1) &&  Range(#$rangeType2)
    _range1: rangeType1
    _range2: rangeType2
    _function: functionType

    using RetType = typeOf((#$functionType)(#$rangeType1 front, #$rangeType2 front))

[protected]
    fun isEmpty(this: @ZippedRange)          = _range1.isEmpty || _range2.isEmpty
    fun front(this: @ZippedRange): RetType   = _function(_range1.front, _range2.front)
    fun popFront(this: @ZippedRange)        { _range1.popFront; _range2.popFront }

[initCtor]
datatype ScanLeftRange(accType, rangeType: Type, functionType: Type) if Range(#$rangeType)
    _acc: accType
    _range: rangeType
    _function: functionType
    _valComputed: Bool = false

    using RetType = accType

[protected]
    fun isEmpty(this: @ScanLeftRange)    = _range.isEmpty
    fun popFront(this: @ScanLeftRange)  { _range.popFront; _valComputed=false }
    fun front(this: @ScanLeftRange): RetType
        if !_valComputed
            _acc = _function(_acc, _range.front)
        _valComputed=true
        return _acc

[initCtor]
datatype ValuesRange(contType: Type) if isValid((#$contType)(1))
    _values: contType
    _idx: SizeType = 0

    using RetType       = contType.ValueType


[protected]
    fun isEmpty(this: @ValuesRange)         = _idx >= _values.size
    fun front(this: @ValuesRange): RetType  = _values(_idx)
    fun popFront(this: @ValuesRange)        { ++_idx }

fun mkValuesRange(cont: AnyType) = ValuesRange(typeOf(cont))(cont)

fun values(v0,v1: AnyType) = mkValuesRange(mkValues(v0,v1))
fun values(v0,v1,v2: AnyType) = mkValuesRange(mkValues(v0,v1,v2))
fun values(v0,v1,v2,v3: AnyType) = mkValuesRange(mkValues(v0,v1,v2,v3))
fun values(v0,v1,v2,v3,v4: AnyType) = mkValuesRange(mkValues(v0,v1,v2,v3,v4))
fun values(v0,v1,v2,v3,v4,v5: AnyType) = mkValuesRange(mkValues(v0,v1,v2,v3,v4,v5))
fun values(v0,v1,v2,v3,v4,v5,v6: AnyType) = mkValuesRange(mkValues(v0,v1,v2,v3,v4,v5,v6))
fun values(v0,v1,v2,v3,v4,v5,v6,v7: AnyType) = mkValuesRange(mkValues(v0,v1,v2,v3,v4,v5,v6,v7))
fun values(v0,v1,v2,v3,v4,v5,v6,v7,v8: AnyType) = mkValuesRange(mkValues(v0,v1,v2,v3,v4,v5,v6,v7,v8))
fun values(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9: AnyType) = mkValuesRange(mkValues(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9))
