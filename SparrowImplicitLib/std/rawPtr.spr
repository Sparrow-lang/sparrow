module std.rawPtr

[initCtor, bitcopiable]
datatype RawPtr(valueType: Type)
    using ValueType = valueType

    _ptr: @ValueType

fun ctor(this: !RawPtr, p: UntypedPtr)
    _ptr := p asRefOf ValueType

[protected]
    fun < (this, other: RawPtr)       = (UntypedPtr(_ptr) ptrDiff UntypedPtr(other._ptr)) < 0

    fun value(this: RawPtr): @ValueType                = _ptr

    fun advance(this: RawPtr): typeOf(this)            = typeOf(this)( UntypedPtr(_ptr) ptrAdd sizeOf(ValueType) )
    fun advance(this: RawPtr, n: Int): typeOf(this)    = typeOf(this)( UntypedPtr(_ptr) ptrAdd (n * sizeOf(ValueType)) )
    fun diff(this: RawPtr, other: typeOf(this)): Int   = (UntypedPtr(_ptr) ptrDiff UntypedPtr(other._ptr)) / sizeOf(ValueType)

    fun isNull(this: RawPtr): Bool            = _ptr === null
    fun isSet(this: RawPtr)                   = _ptr !== null

    fun untypedPtr(this: RawPtr): UntypedPtr  = UntypedPtr(_ptr)

    fun reallocPtr(this: !RawPtr, n: Int)
        _ptr := realloc(UntypedPtr(_ptr), n * sizeOf(ValueType)).asRefOf(ValueType)

    fun freePtr(this: RawPtr)
        if ( this.isSet )
            free(UntypedPtr(_ptr))

    fun swap(this: !RawPtr, other: !typeOf(this))
        let t: @ValueType = _ptr
        _ptr := other._ptr
        other._ptr := t

    fun >>(this: RawPtr, os: !OutStream)
        os << "RawPtr(" << UntypedPtr(_ptr) << ")"

fun mkRawPtr(ref: !AnyType) = RawPtr(typeOf(ref))(mutToPtr(ref))
fun allocRawPtr(t: Type, num: Int) = RawPtr(t)(malloc(num * sizeOf(t)).asRefOf(t))

