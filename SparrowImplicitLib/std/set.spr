module std.set

import hashTable(HashTable)
import typeTraits(DefaultTypeTraits)

datatype Set(keyType: Type, traitsType: Type = DefaultTypeTraits)
    using KeyType = keyType
    using ValueType = keyType
    using TraitsType = traitsType
    using _ImplTable = HashTable(keyType, ValueType, _Identity(keyType), traitsType)
    using RangeType = _ImplTable.RangeType

    _hashTable: _ImplTable

fun ctor(this: !Set, n: Int)                                       { _hashTable.ctor(n, TraitsType()) }
fun ctor(this: !Set, n: Int, traits: this.TraitsType)              { _hashTable.ctor(n, traits) }
fun ctor(this: !Set, range: Range)                                      { _hashTable.ctor(range, 0, TraitsType()) }
fun ctor(this: !Set, range: Range, n: Int)                         { _hashTable.ctor(range, n, HashType(), CompareType()) }
fun ctor(this: !Set, range: Range, n: Int, traits: this.TraitsType){ _hashTable.ctor(range, n, traits) }

[protected]
    fun traits(this: Set)                             = _hashTable.traits

    fun size(this: Set)                               = _hashTable.size
    fun isEmpty(this: Set)                            = (_hashTable.size == 0)
    fun bucketCount(this: Set)                        = _hashTable.bucketCount
    fun reserve(this: !Set, n: Int)                    { _hashTable.reserve(n); }

    fun all(this: Set)                                = _hashTable.all

    fun insert(this: !Set, value: this.ValueType)     = _hashTable.insert(value)
    fun insert(this: !Set, range: Range)                    { _hashTable.insert(range); }
    fun remove(this: !Set, key: this.KeyType)         { _hashTable.remove(key); }
    fun remove(this: !Set, range: this.RangeType)           { _hashTable.remove(range); }

    fun +=(this: !Set, value: this.ValueType)         { _hashTable.insert(value) }
    fun +=(this: !Set, range: Range)                        { _hashTable.insert(range) }
    fun -=(this: !Set, key: this.KeyType)             { _hashTable.remove(key) }
    fun -=(this: !Set, range: this.RangeType)               { _hashTable.remove(range) }

    fun contains(this: Set, key: this.KeyType)       = _hashTable.contains(key)
    fun count(this: Set, key: this.KeyType)          = _hashTable.count(key)
    fun equalRange(this: Set, key: this.KeyType)     = _hashTable.equalRange(key)
    fun find(this: Set, key: this.KeyType)           = _hashTable.find(key)

    fun clear(this: !Set)                                   { _hashTable.clear }

    fun swap(this: !Set, other: !typeOf(this))              { this._hashTable swap other._hashTable }

    fun >>(this: Set, os: !OutStream)                 { _hashTable.>>(os) }

datatype _Identity(type: Type)
    using ValueType = type

[protected]
    fun () (this: _Identity, val: this.ValueType): this.ValueType = val
