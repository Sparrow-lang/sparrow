module std.sharedPtr

import newDelete(new, delete)

[convert]
datatype SharedPtr(type: Type)
    using ValueType = type
    using _MyAllocData = _AllocData(type)

    _ref: @ValueType
    _count: @UInt

[protected]
    fun ctor(this: !SharedPtr)
        _ref := null
        _count := null

    [convert]
    fun ctor(this: !SharedPtr, value: @this.ValueType)
        if ( value === null )
            this._ref := null
            this._count := null
        else
            let d: @_MyAllocData = new(_MyAllocData, value)
            this._ref := d.data
            this._count := d._count

    fun ctor(this: !SharedPtr, other: typeOf(this))
        _ref := other._ref
        _count := other._count
        if ( _count !== null )
            ++_count

    fun dtor(this: !SharedPtr)
        if ( _count !== null && --_count == 0 )
            _ref.dtor()
            delete(_count)

    fun =(this: !SharedPtr, other: typeOf(this))
        var other2 = other
        this swap other2
    fun =(this: !SharedPtr, value: @this.ValueType)                       { this.reset(value) }
    fun =(this: !SharedPtr, value: @AnyType) if isValid(ValueType(value)) { this.reset(value) }

    fun ==(this, other: SharedPtr)                = _ref === other._ref && _count === other._count

    fun .(this: SharedPtr) = _ref
    fun get(this: SharedPtr): @ValueType          = _ref

    fun isUnique(this: SharedPtr)                 = _count !== null && _count == 1
    fun useCount(this: SharedPtr): UInt           = ife(_count !== null, UInt(_count), UInt(0))

    fun isNull(this: SharedPtr)                   = _ref === null
    fun isSet(this: SharedPtr)                    = _ref !== null

    fun reset(this: !SharedPtr)                         { this.dtor; this.ctor }
    fun reset(this: !SharedPtr, value: !this.ValueType) { this.dtor; this ctor value }
    fun release(this: !SharedPtr)                       { this.reset }

    fun swap(this: !SharedPtr, other: !typeOf(this))
        let tmpr: @ValueType = other._ref
        other._ref := _ref
        _ref := tmpr

        let tmpc: @UInt = other._count
        other._count := _count
        _count := tmpc

    fun >>(this: SharedPtr, os: !OutStream) if isValid(os << #$ValueType)
        if ( _count !== null )
            os << "SharedPtr(" << _ref << ", " << _count << ")"
        else
            os << "SharedPtr(null)"

datatype _AllocData(type: Type)
    _count: UInt
    data: type

fun ctor(this: !_AllocData)
    _count ctor 1
    data ctor

fun ctor(this: !_AllocData, arg1: AnyType)
    _count ctor 1
    data ctor arg1

fun ctor(this: !_AllocData, arg1, arg2: AnyType)
    _count ctor 1
    data.ctor(arg1, arg2)

fun ctor(this: !_AllocData, arg1, arg2, arg3: AnyType)
    _count ctor 1
    data.ctor(arg1, arg2, arg3)

fun ctor(this: !_AllocData, arg1, arg2, arg3, arg4: AnyType)
    _count ctor 1
    data.ctor(arg1, arg2, arg3, arg4)

fun mkShared(t: Type): SharedPtr(t)
    var res: SharedPtr(t)
    let d: @_AllocData(t) = new(_AllocData(t))
    res._ref := d.data
    res._count := d._count
    return res
fun mkShared(t: Type, arg1: AnyType): SharedPtr(t) if isValid((#$t).ctor(arg1))
    var res: SharedPtr(t)
    let d: @_AllocData(t) = new(_AllocData(t), arg1)
    res._ref := d.data
    res._count := d._count
    return res
fun mkShared(t: Type, arg1, arg2: AnyType): SharedPtr(t) if isValid((#$t).ctor(arg1, arg2))
    var res: SharedPtr(t)
    let d: @_AllocData(t) = new(_AllocData(t), arg1, arg2)
    res._ref := d.data
    res._count := d._count
    return res
fun mkShared(t: Type, arg1, arg2, arg3: AnyType): SharedPtr(t) if isValid((#$t).ctor(arg1, arg2, arg3))
    var res: SharedPtr(t)
    let d: @_AllocData(t) = new(_AllocData(t), arg1, arg2, arg3)
    res._ref := d.data
    res._count := d._count
    return res
fun mkShared(t: Type, arg1, arg2, arg3, arg4: AnyType): SharedPtr(t) if isValid((#$t).ctor(arg1, arg2, arg3, arg4))
    var res: SharedPtr(t)
    let d: @_AllocData(t) = new(_AllocData(t), arg1, arg2, arg3, arg4)
    res._ref := d.data
    res._count := d._count
    return res
