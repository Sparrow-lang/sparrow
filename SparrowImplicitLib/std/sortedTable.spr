module std.sortedTable

import vector(Vector)
import ranges(rangeSize)

datatype SortedTable(keyType, valueType, valueToKeyType, lessType, compareType: Type)
    using KeyType = keyType
    using ValueType = valueType
    using ValueToKeyType = valueToKeyType
    using LessType = lessType
    using CompareType = compareType
    using RangeType = Vector(valueType).RangeType

    _table: Vector(ValueType)
    _valToKey: ValueToKeyType
    _less: LessType
    _comp: CompareType

[protected]
    fun ctor(this: !SortedTable)
        this.ctor(0, LessType(), CompareType())

    fun ctor(this: !SortedTable, n: Int, less: this.LessType, comp: this.CompareType)
        this._table ctor
        this._valToKey ctor
        this._less ctor less
        this._comp ctor comp
        if n > 0
            this.reserve(n)

    fun ctor(this: !SortedTable, range: Range, n: Int, less: this.LessType, comp: this.CompareType)
        this._table ctor
        if n > 0
            _table.reserve(n)
        else
            _table.reserve(rangeSize(range))
        this._valToKey ctor
        this._less ctor less
        this._comp ctor comp

        //_table.assign(range)
        //sort(_table.all, less)
        for v = range
            this.insert(v)

    fun ctor(this: !SortedTable, other: typeOf(this))
        _table ctor other._table
        _less ctor other._less
        _comp ctor other._comp

    fun =(this: !SortedTable, other: typeOf(this)): @typeOf(this)
        _table = other._table
        _valToKey = other._valToKey
        _comp = other._comp
        _less = other._less
        _valToKey = other._valToKey

        return this

    fun ==(this, other: SortedTable): Bool
        return _valToKey == other._valToKey && _less == other._less && _comp == other._comp && _table == other._table

    fun !=(this, other: SortedTable): Bool = !(this == other)

    fun swap(this: !SortedTable, other: !typeOf(this))
        _table.swap(other._table)

        let tmpv = _valToKey
        _valToKey = other._valToKey
        other._valToKey = tmpv

        let tmpl = _less
        _less = other._less
        other._less = tmpl

        let tmpc = _comp
        _comp = other._comp
        other._comp = tmpc

    fun lessFunction(this: SortedTable) = _less
    fun comparator(this: SortedTable)   = _comp

    fun isEmpty(this: SortedTable)      = _table.isEmpty
    fun size(this: SortedTable)         = _table.size
    fun capacity(this: SortedTable)     = _table.capacity

    fun all(this: SortedTable)          = _table.all

    fun reserve(this: !SortedTable, n: Int)
        _table.reserve(n)

    fun insert(this: !SortedTable, value: this.ValueType): RangeType
        let r = this.lowerBound(_valToKey(value))
        let idx = _table.size - r.size
        if r.isEmpty || !_comp(_valToKey(value), _valToKey(r.front))
            _table.insertBefore(value, r)
        var res = _table.all
        res.popFront(idx)
        return res

    fun insert(this: !SortedTable, range: Range)
        _table.reserve(_table.size + rangeSize(range))
        for v = range
            let r = this.lowerBound(_valToKey(v))
            if r.isEmpty || !_comp(_valToKey(v), _valToKey(r.front))
                _table.insertBefore(v, r)

    fun remove(this: !SortedTable, key: this.KeyType)
        if this.isEmpty
            return

        let r = this.find(key)
        if !r.isEmpty
            let idx = r.frontPtr().diff(_table.all().frontPtr)
            _table.remove(idx)

    fun remove(this: !SortedTable, range: this.RangeType)
        if !range.isEmpty
            _table.remove(range)

    fun contains(this: SortedTable, key: this.KeyType): Bool  = !this.find(key).isEmpty
    fun count(this: SortedTable, key: this.KeyType): Int = ife(this.find(key).isEmpty, 0, 1)

    fun lowerBound(this: SortedTable, key: this.KeyType): RangeType
        var first = 0
        var len = _table.size
        while len > 0
            let l2 = len / 2
            let el: @ValueType = _table(first + l2)
            if _less(_valToKey(el), key)
                first += l2+1
                len -= l2+1
            else
                len = l2
        var r = _table.all
        r.popFront(first)
        return r

    fun upperBound(this: SortedTable, key: this.KeyType): RangeType
        var first = 0
        var len = _table.size
        while len > 0
            let l2 = len / 2
            let el: @ValueType = _table(first + l2)
            if _less(key, _valToKey(el))
                len = l2
            else
                first += l2+1
                len -= l2+1
        var r = _table.all
        r.popFront(first)
        return r

    fun equalRange(this: SortedTable, key: this.KeyType): RangeType
        let r = this.find(key)
        if !r.isEmpty
            return RangeType(r.frontPtr, r.frontPtr().advance(1))
        else
            return RangeType()

    fun find(this: SortedTable, key: this.KeyType): RangeType
        let r = this.lowerBound(key)
        if !r.isEmpty && _comp(key, _valToKey(r.front))
            return r
        else
            return RangeType()

    fun clear(this: !SortedTable)
        _table.clear

datatype Less(type: Type) if isValid(#$type < #$type)
    using ValueType = type
[protected]
    fun ()(this: Less, l, r: this.ValueType) = l < r

