module std.staticArray

import contiguousMemoryRange(ContiguousMemoryRange)
import rawPtr(RawPtr)
import ranges

[noDefault]
datatype StaticArray(valueType: Type, arraySize: SizeType ct)
    using ValueType = valueType
    using RangeType = ContiguousMemoryRange(valueType)
    using _arraySize = arraySize

    _buf: static_buffer(arraySize * sizeOf(ValueType))

[protected]
    fun ctor(this: !StaticArray)
        for v: @ValueType = this.all
            v ctor

    fun ctor(this: !StaticArray, other: typeOf(this))
        for i = 0.._arraySize
            this(i) ctor other(i)

    fun ctor(this: !StaticArray, value: this.ValueType)
        for v: @ValueType = this.all
            v.ctor(value)

    fun ctor(this: !StaticArray, range: Range)
        var rc = range
        for v: @ValueType = this.all
            if !rc.isEmpty
                v.ctor(rc.front)
                rc.popFront
            else
                v ctor
    fun ctor(this: !StaticArray, v0,v1: this.ValueType) if this._arraySize == 2
        this(0) ctor v0
        this(1) ctor v1
    fun ctor(this: !StaticArray, v0,v1,v2: this.ValueType) if this._arraySize == 3
        this(0) ctor v0
        this(1) ctor v1
        this(2) ctor v2
    fun ctor(this: !StaticArray, v0,v1,v2,v3: this.ValueType) if this._arraySize == 4
        this(0) ctor v0
        this(1) ctor v1
        this(2) ctor v2
        this(3) ctor v3
    fun ctor(this: !StaticArray, v0,v1,v2,v3,v4: this.ValueType) if this._arraySize == 5
        this(0) ctor v0
        this(1) ctor v1
        this(2) ctor v2
        this(3) ctor v3
        this(4) ctor v4
    fun ctor(this: !StaticArray, v0,v1,v2,v3,v4,v5: this.ValueType) if this._arraySize == 6
        this(0) ctor v0
        this(1) ctor v1
        this(2) ctor v2
        this(3) ctor v3
        this(4) ctor v4
        this(5) ctor v5
    fun ctor(this: !StaticArray, v0,v1,v2,v3,v4,v5,v6: this.ValueType) if this._arraySize == 7
        this(0) ctor v0
        this(1) ctor v1
        this(2) ctor v2
        this(3) ctor v3
        this(4) ctor v4
        this(5) ctor v5
        this(6) ctor v6
    fun ctor(this: !StaticArray, v0,v1,v2,v3,v4,v5,v6,v7: this.ValueType) if this._arraySize == 8
        this(0) ctor v0
        this(1) ctor v1
        this(2) ctor v2
        this(3) ctor v3
        this(4) ctor v4
        this(5) ctor v5
        this(6) ctor v6
        this(7) ctor v7
    fun ctor(this: !StaticArray, v0,v1,v2,v3,v4,v5,v6,v7,v8: this.ValueType) if this._arraySize == 9
        this(0) ctor v0
        this(1) ctor v1
        this(2) ctor v2
        this(3) ctor v3
        this(4) ctor v4
        this(5) ctor v5
        this(6) ctor v6
        this(7) ctor v7
        this(8) ctor v8
    fun ctor(this: !StaticArray, v0,v1,v2,v3,v4,v5,v6,v7,v8,v9: this.ValueType) if this._arraySize == 10
        this(0) ctor v0
        this(1) ctor v1
        this(2) ctor v2
        this(3) ctor v3
        this(4) ctor v4
        this(5) ctor v5
        this(6) ctor v6
        this(7) ctor v7
        this(8) ctor v8
        this(9) ctor v9

    fun dtor(this: !StaticArray)
        for v: @ValueType = this.all
            v dtor

    fun =(this: !StaticArray, other: typeOf(this)): @typeOf(this)
        for i = 0.._arraySize
            this(i) = other(i)
        return this

    fun ==(this, other: StaticArray): Bool
        for i = 0.._arraySize
            if this(i) != other(i)
                return false
        return true

    fun size(this: StaticArray): SizeType
        return _arraySize

    fun isEmpty(this: StaticArray): Bool
        return _arraySize == 0

    fun assign(this: !StaticArray, range: this.RangeType)
        for v: @ValueType = this.all
            if !range.isEmpty
                v = range.front
                range.popFront
            else
                return

    fun swap(this: !StaticArray, other: !typeOf(StaticArray))
        for i = 0.._arraySize
            let tmp = this(i)
            this(i) = other(i)
            other(i) = tmp

    fun at(this: StaticArray, index: SizeType): @ValueType = this._asPtr().advance(DiffType(index)).value
    fun ()(this: StaticArray, index: SizeType): @ValueType = this._asPtr().advance(DiffType(index)).value

    fun all(this: StaticArray) = RangeType(this._asPtr, this._asPtr().advance(DiffType(_arraySize)))

    fun subrange(this: StaticArray, index: SizeType, num: SizeType) \
        = RangeType(this._asPtr().advance(DiffType(index)), this._asPtr().advance(DiffType(index + num)))

    fun _asPtr(this: StaticArray) = RawPtr(ValueType)(UntypedPtr(_buf))

fun mkValues(v0,v1: AnyType) = StaticArray(typeOf(v0), 2)(v0,v1)
fun mkValues(v0,v1,v2: AnyType) = StaticArray(typeOf(v0), 3)(v0,v1,v2)
fun mkValues(v0,v1,v2,v3: AnyType) = StaticArray(typeOf(v0), 4)(v0,v1,v2,v3)
fun mkValues(v0,v1,v2,v3,v4: AnyType) = StaticArray(typeOf(v0), 5)(v0,v1,v2,v3,v4)
fun mkValues(v0,v1,v2,v3,v4,v5: AnyType) = StaticArray(typeOf(v0), 6)(v0,v1,v2,v3,v4,v5)
fun mkValues(v0,v1,v2,v3,v4,v5,v6: AnyType) = StaticArray(typeOf(v0), 7)(v0,v1,v2,v3,v4,v5,v6)
fun mkValues(v0,v1,v2,v3,v4,v5,v6,v7: AnyType) = StaticArray(typeOf(v0), 8)(v0,v1,v2,v3,v4,v5,v6,v7)
fun mkValues(v0,v1,v2,v3,v4,v5,v6,v7,v8: AnyType) = StaticArray(typeOf(v0), 9)(v0,v1,v2,v3,v4,v5,v6,v7,v8)
fun mkValues(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9: AnyType) = StaticArray(typeOf(v0), 10)(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9)

[ctGeneric]
fun StaticArray2d(baseType: Type, d1, d2: SizeType ct) \
    = StaticArray(StaticArray(baseType, d2), d1)

[ctGeneric]
fun StaticArray3d(baseType: Type, d1, d2, d3: SizeType ct) \
    = StaticArray(StaticArray(StaticArray(baseType, d3), d2), d1)

[ctGeneric]
fun StaticArray4d(baseType: Type, d1, d2, d3, d4: SizeType ct) \
    = StaticArray(StaticArray(StaticArray(StaticArray(baseType, d4), d3), d2), d1)

