module std.string

import contiguousMemoryRange(ContiguousMemoryRange)
import ranges(rangeSize)
import rawPtr(RawPtr, allocRawPtr)

// TODO: Make sure that we have the same performance for Strings that we would have for basic char arrays
// TODO: Can we implement this in terms of Vector?
// TODO: Can we implement a VectorDetail(Type, InnerSpace), and implement fun Vector(type) = VectorBase(type, 0)

/// String class that has ownership of the characters
[convert]
datatype String
    using ValueType = Char
    using ValuePassType = Char
    using RangeType = StringRef

    using _initialCapacity = 16
    using _growthFactor = 1.5
    using _PtrType = RawPtr(Char)

    _begin, _end, _endOfStore: _PtrType

fun ctor(this: !String)
    _begin ctor
    _end ctor
    _endOfStore ctor
fun ctor(this: !String, size: Int)
    _begin       ctor allocRawPtr(Char, size+1)
    _end         ctor _begin.advance(size)
    _endOfStore  ctor _end
    _end.value = Char(0)
fun ctor(this: !String, count: Int, ch: Char)
    this.ctor(count)
    memset(_begin.untypedPtr, Int8(ch), count)
fun ctor(this: !String, other: String)
    let size = other size
    this.ctor(size)
    memcpy(_begin.untypedPtr, other._begin.untypedPtr, size)
[convert]
fun ctor(this: !String, other: StringRef)
    let size = other size
    this.ctor(size)
    memcpy(_begin.untypedPtr, UntypedPtr(other.begin), size)
fun ctor(this: !String, _begin, _end: RawPtr(Char))
    let size = _end.diff(_begin)
    this.ctor(size)
    memcpy(this._begin.untypedPtr, _begin.untypedPtr, size)
fun ctor(this: !String, range: Range) if typeOf(range) != String
    this.ctor(rangeSize(range))
    var i=0
    for ch = range
        _begin.advance(i++).value = ch

[protected]
    fun ctorFromCt(this: !String, src: String ct)
        this ctor src.asStringRef

    fun dtor(this: !String)
        _begin.freePtr

    fun =(this: !String, other: String)
        let tmp = other
        tmp.swap(this)

    fun ==(this, other: String): Bool
        if this.size != other.size
            return false

        var i = 0
        let s = this.size

        while i < s ; i++
            if this(i) != other(i)
                return false
        return true

    fun !=(this, other: String): Bool = !(this == other)

    fun swap(this, other: !String)
        this._begin      swap    other._begin
        this._end        swap    other._end
        this._endOfStore swap    other._endOfStore

    fun asStringRef(this: String)             = StringRef(_begin.untypedPtr, _end.untypedPtr)

    fun size(this: String): Int          = _end.diff(_begin)
    fun isEmpty(this: String)                 = _begin == _end
    fun capacity(this: String): Int      = _endOfStore.diff(_begin)

    fun at(this: String, index: Int)     = _begin.advance(index).value
    fun ()(this: String, index: Int)     = _begin.advance(index).value
    fun front(this: String)                   = _begin.value
    fun back(this: String)                    = _end.advance(-1).value
    fun all(this: String)                     = StringRef(_begin.untypedPtr, _end.untypedPtr)
    fun subrange(this: String, index: Int, num: Int): StringRef \
                                = StringRef(_begin.advance(index).untypedPtr, _begin.advance(index + num).untypedPtr)

    fun pushBack(this: !String, value: Char)
        if _end == _endOfStore
            var t = 2 * this.capacity

            if t < 2
                t = 2
            this.reserve(t)
        _end.value ctor value
        _end = _end.advance
    fun +=(this: !String, value: Char)
        this.pushBack(value)

    fun popBack(this: !String)
        _end = _end advance -1
        _end.value dtor

    fun resize(this: !String, n: Int)
        let oldSize = this.size

        if n == oldSize
            return

        if n < oldSize
            let newEnd = _begin.advance(n)

            while _end != newEnd
                _end = _end.advance(-1)
                _end.value dtor
        else
            this.reserve(n)

            let newEnd = _begin.advance(n)

            while _end != newEnd
                _end.value ctor
                _end = _end.advance

    fun reserve(this: !String, n: Int)
        let curCapacity = this.capacity

        if n <= curCapacity
            return

        if n < _initialCapacity
            n = _initialCapacity
        if n < Int(_growthFactor*Float(curCapacity))
            n = Int(_growthFactor*Float(curCapacity))

        let curSize = this.size

        _begin.reallocPtr(n)
        _end = _begin.advance(curSize)
        _endOfStore = _begin.advance(n)

    fun clear(this: !String)
        this.remove(StringRef(_begin.untypedPtr, _end.untypedPtr))

    fun insertBefore(this: !String, value: Char, pos: StringRef)
        let posCount = _frontPtr(pos).diff(_begin)

        this.reserve(this.size + 1)

        var p = _end.advance(-1)
        var q = _begin.advance(posCount - 1)

        while p != q ; p = p.advance(-1)
            p.advance().value ctor p.value
            p.value dtor
        p.advance().value ctor value
        _end = _end.advance

    fun insertBefore(this: !String, range: Range, pos: StringRef)
        var rc = range
        let n = range.size
        let index = _frontPtr(pos).diff(_begin)

        this.reserve(this.size + n)

        var p = _end.advance(-1)
        let q = _begin.advance(index - 1)

        while p != q ; p = p.advance(-1)
            p.advance(n).value ctor p.value
            p.value dtor
        p = p.advance
        while !rc.isEmpty
            p.value ctor rc.front
            p = p.advance
            rc.popFront
        _end = _end.advance(n)

    fun insertAfter(this: !String, value: Char, pos: StringRef)
        this.insertBefore(value, StringRef(_backPtr(pos).untypedPtr, _end.untypedPtr))

    fun insertAfter(this: !String, range: Range, pos: StringRef)
        this.insertBefore(range, StringRef(_backPtr(pos).untypedPtr, _end.untypedPtr))

    fun append(this: !String, range: Range)
        this.insertBefore(range, StringRef(_end.untypedPtr, _end.untypedPtr))
    fun append(this: !String, value: Char)
        this.insertBefore(value, StringRef(_end.untypedPtr, _end.untypedPtr))

    fun remove(this: !String, range: StringRef)
        let rSize = range.size
        var rBegin = _frontPtr(range)
        let rEnd = rBegin.advance(rSize)

        while rEnd != _end
            rBegin.value dtor
            rBegin.value ctor rEnd.value
            rBegin = rBegin.advance
            rEnd = rEnd.advance
        _end = rBegin

    fun remove(this: !String, index: Int)
        var r = this.all

        r.popFront(index)
        r.popBack(this.size - index - 1)
        this.remove(r)

    fun assign(this: !String, range: Range)
        this.clear
        for v = range
            this.pushBack(v)

    fun >>(this: String, os: !OutStream)
        os << this.asStringRef

    fun _frontPtr(s: StringRef) = RawPtr(Char)(UntypedPtr(s.begin))
    fun _backPtr(s: StringRef) = RawPtr(Char)(UntypedPtr(s.end))

// TODO
[autoCt]
fun + (x,y: String): String
    let sz1 = x.size
    let sz2 = y.size
    var res: String = sz1 + sz2
    memcpy(res._begin.untypedPtr, x._begin.untypedPtr, sz1)
    memcpy(res._begin.advance(sz1).untypedPtr, y._begin.untypedPtr, sz2)
    return res

[autoCt]
fun + (x: String, y: StringRef): String
    let sz1 = x.size
    let sz2 = y.size
    var res: String = sz1 + sz2
    memcpy(res._begin.untypedPtr, x._begin.untypedPtr, sz1)
    memcpy(res._begin.advance(sz1).untypedPtr, UntypedPtr(y.begin), sz2)
    return res

fun intToString(x: Int): String
    var buf: static_buffer(12)
    _intToCString(x, reinterpretCast(@Char, buf))
    return String(fromCString(reinterpretCast(@Char, buf)))
fun ulongToString(x: UInt64): String
    var buf: static_buffer(16)
    _ulongToCString(x, reinterpretCast(@Char, buf))
    return String(fromCString(reinterpretCast(@Char, buf)))

// TODO

datatype StringOutputStream
    result: String

[protected]
    fun <<<(this: !StringOutputStream, s: String)  { result.append(s.all) }
    fun <<<(this: !StringOutputStream, s: StringRef)     { result.append(s) }
    fun <<<(this: !StringOutputStream, x: Char)          { result.append(x) }
    fun <<<(this: !StringOutputStream, x: Int32)         { result.append(intToString(x).all) }
    fun <<<(this: !StringOutputStream, x: UInt32)        { result.append(ulongToString(UInt64(x)).all) }
    fun <<<(this: !StringOutputStream, x: Int64)         { result.append(ulongToString(UInt64(x)).all) }
    fun <<<(this: !StringOutputStream, x: UInt64)        { result.append(ulongToString(UInt64(x)).all) }
    fun <<<(this: !StringOutputStream, x: Float32)       { result.append(ulongToString(UInt64(x)).all) } // Not properly supported
    fun <<<(this: !StringOutputStream, x: Float)         { result.append(ulongToString(UInt64(x)).all) } // Not properly supported

fun toString = String()
fun toString(a1: AnyType): String
    var s: StringOutputStream
    s << a1
    return s.result
fun toString(a1, a2: AnyType): String
    var s: StringOutputStream
    s << a1 << a2
    return s.result
fun toString(a1, a2, a3: AnyType): String
    var s: StringOutputStream
    s << a1 << a2 << a3
    return s.result
fun toString(a1, a2, a3, a4: AnyType): String
    var s: StringOutputStream
    s << a1 << a2 << a3 << a4
    return s.result
fun toString(a1, a2, a3, a4, a5: AnyType): String
    var s: StringOutputStream
    s << a1 << a2 << a3 << a4 << a5
    return s.result
fun toString(a1, a2, a3, a4, a5, a6: AnyType): String
    var s: StringOutputStream
    s << a1 << a2 << a3 << a4 << a5 << a6
    return s.result
fun toString(a1, a2, a3, a4, a5, a6, a7: AnyType): String
    var s: StringOutputStream
    s << a1 << a2 << a3 << a4 << a5 << a6 << a7
    return s.result

[native("_Int_to_CString")] fun _intToCString(x: Int, buffer: @Char)
[native("_ULong_to_CString")] fun _ulongToCString(x: UInt64, buffer: @Char)
