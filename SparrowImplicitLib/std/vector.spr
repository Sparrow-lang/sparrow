module std.vector

import contiguousMemoryRange(ContiguousMemoryRange)
import rawPtr(RawPtr, allocRawPtr)
import ranges(RandomAccessRange, ..)

fun mkVector(range: Range) = Vector(-@ range.RetType)(range)

datatype Vector(valueType: Type)
    using ValueType = valueType
    using ValuePassType = !@valueType

    using RangeType = ContiguousMemoryRange(valueType)

    using _initialCapacity = 8
    using _growthFactor = 2.0

    _begin, _end, _endOfStore: RawPtr(ValueType)

[protected]
    fun ctorFromCt(this: @Vector, src: Vector ct)
        this.ctor()
        this.reserve(ctEval(src.size()))
        [ct] for el: ValueType = src.all()
            this.pushBack(el)

    fun ctor(this, other: @Vector)
        let size = other.size()

        _begin = allocRawPtr(ValueType, size)
        _end = _begin.advance(size)
        _endOfStore = _end

        var dst = _begin
        var src = other._begin

        [ct] if TypeOp.isBitcopiable(ValueType)
            memcpy(dst.bytePtr, src.bytePtr, size*sizeOf(ValueType))
        else
            while dst != _end
                dst.value().ctor(src.value())
                dst = dst.advance()
                src = src.advance()

    fun ctor(this: @Vector, size: SizeType)
        // Allocate the buffer
        _begin = allocRawPtr(ValueType, size)
        _end = _begin.advance(size)
        _endOfStore = _end

        // Construct the elements
        var p = _begin
        while p != _end ; p = p.advance()
            p.value().ctor()

    fun ctor(this: @Vector, range: Range) if !RandomAccessRange(range)
        _begin.ctor()
        _end.ctor()
        _endOfStore.ctor()
        for v = range
            this.pushBack(v)

    fun ctor(this: @Vector, range: RandomAccessRange)
        _begin.ctor()
        _end.ctor()
        _endOfStore.ctor()
        this.reserve(range.size())
        for v = range
            this.pushBack(v)

    fun dtor(this: @Vector)
        var p = _begin

        while p != _end ; p = p.advance()
            p.value().dtor()
        _begin.freePtr()

    fun =(this, other: @Vector): @typeOf(this)
        var tmp = other

        tmp.swap(this)

        return this

    fun ==(this, other: @Vector): Bool
        if this.size() != other.size()
            return false

        var i = 0
        let s = this.size()

        while i < s ; i++
            if !(this.at(i) == other.at(i))
                return false
        return true

    fun !=(other: @Vector): Bool = !(this == other)

    fun swap(this: @Vector, other: typeOf(this))
        var tmp = _begin

        _begin = other._begin
        other._begin = tmp
        tmp = _end
        _end = other._end
        other._end = tmp
        tmp = _endOfStore
        _endOfStore = other._endOfStore
        other._endOfStore = tmp

    fun size(this: @Vector): SizeType = _end.diff(_begin)
    fun isEmpty(this: @Vector) = _begin == _end
    fun capacity(this: @Vector): SizeType = _endOfStore.diff(_begin)

    fun reserve(this: @Vector, n: SizeType)
        let curCapacity = this.capacity()

        if n <= curCapacity
            return


        if n < _initialCapacity
            n = _initialCapacity
        if n < _growthFactor*curCapacity
            n = SizeType(_growthFactor*curCapacity)

        let curSize = this.size()

        _begin.reallocPtr(n)
        _end = _begin.advance(curSize)
        _endOfStore = _begin.advance(n)

    fun at(this: @Vector, index: SizeType)    = _begin.advance(index).value()
    fun ()(this: @Vector, index: SizeType)    = _begin.advance(index).value()
    fun front(this: @Vector)                   = _begin.value()
    fun back(this: @Vector)                    = _end.advance(-1).value()
    fun all(this: @Vector)                     = RangeType(_begin, _end)
    fun subrange(this: @Vector, index: SizeType, num: SizeType): RangeType = RangeType(_begin.advance(index), _begin.advance(index + num))

    fun insertBefore(this: @Vector, value: this.ValuePassType, pos: this.RangeType)
        let posCount = pos.frontPtr().diff(_begin)

        this.reserve(this.size() + 1)

        var p = _end.advance(-1)
        var q = _begin.advance(posCount - 1)

        while p != q ; p = p.advance(-1)
            p.advance().value().ctor(p.value())
            p.value().dtor()
        p.advance().value().ctor(value)
        _end = _end.advance()

    fun insertBefore(this: @Vector, range: Range, pos: this.RangeType)
        let n = range.size()
        let index = pos.frontPtr().diff(_begin)

        this.reserve(this.size() + n)

        var p = _end.advance(-1)
        var q = _begin.advance(index - 1)

        while p != q ; p = p.advance(-1)
            p.advance(n).value().ctor(p.value())
            p.value().dtor()
        p = p.advance()
        while !range.isEmpty()
            p.value().ctor(range.front())
            p = p.advance()
            range.popFront()
        _end = _end.advance(n)

    fun insertAfter(this: @Vector, value: this.ValuePassType, pos: this.RangeType)
        this.insertBefore(value, RangeType(pos.backPtr(), _end))

    fun insertAfter(this: @Vector, range: Range, pos: this.RangeType)
        this.insertBefore(range, RangeType(pos.backPtr(), _end))

    fun pushBack(this: @Vector, value: this.ValuePassType)
        if _end == _endOfStore
            var t = 2 * this.capacity()

            if t < 2
                t = 2
            this.reserve(t)
        _end.value().ctor(value)
        _end = _end.advance()

    fun +=(this: @Vector, value: this.ValuePassType)
        this.pushBack(value)

    fun popBack(this: @Vector)
        _end = _end.advance(-1)
        _end.value().dtor()

    fun remove(this: @Vector, range: this.RangeType)
        var rBegin = range.frontPtr()
        var rEnd = range.backPtr()

        // Destruct all elements in the range
        for el = range
            el.dtor()

        // Move back elements in front
        while rEnd != _end
            rBegin.value().ctor(rEnd.value())
            rEnd.value().dtor()
            rBegin = rBegin.advance()
            rEnd = rEnd.advance()
        _end = rBegin

    fun remove(this: @Vector, index: SizeType)
        var r = this.all()

        r.popFront(index)
        r.popBack(this.size() - index - 1)
        this.remove(r)

    fun resize(this: @Vector, n: SizeType)
        let oldSize = this.size()

        if n == oldSize
            return

        if n < oldSize
            let newEnd = _begin.advance(n)

            while _end != newEnd
                _end = _end.advance(-1)
                _end.value().dtor()
        else
            this.reserve(n)

            let newEnd = _begin.advance(n)

            while _end != newEnd
                _end.value().ctor()
                _end = _end.advance()

    fun clear(this: @Vector)
        this.remove(RangeType(_begin, _end))

    fun assign(this: @Vector, range: Range)
        this.clear()
        for v = range
            this.pushBack(v)

    fun >>(this: @Vector, os: @OutStream) if isValid(os << #$this.ValueType)
        os << "Vec("
        for i = 0..this.size
            if i > 0
                os << ", "
            os << this.at(i)
        os << ')'

    fun _dumpThis(this: @Vector, prefix: StringRef)
        cout << prefix << "dumping " << TypeOp.description(Vector) << ": " << mkStreamRefWrapper(this) << endl
        cout << "    size: " << Int(this.size()) << endl
        cout << "    _begin: " << mkStreamRefWrapper(_begin.bytePtr()) << endl
        cout << "    _end: " << mkStreamRefWrapper(_end.bytePtr()) << endl
        cout << "    _endOfStore: " << mkStreamRefWrapper(_endOfStore.bytePtr()) << endl

