/// External functions used in the Sparrow parser & scanner
module sparrowc.spr.grammar.ext

import node
import meta.location

// All the functions here are defined in the compiler

[native("comp_parser_reportError")]
fun reportErrorExternal(loc: @Location, msg: StringRef)

[native("comp_parser_addToNodeList")]
fun addToNodeList(nl, newNode: Node): Node

[native("comp_parser_mkModifiers")]
fun mkModifiers(loc: @Location, main, mods: Node): Node
[native("comp_parser_mkModule")]
fun mkModule(loc: @Location, moduleName, decls: Node): Node
[native("comp_parser_mkImportName")]
fun mkImportName(loc: @Location, alias: StringRef, toImport, decls: Node): Node
[native("comp_parser_mkUsing")]
fun mkUsing(loc: @Location, alias: StringRef, usingNode: Node): Node
[native("comp_parser_mkPackage")]
fun mkPackage(loc: @Location, name: StringRef, children, params, ifClause: Node): Node
[native("comp_parser_mkDatatype")]
fun mkDatatype(loc: @Location, name: StringRef, params, underlyingData, ifClause, children: Node): Node
[native("comp_parser_mkField")]
fun mkField(loc: @Location, name: StringRef, typeNode, init: Node): Node
[native("comp_parser_mkConcept")]
fun mkConcept(loc: @Location, name, paramName: StringRef, baseConcept, ifClause: Node): Node
[native("comp_parser_mkLet")]
fun mkLet(loc: @Location, name: StringRef, typeNode, init: Node): Node
[native("comp_parser_mkVar")]
fun mkVar(loc: @Location, name: StringRef, typeNode, init: Node): Node
[native("comp_parser_mkParameter")]
fun mkParameter(loc: @Location, name: StringRef, typeNode, init: Node): Node
[native("comp_parser_mkFun")]
fun mkFun(loc: @Location, name: StringRef, formals, retType, body, bodyExp, ifClause: Node): Node

[native("comp_parser_mkParenthesisExpr")]
fun mkParenthesisExpr(expr: Node): Node
[native("comp_parser_mkPostfixOp")]
fun mkPostfixOp(loc: @Location, base: Node, op: StringRef): Node
[native("comp_parser_mkInfixOp")]
fun mkInfixOp(loc: @Location, lhs: Node, op: StringRef, rhs: Node): Node
[native("comp_parser_mkPrefixOp")]
fun mkPrefixOp(loc: @Location, op: StringRef, base: Node): Node
[native("comp_parser_mkIdentifier")]
fun mkIdentifier(loc: @Location, id: StringRef): Node
[native("comp_parser_mkCompoundExpr")]
fun mkCompoundExpr(loc: @Location, base: Node, id: StringRef): Node
[native("comp_parser_mkStarExpr")]
fun mkStarExpr(loc: @Location, base: Node, id: StringRef): Node
[native("comp_parser_mkDotExpr")]
fun mkDotExpr(loc: @Location, base: Node, id: StringRef): Node
[native("comp_parser_mkFunAppExpr")]
fun mkFunAppExpr(loc: @Location, base, args: Node): Node
[native("comp_parser_mkLambdaExpr")]
fun mkLambdaExpr(loc: @Location, closureParams, formals, retType, body, bodyExpr: Node): Node
[native("comp_parser_mkNullLiteral")]
fun mkNullLiteral(loc: @Location): Node
[native("comp_parser_mkBoolLiteral")]
fun mkBoolLiteral(loc: @Location, val: Bool): Node
[native("comp_parser_mkIntLiteral")]
fun mkIntLiteral(loc: @Location, val: Int): Node
[native("comp_parser_mkUIntLiteral")]
fun mkUIntLiteral(loc: @Location, val: UInt): Node
[native("comp_parser_mkLongLiteral")]
fun mkLongLiteral(loc: @Location, val: Long): Node
[native("comp_parser_mkULongLiteral")]
fun mkULongLiteral(loc: @Location, val: ULong): Node
[native("comp_parser_mkFloatLiteral")]
fun mkFloatLiteral(loc: @Location, val: Float): Node
[native("comp_parser_mkDoubleLiteral")]
fun mkDoubleLiteral(loc: @Location, val: Double): Node
[native("comp_parser_mkCharLiteral")]
fun mkCharLiteral(loc: @Location, val: Char): Node
[native("comp_parser_mkStringLiteral")]
fun mkStringLiteral(loc: @Location, data: StringRef): Node

[native("comp_parser_mkBlockStmt")]
fun mkBlockStmt(loc: @Location, stmts: Node): Node
[native("comp_parser_mkIfStmt")]
fun mkIfStmt(loc: @Location, expr, thenClause, elseClause: Node): Node
[native("comp_parser_mkForStmt")]
fun mkForStmt(loc: @Location, id: StringRef, typeNode, range, action: Node): Node
[native("comp_parser_mkWhileStmt")]
fun mkWhileStmt(loc: @Location, expr, stepAction, body: Node): Node
[native("comp_parser_mkBreakStmt")]
fun mkBreakStmt(loc: @Location): Node
[native("comp_parser_mkContinueStmt")]
fun mkContinueStmt(loc: @Location): Node
[native("comp_parser_mkReturnStmt")]
fun mkReturnStmt(loc: @Location, expr: Node): Node
