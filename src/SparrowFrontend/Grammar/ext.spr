module sparrowc.spr.grammar.ext
/// Interfaces required for the Sparrow scanner / parser.
/// Typically provided by the compiler

import node
import meta.location
import std.string

fun _returnsVoid {}
using VoidType = typeOf(_returnsVoid())

fun _reinterpretAssign(dest: !AnyType, src: AnyType)
    reinterpretCast(@typeOf(src), dest) = src
fun _eraseType(obj: AnyType): UntypedPtr
    return UntypedPtr(obj)

//! Interface that models a source of characters.
//! It allows the caller to read multiple characters at once
datatype CharSource
    userData: UntypedPtr
    readCharsFn: FunctionPtr(VoidType, UntypedPtr, !String, Int)

concept CharSourceType(x) \
    if isValid(TypeOp.copyVal(x).readChars(tmpToMut(String()), 0))

fun mkCharSource(obj: !CharSourceType): CharSource
    var res: CharSource
    res.userData = _eraseType(obj)
    res.readCharsFn _reinterpretAssign \(obj.readChars)
    return res

fun readChars(obj: CharSource, dest: !String, numChars: Int)
    obj.readCharsFn(obj.userData, dest, numChars)



//! Interface for the object used to report errors
datatype ErrorReporter
    userData: UntypedPtr
    reportErrorFn: FunctionPtr(VoidType, UntypedPtr, Location const, StringRef)

concept ErrorReporterType(x) \
    if isValid(x.reportError(Location(), StringRef()))

fun mkErrorReporter(obj: ErrorReporterType): ErrorReporter
    var res: ErrorReporter
    res.userData = _eraseType(obj)
    res.reportErrorFn _reinterpretAssign \(obj.reportError)
    return res

fun reportError(obj: ErrorReporter, loc: Location, msg: StringRef)
    obj.reportErrorFn(obj.userData, loc, msg)

fun reportError(obj: ErrorReporter, loc: Location, msg: String)
    obj.reportErrorFn(obj.userData, loc, msg.asStringRef)


//! Interface for the object called to create the AST nodes generated by the parser
datatype AstBuilder
    userData: UntypedPtr

    addToNodeListFn:    FunctionPtr(Node, UntypedPtr, Node, Node)

    mkModifiersFn:      FunctionPtr(Node, UntypedPtr, Location const, Node, Node)
    mkModuleFn:         FunctionPtr(Node, UntypedPtr, Location const, Node, Node)
    mkImportNameFn:     FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node, Node)
    mkUsingFn:          FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node)
    mkPackageFn:        FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node, Node, Node)
    mkDatatypeFn:       FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node)
    mkFieldFn:          FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node, Node)
    mkConceptFn:        FunctionPtr(Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node)
    mkLetFn:            FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node, Node)
    mkVarFn:            FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node, Node)
    mkParameterFn:      FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node, Node)
    mkFunFn:            FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node)

    mkParenthesisExprFn:FunctionPtr(Node, UntypedPtr, Node)
    mkPostfixOpFn:      FunctionPtr(Node, UntypedPtr, Location const, Node, StringRef)
    mkInfixOpFn:        FunctionPtr(Node, UntypedPtr, Location const, Node, StringRef, Node)
    mkPrefixOpFn:       FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node)
    mkIdentifierFn:     FunctionPtr(Node, UntypedPtr, Location const, StringRef)
    mkCompoundExprFn:   FunctionPtr(Node, UntypedPtr, Location const, Node, StringRef)
    mkStarExprFn:       FunctionPtr(Node, UntypedPtr, Location const, Node, StringRef)
    mkDotExprFn:        FunctionPtr(Node, UntypedPtr, Location const, Node, StringRef)
    mkFunAppExprFn:     FunctionPtr(Node, UntypedPtr, Location const, Node, Node)
    mkLambdaExprFn:     FunctionPtr(Node, UntypedPtr, Location const, Node, Node, Node, Node, Node)
    mkNullLiteralFn:    FunctionPtr(Node, UntypedPtr, Location const)
    mkBoolLiteralFn:    FunctionPtr(Node, UntypedPtr, Location const, Bool)
    mkIntLiteralFn:     FunctionPtr(Node, UntypedPtr, Location const, Int)
    mkUIntLiteralFn:    FunctionPtr(Node, UntypedPtr, Location const, UInt)
    mkLongLiteralFn:    FunctionPtr(Node, UntypedPtr, Location const, Long)
    mkULongLiteralFn:   FunctionPtr(Node, UntypedPtr, Location const, ULong)
    mkFloatLiteralFn:   FunctionPtr(Node, UntypedPtr, Location const, Float)
    mkDoubleLiteralFn:  FunctionPtr(Node, UntypedPtr, Location const, Double)
    mkCharLiteralFn:    FunctionPtr(Node, UntypedPtr, Location const, Char)
    mkStringLiteralFn:  FunctionPtr(Node, UntypedPtr, Location const, StringRef)

    mkBlockStmtFn:      FunctionPtr(Node, UntypedPtr, Location const, Node)
    mkIfStmtFn:         FunctionPtr(Node, UntypedPtr, Location const, Node, Node, Node)
    mkForStmtFn:        FunctionPtr(Node, UntypedPtr, Location const, StringRef, Node, Node, Node)
    mkWhileStmtFn:      FunctionPtr(Node, UntypedPtr, Location const, Node, Node, Node)
    mkBreakStmtFn:      FunctionPtr(Node, UntypedPtr, Location const)
    mkContinueStmtFn:   FunctionPtr(Node, UntypedPtr, Location const)
    mkReturnStmtFn:     FunctionPtr(Node, UntypedPtr, Location const, Node)

fun mkAstBuilder(obj: !AnyType): AstBuilder
    var res: AstBuilder
    res.userData = _eraseType(obj)
    res.addToNodeListFn     _reinterpretAssign \(obj.addToNodeList)

    res.mkModifiersFn       _reinterpretAssign \(obj.mkModifiers)
    res.mkModuleFn          _reinterpretAssign \(obj.mkModule)
    res.mkImportNameFn      _reinterpretAssign \(obj.mkImportName)
    res.mkUsingFn           _reinterpretAssign \(obj.mkUsing)
    res.mkPackageFn         _reinterpretAssign \(obj.mkPackage)
    res.mkDatatypeFn        _reinterpretAssign \(obj.mkDatatype)
    res.mkFieldFn           _reinterpretAssign \(obj.mkField)
    res.mkConceptFn         _reinterpretAssign \(obj.mkConcept)
    res.mkLetFn             _reinterpretAssign \(obj.mkLet)
    res.mkVarFn             _reinterpretAssign \(obj.mkVar)
    res.mkParameterFn       _reinterpretAssign \(obj.mkParameter)
    res.mkFunFn             _reinterpretAssign \(obj.mkFun)

    res.mkParenthesisExprFn _reinterpretAssign \(obj.mkParenthesisExpr)
    res.mkPostfixOpFn       _reinterpretAssign \(obj.mkPostfixOp)
    res.mkInfixOpFn         _reinterpretAssign \(obj.mkInfixOp)
    res.mkPrefixOpFn        _reinterpretAssign \(obj.mkPrefixOp)
    res.mkIdentifierFn      _reinterpretAssign \(obj.mkIdentifier)
    res.mkCompoundExprFn    _reinterpretAssign \(obj.mkCompoundExpr)
    res.mkStarExprFn        _reinterpretAssign \(obj.mkStarExpr)
    res.mkDotExprFn         _reinterpretAssign \(obj.mkDotExpr)
    res.mkFunAppExprFn      _reinterpretAssign \(obj.mkFunAppExpr)
    res.mkLambdaExprFn      _reinterpretAssign \(obj.mkLambdaExpr)
    res.mkNullLiteralFn     _reinterpretAssign \(obj.mkNullLiteral)
    res.mkBoolLiteralFn     _reinterpretAssign \(obj.mkBoolLiteral)
    res.mkIntLiteralFn      _reinterpretAssign \(obj.mkIntLiteral)
    res.mkUIntLiteralFn     _reinterpretAssign \(obj.mkUIntLiteral)
    res.mkLongLiteralFn     _reinterpretAssign \(obj.mkLongLiteral)
    res.mkULongLiteralFn    _reinterpretAssign \(obj.mkULongLiteral)
    res.mkFloatLiteralFn    _reinterpretAssign \(obj.mkFloatLiteral)
    res.mkDoubleLiteralFn   _reinterpretAssign \(obj.mkDoubleLiteral)
    res.mkCharLiteralFn     _reinterpretAssign \(obj.mkCharLiteral)
    res.mkStringLiteralFn   _reinterpretAssign \(obj.mkStringLiteral)

    res.mkBlockStmtFn       _reinterpretAssign \(obj.mkBlockStmt)
    res.mkIfStmtFn          _reinterpretAssign \(obj.mkIfStmt)
    res.mkForStmtFn         _reinterpretAssign \(obj.mkForStmt)
    res.mkWhileStmtFn       _reinterpretAssign \(obj.mkWhileStmt)
    res.mkBreakStmtFn       _reinterpretAssign \(obj.mkBreakStmt)
    res.mkContinueStmtFn    _reinterpretAssign \(obj.mkContinueStmt)
    res.mkReturnStmtFn      _reinterpretAssign \(obj.mkReturnStmt)
    return res



fun addToNodeList(obj: !AstBuilder, nl, newNode: Node): Node
    return obj.addToNodeListFn(obj.userData, nl, newNode)

fun mkModifiers(obj: !AstBuilder, loc: Location, main, mods: Node): Node
    return obj.mkModifiersFn(obj.userData, loc, main, mods)
fun mkModule(obj: !AstBuilder, loc: Location, moduleName, decls: Node): Node
    return obj.mkModuleFn(obj.userData, loc, moduleName, decls)
fun mkImportName(obj: !AstBuilder, loc: Location, alias: StringRef, toImport, decls: Node): Node
    return obj.mkImportNameFn(obj.userData, loc, alias, toImport, decls)
fun mkUsing(obj: !AstBuilder, loc: Location, alias: StringRef, usingNode: Node): Node
    return obj.mkUsingFn(obj.userData, loc, alias, usingNode)
fun mkPackage(obj: !AstBuilder, loc: Location, name: StringRef, children, params, ifClause: Node): Node
    return obj.mkPackageFn(obj.userData, loc, name, children, params, ifClause)
fun mkDatatype(obj: !AstBuilder, loc: Location, name: StringRef, params, underlyingData, ifClause, children: Node): Node
    return obj.mkDatatypeFn(obj.userData, loc, name, params, underlyingData, ifClause, children)
fun mkField(obj: !AstBuilder, loc: Location, name: StringRef, typeNode, init: Node): Node
    return obj.mkFieldFn(obj.userData, loc, name, typeNode, init)
fun mkConcept(obj: !AstBuilder, loc: Location, name, paramName: StringRef, baseConcept, ifClause: Node): Node
    return obj.mkConceptFn(obj.userData, loc, name, paramName, baseConcept, ifClause)
fun mkLet(obj: !AstBuilder, loc: Location, name: StringRef, typeNode, init: Node): Node
    return obj.mkLetFn(obj.userData, loc, name, typeNode, init)
fun mkVar(obj: !AstBuilder, loc: Location, name: StringRef, typeNode, init: Node): Node
    return obj.mkVarFn(obj.userData, loc, name, typeNode, init)
fun mkParameter(obj: !AstBuilder, loc: Location, name: StringRef, typeNode, init: Node): Node
    return obj.mkParameterFn(obj.userData, loc, name, typeNode, init)
fun mkFun(obj: !AstBuilder, loc: Location, name: StringRef, formals, retType, body, bodyExp, ifClause: Node): Node
    return obj.mkFunFn(obj.userData, loc, name, formals, retType, body, bodyExp, ifClause)

fun mkParenthesisExpr(obj: !AstBuilder, expr: Node): Node
    return obj.mkParenthesisExprFn(obj.userData, expr)
fun mkPostfixOp(obj: !AstBuilder, loc: Location, base: Node, op: StringRef): Node
    return obj.mkPostfixOpFn(obj.userData, loc, base, op)
fun mkInfixOp(obj: !AstBuilder, loc: Location, lhs: Node, op: StringRef, rhs: Node): Node
    return obj.mkInfixOpFn(obj.userData, loc, lhs, op, rhs)
fun mkPrefixOp(obj: !AstBuilder, loc: Location, op: StringRef, base: Node): Node
    return obj.mkPrefixOpFn(obj.userData, loc, op, base)
fun mkIdentifier(obj: !AstBuilder, loc: Location, id: StringRef): Node
    return obj.mkIdentifierFn(obj.userData, loc, id)
fun mkCompoundExpr(obj: !AstBuilder, loc: Location, base: Node, id: StringRef): Node
    return obj.mkCompoundExprFn(obj.userData, loc, base, id)
fun mkStarExpr(obj: !AstBuilder, loc: Location, base: Node, id: StringRef): Node
    return obj.mkStarExprFn(obj.userData, loc, base, id)
fun mkDotExpr(obj: !AstBuilder, loc: Location, base: Node, id: StringRef): Node
    return obj.mkDotExprFn(obj.userData, loc, base, id)
fun mkFunAppExpr(obj: !AstBuilder, loc: Location, base, args: Node): Node
    return obj.mkFunAppExprFn(obj.userData, loc, base, args)
fun mkLambdaExpr(obj: !AstBuilder, loc: Location, closureParams, formals, retType, body, bodyExpr: Node): Node
    return obj.mkLambdaExprFn(obj.userData, loc, closureParams, formals, retType, body, bodyExpr)
fun mkNullLiteral(obj: !AstBuilder, loc: Location): Node
    return obj.mkNullLiteralFn(obj.userData, loc)
fun mkBoolLiteral(obj: !AstBuilder, loc: Location, val: Bool): Node
    return obj.mkBoolLiteralFn(obj.userData, loc, val)
fun mkIntLiteral(obj: !AstBuilder, loc: Location, val: Int): Node
    return obj.mkIntLiteralFn(obj.userData, loc, val)
fun mkUIntLiteral(obj: !AstBuilder, loc: Location, val: UInt): Node
    return obj.mkUIntLiteralFn(obj.userData, loc, val)
fun mkLongLiteral(obj: !AstBuilder, loc: Location, val: Long): Node
    return obj.mkLongLiteralFn(obj.userData, loc, val)
fun mkULongLiteral(obj: !AstBuilder, loc: Location, val: ULong): Node
    return obj.mkULongLiteralFn(obj.userData, loc, val)
fun mkFloatLiteral(obj: !AstBuilder, loc: Location, val: Float): Node
    return obj.mkFloatLiteralFn(obj.userData, loc, val)
fun mkDoubleLiteral(obj: !AstBuilder, loc: Location, val: Double): Node
    return obj.mkDoubleLiteralFn(obj.userData, loc, val)
fun mkCharLiteral(obj: !AstBuilder, loc: Location, val: Char): Node
    return obj.mkCharLiteralFn(obj.userData, loc, val)
fun mkStringLiteral(obj: !AstBuilder, loc: Location, data: StringRef): Node
    return obj.mkStringLiteralFn(obj.userData, loc, data)

fun mkBlockStmt(obj: !AstBuilder, loc: Location, stmts: Node): Node
    return obj.mkBlockStmtFn(obj.userData, loc, stmts)
fun mkIfStmt(obj: !AstBuilder, loc: Location, expr, thenClause, elseClause: Node): Node
    return obj.mkIfStmtFn(obj.userData, loc, expr, thenClause, elseClause)
fun mkForStmt(obj: !AstBuilder, loc: Location, id: StringRef, typeNode, range, action: Node): Node
    return obj.mkForStmtFn(obj.userData, loc, id, typeNode, range, action)
fun mkWhileStmt(obj: !AstBuilder, loc: Location, expr, stepAction, body: Node): Node
    return obj.mkWhileStmtFn(obj.userData, loc, expr, stepAction, body)
fun mkBreakStmt(obj: !AstBuilder, loc: Location): Node
    return obj.mkBreakStmtFn(obj.userData, loc)
fun mkContinueStmt(obj: !AstBuilder, loc: Location): Node
    return obj.mkContinueStmtFn(obj.userData, loc)
fun mkReturnStmt(obj: !AstBuilder, loc: Location, expr: Node): Node
    return obj.mkReturnStmtFn(obj.userData, loc, expr)
