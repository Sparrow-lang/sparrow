module sparrowc.spr.grammar.layoutDecoder

import parserDefs, node, token, ext, rangeWithLookahead, ext
import meta.location

/**
 * This decodes the layout of Sparrow code, and generate corresponding tokens for it.
 *
 * It will check for new-lines, and depending on the column number of the first
 * tokens of each line computes the open and close scope tokens, and also the
 * SEMI token.
 *
 * Rules:
 * 1) two lines that start with the same column will be separated by a SEMI, unless:
 *     - the next token is a '{'
 *     - the previous token is either a ';' or a '}'
 * 2) a line that is more indented than the previous line will insert a '{'
 * 3) when decreasing indent, we insert a ';' and as many '}' to match the new indentation
 * 4) inside parenthesis or brackets, we don't insert anything, except:
 *     - if we are inside curly braces that are inside the inner most paren/brackets
 */
datatype SparrowLayoutDecoder(tokensRangeType: Type) \
        if TokenRange(#$tokensRangeType)
    using RetType = Token
    using _TokensRangeType = tokensRangeType

    /// The source ranges of tokens we will used while parsing
    _src: RangeWithLookahead(tokensRangeType)
    /// Object used to report errors
    _errorReporter: ErrorReporter
    /// The vector containing the current indents levels
    _indents: UInt Vector
    /// The vector of currently open parenthesis and brackets
    _parens: Char Vector
    /// Indicates what and how many tokens we should inject in the stream
    _toInject: TokenType
    /// The number of tokens to be injected
    /// If the number of tokens is greater than 1, we change the type to '}'
    _toInjectCnt: Int

fun ctor(this: !SparrowLayoutDecoder, tokens: this._TokensRangeType, errorReporter: ErrorReporter)
    this._src ctor tokens
    this._errorReporter ctor errorReporter
    this._indents += 1      // Start at column 1
    this._toInject = tkSEMICOLON
    this._toInjectCnt = 0

    // If we start by a new-line, advance
    if !_src.isEmpty && (_src.front).type == tkEOL
        this.popFront

fun isEmpty(this: SparrowLayoutDecoder): Bool = _toInjectCnt == 0 && _src.isEmpty
fun front(this: SparrowLayoutDecoder): Token
    var tk = _src.front
    if _toInjectCnt > 0
        tk.type = _toInject
    return tk
fun popFront(this: !SparrowLayoutDecoder)
    // Are we moving past the injected tokens?
    if _toInjectCnt > 0
        _toInjectCnt--         // Consume one injected token
        // After the first token injected, switch to '}'
        _toInject = tkRCURLY
        return

    var oldType = (this.front).type

    // Consume the current token from the input range
    _src.popFront

    // Check for line endings (or end of files)
    var changeLine = _src.front().type == tkEOL || _src.front().type == tkEND
    while _src.front().type == tkEOL
        _src.popFront

    var tk = _src.front

    // Apply special logic on line change -- only outside any parenthesis
    var outsideParens = _parens.isEmpty || _parens.back == '{'.char
    if changeLine && outsideParens
        var newCol = tk.loc.start.col
        var oldCol = _indents.back

        // If we are at the end of file, make sure to insert the missing '}'
        if tk.type == tkEND
            newCol = 1

        // Inject a semicolon if we stay on the same line, and we are not followed by a open curly
        if newCol == oldCol && tk.type != tkLCURLY && oldType != tkSEMICOLON && oldType != tkRCURLY
            _toInject = tkSEMICOLON
            _toInjectCnt = 1

        // Inject an open curly if we have an indent
        // Also record add the new indent level to the stack of indents, to
        // know how many scopes we need to pop
        if newCol > oldCol && tk.type != tkEND
            _toInject = tkLCURLY
            _toInjectCnt = 1
            _indents += newCol

        // Inject close curly if we have dedent
        // Make sure to insert the right number of close curly brackets to match
        // the indent level
        if newCol < oldCol && newCol>=1
            // Check how many '}' we need to insert
            var numDedents = 0
            while newCol < _indents.back
                numDedents++
                _indents.popBack
            // Insert a ';', then numDedents of '}'
            _toInject = tkSEMICOLON
            _toInjectCnt = 1+numDedents
            // The new column must match one of the previous indents
            if newCol != _indents.back
                _errorReporter.reportError(tk.loc, toString("Invalid indentation, expecting ", _indents.back, ", got ", newCol))

    // Check for parenthesis
    if tk.type == tkLPAREN
        _parens += '('.char
    else if tk.type == tkLBRACKET
        _parens += '['.char
    else if tk.type == tkLCURLY
        _parens += '{'.char
    else if tk.type == tkRPAREN && _parens.back == '('.char
        _parens.popBack
    else if tk.type == tkRBRACKET && _parens.back == '['.char
        _parens.popBack
    else if tk.type == tkRCURLY && _parens.back == '{'.char
        _parens.popBack

