module sparrowc.spr.grammar.parser

import parserDefs, node, token, ext, rangeWithLookahead
import meta.location

/// Our main parser
///
/// Takes as an input a range of tokens (produced by the scanner) and produces
/// a node as a result. The node is in fast and AST (tree).
///
/// All the nodes are created outside the parser; we only care about node pointers
///
datatype SparrowParser(tokensRangeType: Type) if TokenRange(#$tokensRangeType)
    using _TokensRangeType = tokensRangeType

    /// The source ranges of tokens we will used while parsing
    _tokens: RangeWithLookahead(tokensRangeType)
    /// The last processed token
    _lastToken: Token
    /// Indicates whether we have some syntax errors
    _hasErrors: Bool
    /// Object used to create the AST nodes
    _astBuilder: AstBuilder
    /// Object used to report errors
    _errorReporter: ErrorReporter

fun ctor(this: @SparrowParser, tokens: this._TokensRangeType, astBuilder: @AstBuilder, errorReporter: ErrorReporter)
    this._tokens ctor tokens
    this._hasErrors ctor false
    this._astBuilder ctor astBuilder
    this._errorReporter ctor errorReporter

using parseModule = _Impl.parseModule
using parseExpression = _Impl.parseExpression

package _Impl
    fun reportError(this: @SparrowParser, msg: @String)
        // Report the error
        _errorReporter.reportError((*_tokens).loc, msg)
        // Consume all the tokens until the end of the file
        while (*_tokens).type != tkEND
            _lastToken = (_tokens++)
        _hasErrors = true

    fun curLoc(this: @SparrowParser) = (*_tokens).loc
    fun lastLoc(this: @SparrowParser) = _lastToken.loc

    fun nextIs(this: @SparrowParser, t: TokenType): Bool = (*_tokens).type == t
    fun next2Is(this: @SparrowParser, t: TokenType): Bool = (_tokens peek 1).type == t

    fun accept(this: @SparrowParser, t: TokenType): Bool
        if (*_tokens).type == t
            _lastToken = (_tokens++)
            // cout << "Accepted " << _lastToken.type << endl
            return true
        return false

    fun expect(this: @SparrowParser, t: TokenType): Bool
        // Everything is ok if this is the token we are expecting
        if this accept t
            return true
        if _hasErrors  // Already inside an error; don't do anything
            return false
        // Report error if this token is now what we expected
        this reportError toString("Syntax error, unexpected ", (*_tokens).type, ", expecting ", t)
        return false

    ///////////////////////////////////////////////////////////////////////////////
    // Top level parsing
    //

    fun parseModule(this: @SparrowParser): Node
        var loc = this curLoc
        var moduleName = parseModuleName(this)
        var decls: Node
        parseStmts(this, true, decls)
        this expect tkEND
        return _astBuilder.mkModule(loc span (this lastLoc), moduleName, decls)

    fun parseExpression(this: @SparrowParser): Node
        var res = parseExpr(this)
        this accept tkSEMICOLON
        this expect tkEND
        return res

    ///////////////////////////////////////////////////////////////////////////////
    // Common rules
    //

    fun consumeSemis(this: @SparrowParser)
        while this accept tkSEMICOLON {}

    fun parseIdOrOper(this: @SparrowParser, withEqual: Bool = true): String
        if this accept tkIDENTIFIER
            return _lastToken.data
        else if this accept tkOPERATOR
            return _lastToken.data
        else if withEqual && (this accept tkEQUAL)
            return "="
        this reportError toString("Syntax error, unexpected ", (*_tokens).type, ", expecting identifier or operator")

    fun parseIdOrOperOpt(this: @SparrowParser, withEqual: Bool = true): String
        if this accept tkIDENTIFIER
            return _lastToken.data
        else if this accept tkOPERATOR
            return _lastToken.data
        else if withEqual && (this accept tkEQUAL)
            return "="
        else
            return String()

    fun parseOperOpt(this: @SparrowParser, withEqual: Bool = true): String
        if this accept tkOPERATOR
            return _lastToken.data
        else if withEqual && (this accept tkEQUAL)
            return _lastToken.data
        else
            return String()

    fun parseId(this: @SparrowParser): String
        this expect tkIDENTIFIER
        return _lastToken.data

    // Parses a structure of the form 'id =', with lookahead
    // Can appear in the context of other non-equal expressions
    fun parseIdEqualOpt(this: @SparrowParser): String
        var id: String
        if (this nextIs tkIDENTIFIER) && (this next2Is tkEQUAL)
            this expect tkIDENTIFIER
            id = _lastToken.data
            this expect tkEQUAL
        return id

    fun parseQualifiedName(this: @SparrowParser, allowStar: Bool = false): Node
        var loc = this curLoc
        this expect tkIDENTIFIER
        var base = _astBuilder.mkIdentifier(loc, _lastToken.data.asStringRef)

        var lastId = _lastToken.data
        while this accept tkDOT
            if allowStar && (this accept tkOPERATOR)
                base = _astBuilder.mkStarExpr(loc span (this lastLoc), base, _lastToken.data.asStringRef)
                break
            this expect tkIDENTIFIER
            base = _astBuilder.mkCompoundExpr(loc span (this lastLoc), base, _lastToken.data.asStringRef)
        return base

    fun parseIdList(this: @SparrowParser): LocStringVec
        var res: LocStringVec
        var id = parseId(this)
        res += LocString(_lastToken.loc ~ id)
        while this accept tkCOMMA
            id = parseId(this)
            res += LocString(_lastToken.loc ~ id)
        return res
    fun parseIdListNode(this: @SparrowParser): Node
        var res: Node
        var id = parseId(this)
        res = _astBuilder.addToNodeList(res, _astBuilder.mkIdentifier(_lastToken.loc, id.asStringRef))
        while this accept tkCOMMA
            id = parseId(this)
            res = _astBuilder.addToNodeList(res, _astBuilder.mkIdentifier(_lastToken.loc, id.asStringRef))
        return res

    fun parseIdOrOperListNode(this: @SparrowParser): Node
        var res: Node
        var id = parseIdOrOper(this)
        res = _astBuilder.addToNodeList(res, _astBuilder.mkIdentifier(_lastToken.loc, id.asStringRef))
        while this accept tkCOMMA
            id = parseIdOrOper(this)
            res = _astBuilder.addToNodeList(res, _astBuilder.mkIdentifier(_lastToken.loc, id.asStringRef))
        return res

    ///////////////////////////////////////////////////////////////////////////////
    // Top level
    //

    fun parseModuleName(this: @SparrowParser): Node
        while this accept tkSEMICOLON
            ;
        if this accept tkMODULE
            var qid = parseQualifiedName(this)
            this expect tkSEMICOLON
            return qid
        return Node()

    fun parseModifiers(this: @SparrowParser): Node
        var res: Node
        if this accept tkLBRACKET
            var e: Node
            e = parseExpr(this)
            res = _astBuilder.addToNodeList(res, e)
            while this accept tkCOMMA
                e = parseExpr(this)
                res = _astBuilder.addToNodeList(res, e)
            this expect tkRBRACKET

            // Ignore any possible semicolons (newlines) after the modifiers
            this consumeSemis
        return res

    fun parseStmts(this: @SparrowParser, topLevel: Bool, res: @Node)
        while true
            var child = parseStmt(this, topLevel)
            if child isSet
                res = _astBuilder.addToNodeList(res, child)
                continue

            // No more top level decls found
            break
    fun parseStmt(this: @SparrowParser, topLevel: Bool): Node
        var res: Node

        // Ignore empty statements
        this consumeSemis

        var loc = this curLoc
        var mods = parseModifiers(this)
        var found = (
               parseImportLineOpt(this, res)
            || parseUsingDecl(this, res)
            || parsePackageDecl(this, res)
            || parseDatatypeDecl(this, res)
            || parseConceptDecl(this, res)
            || parseVarDecl(this, res)
            || parseFunDecl(this, res)
            || parseExprStmt(this, res)
            || parseBlockStmt(this, res, topLevel)
            || parseIfStmt(this, res, topLevel)
            || parseForStmt(this, res, topLevel)
            || parseWhileStmt(this, res, topLevel)
            || parseBreakStmt(this, res)
            || parseContinueStmt(this, res)
            || parseReturnStmt(this, res)
        )

        if mods isSet
            if found
                res = _astBuilder.mkModifiers(loc span (this lastLoc), res, mods)
            else
                this reportError toString("Syntax error, unexpected ", (*_tokens).type, ", expecting statement")

        return res

    fun parseImportLineOpt(this: @SparrowParser, res: @Node): Bool
        if this accept tkIMPORT
            res = parseImportNames(this)
            this expect tkSEMICOLON
            return true
        return false
    fun parseImportNames(this: @SparrowParser): Node
        var res: Node
        res = _astBuilder.addToNodeList(res, parseImportName(this))
        while this accept tkCOMMA
            res = _astBuilder.addToNodeList(res, parseImportName(this))
        return res
    fun parseImportName(this: @SparrowParser): Node
        var loc = this curLoc
        var id = parseIdEqualOpt(this)
        var toImport = parseQidOrString(this)
        var declNames = parseImportDeclNamesOpt(this)
        return _astBuilder.mkImportName(loc span (this lastLoc), id.asStringRef, toImport, declNames)
    fun parseQidOrString(this: @SparrowParser): Node
        if this accept tkSTRING_LITERAL
            return _astBuilder.mkStringLiteral(_lastToken.loc, _lastToken.data.asStringRef)
        return parseQualifiedName(this)
    fun parseImportDeclNamesOpt(this: @SparrowParser): Node
        var res: Node
        if this accept tkLPAREN
            res = parseIdOrOperListNode(this)
            this expect tkRPAREN
        return res

    fun parseUsingDecl(this: @SparrowParser, res: @Node): Bool
        if !(this accept tkUSING)
            return false
        var loc = _lastToken.loc
        var id = parseIdEqualOpt(this)
        var usingNode: Node
        if id.isEmpty
            usingNode = parseQualifiedName(this, true)
        else
            usingNode = parseExpr(this)
        loc copyEnd _lastToken.loc
        this expect tkSEMICOLON
        res = _astBuilder.mkUsing(loc, id.asStringRef, usingNode)
        return true
    fun parsePackageDecl(this: @SparrowParser, res: @Node): Bool
        if !(this accept tkPACKAGE)
            return false
        var loc = _lastToken.loc
        var id = parseId(this)
        var formals = parseFormalsOpt(this)
        var ifClause = parseIfClauseOpt(this)
        this expect tkLCURLY
        var children: Node
        parseStmts(this, true, children)
        this expect tkRCURLY
        loc copyEnd _lastToken.loc
        res = _astBuilder.mkPackage(loc, id.asStringRef, children, formals, ifClause)
        return true
    fun parseDatatypeDecl(this: @SparrowParser, res: @Node): Bool
        if !(this accept tkDATATYPE)
            return false
        var loc = _lastToken.loc
        var id = parseId(this)
        var formals = parseFormalsOpt(this)
        if this accept tkEQUAL
            var underlyingData = parseExpr(this)
            var ifClause = parseIfClauseOpt(this)
            this expect tkSEMICOLON
            loc copyEnd _lastToken.loc
            res = _astBuilder.mkDatatype(loc, id.asStringRef, formals, underlyingData, ifClause, Node())
        else
            var ifClause = parseIfClauseOpt(this)
            var children: Node
            if this accept tkSEMICOLON
                ;
            else
                this expect tkLCURLY
                while !(this nextIs tkRCURLY) && !_hasErrors
                    while (this accept tkCOMMA) || (this accept tkSEMICOLON) {}
                    if this nextIs tkRCURLY break
                    var usingNode: Node
                    if parseUsingDecl(this, usingNode)
                        children = _astBuilder.addToNodeList(children, usingNode)
                    else
                        parseFieldsLine(this, children)
                    while (this accept tkCOMMA) || (this accept tkSEMICOLON) {}
                this expect tkRCURLY
            loc copyEnd _lastToken.loc
            res = _astBuilder.mkDatatype(loc, id.asStringRef, formals, Node(), ifClause, children)
        return true
    fun parseConceptDecl(this: @SparrowParser, res: @Node): Bool
        if !(this accept tkCONCEPT)
            return false
        var loc = _lastToken.loc
        var id = parseId(this)
        this expect tkLPAREN
        var paramName = parseId(this)
        var baseConcept = parseTypeNode(this)
        this expect tkRPAREN
        var ifClause = parseIfClauseOpt(this)
        this expect tkSEMICOLON
        loc copyEnd _lastToken.loc
        res = _astBuilder.mkConcept(loc, id.asStringRef, paramName.asStringRef, baseConcept, ifClause)
        return true
    fun parseVarDecl(this: @SparrowParser, res: @Node): Bool
        if !(this accept tkVAR)
            return false
        var ids = parseIdList(this)
        var typeNode, init: Node
        if this accept tkCOLON
            typeNode = parseExpr(this, false)
            if this accept tkEQUAL
                init = parseExpr(this)
        else
            this expect tkEQUAL
            init = parseExpr(this)
        this expect tkSEMICOLON

        createFormals(_astBuilder, ids, typeNode, init, true, res)
        return true
    fun parseFunDecl(this: @SparrowParser, res: @Node): Bool
        if !(this accept tkFUN)
            return false
        var loc = _lastToken.loc
        var id = parseFunNameString(this)
        var formals = parseFormalsOpt(this)
        var retType = parseTypeNode(this)
        var body, bodyExp, ifClause: Node
        if this accept tkEQUAL
            bodyExp = parseExpr(this)
            ifClause = parseIfClauseOpt(this)
            this expect tkSEMICOLON
        else
            ifClause = parseIfClauseOpt(this)
            body = parseFunBody(this)
        loc copyEnd _lastToken.loc
        res = _astBuilder.mkFun(loc, id.asStringRef, formals, retType, body, bodyExp, ifClause)
        return true

    fun parseFunNameString(this: @SparrowParser): String
        if this accept tkDOT
            return '.'
        if this accept tkLPAREN
            this expect tkRPAREN
            return "()"
        return parseIdOrOper(this)
    fun parseFormalsOpt(this: @SparrowParser, varFormals: Bool = false): Node
        var res: Node
        if this accept tkLPAREN
            // Traditional case: formals in parenthesis
            if this accept tkRPAREN
                return res // no formal
            parseFormal(this, varFormals, res)
            while this accept tkCOMMA
                parseFormal(this, varFormals, res)
            this expect tkRPAREN
        else if this nextIs tkIDENTIFIER
            // Simplified versions: just names, without parenthesis
            var loc = this curLoc
            var ids = parseIdList(this)
            createFormals(_astBuilder, ids, _astBuilder.mkIdentifier(loc span (this lastLoc), "AnyType"), Node(), varFormals, res)
        return res
    fun parseFormal(this: @SparrowParser, varFormals: Bool, res: @Node)
        var ids = parseIdList(this)
        this expect tkCOLON
        var typeNode = parseExpr(this, false)
        var init: Node
        if this accept tkEQUAL
            init = parseExpr(this)
        createFormals(_astBuilder, ids, typeNode, init, varFormals, res)
    fun createFormals(astBuilder: @AstBuilder, ids: @LocStringVec, typeNode, init: Node, varFormals: Bool, res: @Node)
        if varFormals
            for id: @LocString = ids.all
                var v = astBuilder.mkVar(id.data.v1, id.data.v2.asStringRef, typeNode, init)
                res = astBuilder.addToNodeList(res, v)
        else
            for id: @LocString = ids.all
                var p = astBuilder.mkParameter(id.data.v1, id.data.v2.asStringRef, typeNode, init)
                res = astBuilder.addToNodeList(res, p)
    fun parseFieldsLine(this: @SparrowParser, res: @Node)
        var ids = parseIdList(this)
        this expect tkCOLON
        var typeNode = parseExpr(this, false)
        var init: Node
        if this accept tkEQUAL
            init = parseExpr(this)
        for id: @LocString = ids.all
            var v = _astBuilder.mkField(id.data.v1, id.data.v2.asStringRef, typeNode, init)
            res = _astBuilder.addToNodeList(res, v)
    fun parseTypeNode(this: @SparrowParser): Node
        if this accept tkCOLON
            return parseExpr(this, false)
        return Node()
    fun parseIfClauseOpt(this: @SparrowParser): Node
        if this accept tkIF
            return parseExpr(this)
        return Node()
    fun parseFunBody(this: @SparrowParser): Node
        if this accept tkSEMICOLON
            return Node()
        var res: Node
        if !parseBlockStmt(this, res, false)
            this reportError toString("Syntax error, unexpected ", (*_tokens).type, ", expecting block statement")
        return res

    fun parseIfTopLevel(this: @SparrowParser, res: @Node): Bool
        if !(this accept tkIF)
            return false
        var loc = this lastLoc
        this expect tkLPAREN
        var expr = parseExpr(this)
        this expect tkRPAREN
        var thenClause = parseStmt(this, true)
        var elseClause: Node
        if this accept tkELSE
            elseClause = parseStmt(this, true)
        loc copyEnd _lastToken.loc
        res = _astBuilder.mkIfStmt(loc, expr, thenClause, elseClause)
        return true

    ///////////////////////////////////////////////////////////////////////////////
    // Expressions
    //


    fun nextIsExpr(this: @SparrowParser, withEqual: Bool = true): Bool
        var t = (*_tokens).type
        if t == tkEQUAL
            return withEqual
        return (
               t == tkIDENTIFIER
            || t == tkOPERATOR
            || t == tkBACKSQUOTE
            || t == tkLPAREN
            || t == tkNULLCT
            || t == tkTRUE
            || t == tkFALSE
            || t == tkCHAR_LITERAL
            || t == tkSTRING_LITERAL
            || t == tkINT_LITERAL
            || t == tkLONG_LITERAL
            || t == tkUINT_LITERAL
            || t == tkULONG_LITERAL
            || t == tkFLOAT_LITERAL
            || t == tkDOUBLE_LITERAL
        )
    fun parseExprOpt(this: @SparrowParser, res: @Node, allowSemicolons: Bool = false): Bool
        if this nextIsExpr
            res = parseExpr(this)
            // We may have some semicolons after
            if allowSemicolons
                this consumeSemis
            return true
        return false

    // Zero, one, or more expressions separated by comma
    fun parseExprListOpt(this: @SparrowParser): Node
        var res: Node
        var expr: Node
        if !parseExprOpt(this, expr)
            return res // no expression found
        res = _astBuilder.addToNodeList(res, expr)
        while this accept tkCOMMA
            expr = parseExpr(this)
            res = _astBuilder.addToNodeList(res, expr)
        return res

    // Logic for parsing infix & postfix expressions
    fun parseExpr(this: @SparrowParser, withEqual: Bool = true): Node
        var loc = this curLoc
        var baseExpr = parsePrefixExpr(this, withEqual)
        var op: String
        while true
            op = parseIdOrOperOpt(this, withEqual)
            if op.isEmpty break

            if nextIsExpr(this, withEqual)
                // Infix expression
                var rhs = parsePrefixExpr(this, withEqual)
                baseExpr = _astBuilder.mkInfixOp(loc span (this lastLoc), baseExpr, op.asStringRef, rhs)
            else
                // The end of a postfix expression
                baseExpr = _astBuilder.mkPostfixOp(loc span (this lastLoc), baseExpr, op.asStringRef)
                break
        return baseExpr

    fun parsePrefixExpr(this: @SparrowParser, withEqual: Bool = true): Node
        var loc = this curLoc
        var op: String
        if this accept tkBACKSQUOTE
            op = parseId(this)
            this expect tkBACKSQUOTE
        else
            op = parseOperOpt(this)

        if op.isEmpty
            return parseSimpleExpr(this)
        else
            var baseExpr = parsePrefixExpr(this)
            return _astBuilder.mkPrefixOp(loc span (this lastLoc), op.asStringRef, baseExpr)

    fun parseSimpleExpr(this: @SparrowParser, withEqual: Bool = true): Node
        var res: Node
        var loc = this curLoc
        if (this nextIs tkLPAREN) && (this next2Is tkFUN)
            res = parseLambdaExpr(this)
        else if this accept tkLPAREN
            res = _astBuilder.mkParenthesisExpr(parseExpr(this))
            this expect tkRPAREN
        else if this accept tkIDENTIFIER
            res = _astBuilder.mkIdentifier(_lastToken.loc, _lastToken.data.asStringRef)
        else if this accept tkNULLCT
            res = _astBuilder.mkNullLiteral(_lastToken.loc)
        else if this accept tkTRUE
            res = _astBuilder.mkBoolLiteral(_lastToken.loc, true)
        else if this accept tkFALSE
            res = _astBuilder.mkBoolLiteral(_lastToken.loc, false)
        else if this accept tkINT_LITERAL
            res = _astBuilder.mkIntLiteral(_lastToken.loc, Int(_lastToken.intData))
        else if this accept tkUINT_LITERAL
            res = _astBuilder.mkUIntLiteral(_lastToken.loc, UInt(_lastToken.intData))
        else if this accept tkLONG_LITERAL
            res = _astBuilder.mkLongLiteral(_lastToken.loc, Long(_lastToken.intData))
        else if this accept tkULONG_LITERAL
            res = _astBuilder.mkULongLiteral(_lastToken.loc, ULong(_lastToken.intData))
        else if this accept tkFLOAT_LITERAL
            res = _astBuilder.mkFloatLiteral(_lastToken.loc, Float(_lastToken.floatData))
        else if this accept tkDOUBLE_LITERAL
            res = _astBuilder.mkDoubleLiteral(_lastToken.loc, Double(_lastToken.floatData))
        else if this accept tkCHAR_LITERAL
            res = _astBuilder.mkCharLiteral(_lastToken.loc, _lastToken.data(0))
        else if this accept tkSTRING_LITERAL
            res = _astBuilder.mkStringLiteral(_lastToken.loc, _lastToken.data.asStringRef)

        if res isNull
            this reportError toString("Syntax error, unexpected ", (*_tokens).type, ", expecting expression")
            return Node()

        // possible expression suffixes
        while true
            if this accept tkLPAREN
                var args = parseExprListOpt(this)
                this expect tkRPAREN
                res = _astBuilder.mkFunAppExpr(loc span (this lastLoc), res, args)
            else if this accept tkDOT
                if this accept tkLPAREN
                    this expect tkRPAREN
                    res = _astBuilder.mkDotExpr(loc span (this lastLoc), res, "()")
                else
                    var id = parseIdOrOper(this, withEqual)
                    res = _astBuilder.mkDotExpr(loc span (this lastLoc), res, id.asStringRef)
            else
                break

        return res
    fun parseLambdaExpr(this: @SparrowParser): Node
        var loc = this curLoc
        this expect tkLPAREN
        this expect tkFUN
        var closureParams = parseClosureParams(this)
        var formals = parseFormalsOpt(this)
        var retType = parseTypeNode(this)
        var body, bodyExp: Node
        if this accept tkEQUAL
            bodyExp = parseExpr(this)
        else
            body = parseFunBody(this)
        this expect tkRPAREN
        return _astBuilder.mkLambdaExpr(loc span (this lastLoc), closureParams, formals, retType, body, bodyExp)
    fun parseClosureParams(this: @SparrowParser): Node
        var res: Node
        if this accept tkDOT
            this expect tkLCURLY
            if this nextIs tkIDENTIFIER
                res = parseIdListNode(this)
            this expect tkRCURLY
        return res

    ///////////////////////////////////////////////////////////////////////////////
    // Statements
    //

    fun parseExprStmt(this: @SparrowParser, res: @Node): Bool
        return parseExprOpt(this, res, true)

    fun parseBlockStmt(this: @SparrowParser, res: @Node, topLevel: Bool): Bool
        var loc = this curLoc
        if this accept tkLCURLY
            res = Node()
            while !(this nextIs tkRCURLY) && !_hasErrors
                var s = parseStmt(this, topLevel)
                if s isSet
                    res = _astBuilder.addToNodeList(res, s)
                else
                    break
            this expect tkRCURLY
            if !topLevel
                res = _astBuilder.mkBlockStmt(loc span (this lastLoc), res)
            return true
        return false
    fun parseIfStmt(this: @SparrowParser, res: @Node, topLevel: Bool): Bool
        var loc = this curLoc
        if this accept tkIF
            var expr = parseExpr(this)
            var thenClause = parseStmt(this, topLevel)
            var elseClause: Node
            if this accept tkELSE
                elseClause = parseStmt(this, topLevel)
            loc copyEnd _lastToken.loc
            res = _astBuilder.mkIfStmt(loc, expr, thenClause, elseClause)
            return true
        return false
    fun parseForStmt(this: @SparrowParser, res: @Node, topLevel: Bool): Bool
        var loc = this curLoc
        if this accept tkFOR
            var id = parseId(this)
            var typeNode: Node
            if this accept tkCOLON
                typeNode = parseExpr(this, false)
            this expect tkEQUAL
            var range = parseExpr(this)
            var action = parseStmt(this, topLevel)
            loc copyEnd _lastToken.loc
            res = _astBuilder.mkForStmt(loc, id.asStringRef, typeNode, range, action)
            return true
        return false
    fun parseWhileStmt(this: @SparrowParser, res: @Node, topLevel: Bool): Bool
        var loc = this curLoc
        if this accept tkWHILE
            var expr = parseExpr(this)
            var stepAction: Node
            if this accept tkSEMICOLON
                // Now expect an expression or a block statement, as the step action
                if ( !parseExprOpt(this, stepAction, true)
                    && !parseBlockStmt(this, stepAction, topLevel) )
                    this reportError toString("Syntax error, unexpected ", (*_tokens).type, ", expecting expression or block statement")
            var body = parseStmt(this, topLevel)
            loc copyEnd _lastToken.loc
            res = _astBuilder.mkWhileStmt(loc, expr, stepAction, body)
            return true
        return false
    fun parseBreakStmt(this: @SparrowParser, res: @Node): Bool
        if this accept tkBREAK
            var loc = _lastToken.loc
            this expect tkSEMICOLON
            res = _astBuilder.mkBreakStmt(loc)
            return true
        return false
    fun parseContinueStmt(this: @SparrowParser, res: @Node): Bool
        if this accept tkCONTINUE
            var loc = _lastToken.loc
            this expect tkSEMICOLON
            res = _astBuilder.mkContinueStmt(loc)
            return true
        return false

    fun parseReturnStmt(this: @SparrowParser, res: @Node): Bool
        if this accept tkRETURN
            var loc = _lastToken.loc
            var expr: Node
            if this accept tkSEMICOLON

            else
                expr = parseExpr(this)
                this expect tkSEMICOLON
            res = _astBuilder.mkReturnStmt(loc, expr)
            return true
        return false
