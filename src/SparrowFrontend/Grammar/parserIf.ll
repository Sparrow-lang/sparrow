; ModuleID = 'LLVM backend module Runtime'
source_filename = "LLVM backend module Runtime"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"

%EndLineHelperClass = type {}
%FlushHelperClass = type {}
%ConsoleOutputStream = type {}
%MainParameters = type { %CStrPtr, %CStrPtr }
%CStrPtr = type { %CStr* }
%CStr = type { i8* }
%struct._IO_FILE = type opaque
%Uninitialized = type {}
%Null = type {}
%StringRef = type { %UntypedPtr, %UntypedPtr }
%UntypedPtr = type { i8* }
%ParserContext = type { %SparrowScanner, %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]" }
%SparrowScanner = type { %Location, %BufferedCharSource, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %Token, i1, %ErrorReporter, i1 }
%Location = type { %SourceCode, %LineCol, %LineCol }
%SourceCode = type { %UntypedPtr }
%LineCol = type { i32, i32 }
%BufferedCharSource = type { %CharSource, %String, i32 }
%CharSource = type { %UntypedPtr, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]" }
%"FunctionPtr3[Void, UntypedPtr, String mut, Int]" = type { %UntypedPtr }
%String = type { %"RawPtr[Char]", %"RawPtr[Char]", %"RawPtr[Char]" }
%"RawPtr[Char]" = type { i8* }
%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]" = type { %"RangeWithLookahead[BufferedCharSourceRange]", %Location* }
%"RangeWithLookahead[BufferedCharSourceRange]" = type { %BufferedCharSourceRange, %"Vector[Char]" }
%BufferedCharSourceRange = type { %BufferedCharSource* }
%"Vector[Char]" = type { %"RawPtr[Char]", %"RawPtr[Char]", %"RawPtr[Char]" }
%Token = type { %Location, %TokenType, %String, i64, double }
%TokenType = type { i32 }
%ErrorReporter = type { %UntypedPtr, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]" }
%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]" = type { %UntypedPtr }
%"SparrowLayoutDecoder[SparrowScanner]" = type { %"RangeWithLookahead[SparrowScanner]", %ErrorReporter, %"Vector[Int]", %"Vector[Char]", %TokenType, i32 }
%"RangeWithLookahead[SparrowScanner]" = type { %SparrowScanner, %"Vector[Token]" }
%"Vector[Token]" = type { %"RawPtr[Token]", %"RawPtr[Token]", %"RawPtr[Token]" }
%"RawPtr[Token]" = type { %Token* }
%"Vector[Int]" = type { %"RawPtr[Int]", %"RawPtr[Int]", %"RawPtr[Int]" }
%"RawPtr[Int]" = type { i32* }
%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]" = type { %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %Token, i1, %AstBuilder, %ErrorReporter }
%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]" = type { %"SparrowLayoutDecoder[SparrowScanner]", %"Vector[Token]" }
%AstBuilder = type { %UntypedPtr, %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]", %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]", %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float]", %"FunctionPtr3[Node, UntypedPtr, Location const, Char]", %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Node, UntypedPtr, Location const, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]", %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr3[Node, UntypedPtr, Location const, Node]" }
%"FunctionPtr3[Node, UntypedPtr, Node, Node]" = type { %UntypedPtr }
%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]" = type { %UntypedPtr }
%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]" = type { %UntypedPtr }
%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]" = type { %UntypedPtr }
%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]" = type { %UntypedPtr }
%"FunctionPtr2[Node, UntypedPtr, Node]" = type { %UntypedPtr }
%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]" = type { %UntypedPtr }
%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]" = type { %UntypedPtr }
%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]" = type { %UntypedPtr }
%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]" = type { %UntypedPtr }
%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, Int]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, Float]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, Char]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]" = type { %UntypedPtr }
%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]" = type { %UntypedPtr }
%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]" = type { %UntypedPtr }
%"FunctionPtr2[Node, UntypedPtr, Location const]" = type { %UntypedPtr }
%"FunctionPtr3[Node, UntypedPtr, Location const, Node]" = type { %UntypedPtr }
%"$lambdaEnclosureData" = type {}
%"$lambdaEnclosureData.0" = type {}
%"$lambdaEnclosureData.1" = type {}
%"$lambdaEnclosureData.2" = type {}
%"ContiguousMemoryRange[Char]" = type { %"RawPtr[Char]", %"RawPtr[Char]" }
%StringOutputStream = type { %String }
%"FunctionPtr1[Bool, Char]" = type { %UntypedPtr }
%"ContiguousMemoryRange[Token]" = type { %"RawPtr[Token]", %"RawPtr[Token]" }
%FileCharSource = type { %File }
%File = type { %UntypedPtr }
%"FunctionPtr3[Void, FileCharSource mut, String mut, Int]" = type { %UntypedPtr }
%"NumericRangeInc[Int]" = type { i32, i32, i1 }
%StringCharSource = type { %StringRef }
%"FunctionPtr3[Void, StringCharSource mut, String mut, Int]" = type { %UntypedPtr }
%Node = type { %UntypedPtr }
%"Vector[LocString]" = type { %"RawPtr[LocString]", %"RawPtr[LocString]", %"RawPtr[LocString]" }
%"RawPtr[LocString]" = type { %LocString* }
%LocString = type { %"Tuple[Location, String]" }
%"Tuple[Location, String]" = type { %Location, %String }
%"ContiguousMemoryRange[LocString]" = type { %"RawPtr[LocString]", %"RawPtr[LocString]" }
%"ContiguousMemoryRange[Int]" = type { %"RawPtr[Int]", %"RawPtr[Int]" }
%FileRange = type { %File*, i1, i8 }

@.fmtInt32 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.fmtUInt32 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@.fmtInt64 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.fmtUInt64 = private unnamed_addr constant [5 x i8] c"%llu\00", align 1
@.fmtChar = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.fmtFloat64 = private unnamed_addr constant [3 x i8] c"%g\00", align 1
@.fmtPointer = private unnamed_addr constant [3 x i8] c"%p\00", align 1
@endl.0 = global %EndLineHelperClass zeroinitializer
@flush.1 = global %FlushHelperClass zeroinitializer
@cout.2 = global %ConsoleOutputStream zeroinitializer
@str = private unnamed_addr constant [5 x i8] c"true\00"
@str.5 = private unnamed_addr constant [6 x i8] c"false\00"
@programArgs.3 = global %MainParameters zeroinitializer
@str.8 = private unnamed_addr constant [30 x i8] c"Tabs are not valid characters\00"
@str.9 = private unnamed_addr constant [33 x i8] c"End of file found inside comment\00"
@str.10 = private unnamed_addr constant [40 x i8] c"End of file found inside string literal\00"
@str.11 = private unnamed_addr constant [37 x i8] c"Not enough digits for character code\00"
@str.12 = private unnamed_addr constant [40 x i8] c"End of file found inside string literal\00"
@str.13 = private unnamed_addr constant [40 x i8] c"End of file found inside string literal\00"
@str.14 = private unnamed_addr constant [6 x i8] c"break\00"
@str.15 = private unnamed_addr constant [6 x i8] c"catch\00"
@str.16 = private unnamed_addr constant [8 x i8] c"concept\00"
@str.17 = private unnamed_addr constant [9 x i8] c"continue\00"
@str.18 = private unnamed_addr constant [9 x i8] c"datatype\00"
@str.19 = private unnamed_addr constant [4 x i8] c"fun\00"
@str.20 = private unnamed_addr constant [3 x i8] c"if\00"
@str.21 = private unnamed_addr constant [5 x i8] c"else\00"
@str.22 = private unnamed_addr constant [6 x i8] c"false\00"
@str.23 = private unnamed_addr constant [8 x i8] c"finally\00"
@str.24 = private unnamed_addr constant [4 x i8] c"for\00"
@str.25 = private unnamed_addr constant [7 x i8] c"import\00"
@str.26 = private unnamed_addr constant [4 x i8] c"let\00"
@str.27 = private unnamed_addr constant [7 x i8] c"module\00"
@str.28 = private unnamed_addr constant [5 x i8] c"null\00"
@str.29 = private unnamed_addr constant [8 x i8] c"package\00"
@str.30 = private unnamed_addr constant [7 x i8] c"return\00"
@str.31 = private unnamed_addr constant [6 x i8] c"throw\00"
@str.32 = private unnamed_addr constant [5 x i8] c"true\00"
@str.33 = private unnamed_addr constant [4 x i8] c"try\00"
@str.34 = private unnamed_addr constant [6 x i8] c"using\00"
@str.35 = private unnamed_addr constant [4 x i8] c"var\00"
@str.36 = private unnamed_addr constant [6 x i8] c"while\00"
@str.37 = private unnamed_addr constant [24 x i8] c"Invalid numeric literal\00"
@str.38 = private unnamed_addr constant [27 x i8] c"Invalid character found: '\00"
@str.39 = private unnamed_addr constant [4 x i8] c"' (\00"
@str.40 = private unnamed_addr constant [32 x i8] c"Invalid indentation, expecting \00"
@str.41 = private unnamed_addr constant [7 x i8] c", got \00"
@str.42 = private unnamed_addr constant [2 x i8] c"r\00"
@str.43 = private unnamed_addr constant [12 x i8] c"end-of-file\00"
@str.44 = private unnamed_addr constant [9 x i8] c"new-line\00"
@str.45 = private unnamed_addr constant [9 x i8] c"'module'\00"
@str.46 = private unnamed_addr constant [9 x i8] c"'import'\00"
@str.47 = private unnamed_addr constant [10 x i8] c"'concept'\00"
@str.48 = private unnamed_addr constant [11 x i8] c"'datatype'\00"
@str.49 = private unnamed_addr constant [6 x i8] c"'fun'\00"
@str.50 = private unnamed_addr constant [10 x i8] c"'package'\00"
@str.51 = private unnamed_addr constant [8 x i8] c"'using'\00"
@str.52 = private unnamed_addr constant [6 x i8] c"'let'\00"
@str.53 = private unnamed_addr constant [6 x i8] c"'var'\00"
@str.54 = private unnamed_addr constant [8 x i8] c"'break'\00"
@str.55 = private unnamed_addr constant [8 x i8] c"'catch'\00"
@str.56 = private unnamed_addr constant [11 x i8] c"'continue'\00"
@str.57 = private unnamed_addr constant [10 x i8] c"'finally'\00"
@str.58 = private unnamed_addr constant [6 x i8] c"'for'\00"
@str.59 = private unnamed_addr constant [5 x i8] c"'if'\00"
@str.60 = private unnamed_addr constant [9 x i8] c"'return'\00"
@str.61 = private unnamed_addr constant [8 x i8] c"'throw'\00"
@str.62 = private unnamed_addr constant [6 x i8] c"'try'\00"
@str.63 = private unnamed_addr constant [8 x i8] c"'while'\00"
@str.64 = private unnamed_addr constant [8 x i8] c"'false'\00"
@str.65 = private unnamed_addr constant [7 x i8] c"'null'\00"
@str.66 = private unnamed_addr constant [7 x i8] c"'true'\00"
@str.67 = private unnamed_addr constant [7 x i8] c"'else'\00"
@str.68 = private unnamed_addr constant [16 x i8] c"'{' (or indent)\00"
@str.69 = private unnamed_addr constant [16 x i8] c"'}' (or dedent)\00"
@str.70 = private unnamed_addr constant [4 x i8] c"'['\00"
@str.71 = private unnamed_addr constant [4 x i8] c"']'\00"
@str.72 = private unnamed_addr constant [4 x i8] c"'('\00"
@str.73 = private unnamed_addr constant [4 x i8] c"')'\00"
@str.74 = private unnamed_addr constant [4 x i8] c"':'\00"
@str.75 = private unnamed_addr constant [17 x i8] c"';' (or newline)\00"
@str.76 = private unnamed_addr constant [4 x i8] c"','\00"
@str.77 = private unnamed_addr constant [4 x i8] c"'.'\00"
@str.78 = private unnamed_addr constant [4 x i8] c"'`'\00"
@str.79 = private unnamed_addr constant [4 x i8] c"'='\00"
@str.80 = private unnamed_addr constant [11 x i8] c"identifier\00"
@str.81 = private unnamed_addr constant [9 x i8] c"operator\00"
@str.82 = private unnamed_addr constant [13 x i8] c"char literal\00"
@str.83 = private unnamed_addr constant [15 x i8] c"string literal\00"
@str.84 = private unnamed_addr constant [12 x i8] c"int literal\00"
@str.85 = private unnamed_addr constant [13 x i8] c"long literal\00"
@str.86 = private unnamed_addr constant [13 x i8] c"uint literal\00"
@str.87 = private unnamed_addr constant [14 x i8] c"ulong literal\00"
@str.88 = private unnamed_addr constant [14 x i8] c"float literal\00"
@str.89 = private unnamed_addr constant [15 x i8] c"double literal\00"
@str.90 = private unnamed_addr constant [14 x i8] c"line continue\00"
@str.91 = private unnamed_addr constant [8 x i8] c"comment\00"
@str.92 = private unnamed_addr constant [11 x i8] c"whitespace\00"
@str.93 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.94 = private unnamed_addr constant [13 x i8] c", expecting \00"
@str.95 = private unnamed_addr constant [8 x i8] c"AnyType\00"
@str.96 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.97 = private unnamed_addr constant [28 x i8] c", expecting block statement\00"
@str.98 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.99 = private unnamed_addr constant [23 x i8] c", expecting expression\00"
@str.100 = private unnamed_addr constant [3 x i8] c"()\00"
@str.101 = private unnamed_addr constant [2 x i8] c"=\00"
@str.102 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.103 = private unnamed_addr constant [35 x i8] c", expecting identifier or operator\00"
@str.104 = private unnamed_addr constant [2 x i8] c"=\00"
@str.105 = private unnamed_addr constant [2 x i8] c".\00"
@str.106 = private unnamed_addr constant [3 x i8] c"()\00"
@str.107 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.108 = private unnamed_addr constant [42 x i8] c", expecting expression or block statement\00"
@str.109 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.110 = private unnamed_addr constant [22 x i8] c", expecting statement\00"
@llvm.global_ctors = appending global [4 x { i32, void ()* }] [{ i32, void ()* } { i32 0, void ()* @__global_ctor }, { i32, void ()* } { i32 1, void ()* @__global_ctor.1 }, { i32, void ()* } { i32 2, void ()* @__global_ctor.3 }, { i32, void ()* } { i32 3, void ()* @__global_ctor.6 }]
@llvm.global_dtors = appending global [4 x { i32, void ()* }] [{ i32, void ()* } { i32 0, void ()* @__global_dtor }, { i32, void ()* } { i32 1, void ()* @__global_dtor.2 }, { i32, void ()* } { i32 2, void ()* @__global_dtor.4 }, { i32, void ()* } { i32 3, void ()* @__global_dtor.7 }]

; Function Attrs: alwaysinline
define void @_zero_init_1(i1* %"$this") #0 {
  store i1 false, i1* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_8(i8* %"$this") #0 {
  store i8 0, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_16(i16* %"$this") #0 {
  store i16 0, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_32(i32* %"$this") #0 {
  store i32 0, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_64(i64* %"$this") #0 {
  store i64 0, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_f(float* %"$this") #0 {
  store float 0.000000e+00, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_d(double* %"$this") #0 {
  store double 0.000000e+00, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_1_1(i1* %"$this", i1 %src) #0 {
  store i1 %src, i1* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_8_8(i8* %"$this", i8 %src) #0 {
  store i8 %src, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_16(i16* %"$this", i16 %src) #0 {
  store i16 %src, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_32(i32* %"$this", i32 %src) #0 {
  store i32 %src, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_64(i64* %"$this", i64 %src) #0 {
  store i64 %src, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_f(float* %"$this", float %src) #0 {
  store float %src, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_d(double* %"$this", double %src) #0 {
  store double %src, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_8_16(i8* %"$this", i16 %src) #0 {
  %1 = trunc i16 %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_8_32(i8* %"$this", i32 %src) #0 {
  %1 = trunc i32 %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_8_64(i8* %"$this", i64 %src) #0 {
  %1 = trunc i64 %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_32(i16* %"$this", i32 %src) #0 {
  %1 = trunc i32 %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_64(i16* %"$this", i64 %src) #0 {
  %1 = trunc i64 %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_64(i32* %"$this", i64 %src) #0 {
  %1 = trunc i64 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_8s(i16* %"$this", i8 %src) #0 {
  %1 = sext i8 %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_8z(i16* %"$this", i8 %src) #0 {
  %1 = zext i8 %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_8s(i32* %"$this", i8 %src) #0 {
  %1 = sext i8 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_8z(i32* %"$this", i8 %src) #0 {
  %1 = zext i8 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_16s(i32* %"$this", i16 %src) #0 {
  %1 = sext i16 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_16z(i32* %"$this", i16 %src) #0 {
  %1 = zext i16 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_8s(i64* %"$this", i8 %src) #0 {
  %1 = sext i8 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_8z(i64* %"$this", i8 %src) #0 {
  %1 = zext i8 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_16s(i64* %"$this", i16 %src) #0 {
  %1 = sext i16 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_16z(i64* %"$this", i16 %src) #0 {
  %1 = zext i16 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_32s(i64* %"$this", i32 %src) #0 {
  %1 = sext i32 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_32z(i64* %"$this", i32 %src) #0 {
  %1 = zext i32 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i8_f(i8* %"$this", float %src) #0 {
  %1 = fptosi float %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i8_d(i8* %"$this", double %src) #0 {
  %1 = fptosi double %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u8_f(i8* %"$this", float %src) #0 {
  %1 = fptoui float %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u8_d(i8* %"$this", double %src) #0 {
  %1 = fptoui double %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i16_f(i16* %"$this", float %src) #0 {
  %1 = fptosi float %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i16_d(i16* %"$this", double %src) #0 {
  %1 = fptosi double %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u16_f(i16* %"$this", float %src) #0 {
  %1 = fptoui float %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u16_d(i16* %"$this", double %src) #0 {
  %1 = fptoui double %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i32_f(i32* %"$this", float %src) #0 {
  %1 = fptosi float %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i32_d(i32* %"$this", double %src) #0 {
  %1 = fptosi double %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u32_f(i32* %"$this", float %src) #0 {
  %1 = fptoui float %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u32_d(i32* %"$this", double %src) #0 {
  %1 = fptoui double %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i64_f(i64* %"$this", float %src) #0 {
  %1 = fptosi float %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i64_d(i64* %"$this", double %src) #0 {
  %1 = fptosi double %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u64_f(i64* %"$this", float %src) #0 {
  %1 = fptoui float %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u64_d(i64* %"$this", double %src) #0 {
  %1 = fptoui double %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_i8(float* %"$this", i8 %src) #0 {
  %1 = sitofp i8 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_u8(float* %"$this", i8 %src) #0 {
  %1 = uitofp i8 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_i16(float* %"$this", i16 %src) #0 {
  %1 = sitofp i16 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_u16(float* %"$this", i16 %src) #0 {
  %1 = uitofp i16 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_i32(float* %"$this", i32 %src) #0 {
  %1 = sitofp i32 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_u32(float* %"$this", i32 %src) #0 {
  %1 = uitofp i32 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_i64(float* %"$this", i64 %src) #0 {
  %1 = sitofp i64 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_u64(float* %"$this", i64 %src) #0 {
  %1 = uitofp i64 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_d(float* %"$this", double %src) #0 {
  %1 = fptrunc double %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_i8(double* %"$this", i8 %src) #0 {
  %1 = sitofp i8 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_u8(double* %"$this", i8 %src) #0 {
  %1 = uitofp i8 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_i16(double* %"$this", i16 %src) #0 {
  %1 = sitofp i16 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_u16(double* %"$this", i16 %src) #0 {
  %1 = uitofp i16 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_i32(double* %"$this", i32 %src) #0 {
  %1 = sitofp i32 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_u32(double* %"$this", i32 %src) #0 {
  %1 = uitofp i32 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_i64(double* %"$this", i64 %src) #0 {
  %1 = sitofp i64 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_u64(double* %"$this", i64 %src) #0 {
  %1 = uitofp i64 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_f(double* %"$this", float %src) #0 {
  %1 = fpext float %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define i1 @_Bool_opAssign(i1* %x, i1 %y) #0 {
  store i1 %y, i1* %x
  ret i1 %y
}

; Function Attrs: alwaysinline
define i1 @_Bool_opOr(i1 %x, i1 %y) #0 {
  %1 = or i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opXor(i1 %x, i1 %y) #0 {
  %1 = xor i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opAnd(i1 %x, i1 %y) #0 {
  %1 = and i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opEQ(i1 %x, i1 %y) #0 {
  %1 = icmp eq i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opNE(i1 %x, i1 %y) #0 {
  %1 = icmp ne i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opNeg(i1 %x) #0 {
  %1 = xor i1 %x, true
  ret i1 %1
}

; Function Attrs: alwaysinline
define i8 @_Int8_opAssign(i8* %x, i8 %y) #0 {
  store i8 %y, i8* %x
  ret i8 %y
}

; Function Attrs: alwaysinline
define i1 @_Int8_opEQ(i8 %x, i8 %y) #0 {
  %1 = icmp eq i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int8_opNE(i8 %x, i8 %y) #0 {
  %1 = icmp ne i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int8_opLT(i8 %x, i8 %y) #0 {
  %1 = icmp slt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int8_opGT(i8 %x, i8 %y) #0 {
  %1 = icmp sgt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int8_opLE(i8 %x, i8 %y) #0 {
  %1 = icmp sle i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int8_opGE(i8 %x, i8 %y) #0 {
  %1 = icmp sge i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i8 @_Int8_opPlus(i8 %x, i8 %y) #0 {
  %1 = add i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Int8_opMinus(i8 %x, i8 %y) #0 {
  %1 = sub i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Int8_opMul(i8 %x, i8 %y) #0 {
  %1 = mul i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Int8_opDiv(i8 %x, i8 %y) #0 {
  %1 = sdiv i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Int8_opMod(i8 %x, i8 %y) #0 {
  %1 = srem i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Int8_opPlus1(i8 %x) #0 {
  ret i8 %x
}

; Function Attrs: alwaysinline
define i8 @_Int8_opMinus1(i8 %x) #0 {
  %1 = sub i8 0, %x
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UInt8_opAssign(i8* %x, i8 %y) #0 {
  store i8 %y, i8* %x
  ret i8 %y
}

; Function Attrs: alwaysinline
define i1 @_UInt8_opEQ(i8 %x, i8 %y) #0 {
  %1 = icmp eq i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt8_opNE(i8 %x, i8 %y) #0 {
  %1 = icmp ne i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt8_opLT(i8 %x, i8 %y) #0 {
  %1 = icmp ult i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt8_opGT(i8 %x, i8 %y) #0 {
  %1 = icmp ugt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt8_opLE(i8 %x, i8 %y) #0 {
  %1 = icmp ule i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt8_opGE(i8 %x, i8 %y) #0 {
  %1 = icmp uge i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i8 @_UInt8_opPlus(i8 %x, i8 %y) #0 {
  %1 = add i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UInt8_opMinus(i8 %x, i8 %y) #0 {
  %1 = sub i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UInt8_opMul(i8 %x, i8 %y) #0 {
  %1 = mul i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UInt8_opDiv(i8 %x, i8 %y) #0 {
  %1 = udiv i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UInt8_opMod(i8 %x, i8 %y) #0 {
  %1 = urem i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UInt8_opPlus1(i8 %x) #0 {
  ret i8 %x
}

; Function Attrs: alwaysinline
define i16 @_Int16_opAssign(i16* %x, i16 %y) #0 {
  store i16 %y, i16* %x
  ret i16 %y
}

; Function Attrs: alwaysinline
define i1 @_Int16_opEQ(i16 %x, i16 %y) #0 {
  %1 = icmp eq i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int16_opNE(i16 %x, i16 %y) #0 {
  %1 = icmp ne i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int16_opLT(i16 %x, i16 %y) #0 {
  %1 = icmp slt i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int16_opGT(i16 %x, i16 %y) #0 {
  %1 = icmp sgt i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int16_opLE(i16 %x, i16 %y) #0 {
  %1 = icmp sle i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int16_opGE(i16 %x, i16 %y) #0 {
  %1 = icmp sge i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i16 @_Int16_opPlus(i16 %x, i16 %y) #0 {
  %1 = add i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Int16_opMinus(i16 %x, i16 %y) #0 {
  %1 = sub i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Int16_opMul(i16 %x, i16 %y) #0 {
  %1 = mul i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Int16_opDiv(i16 %x, i16 %y) #0 {
  %1 = sdiv i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Int16_opMod(i16 %x, i16 %y) #0 {
  %1 = srem i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Int16_opPlus1(i16 %x) #0 {
  ret i16 %x
}

; Function Attrs: alwaysinline
define i16 @_Int16_opMinus1(i16 %x) #0 {
  %1 = sub i16 0, %x
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UInt16_opAssign(i16* %x, i16 %y) #0 {
  store i16 %y, i16* %x
  ret i16 %y
}

; Function Attrs: alwaysinline
define i1 @_UInt16_opEQ(i16 %x, i16 %y) #0 {
  %1 = icmp eq i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt16_opNE(i16 %x, i16 %y) #0 {
  %1 = icmp ne i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt16_opLT(i16 %x, i16 %y) #0 {
  %1 = icmp ult i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt16_opGT(i16 %x, i16 %y) #0 {
  %1 = icmp ugt i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt16_opLE(i16 %x, i16 %y) #0 {
  %1 = icmp ule i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt16_opGE(i16 %x, i16 %y) #0 {
  %1 = icmp uge i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i16 @_UInt16_opPlus(i16 %x, i16 %y) #0 {
  %1 = add i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UInt16_opMinus(i16 %x, i16 %y) #0 {
  %1 = sub i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UInt16_opMul(i16 %x, i16 %y) #0 {
  %1 = mul i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UInt16_opDiv(i16 %x, i16 %y) #0 {
  %1 = udiv i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UInt16_opMod(i16 %x, i16 %y) #0 {
  %1 = urem i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UInt16_opPlus1(i16 %x) #0 {
  ret i16 %x
}

; Function Attrs: alwaysinline
define i32 @_Int32_opAssign(i32* %x, i32 %y) #0 {
  store i32 %y, i32* %x
  ret i32 %y
}

; Function Attrs: alwaysinline
define i1 @_Int32_opEQ(i32 %x, i32 %y) #0 {
  %1 = icmp eq i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int32_opNE(i32 %x, i32 %y) #0 {
  %1 = icmp ne i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int32_opLT(i32 %x, i32 %y) #0 {
  %1 = icmp slt i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int32_opGT(i32 %x, i32 %y) #0 {
  %1 = icmp sgt i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int32_opLE(i32 %x, i32 %y) #0 {
  %1 = icmp sle i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int32_opGE(i32 %x, i32 %y) #0 {
  %1 = icmp sge i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i32 @_Int32_opPlus(i32 %x, i32 %y) #0 {
  %1 = add i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int32_opMinus(i32 %x, i32 %y) #0 {
  %1 = sub i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int32_opMul(i32 %x, i32 %y) #0 {
  %1 = mul i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int32_opDiv(i32 %x, i32 %y) #0 {
  %1 = sdiv i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int32_opMod(i32 %x, i32 %y) #0 {
  %1 = srem i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int32_opPlus1(i32 %x) #0 {
  ret i32 %x
}

; Function Attrs: alwaysinline
define i32 @_Int32_opMinus1(i32 %x) #0 {
  %1 = sub i32 0, %x
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt32_opAssign(i32* %x, i32 %y) #0 {
  store i32 %y, i32* %x
  ret i32 %y
}

; Function Attrs: alwaysinline
define i1 @_UInt32_opEQ(i32 %x, i32 %y) #0 {
  %1 = icmp eq i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt32_opNE(i32 %x, i32 %y) #0 {
  %1 = icmp ne i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt32_opLT(i32 %x, i32 %y) #0 {
  %1 = icmp ult i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt32_opGT(i32 %x, i32 %y) #0 {
  %1 = icmp ugt i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt32_opLE(i32 %x, i32 %y) #0 {
  %1 = icmp ule i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt32_opGE(i32 %x, i32 %y) #0 {
  %1 = icmp uge i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt32_opPlus(i32 %x, i32 %y) #0 {
  %1 = add i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt32_opMinus(i32 %x, i32 %y) #0 {
  %1 = sub i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt32_opMul(i32 %x, i32 %y) #0 {
  %1 = mul i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt32_opDiv(i32 %x, i32 %y) #0 {
  %1 = udiv i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt32_opMod(i32 %x, i32 %y) #0 {
  %1 = urem i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt32_opPlus1(i32 %x) #0 {
  ret i32 %x
}

; Function Attrs: alwaysinline
define i64 @_Int64_opAssign(i64* %x, i64 %y) #0 {
  store i64 %y, i64* %x
  ret i64 %y
}

; Function Attrs: alwaysinline
define i1 @_Int64_opEQ(i64 %x, i64 %y) #0 {
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int64_opNE(i64 %x, i64 %y) #0 {
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int64_opLT(i64 %x, i64 %y) #0 {
  %1 = icmp slt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int64_opGT(i64 %x, i64 %y) #0 {
  %1 = icmp sgt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int64_opLE(i64 %x, i64 %y) #0 {
  %1 = icmp sle i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int64_opGE(i64 %x, i64 %y) #0 {
  %1 = icmp sge i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_Int64_opPlus(i64 %x, i64 %y) #0 {
  %1 = add i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Int64_opMinus(i64 %x, i64 %y) #0 {
  %1 = sub i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Int64_opMul(i64 %x, i64 %y) #0 {
  %1 = mul i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Int64_opDiv(i64 %x, i64 %y) #0 {
  %1 = sdiv i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Int64_opMod(i64 %x, i64 %y) #0 {
  %1 = srem i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Int64_opPlus1(i64 %x) #0 {
  ret i64 %x
}

; Function Attrs: alwaysinline
define i64 @_Int64_opMinus1(i64 %x) #0 {
  %1 = sub i64 0, %x
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_UInt64_opAssign(i64* %x, i64 %y) #0 {
  store i64 %y, i64* %x
  ret i64 %y
}

; Function Attrs: alwaysinline
define i1 @_UInt64_opEQ(i64 %x, i64 %y) #0 {
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt64_opNE(i64 %x, i64 %y) #0 {
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt64_opLT(i64 %x, i64 %y) #0 {
  %1 = icmp ult i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt64_opGT(i64 %x, i64 %y) #0 {
  %1 = icmp ugt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt64_opLE(i64 %x, i64 %y) #0 {
  %1 = icmp ule i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt64_opGE(i64 %x, i64 %y) #0 {
  %1 = icmp uge i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_UInt64_opPlus(i64 %x, i64 %y) #0 {
  %1 = add i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_UInt64_opMinus(i64 %x, i64 %y) #0 {
  %1 = sub i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_UInt64_opMul(i64 %x, i64 %y) #0 {
  %1 = mul i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_UInt64_opDiv(i64 %x, i64 %y) #0 {
  %1 = udiv i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_UInt64_opMod(i64 %x, i64 %y) #0 {
  %1 = urem i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_UInt64_opPlus1(i64 %x) #0 {
  ret i64 %x
}

; Function Attrs: alwaysinline
define float @_Float32_opAssign(float* %x, float %y) #0 {
  store float %y, float* %x
  ret float %y
}

; Function Attrs: alwaysinline
define i1 @_Float32_opEQ(float %x, float %y) #0 {
  %1 = fcmp ueq float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float32_opNE(float %x, float %y) #0 {
  %1 = fcmp une float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float32_opLT(float %x, float %y) #0 {
  %1 = fcmp ult float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float32_opGT(float %x, float %y) #0 {
  %1 = fcmp ugt float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float32_opLE(float %x, float %y) #0 {
  %1 = fcmp ule float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float32_opGE(float %x, float %y) #0 {
  %1 = fcmp uge float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define float @_Float32_opPlus(float %x, float %y) #0 {
  %1 = fadd float %x, %y
  ret float %1
}

; Function Attrs: alwaysinline
define float @_Float32_opMinus(float %x, float %y) #0 {
  %1 = fsub float %x, %y
  ret float %1
}

; Function Attrs: alwaysinline
define float @_Float32_opMul(float %x, float %y) #0 {
  %1 = fmul float %x, %y
  ret float %1
}

; Function Attrs: alwaysinline
define float @_Float32_opDiv(float %x, float %y) #0 {
  %1 = fdiv float %x, %y
  ret float %1
}

; Function Attrs: alwaysinline
define float @_Float32_opPlus1(float %x) #0 {
  ret float %x
}

; Function Attrs: alwaysinline
define float @_Float32_opMinus1(float %x) #0 {
  %1 = fsub float 0.000000e+00, %x
  ret float %1
}

; Function Attrs: alwaysinline
define double @_Float64_opAssign(double* %x, double %y) #0 {
  store double %y, double* %x
  ret double %y
}

; Function Attrs: alwaysinline
define i1 @_Float64_opEQ(double %x, double %y) #0 {
  %1 = fcmp ueq double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float64_opNE(double %x, double %y) #0 {
  %1 = fcmp une double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float64_opLT(double %x, double %y) #0 {
  %1 = fcmp ult double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float64_opGT(double %x, double %y) #0 {
  %1 = fcmp ugt double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float64_opLE(double %x, double %y) #0 {
  %1 = fcmp ule double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float64_opGE(double %x, double %y) #0 {
  %1 = fcmp uge double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define double @_Float64_opPlus(double %x, double %y) #0 {
  %1 = fadd double %x, %y
  ret double %1
}

; Function Attrs: alwaysinline
define double @_Float64_opMinus(double %x, double %y) #0 {
  %1 = fsub double %x, %y
  ret double %1
}

; Function Attrs: alwaysinline
define double @_Float64_opMul(double %x, double %y) #0 {
  %1 = fmul double %x, %y
  ret double %1
}

; Function Attrs: alwaysinline
define double @_Float64_opDiv(double %x, double %y) #0 {
  %1 = fdiv double %x, %y
  ret double %1
}

; Function Attrs: alwaysinline
define double @_Float64_opPlus1(double %x) #0 {
  ret double %x
}

; Function Attrs: alwaysinline
define double @_Float64_opMinus1(double %x) #0 {
  %1 = fsub double 0.000000e+00, %x
  ret double %1
}

; Function Attrs: alwaysinline
define i8 @_Char_opAssign(i8* %x, i8 %y) #0 {
  store i8 %y, i8* %x
  ret i8 %y
}

; Function Attrs: alwaysinline
define i1 @_Char_opEQ(i8 %x, i8 %y) #0 {
  %1 = icmp eq i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opNE(i8 %x, i8 %y) #0 {
  %1 = icmp ne i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opLT(i8 %x, i8 %y) #0 {
  %1 = icmp slt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opGT(i8 %x, i8 %y) #0 {
  %1 = icmp sgt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opLE(i8 %x, i8 %y) #0 {
  %1 = icmp sle i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opGE(i8 %x, i8 %y) #0 {
  %1 = icmp sge i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opAssign(i64* %x, i64 %y) #0 {
  store i64 %y, i64* %x
  ret i64 %y
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opEQ(i64 %x, i64 %y) #0 {
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opNE(i64 %x, i64 %y) #0 {
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opLT(i64 %x, i64 %y) #0 {
  %1 = icmp ult i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opGT(i64 %x, i64 %y) #0 {
  %1 = icmp ugt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opLE(i64 %x, i64 %y) #0 {
  %1 = icmp ule i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opGE(i64 %x, i64 %y) #0 {
  %1 = icmp uge i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opPlus(i64 %x, i64 %y) #0 {
  %1 = add i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opPlusInt(i64 %x, i32 %y) #0 {
  %1 = sext i32 %y to i64
  %2 = add i64 %x, %1
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opPlusInt1(i32 %x, i64 %y) #0 {
  %1 = sext i32 %x to i64
  %2 = add i64 %1, %y
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMinus(i64 %x, i64 %y) #0 {
  %1 = sub i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMinusInt(i64 %x, i32 %y) #0 {
  %1 = sext i32 %y to i64
  %2 = sub i64 %x, %1
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMinusInt1(i32 %x, i64 %y) #0 {
  %1 = sext i32 %x to i64
  %2 = sub i64 %1, %y
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMul(i64 %x, i64 %y) #0 {
  %1 = mul i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opDiv(i64 %x, i64 %y) #0 {
  %1 = udiv i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMod(i64 %x, i64 %y) #0 {
  %1 = urem i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opPlus1(i64 %x) #0 {
  ret i64 %x
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opAssign(i64* %x, i64 %y) #0 {
  store i64 %y, i64* %x
  ret i64 %y
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opEQ(i64 %x, i64 %y) #0 {
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opNE(i64 %x, i64 %y) #0 {
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opLT(i64 %x, i64 %y) #0 {
  %1 = icmp slt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opGT(i64 %x, i64 %y) #0 {
  %1 = icmp sgt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opLE(i64 %x, i64 %y) #0 {
  %1 = icmp sle i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opGE(i64 %x, i64 %y) #0 {
  %1 = icmp sge i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opPlus(i64 %x, i64 %y) #0 {
  %1 = add i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opPlusInt(i64 %x, i32 %y) #0 {
  %1 = sext i32 %y to i64
  %2 = add i64 %x, %1
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opPlusInt1(i32 %x, i64 %y) #0 {
  %1 = sext i32 %x to i64
  %2 = add i64 %1, %y
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMinus(i64 %x, i64 %y) #0 {
  %1 = sub i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMinusInt(i64 %x, i32 %y) #0 {
  %1 = sext i32 %y to i64
  %2 = sub i64 %x, %1
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMinusInt1(i32 %x, i64 %y) #0 {
  %1 = sext i32 %x to i64
  %2 = sub i64 %1, %y
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMul(i64 %x, i64 %y) #0 {
  %1 = mul i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opDiv(i64 %x, i64 %y) #0 {
  %1 = sdiv i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMod(i64 %x, i64 %y) #0 {
  %1 = srem i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opPlus1(i64 %x) #0 {
  ret i64 %x
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMinus1(i64 %x) #0 {
  %1 = sub i64 0, %x
  ret i64 %1
}

; Function Attrs: alwaysinline
define i1 @isNullRef(i8* %x) #0 {
  %1 = icmp eq i8* %x, null
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @implOpRefEQ(i8* %x, i8* %y) #0 {
  %1 = icmp eq i8* %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @implOpRefNE(i8* %x, i8* %y) #0 {
  %1 = icmp ne i8* %x, %y
  ret i1 %1
}

define void @_Type_ctor(i8** %"$this") {
  store i8* null, i8** %"$this"
  ret void
}

define void @_Type_copy_ctor(i8** %"$this", i8* %other) {
  store i8* %other, i8** %"$this"
  ret void
}

; Function Attrs: alwaysinline
define i8* @ptrAdd(i8* %p, i32 %n) #0 {
  %1 = getelementptr i8, i8* %p, i32 %n
  ret i8* %1
}

; Function Attrs: alwaysinline
define i8* @ptrSub(i8* %p, i32 %n) #0 {
  %1 = sub i32 0, %n
  %2 = getelementptr i8, i8* %p, i32 %1
  ret i8* %2
}

; Function Attrs: alwaysinline
define i32 @ptrDiff(i8* %p1, i8* %p2) #0 {
  %1 = ptrtoint i8* %p1 to i64
  %2 = ptrtoint i8* %p2 to i64
  %3 = sub i64 %1, %2
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: alwaysinline
define void @_spr_memcpy(i8* %dest, i8* %src, i64 %size) #0 {
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %dest, i8* %src, i64 %size, i32 1, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: alwaysinline
define void @_spr_memmove(i8* %dest, i8* %src, i64 %size) #0 {
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %dest, i8* %src, i64 %size, i32 1, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: alwaysinline
define void @_spr_memset(i8* %dest, i8 %value, i64 %size) #0 {
  call void @llvm.memset.p0i8.i64(i8* %dest, i8 %value, i64 %size, i32 1, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: alwaysinline
define void @flushOutput() #0 {
  %1 = call i32 @fflush(%struct._IO_FILE* null)
  ret void
}

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: alwaysinline
define void @writeInt8(i8 %val) #0 {
  %1 = sext i8 %val to i32
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt32, i32 0, i32 0), i32 %1)
  ret void
}

declare i32 @printf(i8*, ...)

; Function Attrs: alwaysinline
define void @writeUInt8(i8 %val) #0 {
  %1 = zext i8 %val to i32
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt32, i32 0, i32 0), i32 %1)
  ret void
}

; Function Attrs: alwaysinline
define void @writeInt16(i16 %val) #0 {
  %1 = sext i16 %val to i32
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt32, i32 0, i32 0), i32 %1)
  ret void
}

; Function Attrs: alwaysinline
define void @writeUInt16(i16 %val) #0 {
  %1 = zext i16 %val to i32
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt32, i32 0, i32 0), i32 %1)
  ret void
}

; Function Attrs: alwaysinline
define void @writeInt32(i32 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt32, i32 0, i32 0), i32 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeUInt32(i32 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtUInt32, i32 0, i32 0), i32 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeInt64(i64 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.fmtInt64, i32 0, i32 0), i64 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeUInt64(i64 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.fmtUInt64, i32 0, i32 0), i64 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeFloat32(float %val) #0 {
  %1 = fpext float %val to double
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtFloat64, i32 0, i32 0), double %1)
  ret void
}

; Function Attrs: alwaysinline
define void @writeFloat64(double %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtFloat64, i32 0, i32 0), double %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeChar(i8 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtChar, i32 0, i32 0), i8 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writePointer(i8* %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtPointer, i32 0, i32 0), i8* %val)
  ret void
}

; Function Attrs: alwaysinline
define void @_Int_to_CString(i32 %val, i8* %buffer) #0 {
  %1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buffer, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt32, i32 0, i32 0), i32 %val) #2
  ret void
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: alwaysinline
define void @_ULong_to_CString(i64 %val, i8* %buffer) #0 {
  %1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buffer, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.fmtUInt64, i32 0, i32 0), i64 %val) #2
  ret void
}

; Function Attrs: alwaysinline
define i8 @_bit_neg_8(i8 %n) #0 {
  %1 = xor i8 %n, 0
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_shl_8(i8 %n, i8 %k) #0 {
  %1 = shl i8 %n, %k
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_lshr_8(i8 %n, i8 %k) #0 {
  %1 = lshr i8 %n, %k
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_ashr_8(i8 %n, i8 %k) #0 {
  %1 = ashr i8 %n, %k
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_xor_8(i8 %n1, i8 %n2) #0 {
  %1 = xor i8 %n1, %n2
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_or_8(i8 %n1, i8 %n2) #0 {
  %1 = or i8 %n1, %n2
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_and_8(i8 %n1, i8 %n2) #0 {
  %1 = and i8 %n1, %n2
  ret i8 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_neg_16(i16 %n) #0 {
  %1 = xor i16 %n, 0
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_shl_16(i16 %n, i16 %k) #0 {
  %1 = shl i16 %n, %k
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_lshr_16(i16 %n, i16 %k) #0 {
  %1 = lshr i16 %n, %k
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_ashr_16(i16 %n, i16 %k) #0 {
  %1 = ashr i16 %n, %k
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_xor_16(i16 %n1, i16 %n2) #0 {
  %1 = xor i16 %n1, %n2
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_or_16(i16 %n1, i16 %n2) #0 {
  %1 = or i16 %n1, %n2
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_and_16(i16 %n1, i16 %n2) #0 {
  %1 = and i16 %n1, %n2
  ret i16 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_neg_32(i32 %n) #0 {
  %1 = xor i32 %n, 0
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_shl_32(i32 %n, i32 %k) #0 {
  %1 = shl i32 %n, %k
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_lshr_32(i32 %n, i32 %k) #0 {
  %1 = lshr i32 %n, %k
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_ashr_32(i32 %n, i32 %k) #0 {
  %1 = ashr i32 %n, %k
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_xor_32(i32 %n1, i32 %n2) #0 {
  %1 = xor i32 %n1, %n2
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_or_32(i32 %n1, i32 %n2) #0 {
  %1 = or i32 %n1, %n2
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_and_32(i32 %n1, i32 %n2) #0 {
  %1 = and i32 %n1, %n2
  ret i32 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_neg_64(i64 %n) #0 {
  %1 = xor i64 %n, 0
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_shl_64(i64 %n, i64 %k) #0 {
  %1 = shl i64 %n, %k
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_lshr_64(i64 %n, i64 %k) #0 {
  %1 = lshr i64 %n, %k
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_ashr_64(i64 %n, i64 %k) #0 {
  %1 = ashr i64 %n, %k
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_xor_64(i64 %n1, i64 %n2) #0 {
  %1 = xor i64 %n1, %n2
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_or_64(i64 %n1, i64 %n2) #0 {
  %1 = or i64 %n1, %n2
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_and_64(i64 %n1, i64 %n2) #0 {
  %1 = and i64 %n1, %n2
  ret i64 %1
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor(%Uninitialized %this) #3 {
  %this.addr = alloca %Uninitialized
  store %Uninitialized %this, %Uninitialized* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.0(%Uninitialized %this, %Uninitialized %other) #3 {
  %this.addr = alloca %Uninitialized
  store %Uninitialized %this, %Uninitialized* %this.addr
  %other.addr = alloca %Uninitialized
  store %Uninitialized %other, %Uninitialized* %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor(%Uninitialized %this) #3 {
  %this.addr = alloca %Uninitialized
  store %Uninitialized %this, %Uninitialized* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.1(%Null %this) #3 {
  %this.addr = alloca %Null
  store %Null %this, %Null* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.2(%Null %this, %Null %other) #3 {
  %this.addr = alloca %Null
  store %Null %this, %Null* %this.addr
  %other.addr = alloca %Null
  store %Null %other, %Null* %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.3(%Null %this) #3 {
  %this.addr = alloca %Null
  store %Null %this, %Null* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.4(i1 %this) #3 {
  %this.addr = alloca i1
  store i1 %this, i1* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.5(i8 %this) #3 {
  %this.addr = alloca i8
  store i8 %this, i8* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.6(i8 %this) #3 {
  %this.addr = alloca i8
  store i8 %this, i8* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.7(i16 %this) #3 {
  %this.addr = alloca i16
  store i16 %this, i16* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.8(i16 %this) #3 {
  %this.addr = alloca i16
  store i16 %this, i16* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.9(i32 %this) #3 {
  %this.addr = alloca i32
  store i32 %this, i32* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.10(i32 %this) #3 {
  %this.addr = alloca i32
  store i32 %this, i32* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.11(i64 %this) #3 {
  %this.addr = alloca i64
  store i64 %this, i64* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.12(i64 %this) #3 {
  %this.addr = alloca i64
  store i64 %this, i64* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.13(float %this) #3 {
  %this.addr = alloca float
  store float %this, float* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.14(double %this) #3 {
  %this.addr = alloca double
  store double %this, double* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.15(i8 %this) #3 {
  %this.addr = alloca i8
  store i8 %this, i8* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

declare i1 @"$logicalOr"(i1, i1)

declare i1 @"$logicalAnd"(i1, i1)

declare float @_Float32_opMod(float, float)

declare double @_Float64_opMod(double, double)

; Function Attrs: alwaysinline nounwind
define internal i8 @"pre_++"(i8* %n) #3 {
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %n
  store i8 1, i8* %tmp.this
  %2 = load i8, i8* %tmp.this
  %3 = call i8 @_Int8_opPlus(i8 %1, i8 %2)
  store i8 %3, i8* %n
  %4 = load i8, i8* %n
  ret i8 %4
}

; Function Attrs: alwaysinline nounwind
define internal i8 @"pre_++.16"(i8* %n) #3 {
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %n
  store i8 1, i8* %tmp.this
  %2 = load i8, i8* %tmp.this
  %3 = call i8 @_UInt8_opPlus(i8 %1, i8 %2)
  store i8 %3, i8* %n
  %4 = load i8, i8* %n
  ret i8 %4
}

; Function Attrs: alwaysinline nounwind
define internal i16 @"pre_++.17"(i16* %n) #3 {
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16, i16* %n
  store i16 1, i16* %tmp.this
  %2 = load i16, i16* %tmp.this
  %3 = call i16 @_Int16_opPlus(i16 %1, i16 %2)
  store i16 %3, i16* %n
  %4 = load i16, i16* %n
  ret i16 %4
}

; Function Attrs: alwaysinline nounwind
define internal i16 @"pre_++.18"(i16* %n) #3 {
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16, i16* %n
  store i16 1, i16* %tmp.this
  %2 = load i16, i16* %tmp.this
  %3 = call i16 @_UInt16_opPlus(i16 %1, i16 %2)
  store i16 %3, i16* %n
  %4 = load i16, i16* %n
  ret i16 %4
}

; Function Attrs: alwaysinline nounwind
define internal i32 @"pre_++.19"(i32* %n) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %n
  %2 = call i32 @_Int32_opPlus(i32 %1, i32 1)
  store i32 %2, i32* %n
  %3 = load i32, i32* %n
  ret i32 %3
}

; Function Attrs: alwaysinline nounwind
define internal i32 @"pre_++.20"(i32* %n) #3 {
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %n
  store i32 1, i32* %tmp.this
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @_UInt32_opPlus(i32 %1, i32 %2)
  store i32 %3, i32* %n
  %4 = load i32, i32* %n
  ret i32 %4
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"pre_++.21"(i64* %n) #3 {
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %n
  store i64 1, i64* %tmp.this
  %2 = load i64, i64* %tmp.this
  %3 = call i64 @_Int64_opPlus(i64 %1, i64 %2)
  store i64 %3, i64* %n
  %4 = load i64, i64* %n
  ret i64 %4
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"pre_++.22"(i64* %n) #3 {
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %n
  store i64 1, i64* %tmp.this
  %2 = load i64, i64* %tmp.this
  %3 = call i64 @_UInt64_opPlus(i64 %1, i64 %2)
  store i64 %3, i64* %n
  %4 = load i64, i64* %n
  ret i64 %4
}

; Function Attrs: alwaysinline nounwind
define internal i8 @pre_--(i8* %n) #3 {
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %n
  store i8 1, i8* %tmp.this
  %2 = load i8, i8* %tmp.this
  %3 = call i8 @_Int8_opMinus(i8 %1, i8 %2)
  store i8 %3, i8* %n
  %4 = load i8, i8* %n
  ret i8 %4
}

; Function Attrs: alwaysinline nounwind
define internal i8 @pre_--.23(i8* %n) #3 {
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %n
  store i8 1, i8* %tmp.this
  %2 = load i8, i8* %tmp.this
  %3 = call i8 @_UInt8_opMinus(i8 %1, i8 %2)
  store i8 %3, i8* %n
  %4 = load i8, i8* %n
  ret i8 %4
}

; Function Attrs: alwaysinline nounwind
define internal i16 @pre_--.24(i16* %n) #3 {
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16, i16* %n
  store i16 1, i16* %tmp.this
  %2 = load i16, i16* %tmp.this
  %3 = call i16 @_Int16_opMinus(i16 %1, i16 %2)
  store i16 %3, i16* %n
  %4 = load i16, i16* %n
  ret i16 %4
}

; Function Attrs: alwaysinline nounwind
define internal i16 @pre_--.25(i16* %n) #3 {
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16, i16* %n
  store i16 1, i16* %tmp.this
  %2 = load i16, i16* %tmp.this
  %3 = call i16 @_UInt16_opMinus(i16 %1, i16 %2)
  store i16 %3, i16* %n
  %4 = load i16, i16* %n
  ret i16 %4
}

; Function Attrs: alwaysinline nounwind
define internal i32 @pre_--.26(i32* %n) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %n
  %2 = call i32 @_Int32_opMinus(i32 %1, i32 1)
  store i32 %2, i32* %n
  %3 = load i32, i32* %n
  ret i32 %3
}

; Function Attrs: alwaysinline nounwind
define internal i32 @pre_--.27(i32* %n) #3 {
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %n
  store i32 1, i32* %tmp.this
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @_UInt32_opMinus(i32 %1, i32 %2)
  store i32 %3, i32* %n
  %4 = load i32, i32* %n
  ret i32 %4
}

; Function Attrs: alwaysinline nounwind
define internal i64 @pre_--.28(i64* %n) #3 {
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %n
  store i64 1, i64* %tmp.this
  %2 = load i64, i64* %tmp.this
  %3 = call i64 @_Int64_opMinus(i64 %1, i64 %2)
  store i64 %3, i64* %n
  %4 = load i64, i64* %n
  ret i64 %4
}

; Function Attrs: alwaysinline nounwind
define internal i64 @pre_--.29(i64* %n) #3 {
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %n
  store i64 1, i64* %tmp.this
  %2 = load i64, i64* %tmp.this
  %3 = call i64 @_UInt64_opMinus(i64 %1, i64 %2)
  store i64 %3, i64* %n
  %4 = load i64, i64* %n
  ret i64 %4
}

; Function Attrs: alwaysinline nounwind
define internal i8 @"post_++"(i8* %n) #3 {
  %old = alloca i8
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %n
  store i8 %1, i8* %old
  %2 = load i8, i8* %n
  store i8 1, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  %4 = call i8 @_Int8_opPlus(i8 %2, i8 %3)
  store i8 %4, i8* %n
  %5 = load i8, i8* %old
  ret i8 %5
}

; Function Attrs: alwaysinline nounwind
define internal i8 @"post_++.30"(i8* %n) #3 {
  %old = alloca i8
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %n
  store i8 %1, i8* %old
  %2 = load i8, i8* %n
  store i8 1, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  %4 = call i8 @_UInt8_opPlus(i8 %2, i8 %3)
  store i8 %4, i8* %n
  %5 = load i8, i8* %old
  ret i8 %5
}

; Function Attrs: alwaysinline nounwind
define internal i16 @"post_++.31"(i16* %n) #3 {
  %old = alloca i16
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16, i16* %n
  store i16 %1, i16* %old
  %2 = load i16, i16* %n
  store i16 1, i16* %tmp.this
  %3 = load i16, i16* %tmp.this
  %4 = call i16 @_Int16_opPlus(i16 %2, i16 %3)
  store i16 %4, i16* %n
  %5 = load i16, i16* %old
  ret i16 %5
}

; Function Attrs: alwaysinline nounwind
define internal i16 @"post_++.32"(i16* %n) #3 {
  %old = alloca i16
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16, i16* %n
  store i16 %1, i16* %old
  %2 = load i16, i16* %n
  store i16 1, i16* %tmp.this
  %3 = load i16, i16* %tmp.this
  %4 = call i16 @_UInt16_opPlus(i16 %2, i16 %3)
  store i16 %4, i16* %n
  %5 = load i16, i16* %old
  ret i16 %5
}

; Function Attrs: alwaysinline nounwind
define internal i32 @"post_++.33"(i32* %n) #3 {
  %old = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %n
  store i32 %1, i32* %old
  %2 = load i32, i32* %n
  %3 = call i32 @_Int32_opPlus(i32 %2, i32 1)
  store i32 %3, i32* %n
  %4 = load i32, i32* %old
  ret i32 %4
}

; Function Attrs: alwaysinline nounwind
define internal i32 @"post_++.34"(i32* %n) #3 {
  %old = alloca i32
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %n
  store i32 %1, i32* %old
  %2 = load i32, i32* %n
  store i32 1, i32* %tmp.this
  %3 = load i32, i32* %tmp.this
  %4 = call i32 @_UInt32_opPlus(i32 %2, i32 %3)
  store i32 %4, i32* %n
  %5 = load i32, i32* %old
  ret i32 %5
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"post_++.35"(i64* %n) #3 {
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %n
  store i64 %1, i64* %old
  %2 = load i64, i64* %n
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = call i64 @_Int64_opPlus(i64 %2, i64 %3)
  store i64 %4, i64* %n
  %5 = load i64, i64* %old
  ret i64 %5
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"post_++.36"(i64* %n) #3 {
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %n
  store i64 %1, i64* %old
  %2 = load i64, i64* %n
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = call i64 @_UInt64_opPlus(i64 %2, i64 %3)
  store i64 %4, i64* %n
  %5 = load i64, i64* %old
  ret i64 %5
}

; Function Attrs: alwaysinline nounwind
define internal i8 @post_--(i8* %n) #3 {
  %old = alloca i8
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %n
  store i8 %1, i8* %old
  %2 = load i8, i8* %n
  store i8 1, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  %4 = call i8 @_Int8_opMinus(i8 %2, i8 %3)
  store i8 %4, i8* %n
  %5 = load i8, i8* %old
  ret i8 %5
}

; Function Attrs: alwaysinline nounwind
define internal i8 @post_--.37(i8* %n) #3 {
  %old = alloca i8
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %n
  store i8 %1, i8* %old
  %2 = load i8, i8* %n
  store i8 1, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  %4 = call i8 @_UInt8_opMinus(i8 %2, i8 %3)
  store i8 %4, i8* %n
  %5 = load i8, i8* %old
  ret i8 %5
}

; Function Attrs: alwaysinline nounwind
define internal i16 @post_--.38(i16* %n) #3 {
  %old = alloca i16
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16, i16* %n
  store i16 %1, i16* %old
  %2 = load i16, i16* %n
  store i16 1, i16* %tmp.this
  %3 = load i16, i16* %tmp.this
  %4 = call i16 @_Int16_opMinus(i16 %2, i16 %3)
  store i16 %4, i16* %n
  %5 = load i16, i16* %old
  ret i16 %5
}

; Function Attrs: alwaysinline nounwind
define internal i16 @post_--.39(i16* %n) #3 {
  %old = alloca i16
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16, i16* %n
  store i16 %1, i16* %old
  %2 = load i16, i16* %n
  store i16 1, i16* %tmp.this
  %3 = load i16, i16* %tmp.this
  %4 = call i16 @_UInt16_opMinus(i16 %2, i16 %3)
  store i16 %4, i16* %n
  %5 = load i16, i16* %old
  ret i16 %5
}

; Function Attrs: alwaysinline nounwind
define internal i32 @post_--.40(i32* %n) #3 {
  %old = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %n
  store i32 %1, i32* %old
  %2 = load i32, i32* %n
  %3 = call i32 @_Int32_opMinus(i32 %2, i32 1)
  store i32 %3, i32* %n
  %4 = load i32, i32* %old
  ret i32 %4
}

; Function Attrs: alwaysinline nounwind
define internal i32 @post_--.41(i32* %n) #3 {
  %old = alloca i32
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %n
  store i32 %1, i32* %old
  %2 = load i32, i32* %n
  store i32 1, i32* %tmp.this
  %3 = load i32, i32* %tmp.this
  %4 = call i32 @_UInt32_opMinus(i32 %2, i32 %3)
  store i32 %4, i32* %n
  %5 = load i32, i32* %old
  ret i32 %5
}

; Function Attrs: alwaysinline nounwind
define internal i64 @post_--.42(i64* %n) #3 {
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %n
  store i64 %1, i64* %old
  %2 = load i64, i64* %n
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = call i64 @_Int64_opMinus(i64 %2, i64 %3)
  store i64 %4, i64* %n
  %5 = load i64, i64* %old
  ret i64 %5
}

; Function Attrs: alwaysinline nounwind
define internal i64 @post_--.43(i64* %n) #3 {
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %n
  store i64 %1, i64* %old
  %2 = load i64, i64* %n
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = call i64 @_UInt64_opMinus(i64 %2, i64 %3)
  store i64 %4, i64* %n
  %5 = load i64, i64* %old
  ret i64 %5
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.44(%StringRef* %this) #4 {
  %tmp.this = alloca %UntypedPtr
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %tmp.this)
  %2 = load %UntypedPtr, %UntypedPtr* %tmp.this
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %2)
  %3 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  call void @ctor.46(%UntypedPtr* %tmp.this1)
  %4 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  call void @ctor.45(%UntypedPtr* %3, %UntypedPtr %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.45(%UntypedPtr* %this, %UntypedPtr %other) #4 {
  %other.addr = alloca %UntypedPtr
  store %UntypedPtr %other, %UntypedPtr* %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %other.addr, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.46(%UntypedPtr* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.47(%UntypedPtr* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.48(%StringRef* %this, i32 %size) #4 {
  %size.addr = alloca i32
  store i32 %size, i32* %size.addr
  %"$tmpForRef" = alloca %UntypedPtr
  %"$tmpForRef1" = alloca %UntypedPtr
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  %2 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  call void @ctor.46(%UntypedPtr* %2)
  %3 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %4 = load i32, i32* %size.addr
  %5 = call i32 @_Int32_opPlus(i32 %4, i32 1)
  %6 = call %UntypedPtr @malloc(i32 %5)
  store %UntypedPtr %6, %UntypedPtr* %"$tmpForRef"
  call void @"="(%UntypedPtr* %3, %UntypedPtr* %"$tmpForRef")
  %7 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  %8 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %9 = load %UntypedPtr, %UntypedPtr* %8
  %10 = load i32, i32* %size.addr
  %11 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %9, i32 %10)
  store %UntypedPtr %11, %UntypedPtr* %"$tmpForRef1"
  call void @"="(%UntypedPtr* %7, %UntypedPtr* %"$tmpForRef1")
  store i8 0, i8* %tmp.this
  %12 = load i8, i8* %tmp.this
  %13 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  %14 = load %UntypedPtr, %UntypedPtr* %13
  %15 = call i8* @asRefOf(%UntypedPtr %14)
  store i8 %12, i8* %15
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"="(%UntypedPtr* %this, %UntypedPtr* %other) #3 {
  %other.addr = alloca %UntypedPtr*
  store %UntypedPtr* %other, %UntypedPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr*, %UntypedPtr** %other.addr
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

declare %UntypedPtr @malloc(i32)

; Function Attrs: inlinehint nounwind
define internal i8* @asRefOf(%UntypedPtr %this) #4 {
  %this.addr = alloca %UntypedPtr
  store %UntypedPtr %this, %UntypedPtr* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  ret i8* %2
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.49(%StringRef* %this, %StringRef %other) #4 {
  %other.addr = alloca %StringRef
  store %StringRef %other, %StringRef* %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  %2 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  call void @ctor.46(%UntypedPtr* %2)
  %3 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %4 = getelementptr inbounds %StringRef, %StringRef* %other.addr, i32 0, i32 0
  call void @"="(%UntypedPtr* %3, %UntypedPtr* %4)
  %5 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  %6 = getelementptr inbounds %StringRef, %StringRef* %other.addr, i32 0, i32 1
  call void @"="(%UntypedPtr* %5, %UntypedPtr* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.50(%StringRef* %this, %UntypedPtr %begin, %UntypedPtr %end) #4 {
  %begin.addr = alloca %UntypedPtr
  store %UntypedPtr %begin, %UntypedPtr* %begin.addr
  %end.addr = alloca %UntypedPtr
  store %UntypedPtr %end, %UntypedPtr* %end.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  %2 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  call void @ctor.46(%UntypedPtr* %2)
  %3 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  call void @"="(%UntypedPtr* %3, %UntypedPtr* %begin.addr)
  %4 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  call void @"="(%UntypedPtr* %4, %UntypedPtr* %end.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.51(%StringRef %this) #3 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 1
  %2 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty(%StringRef %this) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 1
  %2 = load %UntypedPtr, %UntypedPtr* %1
  %3 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  %5 = call i32 bitcast (i32 (i8*, i8*)* @ptrDiff to i32 (%UntypedPtr, %UntypedPtr)*)(%UntypedPtr %2, %UntypedPtr %4)
  %6 = call i1 @_Int32_opEQ(i32 %5, i32 0)
  ret i1 %6
}

; Function Attrs: inlinehint nounwind
define internal i32 @size(%StringRef %this) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 1
  %2 = load %UntypedPtr, %UntypedPtr* %1
  %3 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  %5 = call i32 bitcast (i32 (i8*, i8*)* @ptrDiff to i32 (%UntypedPtr, %UntypedPtr)*)(%UntypedPtr %2, %UntypedPtr %4)
  ret i32 %5
}

; Function Attrs: inlinehint nounwind
define internal i8* @front(%StringRef %this) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  %2 = load %UntypedPtr, %UntypedPtr* %1
  %3 = call i8* @asRefOf.52(%UntypedPtr %2)
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal i8* @asRefOf.52(%UntypedPtr %this) #4 {
  %this.addr = alloca %UntypedPtr
  store %UntypedPtr %this, %UntypedPtr* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  ret i8* %2
}

; Function Attrs: inlinehint nounwind
define internal i8* @back(%StringRef %this) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 1
  %2 = load %UntypedPtr, %UntypedPtr* %1
  %3 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrSub to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %2, i32 1)
  %4 = call i8* @asRefOf.52(%UntypedPtr %3)
  ret i8* %4
}

; Function Attrs: inlinehint nounwind
define internal i8* @"()"(%StringRef %this) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  %2 = load %UntypedPtr, %UntypedPtr* %1
  %3 = call i8* @asRefOf.52(%UntypedPtr %2)
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal i8* @"().53"(%StringRef %this, i32 %index) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  %2 = load %UntypedPtr, %UntypedPtr* %1
  %3 = load i32, i32* %index.addr
  %4 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %2, i32 %3)
  %5 = call i8* @asRefOf.52(%UntypedPtr %4)
  ret i8* %5
}

; Function Attrs: inlinehint nounwind
define internal i8* @at(%StringRef %this, i32 %index) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  %2 = load %UntypedPtr, %UntypedPtr* %1
  %3 = load i32, i32* %index.addr
  %4 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %2, i32 %3)
  %5 = call i8* @asRefOf.52(%UntypedPtr %4)
  ret i8* %5
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront(%StringRef* %this) #3 {
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %2 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 1)
  store %UntypedPtr %4, %UntypedPtr* %"$tmpForRef"
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %"$tmpForRef")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack(%StringRef* %this) #3 {
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  %2 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrSub to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 1)
  store %UntypedPtr %4, %UntypedPtr* %"$tmpForRef"
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %"$tmpForRef")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.54(%StringRef* %this, i32 %n) #3 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %2 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load i32, i32* %n.addr
  %5 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 %4)
  store %UntypedPtr %5, %UntypedPtr* %"$tmpForRef"
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %"$tmpForRef")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.55(%StringRef* %this, i32 %n) #3 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  %2 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load i32, i32* %n.addr
  %5 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 %4)
  store %UntypedPtr %5, %UntypedPtr* %"$tmpForRef"
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %"$tmpForRef")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @subrange(%StringRef %this, i32 %index, i32 %num) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %num.addr = alloca i32
  store i32 %num, i32* %num.addr
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  %2 = load %UntypedPtr, %UntypedPtr* %1
  %3 = load i32, i32* %index.addr
  %4 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %2, i32 %3)
  %5 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  %6 = load %UntypedPtr, %UntypedPtr* %5
  %7 = load i32, i32* %index.addr
  %8 = load i32, i32* %num.addr
  %9 = call i32 @_Int32_opPlus(i32 %7, i32 %8)
  %10 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %6, i32 %9)
  call void @ctor.50(%StringRef* %tmp.this, %UntypedPtr %4, %UntypedPtr %10)
  %11 = load %StringRef, %StringRef* %tmp.this
  %12 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %12)
  ret %StringRef %11

dumy_block:                                       ; No predecessors!
  %13 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %13)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal i8* @cStr(%StringRef %this) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this.addr, i32 0, i32 0
  %2 = load %UntypedPtr, %UntypedPtr* %1
  %3 = call i8* @asRefOf.52(%UntypedPtr %2)
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal %StringRef* @"=.56"(%StringRef* %this, %StringRef %src) #4 {
  %src.addr = alloca %StringRef
  store %StringRef %src, %StringRef* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 0
  %2 = getelementptr inbounds %StringRef, %StringRef* %src.addr, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %2)
  %3 = getelementptr inbounds %StringRef, %StringRef* %this, i32 0, i32 1
  %4 = getelementptr inbounds %StringRef, %StringRef* %src.addr, i32 0, i32 1
  call void @"="(%UntypedPtr* %3, %UntypedPtr* %4)
  ret %StringRef* %this
}

; Function Attrs: inlinehint nounwind
define internal i1 @"=="(%StringRef %this, %StringRef %other) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  %other.addr = alloca %StringRef
  store %StringRef %other, %StringRef* %other.addr
  %s = alloca i32
  %i = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %this.addr
  %2 = call i32 @size(%StringRef %1)
  store i32 %2, i32* %s
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load i32, i32* %s
  %4 = load %StringRef, %StringRef* %other.addr
  %5 = call i32 @size(%StringRef %4)
  %6 = call i1 @_Int32_opNE(i32 %3, i32 %5)
  br i1 %6, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i32 0, i32* %i
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %7 = load i32, i32* %i
  %8 = load i32, i32* %s
  %9 = call i1 @_Int32_opLT(i32 %7, i32 %8)
  br i1 %9, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %10 = load i32, i32* %i
  %11 = call i32 @_Int32_opPlus(i32 %10, i32 1)
  store i32 %11, i32* %i
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %12 = load %StringRef, %StringRef* %this.addr
  %13 = load i32, i32* %i
  %14 = call i8* @at(%StringRef %12, i32 %13)
  %15 = load i8, i8* %14
  %16 = load %StringRef, %StringRef* %other.addr
  %17 = load i32, i32* %i
  %18 = call i8* @at(%StringRef %16, i32 %17)
  %19 = load i8, i8* %18
  %20 = icmp ne i8 %15, %19
  br i1 %20, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  br label %while_step

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @_String_fromCString(i8* %s) #4 {
  %s.addr = alloca i8*
  store i8* %s, i8** %s.addr
  %len = alloca i32
  %res = alloca %StringRef
  %tmp.this = alloca %UntypedPtr
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %s.addr
  %2 = call i32 @cStringLen(i8* %1)
  store i32 %2, i32* %len
  call void @ctor.44(%StringRef* %res)
  %3 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %4 = load i8*, i8** %s.addr
  call void @ctor.57(%UntypedPtr* %tmp.this, i8* %4)
  call void @"="(%UntypedPtr* %3, %UntypedPtr* %tmp.this)
  %5 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 1
  %6 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %7 = load %UntypedPtr, %UntypedPtr* %6
  %8 = load i32, i32* %len
  %9 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %7, i32 %8)
  store %UntypedPtr %9, %UntypedPtr* %"$tmpForRef"
  call void @"="(%UntypedPtr* %5, %UntypedPtr* %"$tmpForRef")
  %10 = load %StringRef, %StringRef* %res
  %11 = load %StringRef, %StringRef* %res
  call void @dtor.51(%StringRef %11)
  ret %StringRef %10

dumy_block:                                       ; No predecessors!
  %12 = load %StringRef, %StringRef* %res
  call void @dtor.51(%StringRef %12)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal i32 @cStringLen(i8* %s) #4 {
  %s.addr = alloca i8*
  store i8* %s, i8** %s.addr
  %len = alloca i32
  %p = alloca %UntypedPtr
  %tmp.this = alloca i8
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  store i32 0, i32* %len
  %1 = load i8*, i8** %s.addr
  call void @ctor.57(%UntypedPtr* %p, i8* %1)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = load %UntypedPtr, %UntypedPtr* %p
  %3 = call i8* @asRefOf(%UntypedPtr %2)
  %4 = load i8, i8* %3
  store i8 0, i8* %tmp.this
  %5 = load i8, i8* %tmp.this
  %6 = call i1 @_Int8_opNE(i8 %4, i8 %5)
  br i1 %6, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %7 = call i32 @"post_++.33"(i32* %len)
  br label %while_step

while_step:                                       ; preds = %while_body
  %8 = load %UntypedPtr, %UntypedPtr* %p
  %9 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %8, i32 1)
  store %UntypedPtr %9, %UntypedPtr* %"$tmpForRef"
  call void @"="(%UntypedPtr* %p, %UntypedPtr* %"$tmpForRef")
  br label %while_block

while_end:                                        ; preds = %while_block
  %10 = load i32, i32* %len
  ret i32 %10
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.57(%UntypedPtr* %this, i8* %val) #4 {
  %val.addr = alloca i8*
  store i8* %val, i8** %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = load i8*, i8** %val.addr
  %3 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %2, i8** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8 @char(%StringRef %this) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %StringRef, %StringRef* %this.addr
  %2 = call i1 @isEmpty(%StringRef %1)
  br i1 %2, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  store i8 0, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  ret i8 %3

if_else:                                          ; preds = %if_block
  %4 = load %StringRef, %StringRef* %this.addr
  %5 = call i8* @at(%StringRef %4, i32 0)
  %6 = load i8, i8* %5
  ret i8 %6

if_end:                                           ; preds = %dumy_block1, %dumy_block
  unreachable

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block1:                                      ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @"+"(%StringRef %x, %StringRef %y) #4 {
  %x.addr = alloca %StringRef
  store %StringRef %x, %StringRef* %x.addr
  %y.addr = alloca %StringRef
  store %StringRef %y, %StringRef* %y.addr
  %sz1 = alloca i32
  %sz2 = alloca i32
  %res = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %x.addr
  %2 = call i32 @size(%StringRef %1)
  store i32 %2, i32* %sz1
  %3 = load %StringRef, %StringRef* %y.addr
  %4 = call i32 @size(%StringRef %3)
  store i32 %4, i32* %sz2
  %5 = load i32, i32* %sz1
  %6 = load i32, i32* %sz2
  %7 = call i32 @_Int32_opPlus(i32 %5, i32 %6)
  call void @ctor.48(%StringRef* %res, i32 %7)
  %8 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %9 = load %UntypedPtr, %UntypedPtr* %8
  %10 = getelementptr inbounds %StringRef, %StringRef* %x.addr, i32 0, i32 0
  %11 = load %UntypedPtr, %UntypedPtr* %10
  %12 = load i32, i32* %sz1
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %9, %UntypedPtr %11, i32 %12)
  %13 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %14 = load %UntypedPtr, %UntypedPtr* %13
  %15 = load i32, i32* %sz1
  %16 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %14, i32 %15)
  %17 = getelementptr inbounds %StringRef, %StringRef* %y.addr, i32 0, i32 0
  %18 = load %UntypedPtr, %UntypedPtr* %17
  %19 = load i32, i32* %sz2
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %16, %UntypedPtr %18, i32 %19)
  %20 = load %StringRef, %StringRef* %res
  %21 = load %StringRef, %StringRef* %res
  call void @dtor.51(%StringRef %21)
  ret %StringRef %20

dumy_block:                                       ; No predecessors!
  %22 = load %StringRef, %StringRef* %res
  call void @dtor.51(%StringRef %22)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @"+.58"(%StringRef %x, i8 %y) #4 {
  %x.addr = alloca %StringRef
  store %StringRef %x, %StringRef* %x.addr
  %y.addr = alloca i8
  store i8 %y, i8* %y.addr
  %sz1 = alloca i32
  %sz2 = alloca i32
  %res = alloca %StringRef
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %x.addr
  %2 = call i32 @size(%StringRef %1)
  store i32 %2, i32* %sz1
  store i32 1, i32* %sz2
  %3 = load i32, i32* %sz1
  %4 = load i32, i32* %sz2
  %5 = call i32 @_Int32_opPlus(i32 %3, i32 %4)
  call void @ctor.48(%StringRef* %res, i32 %5)
  %6 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %7 = load %UntypedPtr, %UntypedPtr* %6
  %8 = getelementptr inbounds %StringRef, %StringRef* %x.addr, i32 0, i32 0
  %9 = load %UntypedPtr, %UntypedPtr* %8
  %10 = load i32, i32* %sz1
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %7, %UntypedPtr %9, i32 %10)
  %11 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %12 = load %UntypedPtr, %UntypedPtr* %11
  %13 = load i32, i32* %sz1
  %14 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %12, i32 %13)
  call void @ctor.57(%UntypedPtr* %tmp.this, i8* %y.addr)
  %15 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %16 = load i32, i32* %sz2
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %14, %UntypedPtr %15, i32 %16)
  %17 = load %StringRef, %StringRef* %res
  %18 = load %StringRef, %StringRef* %res
  call void @dtor.51(%StringRef %18)
  ret %StringRef %17

dumy_block:                                       ; No predecessors!
  %19 = load %StringRef, %StringRef* %res
  call void @dtor.51(%StringRef %19)
  unreachable
}

; Function Attrs: nounwind
declare void @cast() #2

; Function Attrs: nounwind
declare void @reinterpretCast() #2

; Function Attrs: nounwind
declare void @construct() #2

; Function Attrs: inlinehint nounwind
define internal void @ctor.59(%UntypedPtr* %this, %Null %nullptr) #4 {
  %nullptr.addr = alloca %Null
  store %Null %nullptr, %Null* %nullptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

declare %UntypedPtr @calloc(i32, i32)

declare %UntypedPtr @realloc(%UntypedPtr, i32)

declare void @free(%UntypedPtr)

declare void @system(i8*)

declare void @sleep(i32)

define internal void @__global_ctor() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.60(%EndLineHelperClass* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

define internal void @__global_dtor() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.61(%EndLineHelperClass* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

define internal void @__global_ctor.1() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.62(%FlushHelperClass* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

define internal void @__global_dtor.2() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.63(%FlushHelperClass* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.64(%EndLineHelperClass* %this, %EndLineHelperClass* %other) #3 {
  %other.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %other, %EndLineHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.65"(%EndLineHelperClass* %this, %EndLineHelperClass* %other) #3 {
  %other.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %other, %EndLineHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.66"(%EndLineHelperClass* %this, %EndLineHelperClass* %other) #3 {
  %this.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %this, %EndLineHelperClass** %this.addr
  %other.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %other, %EndLineHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.67(%FlushHelperClass* %this, %FlushHelperClass* %other) #3 {
  %other.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %other, %FlushHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.68"(%FlushHelperClass* %this, %FlushHelperClass* %other) #3 {
  %other.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %other, %FlushHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.69"(%FlushHelperClass* %this, %FlushHelperClass* %other) #3 {
  %this.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %this, %FlushHelperClass** %this.addr
  %other.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %other, %FlushHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

define internal void @__global_ctor.3() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.70(%ConsoleOutputStream* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

define internal void @__global_dtor.4() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.71(%ConsoleOutputStream* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.72(%ConsoleOutputStream* %this, %ConsoleOutputStream* %other) #3 {
  %other.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %other, %ConsoleOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.73"(%ConsoleOutputStream* %this, %ConsoleOutputStream* %other) #3 {
  %other.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %other, %ConsoleOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.74"(%ConsoleOutputStream* %this, %ConsoleOutputStream* %other) #3 {
  %this.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %this, %ConsoleOutputStream** %this.addr
  %other.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %other, %ConsoleOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<"(%ConsoleOutputStream* %this, i8 %x) #3 {
  %x.addr = alloca i8
  store i8 %x, i8* %x.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %x.addr
  call void @writeChar(i8 %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.75"(%ConsoleOutputStream* %this, i1 %x) #3 {
  %x.addr = alloca i1
  store i1 %x, i1* %x.addr
  %tmp.StringRef = alloca %StringRef
  %tmp.StringRef1 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load i1, i1* %x.addr
  br i1 %1, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %3 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %4 = bitcast %UntypedPtr* %2 to i8**
  %5 = bitcast %UntypedPtr* %3 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str, i32 0, i32 0), i8** %4
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str, i32 0, i32 4), i8** %5
  %6 = load %StringRef, %StringRef* %tmp.StringRef
  call void @"<<<.76"(%ConsoleOutputStream* %this, %StringRef %6)
  br label %if_end

if_else:                                          ; preds = %if_block
  %7 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef1, i32 0, i32 0
  %8 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef1, i32 0, i32 1
  %9 = bitcast %UntypedPtr* %7 to i8**
  %10 = bitcast %UntypedPtr* %8 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.5, i32 0, i32 0), i8** %9
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.5, i32 0, i32 5), i8** %10
  %11 = load %StringRef, %StringRef* %tmp.StringRef1
  call void @"<<<.76"(%ConsoleOutputStream* %this, %StringRef %11)
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.76"(%ConsoleOutputStream* %this, %StringRef %x) #3 {
  %x.addr = alloca %StringRef
  store %StringRef %x, %StringRef* %x.addr
  %"$rangeVar" = alloca %StringRef
  %c = alloca i8*
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %x.addr
  call void @ctor.49(%StringRef* %"$rangeVar", %StringRef %1)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = load %StringRef, %StringRef* %"$rangeVar"
  %3 = call i1 @isEmpty(%StringRef %2)
  %4 = xor i1 true, %3
  br i1 %4, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %5 = load %StringRef, %StringRef* %"$rangeVar"
  %6 = call i8* @front(%StringRef %5)
  store i8* %6, i8** %c
  %7 = load i8*, i8** %c
  %8 = load i8, i8* %7
  call void @writeChar(i8 %8)
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront(%StringRef* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  %9 = load %StringRef, %StringRef* %"$rangeVar"
  call void @dtor.51(%StringRef %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @flush(%ConsoleOutputStream* %this, %FlushHelperClass* %x) #3 {
  br label %code

code:                                             ; preds = %0
  call void @flushOutput()
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.77(%MainParameters* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 0
  call void @ctor.78(%CStrPtr* %1)
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 1
  call void @ctor.78(%CStrPtr* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.78(%CStrPtr* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CStrPtr, %CStrPtr* %this, i32 0, i32 0
  store %CStr* null, %CStr** %1
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.79(%MainParameters* %this, %MainParameters* %other) #3 {
  %other.addr = alloca %MainParameters*
  store %MainParameters* %other, %MainParameters** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 0
  %2 = load %MainParameters*, %MainParameters** %other.addr
  %3 = getelementptr inbounds %MainParameters, %MainParameters* %2, i32 0, i32 0
  call void @ctor.80(%CStrPtr* %1, %CStrPtr* %3)
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 1
  %5 = load %MainParameters*, %MainParameters** %other.addr
  %6 = getelementptr inbounds %MainParameters, %MainParameters* %5, i32 0, i32 1
  call void @ctor.80(%CStrPtr* %4, %CStrPtr* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.80(%CStrPtr* %this, %CStrPtr* %other) #3 {
  %other.addr = alloca %CStrPtr*
  store %CStrPtr* %other, %CStrPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %other.addr
  %2 = getelementptr inbounds %CStrPtr, %CStrPtr* %1, i32 0, i32 0
  %3 = load %CStr*, %CStr** %2
  %4 = getelementptr inbounds %CStrPtr, %CStrPtr* %this, i32 0, i32 0
  store %CStr* %3, %CStr** %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.81(%MainParameters* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.82"(%MainParameters* %this, %MainParameters* %other) #3 {
  %other.addr = alloca %MainParameters*
  store %MainParameters* %other, %MainParameters** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 0
  %2 = load %MainParameters*, %MainParameters** %other.addr
  %3 = getelementptr inbounds %MainParameters, %MainParameters* %2, i32 0, i32 0
  call void @"=.83"(%CStrPtr* %1, %CStrPtr* %3)
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 1
  %5 = load %MainParameters*, %MainParameters** %other.addr
  %6 = getelementptr inbounds %MainParameters, %MainParameters* %5, i32 0, i32 1
  call void @"=.83"(%CStrPtr* %4, %CStrPtr* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.83"(%CStrPtr* %this, %CStrPtr* %other) #3 {
  %other.addr = alloca %CStrPtr*
  store %CStrPtr* %other, %CStrPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %other.addr
  %2 = getelementptr inbounds %CStrPtr, %CStrPtr* %1, i32 0, i32 0
  %3 = load %CStr*, %CStr** %2
  %4 = getelementptr inbounds %CStrPtr, %CStrPtr* %this, i32 0, i32 0
  store %CStr* %3, %CStr** %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.84"(%MainParameters* %this, %MainParameters* %other) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %other.addr = alloca %MainParameters*
  store %MainParameters* %other, %MainParameters** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  %3 = load %MainParameters*, %MainParameters** %other.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 0
  %5 = call i1 @"==.85"(%CStrPtr* %2, %CStrPtr* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %MainParameters*, %MainParameters** %this.addr
  %7 = getelementptr inbounds %MainParameters, %MainParameters* %6, i32 0, i32 1
  %8 = load %MainParameters*, %MainParameters** %other.addr
  %9 = getelementptr inbounds %MainParameters, %MainParameters* %8, i32 0, i32 1
  %10 = call i1 @"==.85"(%CStrPtr* %7, %CStrPtr* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.85"(%CStrPtr* %this, %CStrPtr* %other) #3 {
  %this.addr = alloca %CStrPtr*
  store %CStrPtr* %this, %CStrPtr** %this.addr
  %other.addr = alloca %CStrPtr*
  store %CStrPtr* %other, %CStrPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %this.addr
  %2 = getelementptr inbounds %CStrPtr, %CStrPtr* %1, i32 0, i32 0
  %3 = load %CStr*, %CStr** %2
  %4 = bitcast %CStr* %3 to i8*
  %5 = load %CStrPtr*, %CStrPtr** %other.addr
  %6 = getelementptr inbounds %CStrPtr, %CStrPtr* %5, i32 0, i32 0
  %7 = load %CStr*, %CStr** %6
  %8 = bitcast %CStr* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.86(%MainParameters* %this, i32 %argc, i8** %argv) #4 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %argc.addr = alloca i32
  store i32 %argc, i32* %argc.addr
  %argv.addr = alloca i8**
  store i8** %argv, i8*** %argv.addr
  %"$tmpForRef" = alloca %CStrPtr
  %"$tmpForRef1" = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  call void @ctor.78(%CStrPtr* %2)
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 1
  call void @ctor.78(%CStrPtr* %4)
  %5 = load %MainParameters*, %MainParameters** %this.addr
  %6 = getelementptr inbounds %MainParameters, %MainParameters* %5, i32 0, i32 0
  %7 = load i8**, i8*** %argv.addr
  %8 = call %CStrPtr @fromArgvPtr(i8** %7)
  store %CStrPtr %8, %CStrPtr* %"$tmpForRef"
  call void @"=.83"(%CStrPtr* %6, %CStrPtr* %"$tmpForRef")
  %9 = load %MainParameters*, %MainParameters** %this.addr
  %10 = getelementptr inbounds %MainParameters, %MainParameters* %9, i32 0, i32 1
  %11 = load %MainParameters*, %MainParameters** %this.addr
  %12 = getelementptr inbounds %MainParameters, %MainParameters* %11, i32 0, i32 0
  %13 = load %CStrPtr, %CStrPtr* %12
  %14 = load i32, i32* %argc.addr
  %15 = call %CStrPtr @"+.89"(%CStrPtr %13, i32 %14)
  store %CStrPtr %15, %CStrPtr* %"$tmpForRef1"
  call void @"=.83"(%CStrPtr* %10, %CStrPtr* %"$tmpForRef1")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %CStrPtr @fromArgvPtr(i8** %argv) #4 {
  %argv.addr = alloca i8**
  store i8** %argv, i8*** %argv.addr
  %tmp.this = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = load i8**, i8*** %argv.addr
  %2 = bitcast i8** %1 to %CStr*
  call void @ctor.87(%CStrPtr* %tmp.this, %CStr* %2)
  %3 = load %CStrPtr, %CStrPtr* %tmp.this
  ret %CStrPtr %3
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.87(%CStrPtr* %this, %CStr* %fptr) #3 {
  %this.addr = alloca %CStrPtr*
  store %CStrPtr* %this, %CStrPtr** %this.addr
  %fptr.addr = alloca %CStr*
  store %CStr* %fptr, %CStr** %fptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStr*, %CStr** %fptr.addr
  %2 = load %CStrPtr*, %CStrPtr** %this.addr
  %3 = getelementptr inbounds %CStrPtr, %CStrPtr* %2, i32 0, i32 0
  store %CStr* %1, %CStr** %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.88(%CStrPtr* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %CStrPtr @"+.89"(%CStrPtr %p, i32 %n) #4 {
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr, %CStrPtr* %p.addr
  %2 = call %UntypedPtr @toUntypedPtr(%CStrPtr %1)
  %3 = load i32, i32* %n.addr
  %4 = call i32 @_Int32_opMul(i32 %3, i32 8)
  %5 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %2, i32 %4)
  %6 = call %CStrPtr @toCStrPtr(%UntypedPtr %5)
  ret %CStrPtr %6
}

; Function Attrs: inlinehint nounwind
define internal %CStrPtr @toCStrPtr(%UntypedPtr %p) #4 {
  %p.addr = alloca %UntypedPtr
  store %UntypedPtr %p, %UntypedPtr* %p.addr
  %tmp.this = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p.addr
  %2 = call %CStr* @asRefOf.90(%UntypedPtr %1)
  call void @ctor.87(%CStrPtr* %tmp.this, %CStr* %2)
  %3 = load %CStrPtr, %CStrPtr* %tmp.this
  ret %CStrPtr %3
}

; Function Attrs: inlinehint nounwind
define internal %CStr* @asRefOf.90(%UntypedPtr %this) #4 {
  %this.addr = alloca %UntypedPtr
  store %UntypedPtr %this, %UntypedPtr* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = bitcast i8* %2 to %CStr*
  ret %CStr* %3
}

; Function Attrs: inlinehint nounwind
define internal %UntypedPtr @toUntypedPtr(%CStrPtr %p) #4 {
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CStrPtr, %CStrPtr* %p.addr, i32 0, i32 0
  %2 = load %CStr*, %CStr** %1
  call void @ctor.91(%UntypedPtr* %tmp.this, %CStr* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  ret %UntypedPtr %3
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.91(%UntypedPtr* %this, %CStr* %val) #4 {
  %val.addr = alloca %CStr*
  store %CStr* %val, %CStr** %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = load %CStr*, %CStr** %val.addr
  %3 = bitcast %CStr* %2 to i8*
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.92(%MainParameters* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @size.93(%MainParameters* %this)
  %2 = call i1 @_Int32_opEQ(i32 %1, i32 0)
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal i32 @size.93(%MainParameters* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 1
  %2 = load %CStrPtr, %CStrPtr* %1
  %3 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 0
  %4 = load %CStrPtr, %CStrPtr* %3
  %5 = call i32 @-(%CStrPtr %2, %CStrPtr %4)
  ret i32 %5
}

; Function Attrs: inlinehint nounwind
define internal i32 @-(%CStrPtr %p, %CStrPtr %q) #4 {
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  %q.addr = alloca %CStrPtr
  store %CStrPtr %q, %CStrPtr* %q.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr, %CStrPtr* %p.addr
  %2 = call %UntypedPtr @toUntypedPtr(%CStrPtr %1)
  %3 = load %CStrPtr, %CStrPtr* %q.addr
  %4 = call %UntypedPtr @toUntypedPtr(%CStrPtr %3)
  %5 = call i32 bitcast (i32 (i8*, i8*)* @ptrDiff to i32 (%UntypedPtr, %UntypedPtr)*)(%UntypedPtr %2, %UntypedPtr %4)
  %6 = call i32 @_Int32_opDiv(i32 %5, i32 8)
  ret i32 %6
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @front.94(%MainParameters* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 0
  %2 = load %CStrPtr, %CStrPtr* %1
  %3 = call %StringRef @toStringRef(%CStrPtr %2)
  ret %StringRef %3
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @toStringRef(%CStrPtr %p) #4 {
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CStrPtr, %CStrPtr* %p.addr, i32 0, i32 0
  %2 = load %CStr*, %CStr** %1
  %3 = getelementptr inbounds %CStr, %CStr* %2, i32 0, i32 0
  %4 = load i8*, i8** %3
  %5 = call %StringRef @_String_fromCString(i8* %4)
  ret %StringRef %5
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @back.95(%MainParameters* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 1
  %2 = load %CStrPtr, %CStrPtr* %1
  %3 = call %CStrPtr @-.96(%CStrPtr %2, i32 1)
  %4 = call %StringRef @toStringRef(%CStrPtr %3)
  ret %StringRef %4
}

; Function Attrs: inlinehint nounwind
define internal %CStrPtr @-.96(%CStrPtr %p, i32 %n) #4 {
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr, %CStrPtr* %p.addr
  %2 = call %UntypedPtr @toUntypedPtr(%CStrPtr %1)
  %3 = load i32, i32* %n.addr
  %4 = call i32 @_Int32_opMul(i32 %3, i32 8)
  %5 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrSub to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %2, i32 %4)
  %6 = call %CStrPtr @toCStrPtr(%UntypedPtr %5)
  ret %CStrPtr %6
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @"().97"(%MainParameters* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 0
  %2 = load %CStrPtr, %CStrPtr* %1
  %3 = call %StringRef @toStringRef(%CStrPtr %2)
  ret %StringRef %3
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @"().98"(%MainParameters* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this, i32 0, i32 0
  %2 = load %CStrPtr, %CStrPtr* %1
  %3 = load i32, i32* %n.addr
  %4 = call %CStrPtr @"+.89"(%CStrPtr %2, i32 %3)
  %5 = call %StringRef @toStringRef(%CStrPtr %4)
  ret %StringRef %5
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.99(%MainParameters* %this) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %"$tmpForRef" = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 0
  %5 = load %CStrPtr, %CStrPtr* %4
  %6 = call %CStrPtr @"+.89"(%CStrPtr %5, i32 1)
  store %CStrPtr %6, %CStrPtr* %"$tmpForRef"
  call void @"=.83"(%CStrPtr* %2, %CStrPtr* %"$tmpForRef")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.100(%MainParameters* %this) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %"$tmpForRef" = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 1
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 1
  %5 = load %CStrPtr, %CStrPtr* %4
  %6 = call %CStrPtr @-.96(%CStrPtr %5, i32 1)
  store %CStrPtr %6, %CStrPtr* %"$tmpForRef"
  call void @"=.83"(%CStrPtr* %2, %CStrPtr* %"$tmpForRef")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.101(%MainParameters* %this, i32 %n) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %"$tmpForRef" = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 0
  %5 = load %CStrPtr, %CStrPtr* %4
  %6 = load i32, i32* %n.addr
  %7 = call %CStrPtr @"+.89"(%CStrPtr %5, i32 %6)
  store %CStrPtr %7, %CStrPtr* %"$tmpForRef"
  call void @"=.83"(%CStrPtr* %2, %CStrPtr* %"$tmpForRef")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.102(%MainParameters* %this, i32 %n) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %"$tmpForRef" = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 1
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 1
  %5 = load %CStrPtr, %CStrPtr* %4
  %6 = load i32, i32* %n.addr
  %7 = call %CStrPtr @-.96(%CStrPtr %5, i32 %6)
  store %CStrPtr %7, %CStrPtr* %"$tmpForRef"
  call void @"=.83"(%CStrPtr* %2, %CStrPtr* %"$tmpForRef")
  ret void
}

define internal void @__global_ctor.6() {
  br label %code

code:                                             ; preds = %0
  call void @ctor.77(%MainParameters* @programArgs.3)
  ret void
}

define internal void @__global_dtor.7() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: nounwind
declare void @sprMain() #2

; Function Attrs: inlinehint nounwind
define internal i32 @asInt(%StringRef %src) #4 {
  %src.addr = alloca %StringRef
  store %StringRef %src, %StringRef* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %src.addr
  %2 = call i8* @cStr(%StringRef %1)
  %3 = call i32 @atoi(i8* %2)
  ret i32 %3
}

declare i32 @atoi(i8*)

; Function Attrs: inlinehint nounwind
define internal i64 @asInt64(%StringRef %src) #4 {
  %src.addr = alloca %StringRef
  store %StringRef %src, %StringRef* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %src.addr
  %2 = call i8* @cStr(%StringRef %1)
  %3 = call i64 @atoll(i8* %2)
  ret i64 %3
}

declare i64 @atoll(i8*)

; Function Attrs: inlinehint nounwind
define internal double @asFloat(%StringRef %src) #4 {
  %src.addr = alloca %StringRef
  store %StringRef %src, %StringRef* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %src.addr
  %2 = call i8* @cStr(%StringRef %1)
  %3 = call double @atof(i8* %2)
  ret double %3
}

declare double @atof(i8*)

; Function Attrs: alwaysinline nounwind
define internal void @ctor.106(%ParserContext* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 0
  call void @ctor.107(%SparrowScanner* %1)
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 1
  call void @ctor.124(%"SparrowLayoutDecoder[SparrowScanner]"* %2)
  %3 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 2
  call void @ctor.130(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.107(%SparrowScanner* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 0
  call void @ctor.108(%Location* %1)
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 1
  call void @ctor.111(%BufferedCharSource* %2)
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @ctor.116(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3)
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  call void @ctor.120(%Token* %4)
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 4
  store i1 false, i1* %5
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 5
  call void @ctor.122(%ErrorReporter* %6)
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  store i1 false, i1* %7
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.108(%Location* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %this, i32 0, i32 0
  call void @ctor.109(%SourceCode* %1)
  %2 = getelementptr inbounds %Location, %Location* %this, i32 0, i32 1
  call void @ctor.110(%LineCol* %2)
  %3 = getelementptr inbounds %Location, %Location* %this, i32 0, i32 2
  call void @ctor.110(%LineCol* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.109(%SourceCode* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SourceCode, %SourceCode* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.110(%LineCol* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %LineCol, %LineCol* %this, i32 0, i32 0
  store i32 0, i32* %1
  %2 = getelementptr inbounds %LineCol, %LineCol* %this, i32 0, i32 1
  store i32 0, i32* %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.111(%BufferedCharSource* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 0
  call void @ctor.112(%CharSource* %1)
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 1
  call void @ctor.114(%String* %2)
  %3 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 2
  store i32 0, i32* %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.112(%CharSource* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CharSource, %CharSource* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  %2 = getelementptr inbounds %CharSource, %CharSource* %this, i32 0, i32 1
  call void @ctor.113(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.113(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, String mut, Int]", %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.114(%String* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  call void @ctor.115(%"RawPtr[Char]"* %1)
  %2 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  call void @ctor.115(%"RawPtr[Char]"* %2)
  %3 = getelementptr inbounds %String, %String* %this, i32 0, i32 2
  call void @ctor.115(%"RawPtr[Char]"* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.115(%"RawPtr[Char]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  store i8* null, i8** %1
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.116(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 0
  call void @ctor.117(%"RangeWithLookahead[BufferedCharSourceRange]"* %1)
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 1
  store %Location* null, %Location** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.117(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  call void @ctor.118(%BufferedCharSourceRange* %1)
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  call void @ctor.119(%"Vector[Char]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.118(%BufferedCharSourceRange* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %this, i32 0, i32 0
  store %BufferedCharSource* null, %BufferedCharSource** %1
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.119(%"Vector[Char]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  call void @ctor.115(%"RawPtr[Char]"* %1)
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  call void @ctor.115(%"RawPtr[Char]"* %2)
  %3 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  call void @ctor.115(%"RawPtr[Char]"* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.120(%Token* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 0
  call void @ctor.108(%Location* %1)
  %2 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 1
  call void @ctor.121(%TokenType* %2)
  %3 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 2
  call void @ctor.114(%String* %3)
  %4 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 3
  store i64 0, i64* %4
  %5 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 4
  store double 0.000000e+00, double* %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.121(%TokenType* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %TokenType, %TokenType* %this, i32 0, i32 0
  store i32 0, i32* %1
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.122(%ErrorReporter* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %this, i32 0, i32 1
  call void @ctor.123(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.123(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.124(%"SparrowLayoutDecoder[SparrowScanner]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @ctor.125(%"RangeWithLookahead[SparrowScanner]"* %1)
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 1
  call void @ctor.122(%ErrorReporter* %2)
  %3 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  call void @ctor.128(%"Vector[Int]"* %3)
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  call void @ctor.119(%"Vector[Char]"* %4)
  %5 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  call void @ctor.121(%TokenType* %5)
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  store i32 0, i32* %6
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.125(%"RangeWithLookahead[SparrowScanner]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  call void @ctor.107(%SparrowScanner* %1)
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  call void @ctor.126(%"Vector[Token]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.126(%"Vector[Token]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  call void @ctor.127(%"RawPtr[Token]"* %1)
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  call void @ctor.127(%"RawPtr[Token]"* %2)
  %3 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  call void @ctor.127(%"RawPtr[Token]"* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.127(%"RawPtr[Token]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  store %Token* null, %Token** %1
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.128(%"Vector[Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  call void @ctor.129(%"RawPtr[Int]"* %1)
  %2 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  call void @ctor.129(%"RawPtr[Int]"* %2)
  %3 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  call void @ctor.129(%"RawPtr[Int]"* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.129(%"RawPtr[Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  store i32* null, i32** %1
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.130(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @ctor.131(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  call void @ctor.120(%Token* %2)
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 2
  store i1 false, i1* %3
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  call void @ctor.132(%AstBuilder* %4)
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 4
  call void @ctor.122(%ErrorReporter* %5)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.131(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @ctor.124(%"SparrowLayoutDecoder[SparrowScanner]"* %1)
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  call void @ctor.126(%"Vector[Token]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.132(%AstBuilder* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 1
  call void @ctor.133(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %2)
  %3 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 2
  call void @ctor.134(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %3)
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 3
  call void @ctor.134(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %4)
  %5 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 4
  call void @ctor.135(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %5)
  %6 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 5
  call void @ctor.136(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %6)
  %7 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 6
  call void @ctor.137(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %7)
  %8 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 7
  call void @ctor.138(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %8)
  %9 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 8
  call void @ctor.135(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %9)
  %10 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 9
  call void @ctor.139(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %10)
  %11 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 10
  call void @ctor.135(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %11)
  %12 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 11
  call void @ctor.135(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %12)
  %13 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 12
  call void @ctor.135(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %13)
  %14 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 13
  call void @ctor.140(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %14)
  %15 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 14
  call void @ctor.141(%"FunctionPtr2[Node, UntypedPtr, Node]"* %15)
  %16 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 15
  call void @ctor.142(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %16)
  %17 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 16
  call void @ctor.143(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %17)
  %18 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 17
  call void @ctor.136(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %18)
  %19 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 18
  call void @ctor.144(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %19)
  %20 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 19
  call void @ctor.142(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %20)
  %21 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 20
  call void @ctor.142(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %21)
  %22 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 21
  call void @ctor.142(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %22)
  %23 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 22
  call void @ctor.134(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %23)
  %24 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 23
  call void @ctor.145(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %24)
  %25 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 24
  call void @ctor.146(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %25)
  %26 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 25
  call void @ctor.147(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %26)
  %27 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 26
  call void @ctor.148(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %27)
  %28 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 27
  call void @ctor.149(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %28)
  %29 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 28
  call void @ctor.150(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %29)
  %30 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 29
  call void @ctor.151(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %30)
  %31 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 30
  call void @ctor.152(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %31)
  %32 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 31
  call void @ctor.153(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %32)
  %33 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 32
  call void @ctor.154(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %33)
  %34 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 33
  call void @ctor.144(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %34)
  %35 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 34
  call void @ctor.155(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %35)
  %36 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 35
  call void @ctor.156(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %36)
  %37 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 36
  call void @ctor.137(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %37)
  %38 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 37
  call void @ctor.156(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %38)
  %39 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 38
  call void @ctor.146(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %39)
  %40 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 39
  call void @ctor.146(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %40)
  %41 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 40
  call void @ctor.155(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %41)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.133(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.134(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.135(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.136(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.137(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.138(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.139(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.140(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.141(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.142(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.143(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.144(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.145(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.146(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr2[Node, UntypedPtr, Location const]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.147(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]", %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.148(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.149(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.150(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.151(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.152(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.153(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.154(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Char]", %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.155(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Node]", %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.156(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.157(%ParserContext* %this, %ParserContext* %other) #3 {
  %other.addr = alloca %ParserContext*
  store %ParserContext* %other, %ParserContext** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 0
  %2 = load %ParserContext*, %ParserContext** %other.addr
  %3 = getelementptr inbounds %ParserContext, %ParserContext* %2, i32 0, i32 0
  call void @ctor.158(%SparrowScanner* %1, %SparrowScanner* %3)
  %4 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 1
  %5 = load %ParserContext*, %ParserContext** %other.addr
  %6 = getelementptr inbounds %ParserContext, %ParserContext* %5, i32 0, i32 1
  call void @ctor.181(%"SparrowLayoutDecoder[SparrowScanner]"* %4, %"SparrowLayoutDecoder[SparrowScanner]"* %6)
  %7 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 2
  %8 = load %ParserContext*, %ParserContext** %other.addr
  %9 = getelementptr inbounds %ParserContext, %ParserContext* %8, i32 0, i32 2
  call void @ctor.209(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.158(%SparrowScanner* %this, %SparrowScanner* %other) #3 {
  %other.addr = alloca %SparrowScanner*
  store %SparrowScanner* %other, %SparrowScanner** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 0
  %2 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %2, i32 0, i32 0
  call void @ctor.159(%Location* %1, %Location* %3)
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 1
  %5 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %5, i32 0, i32 1
  call void @ctor.162(%BufferedCharSource* %4, %BufferedCharSource* %6)
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %8 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %9 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %8, i32 0, i32 2
  call void @ctor.171(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %7, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %9)
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %11 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 3
  call void @ctor.177(%Token* %10, %Token* %12)
  %13 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %13, i32 0, i32 4
  %15 = load i1, i1* %14
  %16 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 4
  store i1 %15, i1* %16
  %17 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 5
  %18 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %19 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %18, i32 0, i32 5
  call void @ctor.179(%ErrorReporter* %17, %ErrorReporter* %19)
  %20 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %21 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %20, i32 0, i32 6
  %22 = load i1, i1* %21
  %23 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  store i1 %22, i1* %23
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.159(%Location* %this, %Location* %other) #3 {
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %this, i32 0, i32 0
  %2 = load %Location*, %Location** %other.addr
  %3 = getelementptr inbounds %Location, %Location* %2, i32 0, i32 0
  call void @ctor.160(%SourceCode* %1, %SourceCode* %3)
  %4 = getelementptr inbounds %Location, %Location* %this, i32 0, i32 1
  %5 = load %Location*, %Location** %other.addr
  %6 = getelementptr inbounds %Location, %Location* %5, i32 0, i32 1
  call void @ctor.161(%LineCol* %4, %LineCol* %6)
  %7 = getelementptr inbounds %Location, %Location* %this, i32 0, i32 2
  %8 = load %Location*, %Location** %other.addr
  %9 = getelementptr inbounds %Location, %Location* %8, i32 0, i32 2
  call void @ctor.161(%LineCol* %7, %LineCol* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.160(%SourceCode* %this, %SourceCode* %other) #3 {
  %other.addr = alloca %SourceCode*
  store %SourceCode* %other, %SourceCode** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SourceCode, %SourceCode* %this, i32 0, i32 0
  %2 = load %SourceCode*, %SourceCode** %other.addr
  %3 = getelementptr inbounds %SourceCode, %SourceCode* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.161(%LineCol* %this, %LineCol* %other) #3 {
  %other.addr = alloca %LineCol*
  store %LineCol* %other, %LineCol** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LineCol*, %LineCol** %other.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = getelementptr inbounds %LineCol, %LineCol* %this, i32 0, i32 0
  store i32 %3, i32* %4
  %5 = load %LineCol*, %LineCol** %other.addr
  %6 = getelementptr inbounds %LineCol, %LineCol* %5, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %LineCol, %LineCol* %this, i32 0, i32 1
  store i32 %7, i32* %8
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.162(%BufferedCharSource* %this, %BufferedCharSource* %other) #3 {
  %other.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %other, %BufferedCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 0
  %2 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %3 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %2, i32 0, i32 0
  call void @ctor.163(%CharSource* %1, %CharSource* %3)
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 1
  %5 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %6 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %5, i32 0, i32 1
  call void @ctor.165(%String* %4, %String* %6)
  %7 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %8 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %7, i32 0, i32 2
  %9 = load i32, i32* %8
  %10 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 2
  store i32 %9, i32* %10
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.163(%CharSource* %this, %CharSource* %other) #3 {
  %other.addr = alloca %CharSource*
  store %CharSource* %other, %CharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CharSource, %CharSource* %this, i32 0, i32 0
  %2 = load %CharSource*, %CharSource** %other.addr
  %3 = getelementptr inbounds %CharSource, %CharSource* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  %5 = getelementptr inbounds %CharSource, %CharSource* %this, i32 0, i32 1
  %6 = load %CharSource*, %CharSource** %other.addr
  %7 = getelementptr inbounds %CharSource, %CharSource* %6, i32 0, i32 1
  call void @ctor.164(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %5, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %7)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.164(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %other, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, String mut, Int]", %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"*, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, String mut, Int]", %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.165(%String* %this, %String* %other) #4 {
  %size = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @size.166(%String* %other)
  store i32 %1, i32* %size
  %2 = load i32, i32* %size
  call void @ctor.167(%String* %this, i32 %2)
  %3 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %4 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %3)
  %5 = getelementptr inbounds %String, %String* %other, i32 0, i32 0
  %6 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %5)
  %7 = load i32, i32* %size
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %4, %UntypedPtr %6, i32 %7)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32 @size.166(%String* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %2 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = call i32 @diff(%"RawPtr[Char]"* %1, %"RawPtr[Char]" %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal i32 @diff(%"RawPtr[Char]"* %this, %"RawPtr[Char]" %other) #4 {
  %other.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %other, %"RawPtr[Char]"* %other.addr
  %tmp.this = alloca %UntypedPtr
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  %2 = load i8*, i8** %1
  call void @ctor.57(%UntypedPtr* %tmp.this, i8* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %4 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %other.addr, i32 0, i32 0
  %5 = load i8*, i8** %4
  call void @ctor.57(%UntypedPtr* %tmp.this1, i8* %5)
  %6 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %7 = call i32 bitcast (i32 (i8*, i8*)* @ptrDiff to i32 (%UntypedPtr, %UntypedPtr)*)(%UntypedPtr %3, %UntypedPtr %6)
  %8 = call i32 @_Int32_opDiv(i32 %7, i32 1)
  ret i32 %8
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.167(%String* %this, i32 %size) #4 {
  %size.addr = alloca i32
  store i32 %size, i32* %size.addr
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %"$tmpForRef1" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = load i32, i32* %size.addr
  %3 = call i32 @_Int32_opPlus(i32 %2, i32 1)
  %4 = call %"RawPtr[Char]" @allocRawPtr(i32 %3)
  store %"RawPtr[Char]" %4, %"RawPtr[Char]"* %"$tmpForRef"
  call void @ctor.168(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %"$tmpForRef")
  %5 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %6 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %7 = load i32, i32* %size.addr
  %8 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %6, i32 %7)
  store %"RawPtr[Char]" %8, %"RawPtr[Char]"* %"$tmpForRef1"
  call void @ctor.168(%"RawPtr[Char]"* %5, %"RawPtr[Char]"* %"$tmpForRef1")
  %9 = getelementptr inbounds %String, %String* %this, i32 0, i32 2
  %10 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  call void @ctor.168(%"RawPtr[Char]"* %9, %"RawPtr[Char]"* %10)
  store i8 0, i8* %tmp.this
  %11 = load i8, i8* %tmp.this
  %12 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %13 = call i8* @value(%"RawPtr[Char]"* %12)
  store i8 %11, i8* %13
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.168(%"RawPtr[Char]"* %this, %"RawPtr[Char]"* %other) #3 {
  %other.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %other, %"RawPtr[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Char]" @allocRawPtr(i32 %num) #4 {
  %num.addr = alloca i32
  store i32 %num, i32* %num.addr
  %tmp.this = alloca %"RawPtr[Char]"
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %num.addr
  %2 = call i32 @_Int32_opMul(i32 %1, i32 1)
  %3 = call %UntypedPtr @malloc(i32 %2)
  store %UntypedPtr %3, %UntypedPtr* %"$tmpForRef"
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %"$tmpForRef", i32 0, i32 0
  %5 = load i8*, i8** %4
  call void @ctor.169(%"RawPtr[Char]"* %tmp.this, i8* %5)
  %6 = load %"RawPtr[Char]", %"RawPtr[Char]"* %tmp.this
  ret %"RawPtr[Char]" %6
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.169(%"RawPtr[Char]"* %this, i8* %f_ptr) #3 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  %f_ptr.addr = alloca i8*
  store i8* %f_ptr, i8** %f_ptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %f_ptr.addr
  %2 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %3 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %2, i32 0, i32 0
  store i8* %1, i8** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca %"RawPtr[Char]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  %2 = load i8*, i8** %1
  call void @ctor.57(%UntypedPtr* %tmp.this1, i8* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %4 = load i32, i32* %n.addr
  %5 = call i32 @_Int32_opMul(i32 %4, i32 1)
  %6 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 %5)
  call void @ctor.170(%"RawPtr[Char]"* %tmp.this, %UntypedPtr %6)
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %tmp.this
  ret %"RawPtr[Char]" %7
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.170(%"RawPtr[Char]"* %this, %UntypedPtr %p) #4 {
  %p.addr = alloca %UntypedPtr
  store %UntypedPtr %p, %UntypedPtr* %p.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = load %UntypedPtr, %UntypedPtr* %p.addr
  %3 = call i8* @asRefOf.52(%UntypedPtr %2)
  %4 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8* @value(%"RawPtr[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  %2 = load i8*, i8** %1
  ret i8* %2
}

; Function Attrs: inlinehint nounwind
define internal %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %this) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  %2 = load i8*, i8** %1
  call void @ctor.57(%UntypedPtr* %tmp.this, i8* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  ret %UntypedPtr %3
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.171(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other) #3 {
  %other.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 0
  %2 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %3 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2, i32 0, i32 0
  call void @ctor.172(%"RangeWithLookahead[BufferedCharSourceRange]"* %1, %"RangeWithLookahead[BufferedCharSourceRange]"* %3)
  %4 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %5 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4, i32 0, i32 1
  %6 = load %Location*, %Location** %5
  %7 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 1
  store %Location* %6, %Location** %7
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.172(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"* %other) #3 {
  %other.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %other, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %2 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %3 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %2, i32 0, i32 0
  call void @ctor.173(%BufferedCharSourceRange* %1, %BufferedCharSourceRange* %3)
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %5 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %5, i32 0, i32 1
  call void @ctor.174(%"Vector[Char]"* %4, %"Vector[Char]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.173(%BufferedCharSourceRange* %this, %BufferedCharSourceRange* %other) #3 {
  %other.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %other, %BufferedCharSourceRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %other.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %2
  %4 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %this, i32 0, i32 0
  store %BufferedCharSource* %3, %BufferedCharSource** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.174(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #4 {
  %size = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %"$tmpForRef1" = alloca %"RawPtr[Char]"
  %dst = alloca %"RawPtr[Char]"
  %src = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  call void @ctor.115(%"RawPtr[Char]"* %1)
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  call void @ctor.115(%"RawPtr[Char]"* %2)
  %3 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  call void @ctor.115(%"RawPtr[Char]"* %3)
  %4 = call i32 @size.175(%"Vector[Char]"* %other)
  store i32 %4, i32* %size
  %5 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %6 = load i32, i32* %size
  %7 = call %"RawPtr[Char]" @allocRawPtr(i32 %6)
  store %"RawPtr[Char]" %7, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %5, %"RawPtr[Char]"* %"$tmpForRef")
  %8 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %9 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %10 = load i32, i32* %size
  %11 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %9, i32 %10)
  store %"RawPtr[Char]" %11, %"RawPtr[Char]"* %"$tmpForRef1"
  call void @"=.176"(%"RawPtr[Char]"* %8, %"RawPtr[Char]"* %"$tmpForRef1")
  %12 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  %13 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  call void @"=.176"(%"RawPtr[Char]"* %12, %"RawPtr[Char]"* %13)
  %14 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  call void @ctor.168(%"RawPtr[Char]"* %dst, %"RawPtr[Char]"* %14)
  %15 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %other, i32 0, i32 0
  call void @ctor.168(%"RawPtr[Char]"* %src, %"RawPtr[Char]"* %15)
  %16 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %dst)
  %17 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %src)
  %18 = load i32, i32* %size
  %19 = call i32 @_Int32_opMul(i32 %18, i32 1)
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %16, %UntypedPtr %17, i32 %19)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32 @size.175(%"Vector[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = call i32 @diff(%"RawPtr[Char]"* %1, %"RawPtr[Char]" %3)
  ret i32 %4
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.176"(%"RawPtr[Char]"* %this, %"RawPtr[Char]"* %other) #3 {
  %other.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %other, %"RawPtr[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.177(%Token* %this, %Token* %other) #3 {
  %other.addr = alloca %Token*
  store %Token* %other, %Token** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 0
  %2 = load %Token*, %Token** %other.addr
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 0
  call void @ctor.159(%Location* %1, %Location* %3)
  %4 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 1
  %5 = load %Token*, %Token** %other.addr
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 1
  call void @ctor.178(%TokenType* %4, %TokenType* %6)
  %7 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 2
  %8 = load %Token*, %Token** %other.addr
  %9 = getelementptr inbounds %Token, %Token* %8, i32 0, i32 2
  call void @ctor.165(%String* %7, %String* %9)
  %10 = load %Token*, %Token** %other.addr
  %11 = getelementptr inbounds %Token, %Token* %10, i32 0, i32 3
  %12 = load i64, i64* %11
  %13 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 3
  store i64 %12, i64* %13
  %14 = load %Token*, %Token** %other.addr
  %15 = getelementptr inbounds %Token, %Token* %14, i32 0, i32 4
  %16 = load double, double* %15
  %17 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 4
  store double %16, double* %17
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.178(%TokenType* %this, %TokenType* %other) #3 {
  %other.addr = alloca %TokenType*
  store %TokenType* %other, %TokenType** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %TokenType*, %TokenType** %other.addr
  %2 = getelementptr inbounds %TokenType, %TokenType* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = getelementptr inbounds %TokenType, %TokenType* %this, i32 0, i32 0
  store i32 %3, i32* %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.179(%ErrorReporter* %this, %ErrorReporter* %other) #3 {
  %other.addr = alloca %ErrorReporter*
  store %ErrorReporter* %other, %ErrorReporter** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %this, i32 0, i32 0
  %2 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %3 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  %5 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %this, i32 0, i32 1
  %6 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %7 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %6, i32 0, i32 1
  call void @ctor.180(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %5, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %7)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.180(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %other, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.181(%"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"* %other) #3 {
  %other.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %other, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  %2 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %3 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %2, i32 0, i32 0
  call void @ctor.182(%"RangeWithLookahead[SparrowScanner]"* %1, %"RangeWithLookahead[SparrowScanner]"* %3)
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 1
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %5, i32 0, i32 1
  call void @ctor.179(%ErrorReporter* %4, %ErrorReporter* %6)
  %7 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  %8 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %9 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %8, i32 0, i32 2
  call void @ctor.197(%"Vector[Int]"* %7, %"Vector[Int]"* %9)
  %10 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  %11 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %12 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %11, i32 0, i32 3
  call void @ctor.174(%"Vector[Char]"* %10, %"Vector[Char]"* %12)
  %13 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  %14 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %15 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %14, i32 0, i32 4
  call void @ctor.178(%TokenType* %13, %TokenType* %15)
  %16 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %17 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %16, i32 0, i32 5
  %18 = load i32, i32* %17
  %19 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  store i32 %18, i32* %19
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.182(%"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"* %other) #3 {
  %other.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %other, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  %2 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %3 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %2, i32 0, i32 0
  call void @ctor.158(%SparrowScanner* %1, %SparrowScanner* %3)
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  %5 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %5, i32 0, i32 1
  call void @ctor.183(%"Vector[Token]"* %4, %"Vector[Token]"* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.183(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #4 {
  %size = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  %"$tmpForRef1" = alloca %"RawPtr[Token]"
  %dst = alloca %"RawPtr[Token]"
  %src = alloca %"RawPtr[Token]"
  %"$tmpForRef2" = alloca %"RawPtr[Token]"
  %"$tmpForRef3" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  call void @ctor.127(%"RawPtr[Token]"* %1)
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  call void @ctor.127(%"RawPtr[Token]"* %2)
  %3 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  call void @ctor.127(%"RawPtr[Token]"* %3)
  %4 = call i32 @size.184(%"Vector[Token]"* %other)
  store i32 %4, i32* %size
  %5 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %6 = load i32, i32* %size
  %7 = call %"RawPtr[Token]" @allocRawPtr.188(i32 %6)
  store %"RawPtr[Token]" %7, %"RawPtr[Token]"* %"$tmpForRef"
  call void @"=.187"(%"RawPtr[Token]"* %5, %"RawPtr[Token]"* %"$tmpForRef")
  %8 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %9 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %10 = load i32, i32* %size
  %11 = call %"RawPtr[Token]" @advance.190(%"RawPtr[Token]"* %9, i32 %10)
  store %"RawPtr[Token]" %11, %"RawPtr[Token]"* %"$tmpForRef1"
  call void @"=.187"(%"RawPtr[Token]"* %8, %"RawPtr[Token]"* %"$tmpForRef1")
  %12 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  %13 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  call void @"=.187"(%"RawPtr[Token]"* %12, %"RawPtr[Token]"* %13)
  %14 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  call void @ctor.193(%"RawPtr[Token]"* %dst, %"RawPtr[Token]"* %14)
  %15 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %other, i32 0, i32 0
  call void @ctor.193(%"RawPtr[Token]"* %src, %"RawPtr[Token]"* %15)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %16 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %17 = call i1 @"==.194"(%"RawPtr[Token]"* %dst, %"RawPtr[Token]"* %16)
  %18 = xor i1 true, %17
  br i1 %18, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %19 = call %Token* @value.195(%"RawPtr[Token]"* %dst)
  %20 = call %Token* @value.195(%"RawPtr[Token]"* %src)
  call void @ctor.177(%Token* %19, %Token* %20)
  %21 = call %"RawPtr[Token]" @advance.196(%"RawPtr[Token]"* %dst)
  store %"RawPtr[Token]" %21, %"RawPtr[Token]"* %"$tmpForRef2"
  call void @"=.187"(%"RawPtr[Token]"* %dst, %"RawPtr[Token]"* %"$tmpForRef2")
  %22 = call %"RawPtr[Token]" @advance.196(%"RawPtr[Token]"* %src)
  store %"RawPtr[Token]" %22, %"RawPtr[Token]"* %"$tmpForRef3"
  call void @"=.187"(%"RawPtr[Token]"* %src, %"RawPtr[Token]"* %"$tmpForRef3")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32 @size.184(%"Vector[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %2
  %4 = call i32 @diff.185(%"RawPtr[Token]"* %1, %"RawPtr[Token]" %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal i32 @diff.185(%"RawPtr[Token]"* %this, %"RawPtr[Token]" %other) #4 {
  %other.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %other, %"RawPtr[Token]"* %other.addr
  %tmp.this = alloca %UntypedPtr
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  %2 = load %Token*, %Token** %1
  call void @ctor.186(%UntypedPtr* %tmp.this, %Token* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %4 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %other.addr, i32 0, i32 0
  %5 = load %Token*, %Token** %4
  call void @ctor.186(%UntypedPtr* %tmp.this1, %Token* %5)
  %6 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %7 = call i32 bitcast (i32 (i8*, i8*)* @ptrDiff to i32 (%UntypedPtr, %UntypedPtr)*)(%UntypedPtr %3, %UntypedPtr %6)
  %8 = call i32 @_Int32_opDiv(i32 %7, i32 72)
  ret i32 %8
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.186(%UntypedPtr* %this, %Token* %val) #4 {
  %val.addr = alloca %Token*
  store %Token* %val, %Token** %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = load %Token*, %Token** %val.addr
  %3 = bitcast %Token* %2 to i8*
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.187"(%"RawPtr[Token]"* %this, %"RawPtr[Token]"* %other) #3 {
  %other.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %other, %"RawPtr[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %2
  %4 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  store %Token* %3, %Token** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Token]" @allocRawPtr.188(i32 %num) #4 {
  %num.addr = alloca i32
  store i32 %num, i32* %num.addr
  %tmp.this = alloca %"RawPtr[Token]"
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %num.addr
  %2 = call i32 @_Int32_opMul(i32 %1, i32 72)
  %3 = call %UntypedPtr @malloc(i32 %2)
  store %UntypedPtr %3, %UntypedPtr* %"$tmpForRef"
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %"$tmpForRef", i32 0, i32 0
  %5 = load i8*, i8** %4
  %6 = bitcast i8* %5 to %Token*
  call void @ctor.189(%"RawPtr[Token]"* %tmp.this, %Token* %6)
  %7 = load %"RawPtr[Token]", %"RawPtr[Token]"* %tmp.this
  ret %"RawPtr[Token]" %7
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.189(%"RawPtr[Token]"* %this, %Token* %f_ptr) #3 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  %f_ptr.addr = alloca %Token*
  store %Token* %f_ptr, %Token** %f_ptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %f_ptr.addr
  %2 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %3 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %2, i32 0, i32 0
  store %Token* %1, %Token** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Token]" @advance.190(%"RawPtr[Token]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca %"RawPtr[Token]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  %2 = load %Token*, %Token** %1
  call void @ctor.186(%UntypedPtr* %tmp.this1, %Token* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %4 = load i32, i32* %n.addr
  %5 = call i32 @_Int32_opMul(i32 %4, i32 72)
  %6 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 %5)
  call void @ctor.191(%"RawPtr[Token]"* %tmp.this, %UntypedPtr %6)
  %7 = load %"RawPtr[Token]", %"RawPtr[Token]"* %tmp.this
  ret %"RawPtr[Token]" %7
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.191(%"RawPtr[Token]"* %this, %UntypedPtr %p) #4 {
  %p.addr = alloca %UntypedPtr
  store %UntypedPtr %p, %UntypedPtr* %p.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  store %Token* null, %Token** %1
  %2 = load %UntypedPtr, %UntypedPtr* %p.addr
  %3 = call %Token* @asRefOf.192(%UntypedPtr %2)
  %4 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  store %Token* %3, %Token** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Token* @asRefOf.192(%UntypedPtr %this) #4 {
  %this.addr = alloca %UntypedPtr
  store %UntypedPtr %this, %UntypedPtr* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = bitcast i8* %2 to %Token*
  ret %Token* %3
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.193(%"RawPtr[Token]"* %this, %"RawPtr[Token]"* %other) #3 {
  %other.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %other, %"RawPtr[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %2
  %4 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  store %Token* %3, %Token** %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.194"(%"RawPtr[Token]"* %this, %"RawPtr[Token]"* %other) #3 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  %other.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %other, %"RawPtr[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %2
  %4 = bitcast %Token* %3 to i8*
  %5 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %other.addr
  %6 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %5, i32 0, i32 0
  %7 = load %Token*, %Token** %6
  %8 = bitcast %Token* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal %Token* @value.195(%"RawPtr[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  %2 = load %Token*, %Token** %1
  ret %Token* %2
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Token]" @advance.196(%"RawPtr[Token]"* %this) #4 {
  %tmp.this = alloca %"RawPtr[Token]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  %2 = load %Token*, %Token** %1
  call void @ctor.186(%UntypedPtr* %tmp.this1, %Token* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %4 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 72)
  call void @ctor.191(%"RawPtr[Token]"* %tmp.this, %UntypedPtr %4)
  %5 = load %"RawPtr[Token]", %"RawPtr[Token]"* %tmp.this
  ret %"RawPtr[Token]" %5
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.197(%"Vector[Int]"* %this, %"Vector[Int]"* %other) #4 {
  %size = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Int]"
  %"$tmpForRef1" = alloca %"RawPtr[Int]"
  %dst = alloca %"RawPtr[Int]"
  %src = alloca %"RawPtr[Int]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  call void @ctor.129(%"RawPtr[Int]"* %1)
  %2 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  call void @ctor.129(%"RawPtr[Int]"* %2)
  %3 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  call void @ctor.129(%"RawPtr[Int]"* %3)
  %4 = call i32 @size.198(%"Vector[Int]"* %other)
  store i32 %4, i32* %size
  %5 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %6 = load i32, i32* %size
  %7 = call %"RawPtr[Int]" @allocRawPtr.202(i32 %6)
  store %"RawPtr[Int]" %7, %"RawPtr[Int]"* %"$tmpForRef"
  call void @"=.201"(%"RawPtr[Int]"* %5, %"RawPtr[Int]"* %"$tmpForRef")
  %8 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %9 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %10 = load i32, i32* %size
  %11 = call %"RawPtr[Int]" @advance.204(%"RawPtr[Int]"* %9, i32 %10)
  store %"RawPtr[Int]" %11, %"RawPtr[Int]"* %"$tmpForRef1"
  call void @"=.201"(%"RawPtr[Int]"* %8, %"RawPtr[Int]"* %"$tmpForRef1")
  %12 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  %13 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  call void @"=.201"(%"RawPtr[Int]"* %12, %"RawPtr[Int]"* %13)
  %14 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  call void @ctor.207(%"RawPtr[Int]"* %dst, %"RawPtr[Int]"* %14)
  %15 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %other, i32 0, i32 0
  call void @ctor.207(%"RawPtr[Int]"* %src, %"RawPtr[Int]"* %15)
  %16 = call %UntypedPtr @untypedPtr.208(%"RawPtr[Int]"* %dst)
  %17 = call %UntypedPtr @untypedPtr.208(%"RawPtr[Int]"* %src)
  %18 = load i32, i32* %size
  %19 = call i32 @_Int32_opMul(i32 %18, i32 4)
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %16, %UntypedPtr %17, i32 %19)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32 @size.198(%"Vector[Int]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[Int]", %"RawPtr[Int]"* %2
  %4 = call i32 @diff.199(%"RawPtr[Int]"* %1, %"RawPtr[Int]" %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal i32 @diff.199(%"RawPtr[Int]"* %this, %"RawPtr[Int]" %other) #4 {
  %other.addr = alloca %"RawPtr[Int]"
  store %"RawPtr[Int]" %other, %"RawPtr[Int]"* %other.addr
  %tmp.this = alloca %UntypedPtr
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  %2 = load i32*, i32** %1
  call void @ctor.200(%UntypedPtr* %tmp.this, i32* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %4 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %other.addr, i32 0, i32 0
  %5 = load i32*, i32** %4
  call void @ctor.200(%UntypedPtr* %tmp.this1, i32* %5)
  %6 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %7 = call i32 bitcast (i32 (i8*, i8*)* @ptrDiff to i32 (%UntypedPtr, %UntypedPtr)*)(%UntypedPtr %3, %UntypedPtr %6)
  %8 = call i32 @_Int32_opDiv(i32 %7, i32 4)
  ret i32 %8
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.200(%UntypedPtr* %this, i32* %val) #4 {
  %val.addr = alloca i32*
  store i32* %val, i32** %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = load i32*, i32** %val.addr
  %3 = bitcast i32* %2 to i8*
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.201"(%"RawPtr[Int]"* %this, %"RawPtr[Int]"* %other) #3 {
  %other.addr = alloca %"RawPtr[Int]"*
  store %"RawPtr[Int]"* %other, %"RawPtr[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Int]"*, %"RawPtr[Int]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %1, i32 0, i32 0
  %3 = load i32*, i32** %2
  %4 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  store i32* %3, i32** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Int]" @allocRawPtr.202(i32 %num) #4 {
  %num.addr = alloca i32
  store i32 %num, i32* %num.addr
  %tmp.this = alloca %"RawPtr[Int]"
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %num.addr
  %2 = call i32 @_Int32_opMul(i32 %1, i32 4)
  %3 = call %UntypedPtr @malloc(i32 %2)
  store %UntypedPtr %3, %UntypedPtr* %"$tmpForRef"
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %"$tmpForRef", i32 0, i32 0
  %5 = load i8*, i8** %4
  %6 = bitcast i8* %5 to i32*
  call void @ctor.203(%"RawPtr[Int]"* %tmp.this, i32* %6)
  %7 = load %"RawPtr[Int]", %"RawPtr[Int]"* %tmp.this
  ret %"RawPtr[Int]" %7
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.203(%"RawPtr[Int]"* %this, i32* %f_ptr) #3 {
  %this.addr = alloca %"RawPtr[Int]"*
  store %"RawPtr[Int]"* %this, %"RawPtr[Int]"** %this.addr
  %f_ptr.addr = alloca i32*
  store i32* %f_ptr, i32** %f_ptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %f_ptr.addr
  %2 = load %"RawPtr[Int]"*, %"RawPtr[Int]"** %this.addr
  %3 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %2, i32 0, i32 0
  store i32* %1, i32** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Int]" @advance.204(%"RawPtr[Int]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca %"RawPtr[Int]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  %2 = load i32*, i32** %1
  call void @ctor.200(%UntypedPtr* %tmp.this1, i32* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %4 = load i32, i32* %n.addr
  %5 = call i32 @_Int32_opMul(i32 %4, i32 4)
  %6 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 %5)
  call void @ctor.205(%"RawPtr[Int]"* %tmp.this, %UntypedPtr %6)
  %7 = load %"RawPtr[Int]", %"RawPtr[Int]"* %tmp.this
  ret %"RawPtr[Int]" %7
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.205(%"RawPtr[Int]"* %this, %UntypedPtr %p) #4 {
  %p.addr = alloca %UntypedPtr
  store %UntypedPtr %p, %UntypedPtr* %p.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  store i32* null, i32** %1
  %2 = load %UntypedPtr, %UntypedPtr* %p.addr
  %3 = call i32* @asRefOf.206(%UntypedPtr %2)
  %4 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  store i32* %3, i32** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32* @asRefOf.206(%UntypedPtr %this) #4 {
  %this.addr = alloca %UntypedPtr
  store %UntypedPtr %this, %UntypedPtr* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = bitcast i8* %2 to i32*
  ret i32* %3
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.207(%"RawPtr[Int]"* %this, %"RawPtr[Int]"* %other) #3 {
  %other.addr = alloca %"RawPtr[Int]"*
  store %"RawPtr[Int]"* %other, %"RawPtr[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Int]"*, %"RawPtr[Int]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %1, i32 0, i32 0
  %3 = load i32*, i32** %2
  %4 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  store i32* %3, i32** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %UntypedPtr @untypedPtr.208(%"RawPtr[Int]"* %this) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  %2 = load i32*, i32** %1
  call void @ctor.200(%UntypedPtr* %tmp.this, i32* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  ret %UntypedPtr %3
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.209(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %other.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 0
  call void @ctor.210(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3)
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  call void @ctor.177(%Token* %4, %Token* %6)
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 2
  %9 = load i1, i1* %8
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 2
  store i1 %9, i1* %10
  %11 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 3
  call void @ctor.211(%AstBuilder* %11, %AstBuilder* %13)
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 4
  %15 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %16 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %15, i32 0, i32 4
  call void @ctor.179(%ErrorReporter* %14, %ErrorReporter* %16)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.210(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %other.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  %2 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %3 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 0
  call void @ctor.181(%"SparrowLayoutDecoder[SparrowScanner]"* %1, %"SparrowLayoutDecoder[SparrowScanner]"* %3)
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %5 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  call void @ctor.183(%"Vector[Token]"* %4, %"Vector[Token]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.211(%AstBuilder* %this, %AstBuilder* %other) #3 {
  %other.addr = alloca %AstBuilder*
  store %AstBuilder* %other, %AstBuilder** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 0
  %2 = load %AstBuilder*, %AstBuilder** %other.addr
  %3 = getelementptr inbounds %AstBuilder, %AstBuilder* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  %5 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 1
  %6 = load %AstBuilder*, %AstBuilder** %other.addr
  %7 = getelementptr inbounds %AstBuilder, %AstBuilder* %6, i32 0, i32 1
  call void @ctor.212(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %5, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %7)
  %8 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 2
  %9 = load %AstBuilder*, %AstBuilder** %other.addr
  %10 = getelementptr inbounds %AstBuilder, %AstBuilder* %9, i32 0, i32 2
  call void @ctor.213(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %8, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %10)
  %11 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 3
  %12 = load %AstBuilder*, %AstBuilder** %other.addr
  %13 = getelementptr inbounds %AstBuilder, %AstBuilder* %12, i32 0, i32 3
  call void @ctor.213(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %11, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %13)
  %14 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 4
  %15 = load %AstBuilder*, %AstBuilder** %other.addr
  %16 = getelementptr inbounds %AstBuilder, %AstBuilder* %15, i32 0, i32 4
  call void @ctor.214(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %14, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %16)
  %17 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 5
  %18 = load %AstBuilder*, %AstBuilder** %other.addr
  %19 = getelementptr inbounds %AstBuilder, %AstBuilder* %18, i32 0, i32 5
  call void @ctor.215(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %17, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %19)
  %20 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 6
  %21 = load %AstBuilder*, %AstBuilder** %other.addr
  %22 = getelementptr inbounds %AstBuilder, %AstBuilder* %21, i32 0, i32 6
  call void @ctor.216(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %20, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %22)
  %23 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 7
  %24 = load %AstBuilder*, %AstBuilder** %other.addr
  %25 = getelementptr inbounds %AstBuilder, %AstBuilder* %24, i32 0, i32 7
  call void @ctor.217(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %23, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %25)
  %26 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 8
  %27 = load %AstBuilder*, %AstBuilder** %other.addr
  %28 = getelementptr inbounds %AstBuilder, %AstBuilder* %27, i32 0, i32 8
  call void @ctor.214(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %26, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %28)
  %29 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 9
  %30 = load %AstBuilder*, %AstBuilder** %other.addr
  %31 = getelementptr inbounds %AstBuilder, %AstBuilder* %30, i32 0, i32 9
  call void @ctor.218(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %29, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %31)
  %32 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 10
  %33 = load %AstBuilder*, %AstBuilder** %other.addr
  %34 = getelementptr inbounds %AstBuilder, %AstBuilder* %33, i32 0, i32 10
  call void @ctor.214(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %32, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %34)
  %35 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 11
  %36 = load %AstBuilder*, %AstBuilder** %other.addr
  %37 = getelementptr inbounds %AstBuilder, %AstBuilder* %36, i32 0, i32 11
  call void @ctor.214(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %35, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %37)
  %38 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 12
  %39 = load %AstBuilder*, %AstBuilder** %other.addr
  %40 = getelementptr inbounds %AstBuilder, %AstBuilder* %39, i32 0, i32 12
  call void @ctor.214(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %38, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %40)
  %41 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 13
  %42 = load %AstBuilder*, %AstBuilder** %other.addr
  %43 = getelementptr inbounds %AstBuilder, %AstBuilder* %42, i32 0, i32 13
  call void @ctor.219(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %41, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %43)
  %44 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 14
  %45 = load %AstBuilder*, %AstBuilder** %other.addr
  %46 = getelementptr inbounds %AstBuilder, %AstBuilder* %45, i32 0, i32 14
  call void @ctor.220(%"FunctionPtr2[Node, UntypedPtr, Node]"* %44, %"FunctionPtr2[Node, UntypedPtr, Node]"* %46)
  %47 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 15
  %48 = load %AstBuilder*, %AstBuilder** %other.addr
  %49 = getelementptr inbounds %AstBuilder, %AstBuilder* %48, i32 0, i32 15
  call void @ctor.221(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %47, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %49)
  %50 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 16
  %51 = load %AstBuilder*, %AstBuilder** %other.addr
  %52 = getelementptr inbounds %AstBuilder, %AstBuilder* %51, i32 0, i32 16
  call void @ctor.222(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %50, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %52)
  %53 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 17
  %54 = load %AstBuilder*, %AstBuilder** %other.addr
  %55 = getelementptr inbounds %AstBuilder, %AstBuilder* %54, i32 0, i32 17
  call void @ctor.215(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %53, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %55)
  %56 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 18
  %57 = load %AstBuilder*, %AstBuilder** %other.addr
  %58 = getelementptr inbounds %AstBuilder, %AstBuilder* %57, i32 0, i32 18
  call void @ctor.223(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %56, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %58)
  %59 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 19
  %60 = load %AstBuilder*, %AstBuilder** %other.addr
  %61 = getelementptr inbounds %AstBuilder, %AstBuilder* %60, i32 0, i32 19
  call void @ctor.221(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %59, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %61)
  %62 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 20
  %63 = load %AstBuilder*, %AstBuilder** %other.addr
  %64 = getelementptr inbounds %AstBuilder, %AstBuilder* %63, i32 0, i32 20
  call void @ctor.221(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %62, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %64)
  %65 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 21
  %66 = load %AstBuilder*, %AstBuilder** %other.addr
  %67 = getelementptr inbounds %AstBuilder, %AstBuilder* %66, i32 0, i32 21
  call void @ctor.221(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %65, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %67)
  %68 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 22
  %69 = load %AstBuilder*, %AstBuilder** %other.addr
  %70 = getelementptr inbounds %AstBuilder, %AstBuilder* %69, i32 0, i32 22
  call void @ctor.213(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %68, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %70)
  %71 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 23
  %72 = load %AstBuilder*, %AstBuilder** %other.addr
  %73 = getelementptr inbounds %AstBuilder, %AstBuilder* %72, i32 0, i32 23
  call void @ctor.224(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %71, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %73)
  %74 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 24
  %75 = load %AstBuilder*, %AstBuilder** %other.addr
  %76 = getelementptr inbounds %AstBuilder, %AstBuilder* %75, i32 0, i32 24
  call void @ctor.225(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %74, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %76)
  %77 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 25
  %78 = load %AstBuilder*, %AstBuilder** %other.addr
  %79 = getelementptr inbounds %AstBuilder, %AstBuilder* %78, i32 0, i32 25
  call void @ctor.226(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %77, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %79)
  %80 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 26
  %81 = load %AstBuilder*, %AstBuilder** %other.addr
  %82 = getelementptr inbounds %AstBuilder, %AstBuilder* %81, i32 0, i32 26
  call void @ctor.227(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %80, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %82)
  %83 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 27
  %84 = load %AstBuilder*, %AstBuilder** %other.addr
  %85 = getelementptr inbounds %AstBuilder, %AstBuilder* %84, i32 0, i32 27
  call void @ctor.228(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %83, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %85)
  %86 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 28
  %87 = load %AstBuilder*, %AstBuilder** %other.addr
  %88 = getelementptr inbounds %AstBuilder, %AstBuilder* %87, i32 0, i32 28
  call void @ctor.229(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %86, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %88)
  %89 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 29
  %90 = load %AstBuilder*, %AstBuilder** %other.addr
  %91 = getelementptr inbounds %AstBuilder, %AstBuilder* %90, i32 0, i32 29
  call void @ctor.230(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %89, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %91)
  %92 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 30
  %93 = load %AstBuilder*, %AstBuilder** %other.addr
  %94 = getelementptr inbounds %AstBuilder, %AstBuilder* %93, i32 0, i32 30
  call void @ctor.231(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %92, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %94)
  %95 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 31
  %96 = load %AstBuilder*, %AstBuilder** %other.addr
  %97 = getelementptr inbounds %AstBuilder, %AstBuilder* %96, i32 0, i32 31
  call void @ctor.232(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %95, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %97)
  %98 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 32
  %99 = load %AstBuilder*, %AstBuilder** %other.addr
  %100 = getelementptr inbounds %AstBuilder, %AstBuilder* %99, i32 0, i32 32
  call void @ctor.233(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %98, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %100)
  %101 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 33
  %102 = load %AstBuilder*, %AstBuilder** %other.addr
  %103 = getelementptr inbounds %AstBuilder, %AstBuilder* %102, i32 0, i32 33
  call void @ctor.223(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %101, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %103)
  %104 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 34
  %105 = load %AstBuilder*, %AstBuilder** %other.addr
  %106 = getelementptr inbounds %AstBuilder, %AstBuilder* %105, i32 0, i32 34
  call void @ctor.234(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %104, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %106)
  %107 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 35
  %108 = load %AstBuilder*, %AstBuilder** %other.addr
  %109 = getelementptr inbounds %AstBuilder, %AstBuilder* %108, i32 0, i32 35
  call void @ctor.235(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %107, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %109)
  %110 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 36
  %111 = load %AstBuilder*, %AstBuilder** %other.addr
  %112 = getelementptr inbounds %AstBuilder, %AstBuilder* %111, i32 0, i32 36
  call void @ctor.216(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %110, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %112)
  %113 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 37
  %114 = load %AstBuilder*, %AstBuilder** %other.addr
  %115 = getelementptr inbounds %AstBuilder, %AstBuilder* %114, i32 0, i32 37
  call void @ctor.235(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %113, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %115)
  %116 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 38
  %117 = load %AstBuilder*, %AstBuilder** %other.addr
  %118 = getelementptr inbounds %AstBuilder, %AstBuilder* %117, i32 0, i32 38
  call void @ctor.225(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %116, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %118)
  %119 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 39
  %120 = load %AstBuilder*, %AstBuilder** %other.addr
  %121 = getelementptr inbounds %AstBuilder, %AstBuilder* %120, i32 0, i32 39
  call void @ctor.225(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %119, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %121)
  %122 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 40
  %123 = load %AstBuilder*, %AstBuilder** %other.addr
  %124 = getelementptr inbounds %AstBuilder, %AstBuilder* %123, i32 0, i32 40
  call void @ctor.234(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %122, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %124)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.212(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.213(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.214(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.215(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.216(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.217(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.218(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.219(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.220(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %other, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.221(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %other, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.222(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.223(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.224(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.225(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %this, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Location const]"*
  store %"FunctionPtr2[Node, UntypedPtr, Location const]"* %other, %"FunctionPtr2[Node, UntypedPtr, Location const]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr2[Node, UntypedPtr, Location const]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr2[Node, UntypedPtr, Location const]"*, %"FunctionPtr2[Node, UntypedPtr, Location const]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr2[Node, UntypedPtr, Location const]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.226(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]", %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]", %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.227(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.228(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.229(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.230(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.231(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.232(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.233(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Char]", %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Char]", %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.234(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Node]", %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Node]", %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.235(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.236(%ParserContext* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 2
  call void @dtor.237(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 1
  call void @dtor.244(%"SparrowLayoutDecoder[SparrowScanner]"* %2)
  %3 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 0
  call void @dtor.255(%SparrowScanner* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.237(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  call void @dtor.238(%Token* %1)
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @dtor.240(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.238(%Token* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 2
  call void @dtor.239(%String* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.239(%String* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  call void @freePtr(%"RawPtr[Char]"* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @freePtr(%"RawPtr[Char]"* %this) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i1 @isSet(%"RawPtr[Char]"* %this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  %3 = load i8*, i8** %2
  call void @ctor.57(%UntypedPtr* %tmp.this, i8* %3)
  %4 = load %UntypedPtr, %UntypedPtr* %tmp.this
  call void @free(%UntypedPtr %4)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet(%"RawPtr[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = call i1 @implOpRefNE(i8* %2, i8* null)
  ret i1 %3
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.240(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  call void @dtor.241(%"Vector[Token]"* %1)
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @dtor.244(%"SparrowLayoutDecoder[SparrowScanner]"* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.241(%"Vector[Token]"* %this) #4 {
  %p = alloca %"RawPtr[Token]"
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  call void @ctor.193(%"RawPtr[Token]"* %p, %"RawPtr[Token]"* %1)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %3 = call i1 @"==.194"(%"RawPtr[Token]"* %p, %"RawPtr[Token]"* %2)
  %4 = xor i1 true, %3
  br i1 %4, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %5 = call %Token* @value.195(%"RawPtr[Token]"* %p)
  call void @dtor.238(%Token* %5)
  br label %while_step

while_step:                                       ; preds = %while_body
  %6 = call %"RawPtr[Token]" @advance.196(%"RawPtr[Token]"* %p)
  store %"RawPtr[Token]" %6, %"RawPtr[Token]"* %"$tmpForRef"
  call void @"=.187"(%"RawPtr[Token]"* %p, %"RawPtr[Token]"* %"$tmpForRef")
  br label %while_block

while_end:                                        ; preds = %while_block
  %7 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  call void @freePtr.242(%"RawPtr[Token]"* %7)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @freePtr.242(%"RawPtr[Token]"* %this) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i1 @isSet.243(%"RawPtr[Token]"* %this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  %3 = load %Token*, %Token** %2
  call void @ctor.186(%UntypedPtr* %tmp.this, %Token* %3)
  %4 = load %UntypedPtr, %UntypedPtr* %tmp.this
  call void @free(%UntypedPtr %4)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet.243(%"RawPtr[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  %2 = load %Token*, %Token** %1
  %3 = bitcast %Token* %2 to i8*
  %4 = call i1 @implOpRefNE(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.244(%"SparrowLayoutDecoder[SparrowScanner]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  call void @dtor.245(%"Vector[Char]"* %1)
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  call void @dtor.248(%"Vector[Int]"* %2)
  %3 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @dtor.254(%"RangeWithLookahead[SparrowScanner]"* %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.245(%"Vector[Char]"* %this) #4 {
  %p = alloca %"RawPtr[Char]"
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  call void @ctor.168(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %1)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %3 = call i1 @"==.246"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %2)
  %4 = xor i1 true, %3
  br i1 %4, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %5 = call i8* @value(%"RawPtr[Char]"* %p)
  %6 = load i8, i8* %5
  br label %while_step

while_step:                                       ; preds = %while_body
  %7 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %p)
  store %"RawPtr[Char]" %7, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpForRef")
  br label %while_block

while_end:                                        ; preds = %while_block
  %8 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  call void @freePtr(%"RawPtr[Char]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.246"(%"RawPtr[Char]"* %this, %"RawPtr[Char]"* %other) #3 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  %other.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %other, %"RawPtr[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %other.addr
  %5 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %this) #4 {
  %tmp.this = alloca %"RawPtr[Char]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  %2 = load i8*, i8** %1
  call void @ctor.57(%UntypedPtr* %tmp.this1, i8* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %4 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 1)
  call void @ctor.170(%"RawPtr[Char]"* %tmp.this, %UntypedPtr %4)
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %tmp.this
  ret %"RawPtr[Char]" %5
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.248(%"Vector[Int]"* %this) #4 {
  %p = alloca %"RawPtr[Int]"
  %"$tmpForRef" = alloca %"RawPtr[Int]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  call void @ctor.207(%"RawPtr[Int]"* %p, %"RawPtr[Int]"* %1)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %3 = call i1 @"==.249"(%"RawPtr[Int]"* %p, %"RawPtr[Int]"* %2)
  %4 = xor i1 true, %3
  br i1 %4, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %5 = call i32* @value.250(%"RawPtr[Int]"* %p)
  %6 = load i32, i32* %5
  br label %while_step

while_step:                                       ; preds = %while_body
  %7 = call %"RawPtr[Int]" @advance.251(%"RawPtr[Int]"* %p)
  store %"RawPtr[Int]" %7, %"RawPtr[Int]"* %"$tmpForRef"
  call void @"=.201"(%"RawPtr[Int]"* %p, %"RawPtr[Int]"* %"$tmpForRef")
  br label %while_block

while_end:                                        ; preds = %while_block
  %8 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  call void @freePtr.252(%"RawPtr[Int]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.249"(%"RawPtr[Int]"* %this, %"RawPtr[Int]"* %other) #3 {
  %this.addr = alloca %"RawPtr[Int]"*
  store %"RawPtr[Int]"* %this, %"RawPtr[Int]"** %this.addr
  %other.addr = alloca %"RawPtr[Int]"*
  store %"RawPtr[Int]"* %other, %"RawPtr[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Int]"*, %"RawPtr[Int]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %1, i32 0, i32 0
  %3 = load i32*, i32** %2
  %4 = bitcast i32* %3 to i8*
  %5 = load %"RawPtr[Int]"*, %"RawPtr[Int]"** %other.addr
  %6 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %5, i32 0, i32 0
  %7 = load i32*, i32** %6
  %8 = bitcast i32* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal i32* @value.250(%"RawPtr[Int]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  %2 = load i32*, i32** %1
  ret i32* %2
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Int]" @advance.251(%"RawPtr[Int]"* %this) #4 {
  %tmp.this = alloca %"RawPtr[Int]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  %2 = load i32*, i32** %1
  call void @ctor.200(%UntypedPtr* %tmp.this1, i32* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %4 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 4)
  call void @ctor.205(%"RawPtr[Int]"* %tmp.this, %UntypedPtr %4)
  %5 = load %"RawPtr[Int]", %"RawPtr[Int]"* %tmp.this
  ret %"RawPtr[Int]" %5
}

; Function Attrs: inlinehint nounwind
define internal void @freePtr.252(%"RawPtr[Int]"* %this) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i1 @isSet.253(%"RawPtr[Int]"* %this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  %3 = load i32*, i32** %2
  call void @ctor.200(%UntypedPtr* %tmp.this, i32* %3)
  %4 = load %UntypedPtr, %UntypedPtr* %tmp.this
  call void @free(%UntypedPtr %4)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet.253(%"RawPtr[Int]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  %2 = load i32*, i32** %1
  %3 = bitcast i32* %2 to i8*
  %4 = call i1 @implOpRefNE(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.254(%"RangeWithLookahead[SparrowScanner]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  call void @dtor.241(%"Vector[Token]"* %1)
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  call void @dtor.255(%SparrowScanner* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.255(%SparrowScanner* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  call void @dtor.238(%Token* %1)
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @dtor.256(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 1
  call void @dtor.258(%BufferedCharSource* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.256(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 0
  call void @dtor.257(%"RangeWithLookahead[BufferedCharSourceRange]"* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.257(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  call void @dtor.245(%"Vector[Char]"* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.258(%BufferedCharSource* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 1
  call void @dtor.239(%String* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.259"(%ParserContext* %this, %ParserContext* %other) #3 {
  %other.addr = alloca %ParserContext*
  store %ParserContext* %other, %ParserContext** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 0
  %2 = load %ParserContext*, %ParserContext** %other.addr
  %3 = getelementptr inbounds %ParserContext, %ParserContext* %2, i32 0, i32 0
  call void @"=.260"(%SparrowScanner* %1, %SparrowScanner* %3)
  %4 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 1
  %5 = load %ParserContext*, %ParserContext** %other.addr
  %6 = getelementptr inbounds %ParserContext, %ParserContext* %5, i32 0, i32 1
  call void @"=.278"(%"SparrowLayoutDecoder[SparrowScanner]"* %4, %"SparrowLayoutDecoder[SparrowScanner]"* %6)
  %7 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 2
  %8 = load %ParserContext*, %ParserContext** %other.addr
  %9 = getelementptr inbounds %ParserContext, %ParserContext* %8, i32 0, i32 2
  call void @"=.284"(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.260"(%SparrowScanner* %this, %SparrowScanner* %other) #3 {
  %other.addr = alloca %SparrowScanner*
  store %SparrowScanner* %other, %SparrowScanner** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 0
  %2 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %2, i32 0, i32 0
  call void @"=.261"(%Location* %1, %Location* %3)
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 1
  %5 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %5, i32 0, i32 1
  call void @"=.264"(%BufferedCharSource* %4, %BufferedCharSource* %6)
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %8 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %9 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %8, i32 0, i32 2
  call void @"=.269"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %7, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %9)
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %11 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 3
  call void @"=.274"(%Token* %10, %Token* %12)
  %13 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %13, i32 0, i32 4
  %15 = load i1, i1* %14
  %16 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 4
  store i1 %15, i1* %16
  %17 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 5
  %18 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %19 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %18, i32 0, i32 5
  call void @"=.276"(%ErrorReporter* %17, %ErrorReporter* %19)
  %20 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %21 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %20, i32 0, i32 6
  %22 = load i1, i1* %21
  %23 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  store i1 %22, i1* %23
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.261"(%Location* %this, %Location* %other) #3 {
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %this, i32 0, i32 0
  %2 = load %Location*, %Location** %other.addr
  %3 = getelementptr inbounds %Location, %Location* %2, i32 0, i32 0
  call void @"=.262"(%SourceCode* %1, %SourceCode* %3)
  %4 = getelementptr inbounds %Location, %Location* %this, i32 0, i32 1
  %5 = load %Location*, %Location** %other.addr
  %6 = getelementptr inbounds %Location, %Location* %5, i32 0, i32 1
  call void @"=.263"(%LineCol* %4, %LineCol* %6)
  %7 = getelementptr inbounds %Location, %Location* %this, i32 0, i32 2
  %8 = load %Location*, %Location** %other.addr
  %9 = getelementptr inbounds %Location, %Location* %8, i32 0, i32 2
  call void @"=.263"(%LineCol* %7, %LineCol* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.262"(%SourceCode* %this, %SourceCode* %other) #3 {
  %other.addr = alloca %SourceCode*
  store %SourceCode* %other, %SourceCode** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SourceCode, %SourceCode* %this, i32 0, i32 0
  %2 = load %SourceCode*, %SourceCode** %other.addr
  %3 = getelementptr inbounds %SourceCode, %SourceCode* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.263"(%LineCol* %this, %LineCol* %other) #3 {
  %other.addr = alloca %LineCol*
  store %LineCol* %other, %LineCol** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LineCol*, %LineCol** %other.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = getelementptr inbounds %LineCol, %LineCol* %this, i32 0, i32 0
  store i32 %3, i32* %4
  %5 = load %LineCol*, %LineCol** %other.addr
  %6 = getelementptr inbounds %LineCol, %LineCol* %5, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %LineCol, %LineCol* %this, i32 0, i32 1
  store i32 %7, i32* %8
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.264"(%BufferedCharSource* %this, %BufferedCharSource* %other) #3 {
  %other.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %other, %BufferedCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 0
  %2 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %3 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %2, i32 0, i32 0
  call void @"=.265"(%CharSource* %1, %CharSource* %3)
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 1
  %5 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %6 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %5, i32 0, i32 1
  %7 = call %String* @"=.267"(%String* %4, %String* %6)
  %8 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %9 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %8, i32 0, i32 2
  %10 = load i32, i32* %9
  %11 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 2
  store i32 %10, i32* %11
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.265"(%CharSource* %this, %CharSource* %other) #3 {
  %other.addr = alloca %CharSource*
  store %CharSource* %other, %CharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CharSource, %CharSource* %this, i32 0, i32 0
  %2 = load %CharSource*, %CharSource** %other.addr
  %3 = getelementptr inbounds %CharSource, %CharSource* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  %4 = getelementptr inbounds %CharSource, %CharSource* %this, i32 0, i32 1
  %5 = load %CharSource*, %CharSource** %other.addr
  %6 = getelementptr inbounds %CharSource, %CharSource* %5, i32 0, i32 1
  call void @"=.266"(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %4, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.266"(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %other, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, String mut, Int]", %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"*, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, String mut, Int]", %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %String* @"=.267"(%String* %this, %String* %other) #4 {
  %tmp = alloca %String
  br label %code

code:                                             ; preds = %0
  call void @ctor.165(%String* %tmp, %String* %other)
  call void @swap(%String* %tmp, %String* %this)
  call void @dtor.239(%String* %tmp)
  ret %String* %this

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %tmp)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @swap(%String* %this, %String* %other) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = getelementptr inbounds %String, %String* %other, i32 0, i32 0
  call void @swap.268(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %2)
  %3 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %4 = getelementptr inbounds %String, %String* %other, i32 0, i32 1
  call void @swap.268(%"RawPtr[Char]"* %3, %"RawPtr[Char]"* %4)
  %5 = getelementptr inbounds %String, %String* %this, i32 0, i32 2
  %6 = getelementptr inbounds %String, %String* %other, i32 0, i32 2
  call void @swap.268(%"RawPtr[Char]"* %5, %"RawPtr[Char]"* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @swap.268(%"RawPtr[Char]"* %this, %"RawPtr[Char]"* %other) #4 {
  %t = alloca i8*
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  %2 = load i8*, i8** %1
  store i8* %2, i8** %t
  %3 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %other, i32 0, i32 0
  %4 = load i8*, i8** %3
  %5 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  store i8* %4, i8** %5
  %6 = load i8*, i8** %t
  %7 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %other, i32 0, i32 0
  store i8* %6, i8** %7
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.269"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other) #3 {
  %other.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 0
  %2 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %3 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2, i32 0, i32 0
  call void @"=.270"(%"RangeWithLookahead[BufferedCharSourceRange]"* %1, %"RangeWithLookahead[BufferedCharSourceRange]"* %3)
  %4 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %5 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4, i32 0, i32 1
  %6 = load %Location*, %Location** %5
  %7 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 1
  store %Location* %6, %Location** %7
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.270"(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"* %other) #3 {
  %other.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %other, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %2 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %3 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %2, i32 0, i32 0
  call void @"=.271"(%BufferedCharSourceRange* %1, %BufferedCharSourceRange* %3)
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %5 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %5, i32 0, i32 1
  %7 = call %"Vector[Char]"* @"=.272"(%"Vector[Char]"* %4, %"Vector[Char]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.271"(%BufferedCharSourceRange* %this, %BufferedCharSourceRange* %other) #3 {
  %other.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %other, %BufferedCharSourceRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %other.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %2
  %4 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %this, i32 0, i32 0
  store %BufferedCharSource* %3, %BufferedCharSource** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"Vector[Char]"* @"=.272"(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #4 {
  %tmp = alloca %"Vector[Char]"
  br label %code

code:                                             ; preds = %0
  call void @ctor.174(%"Vector[Char]"* %tmp, %"Vector[Char]"* %other)
  call void @swap.273(%"Vector[Char]"* %tmp, %"Vector[Char]"* %this)
  call void @dtor.245(%"Vector[Char]"* %tmp)
  ret %"Vector[Char]"* %this

dumy_block:                                       ; No predecessors!
  call void @dtor.245(%"Vector[Char]"* %tmp)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @swap.273(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #4 {
  %tmp = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  call void @ctor.168(%"RawPtr[Char]"* %tmp, %"RawPtr[Char]"* %1)
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %3 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %other, i32 0, i32 0
  call void @"=.176"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %3)
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %other, i32 0, i32 0
  call void @"=.176"(%"RawPtr[Char]"* %4, %"RawPtr[Char]"* %tmp)
  %5 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  call void @"=.176"(%"RawPtr[Char]"* %tmp, %"RawPtr[Char]"* %5)
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %7 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %other, i32 0, i32 1
  call void @"=.176"(%"RawPtr[Char]"* %6, %"RawPtr[Char]"* %7)
  %8 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %other, i32 0, i32 1
  call void @"=.176"(%"RawPtr[Char]"* %8, %"RawPtr[Char]"* %tmp)
  %9 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  call void @"=.176"(%"RawPtr[Char]"* %tmp, %"RawPtr[Char]"* %9)
  %10 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  %11 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %other, i32 0, i32 2
  call void @"=.176"(%"RawPtr[Char]"* %10, %"RawPtr[Char]"* %11)
  %12 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %other, i32 0, i32 2
  call void @"=.176"(%"RawPtr[Char]"* %12, %"RawPtr[Char]"* %tmp)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.274"(%Token* %this, %Token* %other) #3 {
  %other.addr = alloca %Token*
  store %Token* %other, %Token** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 0
  %2 = load %Token*, %Token** %other.addr
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 0
  call void @"=.261"(%Location* %1, %Location* %3)
  %4 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 1
  %5 = load %Token*, %Token** %other.addr
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 1
  call void @"=.275"(%TokenType* %4, %TokenType* %6)
  %7 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 2
  %8 = load %Token*, %Token** %other.addr
  %9 = getelementptr inbounds %Token, %Token* %8, i32 0, i32 2
  %10 = call %String* @"=.267"(%String* %7, %String* %9)
  %11 = load %Token*, %Token** %other.addr
  %12 = getelementptr inbounds %Token, %Token* %11, i32 0, i32 3
  %13 = load i64, i64* %12
  %14 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 3
  store i64 %13, i64* %14
  %15 = load %Token*, %Token** %other.addr
  %16 = getelementptr inbounds %Token, %Token* %15, i32 0, i32 4
  %17 = load double, double* %16
  %18 = getelementptr inbounds %Token, %Token* %this, i32 0, i32 4
  store double %17, double* %18
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.275"(%TokenType* %this, %TokenType* %other) #3 {
  %other.addr = alloca %TokenType*
  store %TokenType* %other, %TokenType** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %TokenType*, %TokenType** %other.addr
  %2 = getelementptr inbounds %TokenType, %TokenType* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = getelementptr inbounds %TokenType, %TokenType* %this, i32 0, i32 0
  store i32 %3, i32* %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.276"(%ErrorReporter* %this, %ErrorReporter* %other) #3 {
  %other.addr = alloca %ErrorReporter*
  store %ErrorReporter* %other, %ErrorReporter** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %this, i32 0, i32 0
  %2 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %3 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  %4 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %this, i32 0, i32 1
  %5 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %6 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %5, i32 0, i32 1
  call void @"=.277"(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %4, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.277"(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %other, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.278"(%"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"* %other) #3 {
  %other.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %other, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  %2 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %3 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %2, i32 0, i32 0
  call void @"=.279"(%"RangeWithLookahead[SparrowScanner]"* %1, %"RangeWithLookahead[SparrowScanner]"* %3)
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 1
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %5, i32 0, i32 1
  call void @"=.276"(%ErrorReporter* %4, %ErrorReporter* %6)
  %7 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  %8 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %9 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %8, i32 0, i32 2
  %10 = call %"Vector[Int]"* @"=.282"(%"Vector[Int]"* %7, %"Vector[Int]"* %9)
  %11 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  %12 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %13 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %12, i32 0, i32 3
  %14 = call %"Vector[Char]"* @"=.272"(%"Vector[Char]"* %11, %"Vector[Char]"* %13)
  %15 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  %16 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %17 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %16, i32 0, i32 4
  call void @"=.275"(%TokenType* %15, %TokenType* %17)
  %18 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %19 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %18, i32 0, i32 5
  %20 = load i32, i32* %19
  %21 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  store i32 %20, i32* %21
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.279"(%"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"* %other) #3 {
  %other.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %other, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  %2 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %3 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %2, i32 0, i32 0
  call void @"=.260"(%SparrowScanner* %1, %SparrowScanner* %3)
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  %5 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %5, i32 0, i32 1
  %7 = call %"Vector[Token]"* @"=.280"(%"Vector[Token]"* %4, %"Vector[Token]"* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"Vector[Token]"* @"=.280"(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #4 {
  %tmp = alloca %"Vector[Token]"
  br label %code

code:                                             ; preds = %0
  call void @ctor.183(%"Vector[Token]"* %tmp, %"Vector[Token]"* %other)
  call void @swap.281(%"Vector[Token]"* %tmp, %"Vector[Token]"* %this)
  call void @dtor.241(%"Vector[Token]"* %tmp)
  ret %"Vector[Token]"* %this

dumy_block:                                       ; No predecessors!
  call void @dtor.241(%"Vector[Token]"* %tmp)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @swap.281(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #4 {
  %tmp = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  call void @ctor.193(%"RawPtr[Token]"* %tmp, %"RawPtr[Token]"* %1)
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %3 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %other, i32 0, i32 0
  call void @"=.187"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %3)
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %other, i32 0, i32 0
  call void @"=.187"(%"RawPtr[Token]"* %4, %"RawPtr[Token]"* %tmp)
  %5 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  call void @"=.187"(%"RawPtr[Token]"* %tmp, %"RawPtr[Token]"* %5)
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %7 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %other, i32 0, i32 1
  call void @"=.187"(%"RawPtr[Token]"* %6, %"RawPtr[Token]"* %7)
  %8 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %other, i32 0, i32 1
  call void @"=.187"(%"RawPtr[Token]"* %8, %"RawPtr[Token]"* %tmp)
  %9 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  call void @"=.187"(%"RawPtr[Token]"* %tmp, %"RawPtr[Token]"* %9)
  %10 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  %11 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %other, i32 0, i32 2
  call void @"=.187"(%"RawPtr[Token]"* %10, %"RawPtr[Token]"* %11)
  %12 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %other, i32 0, i32 2
  call void @"=.187"(%"RawPtr[Token]"* %12, %"RawPtr[Token]"* %tmp)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"Vector[Int]"* @"=.282"(%"Vector[Int]"* %this, %"Vector[Int]"* %other) #4 {
  %tmp = alloca %"Vector[Int]"
  br label %code

code:                                             ; preds = %0
  call void @ctor.197(%"Vector[Int]"* %tmp, %"Vector[Int]"* %other)
  call void @swap.283(%"Vector[Int]"* %tmp, %"Vector[Int]"* %this)
  call void @dtor.248(%"Vector[Int]"* %tmp)
  ret %"Vector[Int]"* %this

dumy_block:                                       ; No predecessors!
  call void @dtor.248(%"Vector[Int]"* %tmp)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @swap.283(%"Vector[Int]"* %this, %"Vector[Int]"* %other) #4 {
  %tmp = alloca %"RawPtr[Int]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  call void @ctor.207(%"RawPtr[Int]"* %tmp, %"RawPtr[Int]"* %1)
  %2 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %3 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %other, i32 0, i32 0
  call void @"=.201"(%"RawPtr[Int]"* %2, %"RawPtr[Int]"* %3)
  %4 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %other, i32 0, i32 0
  call void @"=.201"(%"RawPtr[Int]"* %4, %"RawPtr[Int]"* %tmp)
  %5 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  call void @"=.201"(%"RawPtr[Int]"* %tmp, %"RawPtr[Int]"* %5)
  %6 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %7 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %other, i32 0, i32 1
  call void @"=.201"(%"RawPtr[Int]"* %6, %"RawPtr[Int]"* %7)
  %8 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %other, i32 0, i32 1
  call void @"=.201"(%"RawPtr[Int]"* %8, %"RawPtr[Int]"* %tmp)
  %9 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  call void @"=.201"(%"RawPtr[Int]"* %tmp, %"RawPtr[Int]"* %9)
  %10 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  %11 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %other, i32 0, i32 2
  call void @"=.201"(%"RawPtr[Int]"* %10, %"RawPtr[Int]"* %11)
  %12 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %other, i32 0, i32 2
  call void @"=.201"(%"RawPtr[Int]"* %12, %"RawPtr[Int]"* %tmp)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.284"(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %other.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 0
  call void @"=.285"(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3)
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  call void @"=.274"(%Token* %4, %Token* %6)
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 2
  %9 = load i1, i1* %8
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 2
  store i1 %9, i1* %10
  %11 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 3
  call void @"=.286"(%AstBuilder* %11, %AstBuilder* %13)
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 4
  %15 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %16 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %15, i32 0, i32 4
  call void @"=.276"(%ErrorReporter* %14, %ErrorReporter* %16)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.285"(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %other.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  %2 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %3 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 0
  call void @"=.278"(%"SparrowLayoutDecoder[SparrowScanner]"* %1, %"SparrowLayoutDecoder[SparrowScanner]"* %3)
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %5 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = call %"Vector[Token]"* @"=.280"(%"Vector[Token]"* %4, %"Vector[Token]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.286"(%AstBuilder* %this, %AstBuilder* %other) #3 {
  %other.addr = alloca %AstBuilder*
  store %AstBuilder* %other, %AstBuilder** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 0
  %2 = load %AstBuilder*, %AstBuilder** %other.addr
  %3 = getelementptr inbounds %AstBuilder, %AstBuilder* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 1
  %5 = load %AstBuilder*, %AstBuilder** %other.addr
  %6 = getelementptr inbounds %AstBuilder, %AstBuilder* %5, i32 0, i32 1
  call void @"=.287"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %4, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %6)
  %7 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 2
  %8 = load %AstBuilder*, %AstBuilder** %other.addr
  %9 = getelementptr inbounds %AstBuilder, %AstBuilder* %8, i32 0, i32 2
  call void @"=.288"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %7, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %9)
  %10 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 3
  %11 = load %AstBuilder*, %AstBuilder** %other.addr
  %12 = getelementptr inbounds %AstBuilder, %AstBuilder* %11, i32 0, i32 3
  call void @"=.288"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %10, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %12)
  %13 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 4
  %14 = load %AstBuilder*, %AstBuilder** %other.addr
  %15 = getelementptr inbounds %AstBuilder, %AstBuilder* %14, i32 0, i32 4
  call void @"=.289"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %13, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %15)
  %16 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 5
  %17 = load %AstBuilder*, %AstBuilder** %other.addr
  %18 = getelementptr inbounds %AstBuilder, %AstBuilder* %17, i32 0, i32 5
  call void @"=.290"(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %16, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %18)
  %19 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 6
  %20 = load %AstBuilder*, %AstBuilder** %other.addr
  %21 = getelementptr inbounds %AstBuilder, %AstBuilder* %20, i32 0, i32 6
  call void @"=.291"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %19, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %21)
  %22 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 7
  %23 = load %AstBuilder*, %AstBuilder** %other.addr
  %24 = getelementptr inbounds %AstBuilder, %AstBuilder* %23, i32 0, i32 7
  call void @"=.292"(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %22, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %24)
  %25 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 8
  %26 = load %AstBuilder*, %AstBuilder** %other.addr
  %27 = getelementptr inbounds %AstBuilder, %AstBuilder* %26, i32 0, i32 8
  call void @"=.289"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %25, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %27)
  %28 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 9
  %29 = load %AstBuilder*, %AstBuilder** %other.addr
  %30 = getelementptr inbounds %AstBuilder, %AstBuilder* %29, i32 0, i32 9
  call void @"=.293"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %28, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %30)
  %31 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 10
  %32 = load %AstBuilder*, %AstBuilder** %other.addr
  %33 = getelementptr inbounds %AstBuilder, %AstBuilder* %32, i32 0, i32 10
  call void @"=.289"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %31, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %33)
  %34 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 11
  %35 = load %AstBuilder*, %AstBuilder** %other.addr
  %36 = getelementptr inbounds %AstBuilder, %AstBuilder* %35, i32 0, i32 11
  call void @"=.289"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %34, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %36)
  %37 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 12
  %38 = load %AstBuilder*, %AstBuilder** %other.addr
  %39 = getelementptr inbounds %AstBuilder, %AstBuilder* %38, i32 0, i32 12
  call void @"=.289"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %37, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %39)
  %40 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 13
  %41 = load %AstBuilder*, %AstBuilder** %other.addr
  %42 = getelementptr inbounds %AstBuilder, %AstBuilder* %41, i32 0, i32 13
  call void @"=.294"(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %40, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %42)
  %43 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 14
  %44 = load %AstBuilder*, %AstBuilder** %other.addr
  %45 = getelementptr inbounds %AstBuilder, %AstBuilder* %44, i32 0, i32 14
  call void @"=.295"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %43, %"FunctionPtr2[Node, UntypedPtr, Node]"* %45)
  %46 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 15
  %47 = load %AstBuilder*, %AstBuilder** %other.addr
  %48 = getelementptr inbounds %AstBuilder, %AstBuilder* %47, i32 0, i32 15
  call void @"=.296"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %46, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %48)
  %49 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 16
  %50 = load %AstBuilder*, %AstBuilder** %other.addr
  %51 = getelementptr inbounds %AstBuilder, %AstBuilder* %50, i32 0, i32 16
  call void @"=.297"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %49, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %51)
  %52 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 17
  %53 = load %AstBuilder*, %AstBuilder** %other.addr
  %54 = getelementptr inbounds %AstBuilder, %AstBuilder* %53, i32 0, i32 17
  call void @"=.290"(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %52, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %54)
  %55 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 18
  %56 = load %AstBuilder*, %AstBuilder** %other.addr
  %57 = getelementptr inbounds %AstBuilder, %AstBuilder* %56, i32 0, i32 18
  call void @"=.298"(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %55, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %57)
  %58 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 19
  %59 = load %AstBuilder*, %AstBuilder** %other.addr
  %60 = getelementptr inbounds %AstBuilder, %AstBuilder* %59, i32 0, i32 19
  call void @"=.296"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %58, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %60)
  %61 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 20
  %62 = load %AstBuilder*, %AstBuilder** %other.addr
  %63 = getelementptr inbounds %AstBuilder, %AstBuilder* %62, i32 0, i32 20
  call void @"=.296"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %61, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %63)
  %64 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 21
  %65 = load %AstBuilder*, %AstBuilder** %other.addr
  %66 = getelementptr inbounds %AstBuilder, %AstBuilder* %65, i32 0, i32 21
  call void @"=.296"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %64, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %66)
  %67 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 22
  %68 = load %AstBuilder*, %AstBuilder** %other.addr
  %69 = getelementptr inbounds %AstBuilder, %AstBuilder* %68, i32 0, i32 22
  call void @"=.288"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %67, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %69)
  %70 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 23
  %71 = load %AstBuilder*, %AstBuilder** %other.addr
  %72 = getelementptr inbounds %AstBuilder, %AstBuilder* %71, i32 0, i32 23
  call void @"=.299"(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %70, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %72)
  %73 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 24
  %74 = load %AstBuilder*, %AstBuilder** %other.addr
  %75 = getelementptr inbounds %AstBuilder, %AstBuilder* %74, i32 0, i32 24
  call void @"=.300"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %73, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %75)
  %76 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 25
  %77 = load %AstBuilder*, %AstBuilder** %other.addr
  %78 = getelementptr inbounds %AstBuilder, %AstBuilder* %77, i32 0, i32 25
  call void @"=.301"(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %76, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %78)
  %79 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 26
  %80 = load %AstBuilder*, %AstBuilder** %other.addr
  %81 = getelementptr inbounds %AstBuilder, %AstBuilder* %80, i32 0, i32 26
  call void @"=.302"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %79, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %81)
  %82 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 27
  %83 = load %AstBuilder*, %AstBuilder** %other.addr
  %84 = getelementptr inbounds %AstBuilder, %AstBuilder* %83, i32 0, i32 27
  call void @"=.303"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %82, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %84)
  %85 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 28
  %86 = load %AstBuilder*, %AstBuilder** %other.addr
  %87 = getelementptr inbounds %AstBuilder, %AstBuilder* %86, i32 0, i32 28
  call void @"=.304"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %85, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %87)
  %88 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 29
  %89 = load %AstBuilder*, %AstBuilder** %other.addr
  %90 = getelementptr inbounds %AstBuilder, %AstBuilder* %89, i32 0, i32 29
  call void @"=.305"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %88, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %90)
  %91 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 30
  %92 = load %AstBuilder*, %AstBuilder** %other.addr
  %93 = getelementptr inbounds %AstBuilder, %AstBuilder* %92, i32 0, i32 30
  call void @"=.306"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %91, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %93)
  %94 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 31
  %95 = load %AstBuilder*, %AstBuilder** %other.addr
  %96 = getelementptr inbounds %AstBuilder, %AstBuilder* %95, i32 0, i32 31
  call void @"=.307"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %94, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %96)
  %97 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 32
  %98 = load %AstBuilder*, %AstBuilder** %other.addr
  %99 = getelementptr inbounds %AstBuilder, %AstBuilder* %98, i32 0, i32 32
  call void @"=.308"(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %97, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %99)
  %100 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 33
  %101 = load %AstBuilder*, %AstBuilder** %other.addr
  %102 = getelementptr inbounds %AstBuilder, %AstBuilder* %101, i32 0, i32 33
  call void @"=.298"(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %100, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %102)
  %103 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 34
  %104 = load %AstBuilder*, %AstBuilder** %other.addr
  %105 = getelementptr inbounds %AstBuilder, %AstBuilder* %104, i32 0, i32 34
  call void @"=.309"(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %103, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %105)
  %106 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 35
  %107 = load %AstBuilder*, %AstBuilder** %other.addr
  %108 = getelementptr inbounds %AstBuilder, %AstBuilder* %107, i32 0, i32 35
  call void @"=.310"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %106, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %108)
  %109 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 36
  %110 = load %AstBuilder*, %AstBuilder** %other.addr
  %111 = getelementptr inbounds %AstBuilder, %AstBuilder* %110, i32 0, i32 36
  call void @"=.291"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %109, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %111)
  %112 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 37
  %113 = load %AstBuilder*, %AstBuilder** %other.addr
  %114 = getelementptr inbounds %AstBuilder, %AstBuilder* %113, i32 0, i32 37
  call void @"=.310"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %112, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %114)
  %115 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 38
  %116 = load %AstBuilder*, %AstBuilder** %other.addr
  %117 = getelementptr inbounds %AstBuilder, %AstBuilder* %116, i32 0, i32 38
  call void @"=.300"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %115, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %117)
  %118 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 39
  %119 = load %AstBuilder*, %AstBuilder** %other.addr
  %120 = getelementptr inbounds %AstBuilder, %AstBuilder* %119, i32 0, i32 39
  call void @"=.300"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %118, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %120)
  %121 = getelementptr inbounds %AstBuilder, %AstBuilder* %this, i32 0, i32 40
  %122 = load %AstBuilder*, %AstBuilder** %other.addr
  %123 = getelementptr inbounds %AstBuilder, %AstBuilder* %122, i32 0, i32 40
  call void @"=.309"(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %121, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %123)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.287"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.288"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.289"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.290"(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.291"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.292"(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.293"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.294"(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.295"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %other, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.296"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %other, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.297"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.298"(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.299"(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.300"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %this, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Location const]"*
  store %"FunctionPtr2[Node, UntypedPtr, Location const]"* %other, %"FunctionPtr2[Node, UntypedPtr, Location const]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr2[Node, UntypedPtr, Location const]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr2[Node, UntypedPtr, Location const]"*, %"FunctionPtr2[Node, UntypedPtr, Location const]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr2[Node, UntypedPtr, Location const]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.301"(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]", %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]", %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.302"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.303"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.304"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.305"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.306"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.307"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.308"(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Char]", %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Char]", %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.309"(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Node]", %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Node]", %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.310"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.311"(%ParserContext* %this, %ParserContext* %other) #3 {
  %this.addr = alloca %ParserContext*
  store %ParserContext* %this, %ParserContext** %this.addr
  %other.addr = alloca %ParserContext*
  store %ParserContext* %other, %ParserContext** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %this.addr
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %1, i32 0, i32 0
  %3 = load %ParserContext*, %ParserContext** %other.addr
  %4 = getelementptr inbounds %ParserContext, %ParserContext* %3, i32 0, i32 0
  %5 = call i1 @"==.312"(%SparrowScanner* %2, %SparrowScanner* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %ParserContext*, %ParserContext** %this.addr
  %7 = getelementptr inbounds %ParserContext, %ParserContext* %6, i32 0, i32 2
  %8 = load %ParserContext*, %ParserContext** %other.addr
  %9 = getelementptr inbounds %ParserContext, %ParserContext* %8, i32 0, i32 2
  %10 = call i1 @"==.337"(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %ParserContext*, %ParserContext** %this.addr
  %12 = getelementptr inbounds %ParserContext, %ParserContext* %11, i32 0, i32 1
  %13 = load %ParserContext*, %ParserContext** %other.addr
  %14 = getelementptr inbounds %ParserContext, %ParserContext* %13, i32 0, i32 1
  %15 = call i1 @"==.331"(%"SparrowLayoutDecoder[SparrowScanner]"* %12, %"SparrowLayoutDecoder[SparrowScanner]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.312"(%SparrowScanner* %this, %SparrowScanner* %other) #3 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %other.addr = alloca %SparrowScanner*
  store %SparrowScanner* %other, %SparrowScanner** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 0
  %3 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %3, i32 0, i32 0
  %5 = call i1 @"==.313"(%Location* %2, %Location* %4)
  br i1 %5, label %cond.true13, label %cond.false14

cond.true:                                        ; preds = %cond.end3
  %6 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %6, i32 0, i32 6
  %8 = load i1, i1* %7
  %9 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %9, i32 0, i32 6
  %11 = load i1, i1* %10
  %12 = icmp eq i1 %8, %11
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res20 = phi i1 [ %12, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res20

cond.true1:                                       ; preds = %cond.end6
  %13 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %13, i32 0, i32 5
  %15 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %16 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %15, i32 0, i32 5
  %17 = call i1 @"==.329"(%ErrorReporter* %14, %ErrorReporter* %16)
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res19 = phi i1 [ %17, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res19, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %18 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %19 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %18, i32 0, i32 4
  %20 = load i1, i1* %19
  %21 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %22 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %21, i32 0, i32 4
  %23 = load i1, i1* %22
  %24 = icmp eq i1 %20, %23
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res18 = phi i1 [ %24, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res18, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  %25 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %26 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %25, i32 0, i32 3
  %27 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %28 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %27, i32 0, i32 3
  %29 = call i1 @"==.327"(%Token* %26, %Token* %28)
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res17 = phi i1 [ %29, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res17, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %cond.end15
  %30 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %31 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %30, i32 0, i32 2
  %32 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %33 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %32, i32 0, i32 2
  %34 = call i1 @"==.322"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %31, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %33)
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end15
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res16 = phi i1 [ %34, %cond.true10 ], [ false, %cond.false11 ]
  br i1 %cond.res16, label %cond.true7, label %cond.false8

cond.true13:                                      ; preds = %code
  %35 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %36 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %35, i32 0, i32 1
  %37 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %38 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %37, i32 0, i32 1
  %39 = call i1 @"==.317"(%BufferedCharSource* %36, %BufferedCharSource* %38)
  br label %cond.end15

cond.false14:                                     ; preds = %code
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res = phi i1 [ %39, %cond.true13 ], [ false, %cond.false14 ]
  br i1 %cond.res, label %cond.true10, label %cond.false11
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.313"(%Location* %this, %Location* %other) #3 {
  %this.addr = alloca %Location*
  store %Location* %this, %Location** %this.addr
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %this.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 0
  %3 = load %Location*, %Location** %other.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 0
  %5 = call i1 @"==.314"(%SourceCode* %2, %SourceCode* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %Location*, %Location** %this.addr
  %7 = getelementptr inbounds %Location, %Location* %6, i32 0, i32 2
  %8 = load %Location*, %Location** %other.addr
  %9 = getelementptr inbounds %Location, %Location* %8, i32 0, i32 2
  %10 = call i1 @"==.316"(%LineCol* %7, %LineCol* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %Location*, %Location** %this.addr
  %12 = getelementptr inbounds %Location, %Location* %11, i32 0, i32 1
  %13 = load %Location*, %Location** %other.addr
  %14 = getelementptr inbounds %Location, %Location* %13, i32 0, i32 1
  %15 = call i1 @"==.316"(%LineCol* %12, %LineCol* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.314"(%SourceCode* %this, %SourceCode* %other) #3 {
  %this.addr = alloca %SourceCode*
  store %SourceCode* %this, %SourceCode** %this.addr
  %other.addr = alloca %SourceCode*
  store %SourceCode* %other, %SourceCode** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SourceCode*, %SourceCode** %this.addr
  %2 = getelementptr inbounds %SourceCode, %SourceCode* %1, i32 0, i32 0
  %3 = load %SourceCode*, %SourceCode** %other.addr
  %4 = getelementptr inbounds %SourceCode, %SourceCode* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.315"(%UntypedPtr* %this, %UntypedPtr* %other) #3 {
  %this.addr = alloca %UntypedPtr*
  store %UntypedPtr* %this, %UntypedPtr** %this.addr
  %other.addr = alloca %UntypedPtr*
  store %UntypedPtr* %other, %UntypedPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr*, %UntypedPtr** %this.addr
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %UntypedPtr*, %UntypedPtr** %other.addr
  %5 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.316"(%LineCol* %this, %LineCol* %other) #3 {
  %this.addr = alloca %LineCol*
  store %LineCol* %this, %LineCol** %this.addr
  %other.addr = alloca %LineCol*
  store %LineCol* %other, %LineCol** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LineCol*, %LineCol** %this.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %LineCol*, %LineCol** %other.addr
  %5 = getelementptr inbounds %LineCol, %LineCol* %4, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = call i1 @_Int32_opEQ(i32 %3, i32 %6)
  br i1 %7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %8 = load %LineCol*, %LineCol** %this.addr
  %9 = getelementptr inbounds %LineCol, %LineCol* %8, i32 0, i32 1
  %10 = load i32, i32* %9
  %11 = load %LineCol*, %LineCol** %other.addr
  %12 = getelementptr inbounds %LineCol, %LineCol* %11, i32 0, i32 1
  %13 = load i32, i32* %12
  %14 = call i1 @_Int32_opEQ(i32 %10, i32 %13)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %14, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.317"(%BufferedCharSource* %this, %BufferedCharSource* %other) #3 {
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  %other.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %other, %BufferedCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %3, i32 0, i32 0
  %5 = call i1 @"==.318"(%CharSource* %2, %CharSource* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %7 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %6, i32 0, i32 2
  %8 = load i32, i32* %7
  %9 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %10 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %9, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call i1 @_Int32_opEQ(i32 %8, i32 %11)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %12, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %13 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %14 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %13, i32 0, i32 1
  %15 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %16 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %15, i32 0, i32 1
  %17 = call i1 @"==.320"(%String* %14, %String* %16)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %17, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.318"(%CharSource* %this, %CharSource* %other) #3 {
  %this.addr = alloca %CharSource*
  store %CharSource* %this, %CharSource** %this.addr
  %other.addr = alloca %CharSource*
  store %CharSource* %other, %CharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CharSource*, %CharSource** %this.addr
  %2 = getelementptr inbounds %CharSource, %CharSource* %1, i32 0, i32 0
  %3 = load %CharSource*, %CharSource** %other.addr
  %4 = getelementptr inbounds %CharSource, %CharSource* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %CharSource*, %CharSource** %this.addr
  %7 = getelementptr inbounds %CharSource, %CharSource* %6, i32 0, i32 1
  %8 = load %CharSource*, %CharSource** %other.addr
  %9 = getelementptr inbounds %CharSource, %CharSource* %8, i32 0, i32 1
  %10 = call i1 @"==.319"(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %7, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.319"(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %other, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"*, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, String mut, Int]", %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"*, %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, String mut, Int]", %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal i1 @"==.320"(%String* %this, %String* %other) #4 {
  %i = alloca i32
  %s = alloca i32
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i32 @size.166(%String* %this)
  %2 = call i32 @size.166(%String* %other)
  %3 = call i1 @_Int32_opNE(i32 %1, i32 %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i32 0, i32* %i
  %4 = call i32 @size.166(%String* %this)
  store i32 %4, i32* %s
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %5 = load i32, i32* %i
  %6 = load i32, i32* %s
  %7 = call i1 @_Int32_opLT(i32 %5, i32 %6)
  br i1 %7, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %8 = call i32 @"post_++.33"(i32* %i)
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %9 = load i32, i32* %i
  %10 = call i8* @"().321"(%String* %this, i32 %9)
  %11 = load i8, i8* %10
  %12 = load i32, i32* %i
  %13 = call i8* @"().321"(%String* %other, i32 %12)
  %14 = load i8, i8* %13
  %15 = icmp ne i8 %11, %14
  br i1 %15, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  br label %while_step

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal i8* @"().321"(%String* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = load i32, i32* %index.addr
  %3 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %1, i32 %2)
  store %"RawPtr[Char]" %3, %"RawPtr[Char]"* %"$tmpForRef"
  %4 = call i8* @value(%"RawPtr[Char]"* %"$tmpForRef")
  ret i8* %4
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.322"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other) #3 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %other.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %4 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3, i32 0, i32 0
  %5 = call i1 @"==.323"(%"RangeWithLookahead[BufferedCharSourceRange]"* %2, %"RangeWithLookahead[BufferedCharSourceRange]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %7 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %6, i32 0, i32 1
  %8 = load %Location*, %Location** %7
  %9 = bitcast %Location* %8 to i8*
  %10 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %11 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10, i32 0, i32 1
  %12 = load %Location*, %Location** %11
  %13 = bitcast %Location* %12 to i8*
  %14 = call i1 @implOpRefEQ(i8* %9, i8* %13)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %14, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.323"(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %other, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %3, i32 0, i32 0
  %5 = call i1 @"==.324"(%BufferedCharSourceRange* %2, %BufferedCharSourceRange* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %7 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %6, i32 0, i32 1
  %8 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %8, i32 0, i32 1
  %10 = call i1 @"==.325"(%"Vector[Char]"* %7, %"Vector[Char]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.324"(%BufferedCharSourceRange* %this, %BufferedCharSourceRange* %other) #3 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  %other.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %other, %BufferedCharSourceRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %2
  %4 = bitcast %BufferedCharSource* %3 to i8*
  %5 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %other.addr
  %6 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %5, i32 0, i32 0
  %7 = load %BufferedCharSource*, %BufferedCharSource** %6
  %8 = bitcast %BufferedCharSource* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal i1 @"==.325"(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #4 {
  %i = alloca i32
  %s = alloca i32
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i32 @size.175(%"Vector[Char]"* %this)
  %2 = call i32 @size.175(%"Vector[Char]"* %other)
  %3 = call i1 @_Int32_opNE(i32 %1, i32 %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i32 0, i32* %i
  %4 = call i32 @size.175(%"Vector[Char]"* %this)
  store i32 %4, i32* %s
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %5 = load i32, i32* %i
  %6 = load i32, i32* %s
  %7 = call i1 @_Int32_opLT(i32 %5, i32 %6)
  br i1 %7, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %8 = call i32 @"post_++.33"(i32* %i)
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %9 = load i32, i32* %i
  %10 = call i8* @at.326(%"Vector[Char]"* %this, i32 %9)
  %11 = load i8, i8* %10
  %12 = load i32, i32* %i
  %13 = call i8* @at.326(%"Vector[Char]"* %other, i32 %12)
  %14 = load i8, i8* %13
  %15 = icmp eq i8 %11, %14
  %16 = xor i1 true, %15
  br i1 %16, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  br label %while_step

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal i8* @at.326(%"Vector[Char]"* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %2 = load i32, i32* %index.addr
  %3 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %1, i32 %2)
  store %"RawPtr[Char]" %3, %"RawPtr[Char]"* %"$tmpForRef"
  %4 = call i8* @value(%"RawPtr[Char]"* %"$tmpForRef")
  ret i8* %4
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.327"(%Token* %this, %Token* %other) #3 {
  %this.addr = alloca %Token*
  store %Token* %this, %Token** %this.addr
  %other.addr = alloca %Token*
  store %Token* %other, %Token** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %this.addr
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %other.addr
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  %5 = call i1 @"==.313"(%Location* %2, %Location* %4)
  br i1 %5, label %cond.true7, label %cond.false8

cond.true:                                        ; preds = %cond.end3
  %6 = load %Token*, %Token** %this.addr
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 4
  %8 = load double, double* %7
  %9 = load %Token*, %Token** %other.addr
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 4
  %11 = load double, double* %10
  %12 = call i1 @_Float64_opEQ(double %8, double %11)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res12 = phi i1 [ %12, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res12

cond.true1:                                       ; preds = %cond.end6
  %13 = load %Token*, %Token** %this.addr
  %14 = getelementptr inbounds %Token, %Token* %13, i32 0, i32 3
  %15 = load i64, i64* %14
  %16 = load %Token*, %Token** %other.addr
  %17 = getelementptr inbounds %Token, %Token* %16, i32 0, i32 3
  %18 = load i64, i64* %17
  %19 = call i1 @_UInt64_opEQ(i64 %15, i64 %18)
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res11 = phi i1 [ %19, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res11, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %20 = load %Token*, %Token** %this.addr
  %21 = getelementptr inbounds %Token, %Token* %20, i32 0, i32 2
  %22 = load %Token*, %Token** %other.addr
  %23 = getelementptr inbounds %Token, %Token* %22, i32 0, i32 2
  %24 = call i1 @"==.320"(%String* %21, %String* %23)
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res10 = phi i1 [ %24, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res10, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %code
  %25 = load %Token*, %Token** %this.addr
  %26 = getelementptr inbounds %Token, %Token* %25, i32 0, i32 1
  %27 = load %Token*, %Token** %other.addr
  %28 = getelementptr inbounds %Token, %Token* %27, i32 0, i32 1
  %29 = call i1 @"==.328"(%TokenType* %26, %TokenType* %28)
  br label %cond.end9

cond.false8:                                      ; preds = %code
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res = phi i1 [ %29, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res, label %cond.true4, label %cond.false5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.328"(%TokenType* %this, %TokenType* %other) #3 {
  %this.addr = alloca %TokenType*
  store %TokenType* %this, %TokenType** %this.addr
  %other.addr = alloca %TokenType*
  store %TokenType* %other, %TokenType** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %TokenType*, %TokenType** %this.addr
  %2 = getelementptr inbounds %TokenType, %TokenType* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %TokenType*, %TokenType** %other.addr
  %5 = getelementptr inbounds %TokenType, %TokenType* %4, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = call i1 @_Int32_opEQ(i32 %3, i32 %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.329"(%ErrorReporter* %this, %ErrorReporter* %other) #3 {
  %this.addr = alloca %ErrorReporter*
  store %ErrorReporter* %this, %ErrorReporter** %this.addr
  %other.addr = alloca %ErrorReporter*
  store %ErrorReporter* %other, %ErrorReporter** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %1, i32 0, i32 0
  %3 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %4 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %7 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %6, i32 0, i32 1
  %8 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %9 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %8, i32 0, i32 1
  %10 = call i1 @"==.330"(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %7, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.330"(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %other, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.331"(%"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"* %other) #3 {
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %other.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %other, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 0
  %3 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %3, i32 0, i32 0
  %5 = call i1 @"==.332"(%"RangeWithLookahead[SparrowScanner]"* %2, %"RangeWithLookahead[SparrowScanner]"* %4)
  br i1 %5, label %cond.true10, label %cond.false11

cond.true:                                        ; preds = %cond.end3
  %6 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %7 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %6, i32 0, i32 5
  %8 = load i32, i32* %7
  %9 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %10 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %9, i32 0, i32 5
  %11 = load i32, i32* %10
  %12 = call i1 @_Int32_opEQ(i32 %8, i32 %11)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res16 = phi i1 [ %12, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res16

cond.true1:                                       ; preds = %cond.end6
  %13 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %14 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %13, i32 0, i32 4
  %15 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %16 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %15, i32 0, i32 4
  %17 = call i1 @"==.328"(%TokenType* %14, %TokenType* %16)
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res15 = phi i1 [ %17, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res15, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %18 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %19 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %18, i32 0, i32 3
  %20 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %21 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %20, i32 0, i32 3
  %22 = call i1 @"==.325"(%"Vector[Char]"* %19, %"Vector[Char]"* %21)
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res14 = phi i1 [ %22, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res14, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  %23 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %24 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %23, i32 0, i32 2
  %25 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %26 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %25, i32 0, i32 2
  %27 = call i1 @"==.335"(%"Vector[Int]"* %24, %"Vector[Int]"* %26)
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res13 = phi i1 [ %27, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res13, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %code
  %28 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %29 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %28, i32 0, i32 1
  %30 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %31 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %30, i32 0, i32 1
  %32 = call i1 @"==.329"(%ErrorReporter* %29, %ErrorReporter* %31)
  br label %cond.end12

cond.false11:                                     ; preds = %code
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res = phi i1 [ %32, %cond.true10 ], [ false, %cond.false11 ]
  br i1 %cond.res, label %cond.true7, label %cond.false8
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.332"(%"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %other, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %3, i32 0, i32 0
  %5 = call i1 @"==.312"(%SparrowScanner* %2, %SparrowScanner* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %7 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %6, i32 0, i32 1
  %8 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %8, i32 0, i32 1
  %10 = call i1 @"==.333"(%"Vector[Token]"* %7, %"Vector[Token]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: inlinehint nounwind
define internal i1 @"==.333"(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #4 {
  %i = alloca i32
  %s = alloca i32
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i32 @size.184(%"Vector[Token]"* %this)
  %2 = call i32 @size.184(%"Vector[Token]"* %other)
  %3 = call i1 @_Int32_opNE(i32 %1, i32 %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i32 0, i32* %i
  %4 = call i32 @size.184(%"Vector[Token]"* %this)
  store i32 %4, i32* %s
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %5 = load i32, i32* %i
  %6 = load i32, i32* %s
  %7 = call i1 @_Int32_opLT(i32 %5, i32 %6)
  br i1 %7, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %8 = call i32 @"post_++.33"(i32* %i)
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %9 = load i32, i32* %i
  %10 = call %Token* @at.334(%"Vector[Token]"* %this, i32 %9)
  %11 = load i32, i32* %i
  %12 = call %Token* @at.334(%"Vector[Token]"* %other, i32 %11)
  %13 = call i1 @"==.327"(%Token* %10, %Token* %12)
  %14 = xor i1 true, %13
  br i1 %14, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  br label %while_step

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal %Token* @at.334(%"Vector[Token]"* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %2 = load i32, i32* %index.addr
  %3 = call %"RawPtr[Token]" @advance.190(%"RawPtr[Token]"* %1, i32 %2)
  store %"RawPtr[Token]" %3, %"RawPtr[Token]"* %"$tmpForRef"
  %4 = call %Token* @value.195(%"RawPtr[Token]"* %"$tmpForRef")
  ret %Token* %4
}

; Function Attrs: inlinehint nounwind
define internal i1 @"==.335"(%"Vector[Int]"* %this, %"Vector[Int]"* %other) #4 {
  %i = alloca i32
  %s = alloca i32
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i32 @size.198(%"Vector[Int]"* %this)
  %2 = call i32 @size.198(%"Vector[Int]"* %other)
  %3 = call i1 @_Int32_opNE(i32 %1, i32 %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i32 0, i32* %i
  %4 = call i32 @size.198(%"Vector[Int]"* %this)
  store i32 %4, i32* %s
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %5 = load i32, i32* %i
  %6 = load i32, i32* %s
  %7 = call i1 @_Int32_opLT(i32 %5, i32 %6)
  br i1 %7, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %8 = call i32 @"post_++.33"(i32* %i)
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %9 = load i32, i32* %i
  %10 = call i32* @at.336(%"Vector[Int]"* %this, i32 %9)
  %11 = load i32, i32* %10
  %12 = load i32, i32* %i
  %13 = call i32* @at.336(%"Vector[Int]"* %other, i32 %12)
  %14 = load i32, i32* %13
  %15 = call i1 @_Int32_opEQ(i32 %11, i32 %14)
  %16 = xor i1 true, %15
  br i1 %16, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  br label %while_step

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal i32* @at.336(%"Vector[Int]"* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %"$tmpForRef" = alloca %"RawPtr[Int]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %2 = load i32, i32* %index.addr
  %3 = call %"RawPtr[Int]" @advance.204(%"RawPtr[Int]"* %1, i32 %2)
  store %"RawPtr[Int]" %3, %"RawPtr[Int]"* %"$tmpForRef"
  %4 = call i32* @value.250(%"RawPtr[Int]"* %"$tmpForRef")
  ret i32* %4
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.337"(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %other.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  %5 = call i1 @"==.338"(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %4)
  br i1 %5, label %cond.true7, label %cond.false8

cond.true:                                        ; preds = %cond.end3
  %6 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %7 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6, i32 0, i32 4
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, i32 0, i32 4
  %10 = call i1 @"==.329"(%ErrorReporter* %7, %ErrorReporter* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res12 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res12

cond.true1:                                       ; preds = %cond.end6
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, i32 0, i32 3
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i32 0, i32 3
  %15 = call i1 @"==.339"(%AstBuilder* %12, %AstBuilder* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res11 = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res11, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i32 0, i32 2
  %18 = load i1, i1* %17
  %19 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %20 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %19, i32 0, i32 2
  %21 = load i1, i1* %20
  %22 = icmp eq i1 %18, %21
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res10 = phi i1 [ %22, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res10, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %code
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 1
  %25 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %26 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %25, i32 0, i32 1
  %27 = call i1 @"==.327"(%Token* %24, %Token* %26)
  br label %cond.end9

cond.false8:                                      ; preds = %code
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res = phi i1 [ %27, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res, label %cond.true4, label %cond.false5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.338"(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  %5 = call i1 @"==.331"(%"SparrowLayoutDecoder[SparrowScanner]"* %2, %"SparrowLayoutDecoder[SparrowScanner]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %7 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %6, i32 0, i32 1
  %8 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %8, i32 0, i32 1
  %10 = call i1 @"==.333"(%"Vector[Token]"* %7, %"Vector[Token]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.339"(%AstBuilder* %this, %AstBuilder* %other) #3 {
  %this.addr = alloca %AstBuilder*
  store %AstBuilder* %this, %AstBuilder** %this.addr
  %other.addr = alloca %AstBuilder*
  store %AstBuilder* %other, %AstBuilder** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %this.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 0
  %3 = load %AstBuilder*, %AstBuilder** %other.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  br i1 %5, label %cond.true115, label %cond.false116

cond.true:                                        ; preds = %cond.end3
  %6 = load %AstBuilder*, %AstBuilder** %this.addr
  %7 = getelementptr inbounds %AstBuilder, %AstBuilder* %6, i32 0, i32 40
  %8 = load %AstBuilder*, %AstBuilder** %other.addr
  %9 = getelementptr inbounds %AstBuilder, %AstBuilder* %8, i32 0, i32 40
  %10 = call i1 @"==.362"(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %7, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res156 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res156

cond.true1:                                       ; preds = %cond.end6
  %11 = load %AstBuilder*, %AstBuilder** %this.addr
  %12 = getelementptr inbounds %AstBuilder, %AstBuilder* %11, i32 0, i32 39
  %13 = load %AstBuilder*, %AstBuilder** %other.addr
  %14 = getelementptr inbounds %AstBuilder, %AstBuilder* %13, i32 0, i32 39
  %15 = call i1 @"==.353"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %12, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res155 = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res155, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %16 = load %AstBuilder*, %AstBuilder** %this.addr
  %17 = getelementptr inbounds %AstBuilder, %AstBuilder* %16, i32 0, i32 38
  %18 = load %AstBuilder*, %AstBuilder** %other.addr
  %19 = getelementptr inbounds %AstBuilder, %AstBuilder* %18, i32 0, i32 38
  %20 = call i1 @"==.353"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %17, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %19)
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res154 = phi i1 [ %20, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res154, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  %21 = load %AstBuilder*, %AstBuilder** %this.addr
  %22 = getelementptr inbounds %AstBuilder, %AstBuilder* %21, i32 0, i32 37
  %23 = load %AstBuilder*, %AstBuilder** %other.addr
  %24 = getelementptr inbounds %AstBuilder, %AstBuilder* %23, i32 0, i32 37
  %25 = call i1 @"==.363"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %22, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %24)
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res153 = phi i1 [ %25, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res153, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %cond.end15
  %26 = load %AstBuilder*, %AstBuilder** %this.addr
  %27 = getelementptr inbounds %AstBuilder, %AstBuilder* %26, i32 0, i32 36
  %28 = load %AstBuilder*, %AstBuilder** %other.addr
  %29 = getelementptr inbounds %AstBuilder, %AstBuilder* %28, i32 0, i32 36
  %30 = call i1 @"==.344"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %27, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %29)
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end15
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res152 = phi i1 [ %30, %cond.true10 ], [ false, %cond.false11 ]
  br i1 %cond.res152, label %cond.true7, label %cond.false8

cond.true13:                                      ; preds = %cond.end18
  %31 = load %AstBuilder*, %AstBuilder** %this.addr
  %32 = getelementptr inbounds %AstBuilder, %AstBuilder* %31, i32 0, i32 35
  %33 = load %AstBuilder*, %AstBuilder** %other.addr
  %34 = getelementptr inbounds %AstBuilder, %AstBuilder* %33, i32 0, i32 35
  %35 = call i1 @"==.363"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %32, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %34)
  br label %cond.end15

cond.false14:                                     ; preds = %cond.end18
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res151 = phi i1 [ %35, %cond.true13 ], [ false, %cond.false14 ]
  br i1 %cond.res151, label %cond.true10, label %cond.false11

cond.true16:                                      ; preds = %cond.end21
  %36 = load %AstBuilder*, %AstBuilder** %this.addr
  %37 = getelementptr inbounds %AstBuilder, %AstBuilder* %36, i32 0, i32 34
  %38 = load %AstBuilder*, %AstBuilder** %other.addr
  %39 = getelementptr inbounds %AstBuilder, %AstBuilder* %38, i32 0, i32 34
  %40 = call i1 @"==.362"(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %37, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %39)
  br label %cond.end18

cond.false17:                                     ; preds = %cond.end21
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond.res150 = phi i1 [ %40, %cond.true16 ], [ false, %cond.false17 ]
  br i1 %cond.res150, label %cond.true13, label %cond.false14

cond.true19:                                      ; preds = %cond.end24
  %41 = load %AstBuilder*, %AstBuilder** %this.addr
  %42 = getelementptr inbounds %AstBuilder, %AstBuilder* %41, i32 0, i32 33
  %43 = load %AstBuilder*, %AstBuilder** %other.addr
  %44 = getelementptr inbounds %AstBuilder, %AstBuilder* %43, i32 0, i32 33
  %45 = call i1 @"==.351"(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %42, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %44)
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end24
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond.res149 = phi i1 [ %45, %cond.true19 ], [ false, %cond.false20 ]
  br i1 %cond.res149, label %cond.true16, label %cond.false17

cond.true22:                                      ; preds = %cond.end27
  %46 = load %AstBuilder*, %AstBuilder** %this.addr
  %47 = getelementptr inbounds %AstBuilder, %AstBuilder* %46, i32 0, i32 32
  %48 = load %AstBuilder*, %AstBuilder** %other.addr
  %49 = getelementptr inbounds %AstBuilder, %AstBuilder* %48, i32 0, i32 32
  %50 = call i1 @"==.361"(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %47, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %49)
  br label %cond.end24

cond.false23:                                     ; preds = %cond.end27
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond.res148 = phi i1 [ %50, %cond.true22 ], [ false, %cond.false23 ]
  br i1 %cond.res148, label %cond.true19, label %cond.false20

cond.true25:                                      ; preds = %cond.end30
  %51 = load %AstBuilder*, %AstBuilder** %this.addr
  %52 = getelementptr inbounds %AstBuilder, %AstBuilder* %51, i32 0, i32 31
  %53 = load %AstBuilder*, %AstBuilder** %other.addr
  %54 = getelementptr inbounds %AstBuilder, %AstBuilder* %53, i32 0, i32 31
  %55 = call i1 @"==.360"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %52, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %54)
  br label %cond.end27

cond.false26:                                     ; preds = %cond.end30
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond.res147 = phi i1 [ %55, %cond.true25 ], [ false, %cond.false26 ]
  br i1 %cond.res147, label %cond.true22, label %cond.false23

cond.true28:                                      ; preds = %cond.end33
  %56 = load %AstBuilder*, %AstBuilder** %this.addr
  %57 = getelementptr inbounds %AstBuilder, %AstBuilder* %56, i32 0, i32 30
  %58 = load %AstBuilder*, %AstBuilder** %other.addr
  %59 = getelementptr inbounds %AstBuilder, %AstBuilder* %58, i32 0, i32 30
  %60 = call i1 @"==.359"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %57, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %59)
  br label %cond.end30

cond.false29:                                     ; preds = %cond.end33
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond.res146 = phi i1 [ %60, %cond.true28 ], [ false, %cond.false29 ]
  br i1 %cond.res146, label %cond.true25, label %cond.false26

cond.true31:                                      ; preds = %cond.end36
  %61 = load %AstBuilder*, %AstBuilder** %this.addr
  %62 = getelementptr inbounds %AstBuilder, %AstBuilder* %61, i32 0, i32 29
  %63 = load %AstBuilder*, %AstBuilder** %other.addr
  %64 = getelementptr inbounds %AstBuilder, %AstBuilder* %63, i32 0, i32 29
  %65 = call i1 @"==.358"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %62, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %64)
  br label %cond.end33

cond.false32:                                     ; preds = %cond.end36
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond.res145 = phi i1 [ %65, %cond.true31 ], [ false, %cond.false32 ]
  br i1 %cond.res145, label %cond.true28, label %cond.false29

cond.true34:                                      ; preds = %cond.end39
  %66 = load %AstBuilder*, %AstBuilder** %this.addr
  %67 = getelementptr inbounds %AstBuilder, %AstBuilder* %66, i32 0, i32 28
  %68 = load %AstBuilder*, %AstBuilder** %other.addr
  %69 = getelementptr inbounds %AstBuilder, %AstBuilder* %68, i32 0, i32 28
  %70 = call i1 @"==.357"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %67, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %69)
  br label %cond.end36

cond.false35:                                     ; preds = %cond.end39
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond.res144 = phi i1 [ %70, %cond.true34 ], [ false, %cond.false35 ]
  br i1 %cond.res144, label %cond.true31, label %cond.false32

cond.true37:                                      ; preds = %cond.end42
  %71 = load %AstBuilder*, %AstBuilder** %this.addr
  %72 = getelementptr inbounds %AstBuilder, %AstBuilder* %71, i32 0, i32 27
  %73 = load %AstBuilder*, %AstBuilder** %other.addr
  %74 = getelementptr inbounds %AstBuilder, %AstBuilder* %73, i32 0, i32 27
  %75 = call i1 @"==.356"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %72, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %74)
  br label %cond.end39

cond.false38:                                     ; preds = %cond.end42
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond.res143 = phi i1 [ %75, %cond.true37 ], [ false, %cond.false38 ]
  br i1 %cond.res143, label %cond.true34, label %cond.false35

cond.true40:                                      ; preds = %cond.end45
  %76 = load %AstBuilder*, %AstBuilder** %this.addr
  %77 = getelementptr inbounds %AstBuilder, %AstBuilder* %76, i32 0, i32 26
  %78 = load %AstBuilder*, %AstBuilder** %other.addr
  %79 = getelementptr inbounds %AstBuilder, %AstBuilder* %78, i32 0, i32 26
  %80 = call i1 @"==.355"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %77, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %79)
  br label %cond.end42

cond.false41:                                     ; preds = %cond.end45
  br label %cond.end42

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond.res142 = phi i1 [ %80, %cond.true40 ], [ false, %cond.false41 ]
  br i1 %cond.res142, label %cond.true37, label %cond.false38

cond.true43:                                      ; preds = %cond.end48
  %81 = load %AstBuilder*, %AstBuilder** %this.addr
  %82 = getelementptr inbounds %AstBuilder, %AstBuilder* %81, i32 0, i32 25
  %83 = load %AstBuilder*, %AstBuilder** %other.addr
  %84 = getelementptr inbounds %AstBuilder, %AstBuilder* %83, i32 0, i32 25
  %85 = call i1 @"==.354"(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %82, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %84)
  br label %cond.end45

cond.false44:                                     ; preds = %cond.end48
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond.res141 = phi i1 [ %85, %cond.true43 ], [ false, %cond.false44 ]
  br i1 %cond.res141, label %cond.true40, label %cond.false41

cond.true46:                                      ; preds = %cond.end51
  %86 = load %AstBuilder*, %AstBuilder** %this.addr
  %87 = getelementptr inbounds %AstBuilder, %AstBuilder* %86, i32 0, i32 24
  %88 = load %AstBuilder*, %AstBuilder** %other.addr
  %89 = getelementptr inbounds %AstBuilder, %AstBuilder* %88, i32 0, i32 24
  %90 = call i1 @"==.353"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %87, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %89)
  br label %cond.end48

cond.false47:                                     ; preds = %cond.end51
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond.res140 = phi i1 [ %90, %cond.true46 ], [ false, %cond.false47 ]
  br i1 %cond.res140, label %cond.true43, label %cond.false44

cond.true49:                                      ; preds = %cond.end54
  %91 = load %AstBuilder*, %AstBuilder** %this.addr
  %92 = getelementptr inbounds %AstBuilder, %AstBuilder* %91, i32 0, i32 23
  %93 = load %AstBuilder*, %AstBuilder** %other.addr
  %94 = getelementptr inbounds %AstBuilder, %AstBuilder* %93, i32 0, i32 23
  %95 = call i1 @"==.352"(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %92, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %94)
  br label %cond.end51

cond.false50:                                     ; preds = %cond.end54
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond.res139 = phi i1 [ %95, %cond.true49 ], [ false, %cond.false50 ]
  br i1 %cond.res139, label %cond.true46, label %cond.false47

cond.true52:                                      ; preds = %cond.end57
  %96 = load %AstBuilder*, %AstBuilder** %this.addr
  %97 = getelementptr inbounds %AstBuilder, %AstBuilder* %96, i32 0, i32 22
  %98 = load %AstBuilder*, %AstBuilder** %other.addr
  %99 = getelementptr inbounds %AstBuilder, %AstBuilder* %98, i32 0, i32 22
  %100 = call i1 @"==.341"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %97, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %99)
  br label %cond.end54

cond.false53:                                     ; preds = %cond.end57
  br label %cond.end54

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond.res138 = phi i1 [ %100, %cond.true52 ], [ false, %cond.false53 ]
  br i1 %cond.res138, label %cond.true49, label %cond.false50

cond.true55:                                      ; preds = %cond.end60
  %101 = load %AstBuilder*, %AstBuilder** %this.addr
  %102 = getelementptr inbounds %AstBuilder, %AstBuilder* %101, i32 0, i32 21
  %103 = load %AstBuilder*, %AstBuilder** %other.addr
  %104 = getelementptr inbounds %AstBuilder, %AstBuilder* %103, i32 0, i32 21
  %105 = call i1 @"==.349"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %102, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %104)
  br label %cond.end57

cond.false56:                                     ; preds = %cond.end60
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond.res137 = phi i1 [ %105, %cond.true55 ], [ false, %cond.false56 ]
  br i1 %cond.res137, label %cond.true52, label %cond.false53

cond.true58:                                      ; preds = %cond.end63
  %106 = load %AstBuilder*, %AstBuilder** %this.addr
  %107 = getelementptr inbounds %AstBuilder, %AstBuilder* %106, i32 0, i32 20
  %108 = load %AstBuilder*, %AstBuilder** %other.addr
  %109 = getelementptr inbounds %AstBuilder, %AstBuilder* %108, i32 0, i32 20
  %110 = call i1 @"==.349"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %107, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %109)
  br label %cond.end60

cond.false59:                                     ; preds = %cond.end63
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false59, %cond.true58
  %cond.res136 = phi i1 [ %110, %cond.true58 ], [ false, %cond.false59 ]
  br i1 %cond.res136, label %cond.true55, label %cond.false56

cond.true61:                                      ; preds = %cond.end66
  %111 = load %AstBuilder*, %AstBuilder** %this.addr
  %112 = getelementptr inbounds %AstBuilder, %AstBuilder* %111, i32 0, i32 19
  %113 = load %AstBuilder*, %AstBuilder** %other.addr
  %114 = getelementptr inbounds %AstBuilder, %AstBuilder* %113, i32 0, i32 19
  %115 = call i1 @"==.349"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %112, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %114)
  br label %cond.end63

cond.false62:                                     ; preds = %cond.end66
  br label %cond.end63

cond.end63:                                       ; preds = %cond.false62, %cond.true61
  %cond.res135 = phi i1 [ %115, %cond.true61 ], [ false, %cond.false62 ]
  br i1 %cond.res135, label %cond.true58, label %cond.false59

cond.true64:                                      ; preds = %cond.end69
  %116 = load %AstBuilder*, %AstBuilder** %this.addr
  %117 = getelementptr inbounds %AstBuilder, %AstBuilder* %116, i32 0, i32 18
  %118 = load %AstBuilder*, %AstBuilder** %other.addr
  %119 = getelementptr inbounds %AstBuilder, %AstBuilder* %118, i32 0, i32 18
  %120 = call i1 @"==.351"(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %117, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %119)
  br label %cond.end66

cond.false65:                                     ; preds = %cond.end69
  br label %cond.end66

cond.end66:                                       ; preds = %cond.false65, %cond.true64
  %cond.res134 = phi i1 [ %120, %cond.true64 ], [ false, %cond.false65 ]
  br i1 %cond.res134, label %cond.true61, label %cond.false62

cond.true67:                                      ; preds = %cond.end72
  %121 = load %AstBuilder*, %AstBuilder** %this.addr
  %122 = getelementptr inbounds %AstBuilder, %AstBuilder* %121, i32 0, i32 17
  %123 = load %AstBuilder*, %AstBuilder** %other.addr
  %124 = getelementptr inbounds %AstBuilder, %AstBuilder* %123, i32 0, i32 17
  %125 = call i1 @"==.343"(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %122, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %124)
  br label %cond.end69

cond.false68:                                     ; preds = %cond.end72
  br label %cond.end69

cond.end69:                                       ; preds = %cond.false68, %cond.true67
  %cond.res133 = phi i1 [ %125, %cond.true67 ], [ false, %cond.false68 ]
  br i1 %cond.res133, label %cond.true64, label %cond.false65

cond.true70:                                      ; preds = %cond.end75
  %126 = load %AstBuilder*, %AstBuilder** %this.addr
  %127 = getelementptr inbounds %AstBuilder, %AstBuilder* %126, i32 0, i32 16
  %128 = load %AstBuilder*, %AstBuilder** %other.addr
  %129 = getelementptr inbounds %AstBuilder, %AstBuilder* %128, i32 0, i32 16
  %130 = call i1 @"==.350"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %127, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %129)
  br label %cond.end72

cond.false71:                                     ; preds = %cond.end75
  br label %cond.end72

cond.end72:                                       ; preds = %cond.false71, %cond.true70
  %cond.res132 = phi i1 [ %130, %cond.true70 ], [ false, %cond.false71 ]
  br i1 %cond.res132, label %cond.true67, label %cond.false68

cond.true73:                                      ; preds = %cond.end78
  %131 = load %AstBuilder*, %AstBuilder** %this.addr
  %132 = getelementptr inbounds %AstBuilder, %AstBuilder* %131, i32 0, i32 15
  %133 = load %AstBuilder*, %AstBuilder** %other.addr
  %134 = getelementptr inbounds %AstBuilder, %AstBuilder* %133, i32 0, i32 15
  %135 = call i1 @"==.349"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %132, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %134)
  br label %cond.end75

cond.false74:                                     ; preds = %cond.end78
  br label %cond.end75

cond.end75:                                       ; preds = %cond.false74, %cond.true73
  %cond.res131 = phi i1 [ %135, %cond.true73 ], [ false, %cond.false74 ]
  br i1 %cond.res131, label %cond.true70, label %cond.false71

cond.true76:                                      ; preds = %cond.end81
  %136 = load %AstBuilder*, %AstBuilder** %this.addr
  %137 = getelementptr inbounds %AstBuilder, %AstBuilder* %136, i32 0, i32 14
  %138 = load %AstBuilder*, %AstBuilder** %other.addr
  %139 = getelementptr inbounds %AstBuilder, %AstBuilder* %138, i32 0, i32 14
  %140 = call i1 @"==.348"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %137, %"FunctionPtr2[Node, UntypedPtr, Node]"* %139)
  br label %cond.end78

cond.false77:                                     ; preds = %cond.end81
  br label %cond.end78

cond.end78:                                       ; preds = %cond.false77, %cond.true76
  %cond.res130 = phi i1 [ %140, %cond.true76 ], [ false, %cond.false77 ]
  br i1 %cond.res130, label %cond.true73, label %cond.false74

cond.true79:                                      ; preds = %cond.end84
  %141 = load %AstBuilder*, %AstBuilder** %this.addr
  %142 = getelementptr inbounds %AstBuilder, %AstBuilder* %141, i32 0, i32 13
  %143 = load %AstBuilder*, %AstBuilder** %other.addr
  %144 = getelementptr inbounds %AstBuilder, %AstBuilder* %143, i32 0, i32 13
  %145 = call i1 @"==.347"(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %142, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %144)
  br label %cond.end81

cond.false80:                                     ; preds = %cond.end84
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false80, %cond.true79
  %cond.res129 = phi i1 [ %145, %cond.true79 ], [ false, %cond.false80 ]
  br i1 %cond.res129, label %cond.true76, label %cond.false77

cond.true82:                                      ; preds = %cond.end87
  %146 = load %AstBuilder*, %AstBuilder** %this.addr
  %147 = getelementptr inbounds %AstBuilder, %AstBuilder* %146, i32 0, i32 12
  %148 = load %AstBuilder*, %AstBuilder** %other.addr
  %149 = getelementptr inbounds %AstBuilder, %AstBuilder* %148, i32 0, i32 12
  %150 = call i1 @"==.342"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %147, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %149)
  br label %cond.end84

cond.false83:                                     ; preds = %cond.end87
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false83, %cond.true82
  %cond.res128 = phi i1 [ %150, %cond.true82 ], [ false, %cond.false83 ]
  br i1 %cond.res128, label %cond.true79, label %cond.false80

cond.true85:                                      ; preds = %cond.end90
  %151 = load %AstBuilder*, %AstBuilder** %this.addr
  %152 = getelementptr inbounds %AstBuilder, %AstBuilder* %151, i32 0, i32 11
  %153 = load %AstBuilder*, %AstBuilder** %other.addr
  %154 = getelementptr inbounds %AstBuilder, %AstBuilder* %153, i32 0, i32 11
  %155 = call i1 @"==.342"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %152, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %154)
  br label %cond.end87

cond.false86:                                     ; preds = %cond.end90
  br label %cond.end87

cond.end87:                                       ; preds = %cond.false86, %cond.true85
  %cond.res127 = phi i1 [ %155, %cond.true85 ], [ false, %cond.false86 ]
  br i1 %cond.res127, label %cond.true82, label %cond.false83

cond.true88:                                      ; preds = %cond.end93
  %156 = load %AstBuilder*, %AstBuilder** %this.addr
  %157 = getelementptr inbounds %AstBuilder, %AstBuilder* %156, i32 0, i32 10
  %158 = load %AstBuilder*, %AstBuilder** %other.addr
  %159 = getelementptr inbounds %AstBuilder, %AstBuilder* %158, i32 0, i32 10
  %160 = call i1 @"==.342"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %157, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %159)
  br label %cond.end90

cond.false89:                                     ; preds = %cond.end93
  br label %cond.end90

cond.end90:                                       ; preds = %cond.false89, %cond.true88
  %cond.res126 = phi i1 [ %160, %cond.true88 ], [ false, %cond.false89 ]
  br i1 %cond.res126, label %cond.true85, label %cond.false86

cond.true91:                                      ; preds = %cond.end96
  %161 = load %AstBuilder*, %AstBuilder** %this.addr
  %162 = getelementptr inbounds %AstBuilder, %AstBuilder* %161, i32 0, i32 9
  %163 = load %AstBuilder*, %AstBuilder** %other.addr
  %164 = getelementptr inbounds %AstBuilder, %AstBuilder* %163, i32 0, i32 9
  %165 = call i1 @"==.346"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %162, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %164)
  br label %cond.end93

cond.false92:                                     ; preds = %cond.end96
  br label %cond.end93

cond.end93:                                       ; preds = %cond.false92, %cond.true91
  %cond.res125 = phi i1 [ %165, %cond.true91 ], [ false, %cond.false92 ]
  br i1 %cond.res125, label %cond.true88, label %cond.false89

cond.true94:                                      ; preds = %cond.end99
  %166 = load %AstBuilder*, %AstBuilder** %this.addr
  %167 = getelementptr inbounds %AstBuilder, %AstBuilder* %166, i32 0, i32 8
  %168 = load %AstBuilder*, %AstBuilder** %other.addr
  %169 = getelementptr inbounds %AstBuilder, %AstBuilder* %168, i32 0, i32 8
  %170 = call i1 @"==.342"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %167, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %169)
  br label %cond.end96

cond.false95:                                     ; preds = %cond.end99
  br label %cond.end96

cond.end96:                                       ; preds = %cond.false95, %cond.true94
  %cond.res124 = phi i1 [ %170, %cond.true94 ], [ false, %cond.false95 ]
  br i1 %cond.res124, label %cond.true91, label %cond.false92

cond.true97:                                      ; preds = %cond.end102
  %171 = load %AstBuilder*, %AstBuilder** %this.addr
  %172 = getelementptr inbounds %AstBuilder, %AstBuilder* %171, i32 0, i32 7
  %173 = load %AstBuilder*, %AstBuilder** %other.addr
  %174 = getelementptr inbounds %AstBuilder, %AstBuilder* %173, i32 0, i32 7
  %175 = call i1 @"==.345"(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %172, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %174)
  br label %cond.end99

cond.false98:                                     ; preds = %cond.end102
  br label %cond.end99

cond.end99:                                       ; preds = %cond.false98, %cond.true97
  %cond.res123 = phi i1 [ %175, %cond.true97 ], [ false, %cond.false98 ]
  br i1 %cond.res123, label %cond.true94, label %cond.false95

cond.true100:                                     ; preds = %cond.end105
  %176 = load %AstBuilder*, %AstBuilder** %this.addr
  %177 = getelementptr inbounds %AstBuilder, %AstBuilder* %176, i32 0, i32 6
  %178 = load %AstBuilder*, %AstBuilder** %other.addr
  %179 = getelementptr inbounds %AstBuilder, %AstBuilder* %178, i32 0, i32 6
  %180 = call i1 @"==.344"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %177, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %179)
  br label %cond.end102

cond.false101:                                    ; preds = %cond.end105
  br label %cond.end102

cond.end102:                                      ; preds = %cond.false101, %cond.true100
  %cond.res122 = phi i1 [ %180, %cond.true100 ], [ false, %cond.false101 ]
  br i1 %cond.res122, label %cond.true97, label %cond.false98

cond.true103:                                     ; preds = %cond.end108
  %181 = load %AstBuilder*, %AstBuilder** %this.addr
  %182 = getelementptr inbounds %AstBuilder, %AstBuilder* %181, i32 0, i32 5
  %183 = load %AstBuilder*, %AstBuilder** %other.addr
  %184 = getelementptr inbounds %AstBuilder, %AstBuilder* %183, i32 0, i32 5
  %185 = call i1 @"==.343"(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %182, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %184)
  br label %cond.end105

cond.false104:                                    ; preds = %cond.end108
  br label %cond.end105

cond.end105:                                      ; preds = %cond.false104, %cond.true103
  %cond.res121 = phi i1 [ %185, %cond.true103 ], [ false, %cond.false104 ]
  br i1 %cond.res121, label %cond.true100, label %cond.false101

cond.true106:                                     ; preds = %cond.end111
  %186 = load %AstBuilder*, %AstBuilder** %this.addr
  %187 = getelementptr inbounds %AstBuilder, %AstBuilder* %186, i32 0, i32 4
  %188 = load %AstBuilder*, %AstBuilder** %other.addr
  %189 = getelementptr inbounds %AstBuilder, %AstBuilder* %188, i32 0, i32 4
  %190 = call i1 @"==.342"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %187, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %189)
  br label %cond.end108

cond.false107:                                    ; preds = %cond.end111
  br label %cond.end108

cond.end108:                                      ; preds = %cond.false107, %cond.true106
  %cond.res120 = phi i1 [ %190, %cond.true106 ], [ false, %cond.false107 ]
  br i1 %cond.res120, label %cond.true103, label %cond.false104

cond.true109:                                     ; preds = %cond.end114
  %191 = load %AstBuilder*, %AstBuilder** %this.addr
  %192 = getelementptr inbounds %AstBuilder, %AstBuilder* %191, i32 0, i32 3
  %193 = load %AstBuilder*, %AstBuilder** %other.addr
  %194 = getelementptr inbounds %AstBuilder, %AstBuilder* %193, i32 0, i32 3
  %195 = call i1 @"==.341"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %192, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %194)
  br label %cond.end111

cond.false110:                                    ; preds = %cond.end114
  br label %cond.end111

cond.end111:                                      ; preds = %cond.false110, %cond.true109
  %cond.res119 = phi i1 [ %195, %cond.true109 ], [ false, %cond.false110 ]
  br i1 %cond.res119, label %cond.true106, label %cond.false107

cond.true112:                                     ; preds = %cond.end117
  %196 = load %AstBuilder*, %AstBuilder** %this.addr
  %197 = getelementptr inbounds %AstBuilder, %AstBuilder* %196, i32 0, i32 2
  %198 = load %AstBuilder*, %AstBuilder** %other.addr
  %199 = getelementptr inbounds %AstBuilder, %AstBuilder* %198, i32 0, i32 2
  %200 = call i1 @"==.341"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %197, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %199)
  br label %cond.end114

cond.false113:                                    ; preds = %cond.end117
  br label %cond.end114

cond.end114:                                      ; preds = %cond.false113, %cond.true112
  %cond.res118 = phi i1 [ %200, %cond.true112 ], [ false, %cond.false113 ]
  br i1 %cond.res118, label %cond.true109, label %cond.false110

cond.true115:                                     ; preds = %code
  %201 = load %AstBuilder*, %AstBuilder** %this.addr
  %202 = getelementptr inbounds %AstBuilder, %AstBuilder* %201, i32 0, i32 1
  %203 = load %AstBuilder*, %AstBuilder** %other.addr
  %204 = getelementptr inbounds %AstBuilder, %AstBuilder* %203, i32 0, i32 1
  %205 = call i1 @"==.340"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %202, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %204)
  br label %cond.end117

cond.false116:                                    ; preds = %code
  br label %cond.end117

cond.end117:                                      ; preds = %cond.false116, %cond.true115
  %cond.res = phi i1 [ %205, %cond.true115 ], [ false, %cond.false116 ]
  br i1 %cond.res, label %cond.true112, label %cond.false113
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.340"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.341"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.342"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.343"(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.344"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.345"(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.346"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.347"(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.348"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %other, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.349"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %other, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.350"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.351"(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]", %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.352"(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.353"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %this, %"FunctionPtr2[Node, UntypedPtr, Location const]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Location const]"*
  store %"FunctionPtr2[Node, UntypedPtr, Location const]"* %this, %"FunctionPtr2[Node, UntypedPtr, Location const]"** %this.addr
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Location const]"*
  store %"FunctionPtr2[Node, UntypedPtr, Location const]"* %other, %"FunctionPtr2[Node, UntypedPtr, Location const]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, Location const]"*, %"FunctionPtr2[Node, UntypedPtr, Location const]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr2[Node, UntypedPtr, Location const]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr2[Node, UntypedPtr, Location const]"*, %"FunctionPtr2[Node, UntypedPtr, Location const]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Location const]", %"FunctionPtr2[Node, UntypedPtr, Location const]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.354"(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]", %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]", %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.355"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.356"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.357"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]", %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.358"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]", %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.359"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.360"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Float]", %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.361"(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Char]", %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Char]", %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.362"(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Node]", %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Location const, Node]", %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.363"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"** %other.addr
  %4 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.364(%ParserContext* %this, %CharSource* %chars, %Location %loc, %AstBuilder* %astBuilder, %ErrorReporter* %reporter) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 0
  %2 = load %Location, %Location* %loc.addr
  call void @ctor.365(%SparrowScanner* %1, %CharSource* %chars, %ErrorReporter* %reporter, %Location %2, i1 false)
  %3 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 1
  %4 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 0
  call void @ctor.378(%"SparrowLayoutDecoder[SparrowScanner]"* %3, %SparrowScanner* %4, %ErrorReporter* %reporter)
  %5 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 2
  %6 = getelementptr inbounds %ParserContext, %ParserContext* %this, i32 0, i32 1
  call void @ctor.492(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, %"SparrowLayoutDecoder[SparrowScanner]"* %6, %AstBuilder* %astBuilder, %ErrorReporter* %reporter)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.365(%SparrowScanner* %this, %CharSource* %chars, %ErrorReporter* %errorReporter, %Location %iniLocation, i1 %emitWitespace) #4 {
  %iniLocation.addr = alloca %Location
  store %Location %iniLocation, %Location* %iniLocation.addr
  %emitWitespace.addr = alloca i1
  store i1 %emitWitespace, i1* %emitWitespace.addr
  %tmp.this = alloca %"RangeWithLookahead[BufferedCharSourceRange]"
  %"$tmpC" = alloca %BufferedCharSourceRange
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  store i1 false, i1* %1
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 0
  call void @ctor.159(%Location* %2, %Location* %iniLocation.addr)
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 1
  call void @ctor.366(%BufferedCharSource* %3, %CharSource* %chars)
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 1
  call void @all(%BufferedCharSourceRange* %"$tmpC", %BufferedCharSource* %5)
  call void @ctor.369(%"RangeWithLookahead[BufferedCharSourceRange]"* %tmp.this, %BufferedCharSourceRange* %"$tmpC")
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 0
  call void @ctor.368(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4, %"RangeWithLookahead[BufferedCharSourceRange]"* %tmp.this, %Location* %6)
  call void @dtor.257(%"RangeWithLookahead[BufferedCharSourceRange]"* %tmp.this)
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  call void @ctor.120(%Token* %7)
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 4
  store i1 false, i1* %8
  %9 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 5
  call void @ctor.179(%ErrorReporter* %9, %ErrorReporter* %errorReporter)
  %10 = load i1, i1* %emitWitespace.addr
  %11 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  store i1 %10, i1* %11
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.366(%BufferedCharSource* %this, %CharSource* %src) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 0
  call void @ctor.163(%CharSource* %1, %CharSource* %src)
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 1
  call void @ctor.114(%String* %2)
  %3 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 1
  call void @reserve(%String* %3, i32 4096)
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 2
  store i32 0, i32* %4
  call void @_ensureBufferHasData(%BufferedCharSource* %this)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reserve(%String* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %curCapacity = alloca i32
  %tmp.this = alloca i32
  %tmp.this7 = alloca double
  %tmp.this8 = alloca i32
  %tmp.this9 = alloca double
  %curSize = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %"$tmpForRef10" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @capacity(%String* %this)
  store i32 %1, i32* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load i32, i32* %n.addr
  %3 = load i32, i32* %curCapacity
  %4 = call i1 @_Int32_opLE(i32 %2, i32 %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %5 = load i32, i32* %n.addr
  %6 = call i1 @_Int32_opLT(i32 %5, i32 16)
  br i1 %6, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 16, i32* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block4

if_block4:                                        ; preds = %if_end3
  %7 = load i32, i32* %n.addr
  %8 = load i32, i32* %curCapacity
  %9 = sitofp i32 %8 to double
  store double %9, double* %tmp.this7
  %10 = load double, double* %tmp.this7
  %11 = call double @_Float64_opMul(double 1.500000e+00, double %10)
  %12 = fptosi double %11 to i32
  store i32 %12, i32* %tmp.this
  %13 = load i32, i32* %tmp.this
  %14 = call i1 @_Int32_opLT(i32 %7, i32 %13)
  br i1 %14, label %if_then5, label %if_end6

if_then5:                                         ; preds = %if_block4
  %15 = load i32, i32* %curCapacity
  %16 = sitofp i32 %15 to double
  store double %16, double* %tmp.this9
  %17 = load double, double* %tmp.this9
  %18 = call double @_Float64_opMul(double 1.500000e+00, double %17)
  %19 = fptosi double %18 to i32
  store i32 %19, i32* %tmp.this8
  %20 = load i32, i32* %tmp.this8
  store i32 %20, i32* %n.addr
  br label %if_end6

if_end6:                                          ; preds = %if_then5, %if_block4
  %21 = call i32 @size.166(%String* %this)
  store i32 %21, i32* %curSize
  %22 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %23 = load i32, i32* %n.addr
  call void @reallocPtr(%"RawPtr[Char]"* %22, i32 %23)
  %24 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %25 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %26 = load i32, i32* %curSize
  %27 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %25, i32 %26)
  store %"RawPtr[Char]" %27, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %24, %"RawPtr[Char]"* %"$tmpForRef")
  %28 = getelementptr inbounds %String, %String* %this, i32 0, i32 2
  %29 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %30 = load i32, i32* %n.addr
  %31 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %29, i32 %30)
  store %"RawPtr[Char]" %31, %"RawPtr[Char]"* %"$tmpForRef10"
  call void @"=.176"(%"RawPtr[Char]"* %28, %"RawPtr[Char]"* %"$tmpForRef10")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32 @capacity(%String* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 2
  %2 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = call i32 @diff(%"RawPtr[Char]"* %1, %"RawPtr[Char]" %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal void @reallocPtr(%"RawPtr[Char]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  %2 = load i8*, i8** %1
  call void @ctor.57(%UntypedPtr* %tmp.this, i8* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %4 = load i32, i32* %n.addr
  %5 = call i32 @_Int32_opMul(i32 %4, i32 1)
  %6 = call %UntypedPtr @realloc(%UntypedPtr %3, i32 %5)
  %7 = call i8* @asRefOf.52(%UntypedPtr %6)
  %8 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this, i32 0, i32 0
  store i8* %7, i8** %8
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @_ensureBufferHasData(%BufferedCharSource* %this) #4 {
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 2
  %2 = load i32, i32* %1
  %3 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 1
  %4 = call i32 @size.166(%String* %3)
  %5 = call i1 @_Int32_opGE(i32 %2, i32 %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %6 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 1
  call void @clear(%String* %6)
  %7 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 2
  store i32 0, i32* %7
  %8 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 0
  %9 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %this, i32 0, i32 1
  call void @readChars(%CharSource* %8, %String* %9, i32 4096)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @clear(%String* %this) #4 {
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %1)
  %3 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %4 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %3)
  call void @ctor.50(%StringRef* %tmp.this, %UntypedPtr %2, %UntypedPtr %4)
  %5 = load %StringRef, %StringRef* %tmp.this
  call void @remove(%String* %this, %StringRef %5)
  %6 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @remove(%String* %this, %StringRef %range) #4 {
  %range.addr = alloca %StringRef
  store %StringRef %range, %StringRef* %range.addr
  %rSize = alloca i32
  %rBegin = alloca %"RawPtr[Char]"
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %rEnd = alloca %"RawPtr[Char]"
  %"$tmpForRef1" = alloca %"RawPtr[Char]"
  %"$tmpForRef2" = alloca %"RawPtr[Char]"
  %"$tmpForRef3" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %range.addr
  %2 = call i32 @size(%StringRef %1)
  store i32 %2, i32* %rSize
  %3 = load %StringRef, %StringRef* %range.addr
  %4 = call %"RawPtr[Char]" @_frontPtr(%StringRef %3)
  store %"RawPtr[Char]" %4, %"RawPtr[Char]"* %"$tmpForRef"
  call void @ctor.168(%"RawPtr[Char]"* %rBegin, %"RawPtr[Char]"* %"$tmpForRef")
  %5 = load i32, i32* %rSize
  %6 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %rBegin, i32 %5)
  store %"RawPtr[Char]" %6, %"RawPtr[Char]"* %"$tmpForRef1"
  call void @ctor.168(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %"$tmpForRef1")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %7 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %8 = call i1 @"==.246"(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %7)
  %9 = xor i1 true, %8
  br i1 %9, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %10 = call i8* @value(%"RawPtr[Char]"* %rBegin)
  %11 = load i8, i8* %10
  %12 = call i8* @value(%"RawPtr[Char]"* %rEnd)
  %13 = load i8, i8* %12
  %14 = call i8* @value(%"RawPtr[Char]"* %rBegin)
  store i8 %13, i8* %14
  %15 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %rBegin)
  store %"RawPtr[Char]" %15, %"RawPtr[Char]"* %"$tmpForRef2"
  call void @"=.176"(%"RawPtr[Char]"* %rBegin, %"RawPtr[Char]"* %"$tmpForRef2")
  %16 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %rEnd)
  store %"RawPtr[Char]" %16, %"RawPtr[Char]"* %"$tmpForRef3"
  call void @"=.176"(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %"$tmpForRef3")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %17 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  call void @"=.176"(%"RawPtr[Char]"* %17, %"RawPtr[Char]"* %rBegin)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Char]" @_frontPtr(%StringRef %s) #4 {
  %s.addr = alloca %StringRef
  store %StringRef %s, %StringRef* %s.addr
  %tmp.this = alloca %"RawPtr[Char]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %s.addr, i32 0, i32 0
  %2 = load %UntypedPtr, %UntypedPtr* %1
  call void @ctor.45(%UntypedPtr* %tmp.this1, %UntypedPtr %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  call void @ctor.170(%"RawPtr[Char]"* %tmp.this, %UntypedPtr %3)
  %4 = load %"RawPtr[Char]", %"RawPtr[Char]"* %tmp.this
  ret %"RawPtr[Char]" %4
}

; Function Attrs: inlinehint nounwind
define internal void @readChars(%CharSource* %obj, %String* %dest, i32 %numChars) #4 {
  %numChars.addr = alloca i32
  store i32 %numChars, i32* %numChars.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CharSource, %CharSource* %obj, i32 0, i32 1
  %2 = getelementptr inbounds %CharSource, %CharSource* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load i32, i32* %numChars.addr
  call void @"().367"(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %1, %UntypedPtr %3, %String* %dest, i32 %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"().367"(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this, %UntypedPtr %p1, %String* %p2, i32 %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca i32
  store i32 %p3, i32* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load i32, i32* %p3.addr
  %3 = bitcast %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %this to void (%UntypedPtr, %String*, i32)**
  %4 = load void (%UntypedPtr, %String*, i32)*, void (%UntypedPtr, %String*, i32)** %3
  call void %4(%UntypedPtr %1, %String* %p2, i32 %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.368(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"* %fsource, %Location* %flocation) #3 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %flocation.addr = alloca %Location*
  store %Location* %flocation, %Location** %flocation.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  call void @ctor.172(%"RangeWithLookahead[BufferedCharSourceRange]"* %2, %"RangeWithLookahead[BufferedCharSourceRange]"* %fsource)
  %3 = load %Location*, %Location** %flocation.addr
  %4 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %5 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4, i32 0, i32 1
  store %Location* %3, %Location** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.369(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, %BufferedCharSourceRange* %src) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  call void @ctor.118(%BufferedCharSourceRange* %1)
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  call void @"=.271"(%BufferedCharSourceRange* %2, %BufferedCharSourceRange* %src)
  %3 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  call void @ctor.119(%"Vector[Char]"* %3)
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  call void @reserve.370(%"Vector[Char]"* %4, i32 10)
  br label %if_block

if_block:                                         ; preds = %code
  %5 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %6 = call i1 @"pre_!!"(%BufferedCharSourceRange* %5)
  br i1 %6, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %7 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %8 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %9 = call i8 @"post_++.374"(%BufferedCharSourceRange* %8)
  call void @"+="(%"Vector[Char]"* %7, i8 %9)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reserve.370(%"Vector[Char]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %curCapacity = alloca i32
  %tmp.this = alloca i32
  %tmp.this7 = alloca double
  %tmp.this8 = alloca i32
  %tmp.this9 = alloca double
  %curSize = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %"$tmpForRef10" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @capacity.371(%"Vector[Char]"* %this)
  store i32 %1, i32* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load i32, i32* %n.addr
  %3 = load i32, i32* %curCapacity
  %4 = call i1 @_Int32_opLE(i32 %2, i32 %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %5 = load i32, i32* %n.addr
  %6 = call i1 @_Int32_opLT(i32 %5, i32 8)
  br i1 %6, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 8, i32* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block4

if_block4:                                        ; preds = %if_end3
  %7 = load i32, i32* %n.addr
  %8 = load i32, i32* %curCapacity
  %9 = sitofp i32 %8 to double
  store double %9, double* %tmp.this7
  %10 = load double, double* %tmp.this7
  %11 = call double @_Float64_opMul(double 2.000000e+00, double %10)
  %12 = fptosi double %11 to i32
  store i32 %12, i32* %tmp.this
  %13 = load i32, i32* %tmp.this
  %14 = call i1 @_Int32_opLT(i32 %7, i32 %13)
  br i1 %14, label %if_then5, label %if_end6

if_then5:                                         ; preds = %if_block4
  %15 = load i32, i32* %curCapacity
  %16 = sitofp i32 %15 to double
  store double %16, double* %tmp.this9
  %17 = load double, double* %tmp.this9
  %18 = call double @_Float64_opMul(double 2.000000e+00, double %17)
  %19 = fptosi double %18 to i32
  store i32 %19, i32* %tmp.this8
  %20 = load i32, i32* %tmp.this8
  store i32 %20, i32* %n.addr
  br label %if_end6

if_end6:                                          ; preds = %if_then5, %if_block4
  %21 = call i32 @size.175(%"Vector[Char]"* %this)
  store i32 %21, i32* %curSize
  %22 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %23 = load i32, i32* %n.addr
  call void @reallocPtr(%"RawPtr[Char]"* %22, i32 %23)
  %24 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %25 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %26 = load i32, i32* %curSize
  %27 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %25, i32 %26)
  store %"RawPtr[Char]" %27, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %24, %"RawPtr[Char]"* %"$tmpForRef")
  %28 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  %29 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %30 = load i32, i32* %n.addr
  %31 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %29, i32 %30)
  store %"RawPtr[Char]" %31, %"RawPtr[Char]"* %"$tmpForRef10"
  call void @"=.176"(%"RawPtr[Char]"* %28, %"RawPtr[Char]"* %"$tmpForRef10")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32 @capacity.371(%"Vector[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = call i32 @diff(%"RawPtr[Char]"* %1, %"RawPtr[Char]" %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!!"(%BufferedCharSourceRange* %r) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i1 @isEmpty.372(%BufferedCharSourceRange* %r)
  %2 = xor i1 true, %1
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.372(%BufferedCharSourceRange* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %this, i32 0, i32 0
  %2 = load %BufferedCharSource*, %BufferedCharSource** %1
  %3 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %2, i32 0, i32 1
  %4 = call i1 @isEmpty.373(%String* %3)
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.373(%String* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %3 = call i1 @"==.246"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %2)
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal void @"+="(%"Vector[Char]"* %this, i8 %value) #4 {
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %value.addr
  call void @pushBack(%"Vector[Char]"* %this, i8 %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack(%"Vector[Char]"* %this, i8 %value) #4 {
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  %t = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  %3 = call i1 @"==.246"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = call i32 @capacity.371(%"Vector[Char]"* %this)
  %5 = call i32 @_Int32_opMul(i32 2, i32 %4)
  store i32 %5, i32* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %6 = load i8, i8* %value.addr
  %7 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %8 = call i8* @value(%"RawPtr[Char]"* %7)
  store i8 %6, i8* %8
  %9 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %10 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %11 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %10)
  store %"RawPtr[Char]" %11, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %9, %"RawPtr[Char]"* %"$tmpForRef")
  ret void

if_block1:                                        ; preds = %if_then
  %12 = load i32, i32* %t
  %13 = call i1 @_Int32_opLT(i32 %12, i32 2)
  br i1 %13, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 2, i32* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %14 = load i32, i32* %t
  call void @reserve.370(%"Vector[Char]"* %this, i32 %14)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i8 @"post_++.374"(%BufferedCharSourceRange* %r) #4 {
  %res = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = call i8 @front.375(%BufferedCharSourceRange* %r)
  store i8 %1, i8* %res
  call void @popFront.376(%BufferedCharSourceRange* %r)
  %2 = load i8, i8* %res
  ret i8 %2
}

; Function Attrs: inlinehint nounwind
define internal i8 @front.375(%BufferedCharSourceRange* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %this, i32 0, i32 0
  %2 = load %BufferedCharSource*, %BufferedCharSource** %1
  %3 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %2, i32 0, i32 1
  %4 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %this, i32 0, i32 0
  %5 = load %BufferedCharSource*, %BufferedCharSource** %4
  %6 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %5, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call i8* @"().321"(%String* %3, i32 %7)
  %9 = load i8, i8* %8
  ret i8 %9
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.376(%BufferedCharSourceRange* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %this, i32 0, i32 0
  %2 = load %BufferedCharSource*, %BufferedCharSource** %1
  %3 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %2, i32 0, i32 2
  %4 = call i32 @"post_++.33"(i32* %3)
  %5 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %this, i32 0, i32 0
  %6 = load %BufferedCharSource*, %BufferedCharSource** %5
  call void @_ensureBufferHasData(%BufferedCharSource* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @all(%BufferedCharSourceRange* sret %_result, %BufferedCharSource* %this) #4 {
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  call void @ctor.377(%BufferedCharSourceRange* %_result, %BufferedCharSource* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.377(%BufferedCharSourceRange* %this, %BufferedCharSource* %f_data) #3 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  %f_data.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %f_data, %BufferedCharSource** %f_data.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %f_data.addr
  %2 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %3 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %2, i32 0, i32 0
  store %BufferedCharSource* %1, %BufferedCharSource** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.378(%"SparrowLayoutDecoder[SparrowScanner]"* %this, %SparrowScanner* %tokens, %ErrorReporter* %errorReporter) #4 {
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %Token
  %tmp.this1 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  call void @ctor.128(%"Vector[Int]"* %1)
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  call void @ctor.119(%"Vector[Char]"* %2)
  %3 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  call void @ctor.121(%TokenType* %3)
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  store i32 0, i32* %4
  %5 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @ctor.379(%"RangeWithLookahead[SparrowScanner]"* %5, %SparrowScanner* %tokens)
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 1
  call void @ctor.179(%ErrorReporter* %6, %ErrorReporter* %errorReporter)
  %7 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  call void @"+=.463"(%"Vector[Int]"* %7, i32 1)
  %8 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  call void @ctor.393(%TokenType* %tmp.this, i32 32)
  call void @"=.275"(%TokenType* %8, %TokenType* %tmp.this)
  %9 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  store i32 0, i32* %9
  br label %if_block

if_block:                                         ; preds = %code
  %10 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  %11 = call i1 @isEmpty.468(%"RangeWithLookahead[SparrowScanner]"* %10)
  %12 = xor i1 true, %11
  br i1 %12, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  call void @popFront.472(%"SparrowLayoutDecoder[SparrowScanner]"* %this)
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  br i1 %12, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true:                                        ; preds = %if_block
  %13 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @front.470(%Token* %"$tmpC", %"RangeWithLookahead[SparrowScanner]"* %13)
  %14 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this1, i32 1)
  %15 = call i1 @"==.328"(%TokenType* %14, %TokenType* %tmp.this1)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %15, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end

cond_destruct_alt1:                               ; preds = %if_end
  call void @dtor.238(%Token* %"$tmpC")
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.379(%"RangeWithLookahead[SparrowScanner]"* %this, %SparrowScanner* %src) #4 {
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  call void @ctor.107(%SparrowScanner* %1)
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  call void @"=.260"(%SparrowScanner* %2, %SparrowScanner* %src)
  %3 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  call void @ctor.126(%"Vector[Token]"* %3)
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  call void @reserve.380(%"Vector[Token]"* %4, i32 10)
  br label %if_block

if_block:                                         ; preds = %code
  %5 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  %6 = call i1 @"pre_!!.383"(%SparrowScanner* %5)
  br i1 %6, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %7 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  call void @"post_++.387"(%Token* %"$tmpC", %SparrowScanner* %8)
  call void @"+=.385"(%"Vector[Token]"* %7, %Token* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC")
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reserve.380(%"Vector[Token]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %curCapacity = alloca i32
  %tmp.this = alloca i32
  %tmp.this7 = alloca double
  %tmp.this8 = alloca i32
  %tmp.this9 = alloca double
  %curSize = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  %"$tmpForRef10" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @capacity.381(%"Vector[Token]"* %this)
  store i32 %1, i32* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load i32, i32* %n.addr
  %3 = load i32, i32* %curCapacity
  %4 = call i1 @_Int32_opLE(i32 %2, i32 %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %5 = load i32, i32* %n.addr
  %6 = call i1 @_Int32_opLT(i32 %5, i32 8)
  br i1 %6, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 8, i32* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block4

if_block4:                                        ; preds = %if_end3
  %7 = load i32, i32* %n.addr
  %8 = load i32, i32* %curCapacity
  %9 = sitofp i32 %8 to double
  store double %9, double* %tmp.this7
  %10 = load double, double* %tmp.this7
  %11 = call double @_Float64_opMul(double 2.000000e+00, double %10)
  %12 = fptosi double %11 to i32
  store i32 %12, i32* %tmp.this
  %13 = load i32, i32* %tmp.this
  %14 = call i1 @_Int32_opLT(i32 %7, i32 %13)
  br i1 %14, label %if_then5, label %if_end6

if_then5:                                         ; preds = %if_block4
  %15 = load i32, i32* %curCapacity
  %16 = sitofp i32 %15 to double
  store double %16, double* %tmp.this9
  %17 = load double, double* %tmp.this9
  %18 = call double @_Float64_opMul(double 2.000000e+00, double %17)
  %19 = fptosi double %18 to i32
  store i32 %19, i32* %tmp.this8
  %20 = load i32, i32* %tmp.this8
  store i32 %20, i32* %n.addr
  br label %if_end6

if_end6:                                          ; preds = %if_then5, %if_block4
  %21 = call i32 @size.184(%"Vector[Token]"* %this)
  store i32 %21, i32* %curSize
  %22 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %23 = load i32, i32* %n.addr
  call void @reallocPtr.382(%"RawPtr[Token]"* %22, i32 %23)
  %24 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %25 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %26 = load i32, i32* %curSize
  %27 = call %"RawPtr[Token]" @advance.190(%"RawPtr[Token]"* %25, i32 %26)
  store %"RawPtr[Token]" %27, %"RawPtr[Token]"* %"$tmpForRef"
  call void @"=.187"(%"RawPtr[Token]"* %24, %"RawPtr[Token]"* %"$tmpForRef")
  %28 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  %29 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %30 = load i32, i32* %n.addr
  %31 = call %"RawPtr[Token]" @advance.190(%"RawPtr[Token]"* %29, i32 %30)
  store %"RawPtr[Token]" %31, %"RawPtr[Token]"* %"$tmpForRef10"
  call void @"=.187"(%"RawPtr[Token]"* %28, %"RawPtr[Token]"* %"$tmpForRef10")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32 @capacity.381(%"Vector[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %2
  %4 = call i32 @diff.185(%"RawPtr[Token]"* %1, %"RawPtr[Token]" %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal void @reallocPtr.382(%"RawPtr[Token]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  %2 = load %Token*, %Token** %1
  call void @ctor.186(%UntypedPtr* %tmp.this, %Token* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %4 = load i32, i32* %n.addr
  %5 = call i32 @_Int32_opMul(i32 %4, i32 72)
  %6 = call %UntypedPtr @realloc(%UntypedPtr %3, i32 %5)
  %7 = call %Token* @asRefOf.192(%UntypedPtr %6)
  %8 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this, i32 0, i32 0
  store %Token* %7, %Token** %8
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!!.383"(%SparrowScanner* %r) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i1 @isEmpty.384(%SparrowScanner* %r)
  %2 = xor i1 true, %1
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.384(%SparrowScanner* %this) #4 {
  br label %code

code:                                             ; preds = %0
  ret i1 false
}

; Function Attrs: inlinehint nounwind
define internal void @"+=.385"(%"Vector[Token]"* %this, %Token* %value) #4 {
  br label %code

code:                                             ; preds = %0
  call void @pushBack.386(%"Vector[Token]"* %this, %Token* %value)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack.386(%"Vector[Token]"* %this, %Token* %value) #4 {
  %t = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  %3 = call i1 @"==.194"(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = call i32 @capacity.381(%"Vector[Token]"* %this)
  %5 = call i32 @_Int32_opMul(i32 2, i32 %4)
  store i32 %5, i32* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %7 = call %Token* @value.195(%"RawPtr[Token]"* %6)
  call void @ctor.177(%Token* %7, %Token* %value)
  %8 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %9 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %10 = call %"RawPtr[Token]" @advance.196(%"RawPtr[Token]"* %9)
  store %"RawPtr[Token]" %10, %"RawPtr[Token]"* %"$tmpForRef"
  call void @"=.187"(%"RawPtr[Token]"* %8, %"RawPtr[Token]"* %"$tmpForRef")
  ret void

if_block1:                                        ; preds = %if_then
  %11 = load i32, i32* %t
  %12 = call i1 @_Int32_opLT(i32 %11, i32 2)
  br i1 %12, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 2, i32* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %13 = load i32, i32* %t
  call void @reserve.380(%"Vector[Token]"* %this, i32 %13)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @"post_++.387"(%Token* sret %_result, %SparrowScanner* %r) #4 {
  %res = alloca %Token
  br label %code

code:                                             ; preds = %0
  call void @front.388(%Token* %res, %SparrowScanner* %r)
  call void @popFront.389(%SparrowScanner* %r)
  call void @ctor.177(%Token* %_result, %Token* %res)
  call void @dtor.238(%Token* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.238(%Token* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @front.388(%Token* sret %_result, %SparrowScanner* %this) #4 {
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 4
  %2 = load i1, i1* %1
  %3 = xor i1 true, %2
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 4
  store i1 true, i1* %4
  call void @popFront.389(%SparrowScanner* %this)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  call void @ctor.177(%Token* %_result, %Token* %5)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.389(%SparrowScanner* %this) #4 {
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = call i1 @isEmpty.390(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  br i1 %2, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %4 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3, i32 0, i32 1
  %5 = load %Location*, %Location** %4
  call void @stepOver(%Location* %5)
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this, i32 0)
  call void @"=.275"(%TokenType* %7, %TokenType* %tmp.this)
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %9 = getelementptr inbounds %Token, %Token* %8, i32 0, i32 2
  call void @clear(%String* %9)
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %11 = getelementptr inbounds %Token, %Token* %10, i32 0, i32 0
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %13 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %12, i32 0, i32 1
  %14 = load %Location*, %Location** %13
  call void @"=.261"(%Location* %11, %Location* %14)
  br label %if_end

if_else:                                          ; preds = %if_block
  %15 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %16 = getelementptr inbounds %Token, %Token* %15, i32 0, i32 1
  call void @nextToken(%TokenType* %"$tmpC", %SparrowScanner* %this)
  call void @"=.275"(%TokenType* %16, %TokenType* %"$tmpC")
  %17 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %18 = getelementptr inbounds %Token, %Token* %17, i32 0, i32 0
  %19 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %20 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %19, i32 0, i32 1
  %21 = load %Location*, %Location** %20
  call void @"=.261"(%Location* %18, %Location* %21)
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.390(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 0
  %2 = call i1 @isEmpty.391(%"RangeWithLookahead[BufferedCharSourceRange]"* %1)
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.391(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %2 = call i1 @isEmpty.392(%"Vector[Char]"* %1)
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.392(%"Vector[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %3 = call i1 @"==.246"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %2)
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal void @stepOver(%Location* %l) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 1
  %2 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  call void @"=.263"(%LineCol* %1, %LineCol* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.393(%TokenType* %this, i32 %fdata) #3 {
  %this.addr = alloca %TokenType*
  store %TokenType* %this, %TokenType** %this.addr
  %fdata.addr = alloca i32
  store i32 %fdata, i32* %fdata.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %fdata.addr
  %2 = load %TokenType*, %TokenType** %this.addr
  %3 = getelementptr inbounds %TokenType, %TokenType* %2, i32 0, i32 0
  store i32 %1, i32* %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.394(%TokenType* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: noinline nounwind
define void @nextToken(%TokenType* sret %_result, %SparrowScanner* %this) #5 {
  %loc = alloca %Location*
  %ch = alloca i8
  %ch2 = alloca i8
  %tmp.this = alloca %"$lambdaEnclosureData"
  %ch14 = alloca i8
  %ch215 = alloca i8
  %tmp.this19 = alloca %"$lambdaEnclosureData.0"
  %"$tmpC" = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %tmp.this28 = alloca %"$lambdaEnclosureData.1"
  %tmp.this45 = alloca %"$lambdaEnclosureData.2"
  %c1 = alloca i8
  %c2 = alloca i8
  %tmp.this73 = alloca %String
  %tmp.StringRef74 = alloca %StringRef
  %"$tmpC196" = alloca %String
  %"$tmpForRef197" = alloca %StringRef
  %tmp.StringRef198 = alloca %StringRef
  %"$tmpForRef199" = alloca %StringRef
  %tmp.StringRef200 = alloca %StringRef
  %tmp.this201 = alloca i32
  %"$tmpForRef202" = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 1
  %3 = load %Location*, %Location** %2
  store %Location* %3, %Location** %loc
  br label %if_block

if_block:                                         ; preds = %code
  %4 = load %Location*, %Location** %loc
  %5 = getelementptr inbounds %Location, %Location* %4, i32 0, i32 1
  %6 = getelementptr inbounds %LineCol, %LineCol* %5, i32 0, i32 0
  %7 = load i32, i32* %6
  %8 = call i1 @_Int32_opEQ(i32 %7, i32 1)
  br i1 %8, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %9 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %10 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %9)
  store i8 %10, i8* %ch
  %11 = call i8 @peekChar(%SparrowScanner* %this)
  store i8 %11, i8* %ch2
  br label %if_block1

if_end:                                           ; preds = %if_end3, %cond.end
  br label %while_block

cond.true:                                        ; preds = %if_block
  %12 = load %Location*, %Location** %loc
  %13 = getelementptr inbounds %Location, %Location* %12, i32 0, i32 1
  %14 = getelementptr inbounds %LineCol, %LineCol* %13, i32 0, i32 1
  %15 = load i32, i32* %14
  %16 = call i1 @_Int32_opEQ(i32 %15, i32 1)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %16, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end

if_block1:                                        ; preds = %if_then
  %17 = load i8, i8* %ch
  %18 = icmp eq i8 %17, 35
  br i1 %18, label %cond.true4, label %cond.false5

if_then2:                                         ; preds = %cond.end6
  %19 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %19)
  %20 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advanceIf(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %20, %"$lambdaEnclosureData"* %tmp.this)
  br label %if_block8

if_end3:                                          ; preds = %if_end10, %cond.end6
  br label %if_end

cond.true4:                                       ; preds = %if_block1
  %21 = load i8, i8* %ch2
  %22 = icmp eq i8 %21, 33
  br label %cond.end6

cond.false5:                                      ; preds = %if_block1
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res7 = phi i1 [ %22, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res7, label %if_then2, label %if_end3

if_block8:                                        ; preds = %if_then2
  %23 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %24 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %23)
  br i1 %24, label %if_then9, label %if_end10

if_then9:                                         ; preds = %if_block8
  %25 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %25)
  br label %if_end10

if_end10:                                         ; preds = %if_then9, %if_block8
  br label %if_end3

while_block:                                      ; preds = %while_step, %if_end
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %26 = load %Location*, %Location** %loc
  call void @stepOver(%Location* %26)
  %27 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %28 = getelementptr inbounds %Token, %Token* %27, i32 0, i32 2
  call void @clear(%String* %28)
  br label %if_block11

while_step:                                       ; preds = %dumy_block203, %if_end90, %if_end78, %if_end48, %if_end31, %if_end22
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void

if_block11:                                       ; preds = %while_body
  %29 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %30 = call i1 @isEmpty.390(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %29)
  br i1 %30, label %if_then12, label %if_end13

if_then12:                                        ; preds = %if_block11
  call void @ctor.393(%TokenType* %_result, i32 0)
  ret void

if_end13:                                         ; preds = %dumy_block, %if_block11
  %31 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %32 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %31)
  store i8 %32, i8* %ch14
  %33 = call i8 @peekChar(%SparrowScanner* %this)
  store i8 %33, i8* %ch215
  br label %if_block16

dumy_block:                                       ; No predecessors!
  br label %if_end13

if_block16:                                       ; preds = %if_end13
  %34 = load i8, i8* %ch14
  %35 = icmp eq i8 %34, 32
  br i1 %35, label %if_then17, label %if_end18

if_then17:                                        ; preds = %if_block16
  %36 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advanceIf.419(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %36, %"$lambdaEnclosureData.0"* %tmp.this19)
  br label %if_block20

if_end18:                                         ; preds = %dumy_block24, %if_block16
  br label %if_block25

if_block20:                                       ; preds = %if_then17
  %37 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  %38 = load i1, i1* %37
  br i1 %38, label %if_then21, label %if_end22

if_then21:                                        ; preds = %if_block20
  call void @ctor.393(%TokenType* %_result, i32 255)
  ret void

if_end22:                                         ; preds = %dumy_block23, %if_block20
  br label %while_step

dumy_block23:                                     ; No predecessors!
  br label %if_end22

dumy_block24:                                     ; No predecessors!
  br label %if_end18

if_block25:                                       ; preds = %if_end18
  %39 = load i8, i8* %ch14
  %40 = icmp eq i8 %39, 9
  br i1 %40, label %if_then26, label %if_end27

if_then26:                                        ; preds = %if_block25
  %41 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %42 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %43 = bitcast %UntypedPtr* %41 to i8**
  %44 = bitcast %UntypedPtr* %42 to i8**
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str.8, i32 0, i32 0), i8** %43
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str.8, i32 0, i32 29), i8** %44
  %45 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %45, %StringRef* %"$tmpForRef"
  call void @toString(%String* %"$tmpC", %StringRef* %"$tmpForRef")
  call void @reportError(%SparrowScanner* %this, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  %46 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advanceIf.432(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %46, %"$lambdaEnclosureData.1"* %tmp.this28)
  br label %if_block29

if_end27:                                         ; preds = %dumy_block33, %if_block25
  br label %if_block34

if_block29:                                       ; preds = %if_then26
  %47 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  %48 = load i1, i1* %47
  br i1 %48, label %if_then30, label %if_end31

if_then30:                                        ; preds = %if_block29
  call void @ctor.393(%TokenType* %_result, i32 255)
  ret void

if_end31:                                         ; preds = %dumy_block32, %if_block29
  br label %while_step

dumy_block32:                                     ; No predecessors!
  br label %if_end31

dumy_block33:                                     ; No predecessors!
  br label %if_end27

if_block34:                                       ; preds = %if_end27
  %49 = load i8, i8* %ch14
  %50 = icmp eq i8 %49, 10
  br i1 %50, label %if_then35, label %if_end36

if_then35:                                        ; preds = %if_block34
  %51 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %51)
  call void @ctor.393(%TokenType* %_result, i32 1)
  ret void

if_end36:                                         ; preds = %dumy_block37, %if_block34
  br label %if_block38

dumy_block37:                                     ; No predecessors!
  br label %if_end36

if_block38:                                       ; preds = %if_end36
  %52 = load i8, i8* %ch14
  %53 = icmp eq i8 %52, 47
  br i1 %53, label %cond.true41, label %cond.false42

if_then39:                                        ; preds = %cond.end43
  %54 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %54)
  %55 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advanceIf.439(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %55, %"$lambdaEnclosureData.2"* %tmp.this45)
  br label %if_block46

if_end40:                                         ; preds = %dumy_block50, %cond.end43
  br label %if_block51

cond.true41:                                      ; preds = %if_block38
  %56 = load i8, i8* %ch215
  %57 = icmp eq i8 %56, 47
  br label %cond.end43

cond.false42:                                     ; preds = %if_block38
  br label %cond.end43

cond.end43:                                       ; preds = %cond.false42, %cond.true41
  %cond.res44 = phi i1 [ %57, %cond.true41 ], [ false, %cond.false42 ]
  br i1 %cond.res44, label %if_then39, label %if_end40

if_block46:                                       ; preds = %if_then39
  %58 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  %59 = load i1, i1* %58
  br i1 %59, label %if_then47, label %if_end48

if_then47:                                        ; preds = %if_block46
  call void @ctor.393(%TokenType* %_result, i32 254)
  ret void

if_end48:                                         ; preds = %dumy_block49, %if_block46
  br label %while_step

dumy_block49:                                     ; No predecessors!
  br label %if_end48

dumy_block50:                                     ; No predecessors!
  br label %if_end40

if_block51:                                       ; preds = %if_end40
  %60 = load i8, i8* %ch14
  %61 = icmp eq i8 %60, 47
  br i1 %61, label %cond.true54, label %cond.false55

if_then52:                                        ; preds = %cond.end56
  %62 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advance.446(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %62, i32 2)
  store i8 97, i8* %c1
  store i8 97, i8* %c2
  br label %while_block58

if_end53:                                         ; preds = %dumy_block80, %cond.end56
  br label %if_block81

cond.true54:                                      ; preds = %if_block51
  %63 = load i8, i8* %ch215
  %64 = icmp eq i8 %63, 42
  br label %cond.end56

cond.false55:                                     ; preds = %if_block51
  br label %cond.end56

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond.res57 = phi i1 [ %64, %cond.true54 ], [ false, %cond.false55 ]
  br i1 %cond.res57, label %if_then52, label %if_end53

while_block58:                                    ; preds = %while_step60, %if_then52
  %65 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %66 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %65)
  br i1 %66, label %cond.true62, label %cond.false63

while_body59:                                     ; preds = %cond.end64
  %67 = load i8, i8* %c2
  store i8 %67, i8* %c1
  %68 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %69 = call i8 @"pre_++.447"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %68)
  store i8 %69, i8* %c2
  br label %while_step60

while_step60:                                     ; preds = %while_body59
  br label %while_block58

while_end61:                                      ; preds = %cond.end64
  br label %if_block70

cond.true62:                                      ; preds = %while_block58
  %70 = load i8, i8* %c1
  %71 = icmp ne i8 %70, 42
  br i1 %71, label %cond.true65, label %cond.false66

cond.false63:                                     ; preds = %while_block58
  br label %cond.end64

cond.end64:                                       ; preds = %cond.false63, %cond.end67
  %cond.res69 = phi i1 [ %cond.res68, %cond.end67 ], [ false, %cond.false63 ]
  br i1 %cond.res69, label %while_body59, label %while_end61

cond.true65:                                      ; preds = %cond.true62
  br label %cond.end67

cond.false66:                                     ; preds = %cond.true62
  %72 = load i8, i8* %c2
  %73 = icmp ne i8 %72, 47
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false66, %cond.true65
  %cond.res68 = phi i1 [ true, %cond.true65 ], [ %73, %cond.false66 ]
  br label %cond.end64

if_block70:                                       ; preds = %while_end61
  %74 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %75 = call i1 @"pre_!"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %74)
  br i1 %75, label %if_then71, label %if_end72

if_then71:                                        ; preds = %if_block70
  %76 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef74, i32 0, i32 0
  %77 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef74, i32 0, i32 1
  %78 = bitcast %UntypedPtr* %76 to i8**
  %79 = bitcast %UntypedPtr* %77 to i8**
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str.9, i32 0, i32 0), i8** %78
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str.9, i32 0, i32 32), i8** %79
  %80 = load %StringRef, %StringRef* %tmp.StringRef74
  call void @ctor.448(%String* %tmp.this73, %StringRef %80)
  call void @reportError(%SparrowScanner* %this, %String* %tmp.this73)
  call void @dtor.239(%String* %tmp.this73)
  call void @ctor.393(%TokenType* %_result, i32 0)
  ret void

if_end72:                                         ; preds = %dumy_block75, %if_block70
  %81 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %81)
  br label %if_block76

dumy_block75:                                     ; No predecessors!
  br label %if_end72

if_block76:                                       ; preds = %if_end72
  %82 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  %83 = load i1, i1* %82
  br i1 %83, label %if_then77, label %if_end78

if_then77:                                        ; preds = %if_block76
  call void @ctor.393(%TokenType* %_result, i32 254)
  ret void

if_end78:                                         ; preds = %dumy_block79, %if_block76
  br label %while_step

dumy_block79:                                     ; No predecessors!
  br label %if_end78

dumy_block80:                                     ; No predecessors!
  br label %if_end53

if_block81:                                       ; preds = %if_end53
  %84 = load i8, i8* %ch14
  %85 = icmp eq i8 %84, 92
  br i1 %85, label %cond.true84, label %cond.false85

if_then82:                                        ; preds = %cond.end86
  %86 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advance.446(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %86, i32 2)
  br label %if_block88

if_end83:                                         ; preds = %dumy_block92, %cond.end86
  br label %if_block93

cond.true84:                                      ; preds = %if_block81
  %87 = load i8, i8* %ch215
  %88 = icmp eq i8 %87, 10
  br label %cond.end86

cond.false85:                                     ; preds = %if_block81
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false85, %cond.true84
  %cond.res87 = phi i1 [ %88, %cond.true84 ], [ false, %cond.false85 ]
  br i1 %cond.res87, label %if_then82, label %if_end83

if_block88:                                       ; preds = %if_then82
  %89 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 6
  %90 = load i1, i1* %89
  br i1 %90, label %if_then89, label %if_end90

if_then89:                                        ; preds = %if_block88
  call void @ctor.393(%TokenType* %_result, i32 253)
  ret void

if_end90:                                         ; preds = %dumy_block91, %if_block88
  br label %while_step

dumy_block91:                                     ; No predecessors!
  br label %if_end90

dumy_block92:                                     ; No predecessors!
  br label %if_end83

if_block93:                                       ; preds = %if_end83
  %91 = load i8, i8* %ch14
  %92 = icmp eq i8 %91, 39
  br i1 %92, label %if_then94, label %if_end95

if_then94:                                        ; preds = %if_block93
  call void @parseString(%TokenType* %_result, %SparrowScanner* %this, i8 39)
  ret void

if_end95:                                         ; preds = %dumy_block96, %if_block93
  br label %if_block97

dumy_block96:                                     ; No predecessors!
  br label %if_end95

if_block97:                                       ; preds = %if_end95
  %93 = load i8, i8* %ch14
  %94 = icmp eq i8 %93, 34
  br i1 %94, label %if_then98, label %if_end99

if_then98:                                        ; preds = %if_block97
  call void @parseString(%TokenType* %_result, %SparrowScanner* %this, i8 34)
  ret void

if_end99:                                         ; preds = %dumy_block100, %if_block97
  br label %if_block101

dumy_block100:                                    ; No predecessors!
  br label %if_end99

if_block101:                                      ; preds = %if_end99
  %95 = load i8, i8* %ch14
  %96 = icmp eq i8 %95, 60
  br i1 %96, label %cond.true104, label %cond.false105

if_then102:                                       ; preds = %cond.end106
  call void @parseStringNE(%TokenType* %_result, %SparrowScanner* %this)
  ret void

if_end103:                                        ; preds = %dumy_block108, %cond.end106
  br label %if_block109

cond.true104:                                     ; preds = %if_block101
  %97 = load i8, i8* %ch215
  %98 = icmp eq i8 %97, 123
  br label %cond.end106

cond.false105:                                    ; preds = %if_block101
  br label %cond.end106

cond.end106:                                      ; preds = %cond.false105, %cond.true104
  %cond.res107 = phi i1 [ %98, %cond.true104 ], [ false, %cond.false105 ]
  br i1 %cond.res107, label %if_then102, label %if_end103

dumy_block108:                                    ; No predecessors!
  br label %if_end103

if_block109:                                      ; preds = %if_end103
  %99 = load i8, i8* %ch14
  %100 = icmp eq i8 %99, 123
  br i1 %100, label %if_then110, label %if_end111

if_then110:                                       ; preds = %if_block109
  %101 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %101)
  call void @ctor.393(%TokenType* %_result, i32 25)
  ret void

if_end111:                                        ; preds = %dumy_block112, %if_block109
  br label %if_block113

dumy_block112:                                    ; No predecessors!
  br label %if_end111

if_block113:                                      ; preds = %if_end111
  %102 = load i8, i8* %ch14
  %103 = icmp eq i8 %102, 123
  br i1 %103, label %if_then114, label %if_end115

if_then114:                                       ; preds = %if_block113
  %104 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %104)
  call void @ctor.393(%TokenType* %_result, i32 25)
  ret void

if_end115:                                        ; preds = %dumy_block116, %if_block113
  br label %if_block117

dumy_block116:                                    ; No predecessors!
  br label %if_end115

if_block117:                                      ; preds = %if_end115
  %105 = load i8, i8* %ch14
  %106 = icmp eq i8 %105, 125
  br i1 %106, label %if_then118, label %if_end119

if_then118:                                       ; preds = %if_block117
  %107 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %107)
  call void @ctor.393(%TokenType* %_result, i32 26)
  ret void

if_end119:                                        ; preds = %dumy_block120, %if_block117
  br label %if_block121

dumy_block120:                                    ; No predecessors!
  br label %if_end119

if_block121:                                      ; preds = %if_end119
  %108 = load i8, i8* %ch14
  %109 = icmp eq i8 %108, 91
  br i1 %109, label %if_then122, label %if_end123

if_then122:                                       ; preds = %if_block121
  %110 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %110)
  call void @ctor.393(%TokenType* %_result, i32 27)
  ret void

if_end123:                                        ; preds = %dumy_block124, %if_block121
  br label %if_block125

dumy_block124:                                    ; No predecessors!
  br label %if_end123

if_block125:                                      ; preds = %if_end123
  %111 = load i8, i8* %ch14
  %112 = icmp eq i8 %111, 93
  br i1 %112, label %if_then126, label %if_end127

if_then126:                                       ; preds = %if_block125
  %113 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %113)
  call void @ctor.393(%TokenType* %_result, i32 28)
  ret void

if_end127:                                        ; preds = %dumy_block128, %if_block125
  br label %if_block129

dumy_block128:                                    ; No predecessors!
  br label %if_end127

if_block129:                                      ; preds = %if_end127
  %114 = load i8, i8* %ch14
  %115 = icmp eq i8 %114, 40
  br i1 %115, label %if_then130, label %if_end131

if_then130:                                       ; preds = %if_block129
  %116 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %116)
  call void @ctor.393(%TokenType* %_result, i32 29)
  ret void

if_end131:                                        ; preds = %dumy_block132, %if_block129
  br label %if_block133

dumy_block132:                                    ; No predecessors!
  br label %if_end131

if_block133:                                      ; preds = %if_end131
  %117 = load i8, i8* %ch14
  %118 = icmp eq i8 %117, 41
  br i1 %118, label %if_then134, label %if_end135

if_then134:                                       ; preds = %if_block133
  %119 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %119)
  call void @ctor.393(%TokenType* %_result, i32 30)
  ret void

if_end135:                                        ; preds = %dumy_block136, %if_block133
  br label %if_block137

dumy_block136:                                    ; No predecessors!
  br label %if_end135

if_block137:                                      ; preds = %if_end135
  %120 = load i8, i8* %ch14
  %121 = icmp eq i8 %120, 59
  br i1 %121, label %if_then138, label %if_end139

if_then138:                                       ; preds = %if_block137
  %122 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %122)
  call void @ctor.393(%TokenType* %_result, i32 32)
  ret void

if_end139:                                        ; preds = %dumy_block140, %if_block137
  br label %if_block141

dumy_block140:                                    ; No predecessors!
  br label %if_end139

if_block141:                                      ; preds = %if_end139
  %123 = load i8, i8* %ch14
  %124 = icmp eq i8 %123, 44
  br i1 %124, label %if_then142, label %if_end143

if_then142:                                       ; preds = %if_block141
  %125 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %125)
  call void @ctor.393(%TokenType* %_result, i32 33)
  ret void

if_end143:                                        ; preds = %dumy_block144, %if_block141
  br label %if_block145

dumy_block144:                                    ; No predecessors!
  br label %if_end143

if_block145:                                      ; preds = %if_end143
  %126 = load i8, i8* %ch14
  %127 = icmp eq i8 %126, 96
  br i1 %127, label %if_then146, label %if_end147

if_then146:                                       ; preds = %if_block145
  %128 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %128)
  call void @ctor.393(%TokenType* %_result, i32 35)
  ret void

if_end147:                                        ; preds = %dumy_block148, %if_block145
  br label %if_block149

dumy_block148:                                    ; No predecessors!
  br label %if_end147

if_block149:                                      ; preds = %if_end147
  %129 = load i8, i8* %ch14
  %130 = icmp eq i8 %129, 58
  br i1 %130, label %cond.true152, label %cond.false153

if_then150:                                       ; preds = %cond.end154
  %131 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %131)
  call void @ctor.393(%TokenType* %_result, i32 31)
  ret void

if_end151:                                        ; preds = %dumy_block156, %cond.end154
  br label %if_block157

cond.true152:                                     ; preds = %if_block149
  %132 = call i8 @peekChar(%SparrowScanner* %this)
  %133 = call i1 @isOpChar(i8 %132)
  %134 = xor i1 true, %133
  br label %cond.end154

cond.false153:                                    ; preds = %if_block149
  br label %cond.end154

cond.end154:                                      ; preds = %cond.false153, %cond.true152
  %cond.res155 = phi i1 [ %134, %cond.true152 ], [ false, %cond.false153 ]
  br i1 %cond.res155, label %if_then150, label %if_end151

dumy_block156:                                    ; No predecessors!
  br label %if_end151

if_block157:                                      ; preds = %if_end151
  %135 = load i8, i8* %ch14
  %136 = icmp eq i8 %135, 61
  br i1 %136, label %cond.true160, label %cond.false161

if_then158:                                       ; preds = %cond.end162
  %137 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %137)
  call void @ctor.393(%TokenType* %_result, i32 36)
  ret void

if_end159:                                        ; preds = %dumy_block164, %cond.end162
  br label %if_block165

cond.true160:                                     ; preds = %if_block157
  %138 = call i8 @peekChar(%SparrowScanner* %this)
  %139 = call i1 @isOpChar(i8 %138)
  %140 = xor i1 true, %139
  br label %cond.end162

cond.false161:                                    ; preds = %if_block157
  br label %cond.end162

cond.end162:                                      ; preds = %cond.false161, %cond.true160
  %cond.res163 = phi i1 [ %140, %cond.true160 ], [ false, %cond.false161 ]
  br i1 %cond.res163, label %if_then158, label %if_end159

dumy_block164:                                    ; No predecessors!
  br label %if_end159

if_block165:                                      ; preds = %if_end159
  %141 = load i8, i8* %ch14
  %142 = call i1 @isOpCharDot(i8 %141)
  br i1 %142, label %if_then166, label %if_end167

if_then166:                                       ; preds = %if_block165
  br label %if_block168

if_end167:                                        ; preds = %if_end170, %if_block165
  br label %if_block172

if_block168:                                      ; preds = %if_then166
  %143 = call i1 @parseOperator(%SparrowScanner* %this)
  br i1 %143, label %if_then169, label %if_end170

if_then169:                                       ; preds = %if_block168
  call void @ctor.393(%TokenType* %_result, i32 38)
  ret void

if_end170:                                        ; preds = %dumy_block171, %if_block168
  br label %if_end167

dumy_block171:                                    ; No predecessors!
  br label %if_end170

if_block172:                                      ; preds = %if_end167
  %144 = load i8, i8* %ch14
  %145 = icmp eq i8 %144, 46
  br i1 %145, label %cond.true175, label %cond.false176

if_then173:                                       ; preds = %cond.end177
  %146 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %146)
  call void @ctor.393(%TokenType* %_result, i32 34)
  ret void

if_end174:                                        ; preds = %dumy_block179, %cond.end177
  br label %if_block180

cond.true175:                                     ; preds = %if_block172
  %147 = load i8, i8* %ch215
  %148 = call i1 @isDigit(i8 %147)
  %149 = xor i1 true, %148
  br label %cond.end177

cond.false176:                                    ; preds = %if_block172
  br label %cond.end177

cond.end177:                                      ; preds = %cond.false176, %cond.true175
  %cond.res178 = phi i1 [ %149, %cond.true175 ], [ false, %cond.false176 ]
  br i1 %cond.res178, label %if_then173, label %if_end174

dumy_block179:                                    ; No predecessors!
  br label %if_end174

if_block180:                                      ; preds = %if_end174
  %150 = load i8, i8* %ch14
  %151 = call i1 @isAlpha(i8 %150)
  br i1 %151, label %cond.true183, label %cond.false184

if_then181:                                       ; preds = %cond.end185
  call void @parseIdentifer(%TokenType* %_result, %SparrowScanner* %this)
  ret void

if_end182:                                        ; preds = %dumy_block187, %cond.end185
  br label %if_block188

cond.true183:                                     ; preds = %if_block180
  br label %cond.end185

cond.false184:                                    ; preds = %if_block180
  %152 = load i8, i8* %ch14
  %153 = icmp eq i8 %152, 95
  br label %cond.end185

cond.end185:                                      ; preds = %cond.false184, %cond.true183
  %cond.res186 = phi i1 [ true, %cond.true183 ], [ %153, %cond.false184 ]
  br i1 %cond.res186, label %if_then181, label %if_end182

dumy_block187:                                    ; No predecessors!
  br label %if_end182

if_block188:                                      ; preds = %if_end182
  %154 = load i8, i8* %ch14
  %155 = call i1 @isDigit(i8 %154)
  br i1 %155, label %cond.true191, label %cond.false192

if_then189:                                       ; preds = %cond.end193
  call void @parseNumeric(%TokenType* %_result, %SparrowScanner* %this)
  ret void

if_end190:                                        ; preds = %dumy_block195, %cond.end193
  %156 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef198, i32 0, i32 0
  %157 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef198, i32 0, i32 1
  %158 = bitcast %UntypedPtr* %156 to i8**
  %159 = bitcast %UntypedPtr* %157 to i8**
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str.38, i32 0, i32 0), i8** %158
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str.38, i32 0, i32 26), i8** %159
  %160 = load %StringRef, %StringRef* %tmp.StringRef198
  store %StringRef %160, %StringRef* %"$tmpForRef197"
  %161 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef200, i32 0, i32 0
  %162 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef200, i32 0, i32 1
  %163 = bitcast %UntypedPtr* %161 to i8**
  %164 = bitcast %UntypedPtr* %162 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.39, i32 0, i32 0), i8** %163
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.39, i32 0, i32 3), i8** %164
  %165 = load %StringRef, %StringRef* %tmp.StringRef200
  store %StringRef %165, %StringRef* %"$tmpForRef199"
  %166 = load i8, i8* %ch14
  call void @_ass_32_8z(i32* %tmp.this201, i8 %166)
  store i8 41, i8* %"$tmpForRef202"
  call void @toString.455(%String* %"$tmpC196", %StringRef* %"$tmpForRef197", i8* %ch14, %StringRef* %"$tmpForRef199", i32* %tmp.this201, i8* %"$tmpForRef202")
  call void @reportError(%SparrowScanner* %this, %String* %"$tmpC196")
  call void @dtor.239(%String* %"$tmpC196")
  %167 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %167)
  call void @ctor.393(%TokenType* %_result, i32 0)
  ret void

cond.true191:                                     ; preds = %if_block188
  br label %cond.end193

cond.false192:                                    ; preds = %if_block188
  %168 = load i8, i8* %ch14
  %169 = icmp eq i8 %168, 46
  br label %cond.end193

cond.end193:                                      ; preds = %cond.false192, %cond.true191
  %cond.res194 = phi i1 [ true, %cond.true191 ], [ %169, %cond.false192 ]
  br i1 %cond.res194, label %if_then189, label %if_end190

dumy_block195:                                    ; No predecessors!
  br label %if_end190

dumy_block203:                                    ; No predecessors!
  br label %while_step
}

; Function Attrs: inlinehint nounwind
define internal i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i8 @front.395(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  ret i8 %1
}

; Function Attrs: inlinehint nounwind
define internal i8 @front.395(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 0
  %2 = call i8 @front.396(%"RangeWithLookahead[BufferedCharSourceRange]"* %1)
  ret i8 %2
}

; Function Attrs: inlinehint nounwind
define internal i8 @front.396(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %2 = call i8* @front.397(%"Vector[Char]"* %1)
  %3 = load i8, i8* %2
  ret i8 %3
}

; Function Attrs: inlinehint nounwind
define internal i8* @front.397(%"Vector[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %2 = call i8* @value(%"RawPtr[Char]"* %1)
  ret i8* %2
}

; Function Attrs: inlinehint nounwind
define internal i8 @peekChar(%SparrowScanner* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = call i8 @peek(%"RangeWithLookahead[BufferedCharSourceRange]"* %2, i32 1)
  ret i8 %3
}

; Function Attrs: inlinehint nounwind
define internal i8 @peek(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load i32, i32* %n.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %3 = call i32 @size.175(%"Vector[Char]"* %2)
  %4 = call i1 @_Int32_opGE(i32 %1, i32 %3)
  br i1 %4, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %5 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %6 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %7 = call i8 @"post_++.374"(%BufferedCharSourceRange* %6)
  call void @"+="(%"Vector[Char]"* %5, i8 %7)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_block

cond.true:                                        ; preds = %while_block
  %8 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %9 = call i1 @"pre_!!"(%BufferedCharSourceRange* %8)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %9, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

if_block:                                         ; preds = %while_end
  %10 = load i32, i32* %n.addr
  %11 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %12 = call i32 @size.175(%"Vector[Char]"* %11)
  %13 = call i1 @_Int32_opLT(i32 %10, i32 %12)
  br i1 %13, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %14 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %15 = load i32, i32* %n.addr
  %16 = call i8* @"().398"(%"Vector[Char]"* %14, i32 %15)
  %17 = load i8, i8* %16
  ret i8 %17

if_else:                                          ; preds = %if_block
  store i8 0, i8* %tmp.this
  %18 = load i8, i8* %tmp.this
  ret i8 %18

if_end:                                           ; preds = %dumy_block1, %dumy_block
  unreachable

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block1:                                      ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i8* @"().398"(%"Vector[Char]"* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %2 = load i32, i32* %index.addr
  %3 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %1, i32 %2)
  store %"RawPtr[Char]" %3, %"RawPtr[Char]"* %"$tmpForRef"
  %4 = call i8* @value(%"RawPtr[Char]"* %"$tmpForRef")
  ret i8* %4
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 0
  %2 = call i8 @"pre_*.400"(%"RangeWithLookahead[BufferedCharSourceRange]"* %1)
  %3 = icmp eq i8 %2, 10
  br i1 %3, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %4 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 1
  %5 = load %Location*, %Location** %4
  call void @addLines(%Location* %5, i32 1)
  br label %if_end

if_else:                                          ; preds = %if_block
  %6 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 1
  %7 = load %Location*, %Location** %6
  call void @addColumns(%Location* %7, i32 1)
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  %8 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, i32 0, i32 0
  call void @popFront.401(%"RangeWithLookahead[BufferedCharSourceRange]"* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8 @"pre_*.400"(%"RangeWithLookahead[BufferedCharSourceRange]"* %r) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i8 @front.396(%"RangeWithLookahead[BufferedCharSourceRange]"* %r)
  ret i8 %1
}

; Function Attrs: inlinehint nounwind
define internal void @addLines(%Location* %l, i32 %count) #4 {
  %count.addr = alloca i32
  store i32 %count, i32* %count.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load i32, i32* %count.addr
  %5 = call i32 @_Int32_opPlus(i32 %3, i32 %4)
  %6 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %7 = getelementptr inbounds %LineCol, %LineCol* %6, i32 0, i32 0
  store i32 %5, i32* %7
  %8 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %9 = getelementptr inbounds %LineCol, %LineCol* %8, i32 0, i32 1
  store i32 1, i32* %9
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @addColumns(%Location* %l, i32 %count) #4 {
  %count.addr = alloca i32
  store i32 %count, i32* %count.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 1
  %3 = load i32, i32* %2
  %4 = load i32, i32* %count.addr
  %5 = call i32 @_Int32_opPlus(i32 %3, i32 %4)
  %6 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %7 = getelementptr inbounds %LineCol, %LineCol* %6, i32 0, i32 1
  store i32 %5, i32* %7
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.401(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  call void @remove.402(%"Vector[Char]"* %1, i32 0)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %3 = call i1 @isEmpty.392(%"Vector[Char]"* %2)
  br i1 %3, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %5 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %6 = call i8 @"post_++.374"(%BufferedCharSourceRange* %5)
  call void @"+="(%"Vector[Char]"* %4, i8 %6)
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  ret void

cond.true:                                        ; preds = %if_block
  %7 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %8 = call i1 @"pre_!!"(%BufferedCharSourceRange* %7)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %8, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @remove.402(%"Vector[Char]"* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %r = alloca %"ContiguousMemoryRange[Char]"
  %"$tmpForRef" = alloca %"ContiguousMemoryRange[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = call %"ContiguousMemoryRange[Char]" @all.404(%"Vector[Char]"* %this)
  store %"ContiguousMemoryRange[Char]" %1, %"ContiguousMemoryRange[Char]"* %"$tmpForRef"
  call void @ctor.403(%"ContiguousMemoryRange[Char]"* %r, %"ContiguousMemoryRange[Char]"* %"$tmpForRef")
  %2 = load i32, i32* %index.addr
  call void @popFront.406(%"ContiguousMemoryRange[Char]"* %r, i32 %2)
  %3 = call i32 @size.175(%"Vector[Char]"* %this)
  %4 = load i32, i32* %index.addr
  %5 = call i32 @_Int32_opMinus(i32 %3, i32 %4)
  %6 = call i32 @_Int32_opMinus(i32 %5, i32 1)
  call void @popBack.407(%"ContiguousMemoryRange[Char]"* %r, i32 %6)
  %7 = load %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %r
  call void @remove.408(%"Vector[Char]"* %this, %"ContiguousMemoryRange[Char]" %7)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.403(%"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"* %other) #3 {
  %other.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %other, %"ContiguousMemoryRange[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  %2 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %3 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %2, i32 0, i32 0
  call void @ctor.168(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %3)
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 1
  %5 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %5, i32 0, i32 1
  call void @ctor.168(%"RawPtr[Char]"* %4, %"RawPtr[Char]"* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"ContiguousMemoryRange[Char]" @all.404(%"Vector[Char]"* %this) #4 {
  %tmp.this = alloca %"ContiguousMemoryRange[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %1
  %3 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %4 = load %"RawPtr[Char]", %"RawPtr[Char]"* %3
  call void @ctor.405(%"ContiguousMemoryRange[Char]"* %tmp.this, %"RawPtr[Char]" %2, %"RawPtr[Char]" %4)
  %5 = load %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %tmp.this
  ret %"ContiguousMemoryRange[Char]" %5
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.405(%"ContiguousMemoryRange[Char]"* %this, %"RawPtr[Char]" %f_begin, %"RawPtr[Char]" %f_end) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  %f_begin.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %f_begin, %"RawPtr[Char]"* %f_begin.addr
  %f_end.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %f_end, %"RawPtr[Char]"* %f_end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 0
  call void @ctor.168(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %f_begin.addr)
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 1
  call void @ctor.168(%"RawPtr[Char]"* %4, %"RawPtr[Char]"* %f_end.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.406(%"ContiguousMemoryRange[Char]"* %this, i32 %n) #3 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  %3 = load i32, i32* %n.addr
  %4 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %2, i32 %3)
  store %"RawPtr[Char]" %4, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %"$tmpForRef")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.407(%"ContiguousMemoryRange[Char]"* %this, i32 %n) #3 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 1
  %3 = load i32, i32* %n.addr
  %4 = call i32 @_Int32_opMinus1(i32 %3)
  %5 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %2, i32 %4)
  store %"RawPtr[Char]" %5, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %"$tmpForRef")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @remove.408(%"Vector[Char]"* %this, %"ContiguousMemoryRange[Char]" %range) #4 {
  %range.addr = alloca %"ContiguousMemoryRange[Char]"
  store %"ContiguousMemoryRange[Char]" %range, %"ContiguousMemoryRange[Char]"* %range.addr
  %rBegin = alloca %"RawPtr[Char]"
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %rEnd = alloca %"RawPtr[Char]"
  %"$tmpForRef1" = alloca %"RawPtr[Char]"
  %"$rangeVar" = alloca %"ContiguousMemoryRange[Char]"
  %el = alloca i8*
  %"$tmpForRef6" = alloca %"RawPtr[Char]"
  %"$tmpForRef7" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = call %"RawPtr[Char]" @frontPtr(%"ContiguousMemoryRange[Char]"* %range.addr)
  store %"RawPtr[Char]" %1, %"RawPtr[Char]"* %"$tmpForRef"
  call void @ctor.168(%"RawPtr[Char]"* %rBegin, %"RawPtr[Char]"* %"$tmpForRef")
  %2 = call %"RawPtr[Char]" @backPtr(%"ContiguousMemoryRange[Char]"* %range.addr)
  store %"RawPtr[Char]" %2, %"RawPtr[Char]"* %"$tmpForRef1"
  call void @ctor.168(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %"$tmpForRef1")
  call void @ctor.403(%"ContiguousMemoryRange[Char]"* %"$rangeVar", %"ContiguousMemoryRange[Char]"* %range.addr)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %3 = call i1 @isEmpty.409(%"ContiguousMemoryRange[Char]"* %"$rangeVar")
  %4 = xor i1 true, %3
  br i1 %4, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %5 = call i8* @front.410(%"ContiguousMemoryRange[Char]"* %"$rangeVar")
  store i8* %5, i8** %el
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.411(%"ContiguousMemoryRange[Char]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %while_block2

while_block2:                                     ; preds = %while_step4, %while_end
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %7 = call i1 @"==.246"(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %6)
  %8 = xor i1 true, %7
  br i1 %8, label %while_body3, label %while_end5

while_body3:                                      ; preds = %while_block2
  %9 = call i8* @value(%"RawPtr[Char]"* %rEnd)
  %10 = load i8, i8* %9
  %11 = call i8* @value(%"RawPtr[Char]"* %rBegin)
  store i8 %10, i8* %11
  %12 = call i8* @value(%"RawPtr[Char]"* %rEnd)
  %13 = load i8, i8* %12
  %14 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %rBegin)
  store %"RawPtr[Char]" %14, %"RawPtr[Char]"* %"$tmpForRef6"
  call void @"=.176"(%"RawPtr[Char]"* %rBegin, %"RawPtr[Char]"* %"$tmpForRef6")
  %15 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %rEnd)
  store %"RawPtr[Char]" %15, %"RawPtr[Char]"* %"$tmpForRef7"
  call void @"=.176"(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %"$tmpForRef7")
  br label %while_step4

while_step4:                                      ; preds = %while_body3
  br label %while_block2

while_end5:                                       ; preds = %while_block2
  %16 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  call void @"=.176"(%"RawPtr[Char]"* %16, %"RawPtr[Char]"* %rBegin)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Char]" @frontPtr(%"ContiguousMemoryRange[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %1
  ret %"RawPtr[Char]" %2
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Char]" @backPtr(%"ContiguousMemoryRange[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 1
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %1
  ret %"RawPtr[Char]" %2
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.409(%"ContiguousMemoryRange[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = call i32 @diff(%"RawPtr[Char]"* %1, %"RawPtr[Char]" %3)
  %5 = call i1 @_Int32_opLE(i32 %4, i32 0)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal i8* @front.410(%"ContiguousMemoryRange[Char]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  %2 = call i8* @value(%"RawPtr[Char]"* %1)
  ret i8* %2
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.411(%"ContiguousMemoryRange[Char]"* %this) #3 {
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  %3 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %2)
  store %"RawPtr[Char]" %3, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %"$tmpForRef")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advanceIf(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"$lambdaEnclosureData"* %pred) #4 {
  %"$tmpForRef" = alloca i8
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = call i1 @isEmpty.390(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  %2 = xor i1 true, %1
  br i1 %2, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %3 = call i8 @front.395(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  store i8 %3, i8* %"$tmpForRef"
  %4 = call i1 @"().412"(%"$lambdaEnclosureData"* %pred, i8* %"$tmpForRef")
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %4, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"().412"(%"$lambdaEnclosureData"* %this, i8* %c) #3 {
  %this.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c
  %2 = icmp ne i8 %1, 10
  ret i1 %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.413(%"$lambdaEnclosureData"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.414(%"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"* %other) #3 {
  %other.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %other, %"$lambdaEnclosureData"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.415(%"$lambdaEnclosureData"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.416"(%"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"* %other) #3 {
  %other.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %other, %"$lambdaEnclosureData"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.417"(%"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %other, %"$lambdaEnclosureData"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i1 @isEmpty.390(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %2 = xor i1 true, %1
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal void @advanceIf.419(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"$lambdaEnclosureData.0"* %pred) #4 {
  %"$tmpForRef" = alloca i8
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = call i1 @isEmpty.390(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  %2 = xor i1 true, %1
  br i1 %2, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %3 = call i8 @front.395(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  store i8 %3, i8* %"$tmpForRef"
  %4 = call i1 @"().420"(%"$lambdaEnclosureData.0"* %pred, i8* %"$tmpForRef")
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %4, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"().420"(%"$lambdaEnclosureData.0"* %this, i8* %c) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c
  %2 = icmp eq i8 %1, 32
  ret i1 %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.421(%"$lambdaEnclosureData.0"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.422(%"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"* %other) #3 {
  %other.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %other, %"$lambdaEnclosureData.0"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.423(%"$lambdaEnclosureData.0"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.424"(%"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"* %other) #3 {
  %other.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %other, %"$lambdaEnclosureData.0"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.425"(%"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %other, %"$lambdaEnclosureData.0"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: inlinehint nounwind
define internal void @reportError(%SparrowScanner* %this, %String* %msg) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 5
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %3 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2, i32 0, i32 1
  %4 = load %Location*, %Location** %3
  %5 = load %Location, %Location* %4
  call void @reportError.426(%ErrorReporter* %1, %Location %5, %String* %msg)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reportError.426(%ErrorReporter* %obj, %Location %loc, %String* %msg) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %obj, i32 0, i32 1
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = call %StringRef @asStringRef(%String* %msg)
  call void @"().427"(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"().427"(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %StringRef, %StringRef* %p3.addr
  %3 = bitcast %"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %this to void (%UntypedPtr, %Location*, %StringRef)**
  %4 = load void (%UntypedPtr, %Location*, %StringRef)*, void (%UntypedPtr, %Location*, %StringRef)** %3
  call void %4(%UntypedPtr %1, %Location* %p2, %StringRef %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @asStringRef(%String* %this) #4 {
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %1)
  %3 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %4 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %3)
  call void @ctor.50(%StringRef* %tmp.this, %UntypedPtr %2, %UntypedPtr %4)
  %5 = load %StringRef, %StringRef* %tmp.this
  %6 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %6)
  ret %StringRef %5

dumy_block:                                       ; No predecessors!
  %7 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %7)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @toString(%String* sret %_result, %StringRef* %a1) #4 {
  %s = alloca %StringOutputStream
  %"$tmpC" = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.428(%StringOutputStream* %s)
  call void @"<<"(%StringOutputStream* %"$tmpC", %StringOutputStream* %s, %StringRef* %a1)
  call void @dtor.431(%StringOutputStream* %"$tmpC")
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.165(%String* %_result, %String* %1)
  call void @dtor.431(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.431(%StringOutputStream* %s)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.428(%StringOutputStream* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  call void @ctor.114(%String* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"<<"(%StringOutputStream* sret %_result, %StringOutputStream* %s, %StringRef* %x) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %x
  call void @"<<<.429"(%StringOutputStream* %s, %StringRef %1)
  call void @ctor.430(%StringOutputStream* %_result, %StringOutputStream* %s)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.429"(%StringOutputStream* %this, %StringRef %s) #3 {
  %s.addr = alloca %StringRef
  store %StringRef %s, %StringRef* %s.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  call void @append(%String* %1, %StringRef* %s.addr)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @append(%String* %this, %StringRef* %range) #4 {
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %2 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %1)
  %3 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %4 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %3)
  call void @ctor.50(%StringRef* %tmp.this, %UntypedPtr %2, %UntypedPtr %4)
  %5 = load %StringRef, %StringRef* %tmp.this
  call void @insertBefore(%String* %this, %StringRef* %range, %StringRef %5)
  %6 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @insertBefore(%String* %this, %StringRef* %range, %StringRef %pos) #4 {
  %pos.addr = alloca %StringRef
  store %StringRef %pos, %StringRef* %pos.addr
  %rc = alloca %StringRef
  %n = alloca i32
  %index = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %p = alloca %"RawPtr[Char]"
  %"$tmpForRef1" = alloca %"RawPtr[Char]"
  %q = alloca %"RawPtr[Char]"
  %"$tmpForRef2" = alloca %"RawPtr[Char]"
  %"$tmpForRef3" = alloca %"RawPtr[Char]"
  %"$tmpForRef4" = alloca %"RawPtr[Char]"
  %"$tmpForRef5" = alloca %"RawPtr[Char]"
  %"$tmpForRef10" = alloca %"RawPtr[Char]"
  %"$tmpForRef11" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %range
  call void @ctor.49(%StringRef* %rc, %StringRef %1)
  %2 = load %StringRef, %StringRef* %range
  %3 = call i32 @size(%StringRef %2)
  store i32 %3, i32* %n
  %4 = load %StringRef, %StringRef* %pos.addr
  %5 = call %"RawPtr[Char]" @_frontPtr(%StringRef %4)
  store %"RawPtr[Char]" %5, %"RawPtr[Char]"* %"$tmpForRef"
  %6 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %6
  %8 = call i32 @diff(%"RawPtr[Char]"* %"$tmpForRef", %"RawPtr[Char]" %7)
  store i32 %8, i32* %index
  %9 = call i32 @size.166(%String* %this)
  %10 = load i32, i32* %n
  %11 = call i32 @_Int32_opPlus(i32 %9, i32 %10)
  call void @reserve(%String* %this, i32 %11)
  %12 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %13 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %12, i32 -1)
  store %"RawPtr[Char]" %13, %"RawPtr[Char]"* %"$tmpForRef1"
  call void @ctor.168(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpForRef1")
  %14 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %15 = load i32, i32* %index
  %16 = call i32 @_Int32_opMinus(i32 %15, i32 1)
  %17 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %14, i32 %16)
  store %"RawPtr[Char]" %17, %"RawPtr[Char]"* %"$tmpForRef2"
  call void @ctor.168(%"RawPtr[Char]"* %q, %"RawPtr[Char]"* %"$tmpForRef2")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %18 = call i1 @"==.246"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %q)
  %19 = xor i1 true, %18
  br i1 %19, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %20 = call i8* @value(%"RawPtr[Char]"* %p)
  %21 = load i8, i8* %20
  %22 = load i32, i32* %n
  %23 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %p, i32 %22)
  store %"RawPtr[Char]" %23, %"RawPtr[Char]"* %"$tmpForRef3"
  %24 = call i8* @value(%"RawPtr[Char]"* %"$tmpForRef3")
  store i8 %21, i8* %24
  %25 = call i8* @value(%"RawPtr[Char]"* %p)
  %26 = load i8, i8* %25
  br label %while_step

while_step:                                       ; preds = %while_body
  %27 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %p, i32 -1)
  store %"RawPtr[Char]" %27, %"RawPtr[Char]"* %"$tmpForRef4"
  call void @"=.176"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpForRef4")
  br label %while_block

while_end:                                        ; preds = %while_block
  %28 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %p)
  store %"RawPtr[Char]" %28, %"RawPtr[Char]"* %"$tmpForRef5"
  call void @"=.176"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpForRef5")
  br label %while_block6

while_block6:                                     ; preds = %while_step8, %while_end
  %29 = load %StringRef, %StringRef* %rc
  %30 = call i1 @isEmpty(%StringRef %29)
  %31 = xor i1 true, %30
  br i1 %31, label %while_body7, label %while_end9

while_body7:                                      ; preds = %while_block6
  %32 = load %StringRef, %StringRef* %rc
  %33 = call i8* @front(%StringRef %32)
  %34 = load i8, i8* %33
  %35 = call i8* @value(%"RawPtr[Char]"* %p)
  store i8 %34, i8* %35
  %36 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %p)
  store %"RawPtr[Char]" %36, %"RawPtr[Char]"* %"$tmpForRef10"
  call void @"=.176"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpForRef10")
  call void @popFront(%StringRef* %rc)
  br label %while_step8

while_step8:                                      ; preds = %while_body7
  br label %while_block6

while_end9:                                       ; preds = %while_block6
  %37 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %38 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %39 = load i32, i32* %n
  %40 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %38, i32 %39)
  store %"RawPtr[Char]" %40, %"RawPtr[Char]"* %"$tmpForRef11"
  call void @"=.176"(%"RawPtr[Char]"* %37, %"RawPtr[Char]"* %"$tmpForRef11")
  %41 = load %StringRef, %StringRef* %rc
  call void @dtor.51(%StringRef %41)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.430(%StringOutputStream* %this, %StringOutputStream* %other) #3 {
  %other.addr = alloca %StringOutputStream*
  store %StringOutputStream* %other, %StringOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = load %StringOutputStream*, %StringOutputStream** %other.addr
  %3 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %2, i32 0, i32 0
  call void @ctor.165(%String* %1, %String* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.431(%StringOutputStream* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  call void @dtor.239(%String* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advanceIf.432(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"$lambdaEnclosureData.1"* %pred) #4 {
  %"$tmpForRef" = alloca i8
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = call i1 @isEmpty.390(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  %2 = xor i1 true, %1
  br i1 %2, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %3 = call i8 @front.395(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  store i8 %3, i8* %"$tmpForRef"
  %4 = call i1 @"().433"(%"$lambdaEnclosureData.1"* %pred, i8* %"$tmpForRef")
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %4, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"().433"(%"$lambdaEnclosureData.1"* %this, i8* %c) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c
  %2 = icmp eq i8 %1, 9
  ret i1 %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.434(%"$lambdaEnclosureData.1"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.435(%"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"* %other) #3 {
  %other.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %other, %"$lambdaEnclosureData.1"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.436(%"$lambdaEnclosureData.1"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.437"(%"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"* %other) #3 {
  %other.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %other, %"$lambdaEnclosureData.1"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.438"(%"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %other, %"$lambdaEnclosureData.1"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: inlinehint nounwind
define internal void @advanceIf.439(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"$lambdaEnclosureData.2"* %pred) #4 {
  %"$tmpForRef" = alloca i8
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = call i1 @isEmpty.390(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  %2 = xor i1 true, %1
  br i1 %2, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %3 = call i8 @front.395(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  store i8 %3, i8* %"$tmpForRef"
  %4 = call i1 @"().440"(%"$lambdaEnclosureData.2"* %pred, i8* %"$tmpForRef")
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %4, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"().440"(%"$lambdaEnclosureData.2"* %this, i8* %c) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c
  %2 = icmp ne i8 %1, 10
  ret i1 %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.441(%"$lambdaEnclosureData.2"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.442(%"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"* %other) #3 {
  %other.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %other, %"$lambdaEnclosureData.2"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.443(%"$lambdaEnclosureData.2"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.444"(%"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"* %other) #3 {
  %other.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %other, %"$lambdaEnclosureData.2"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.445"(%"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %other, %"$lambdaEnclosureData.2"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: inlinehint nounwind
define internal void @advance.446(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %nn = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %n.addr
  store i32 %1, i32* %nn
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = call i32 @post_--.40(i32* %nn)
  %3 = call i1 @_Int32_opGT(i32 %2, i32 0)
  br i1 %3, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8 @"pre_++.447"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r) #4 {
  br label %code

code:                                             ; preds = %0
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %1 = call i8 @front.395(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  ret i8 %1
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i1 @isEmpty.390(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  ret i1 %1
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.448(%String* %this, %StringRef %other) #4 {
  %other.addr = alloca %StringRef
  store %StringRef %other, %StringRef* %other.addr
  %size = alloca i32
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %other.addr
  %2 = call i32 @size(%StringRef %1)
  store i32 %2, i32* %size
  %3 = load i32, i32* %size
  call void @ctor.167(%String* %this, i32 %3)
  %4 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %5 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %4)
  %6 = getelementptr inbounds %StringRef, %StringRef* %other.addr, i32 0, i32 0
  %7 = load %UntypedPtr, %UntypedPtr* %6
  call void @ctor.45(%UntypedPtr* %tmp.this, %UntypedPtr %7)
  %8 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %9 = load i32, i32* %size
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %5, %UntypedPtr %8, i32 %9)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseString(%TokenType* sret %_result, %SparrowScanner* %this, i8 %endChar) #4 {
  %endChar.addr = alloca i8
  store i8 %endChar, i8* %endChar.addr
  %tmp.this = alloca %String
  %tmp.StringRef = alloca %StringRef
  %tmp.this7 = alloca %String
  %tmp.StringRef8 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = call i1 @hasLessThan(%SparrowScanner* %this, i32 1)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %4 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %5 = bitcast %UntypedPtr* %3 to i8**
  %6 = bitcast %UntypedPtr* %4 to i8**
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.10, i32 0, i32 0), i8** %5
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.10, i32 0, i32 39), i8** %6
  %7 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.448(%String* %tmp.this, %StringRef %7)
  call void @reportError(%SparrowScanner* %this, %String* %tmp.this)
  call void @dtor.239(%String* %tmp.this)
  call void @ctor.393(%TokenType* %_result, i32 0)
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %9 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %8)
  br i1 %9, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  br label %if_block1

while_step:                                       ; preds = %if_end3
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_block4

cond.true:                                        ; preds = %while_block
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %11 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10)
  %12 = load i8, i8* %endChar.addr
  %13 = icmp ne i8 %11, %12
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %13, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

if_block1:                                        ; preds = %while_body
  %14 = call i1 @checkEscapeChar(%SparrowScanner* %this)
  %15 = xor i1 true, %14
  br i1 %15, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  call void @advanceAndCapture1(%SparrowScanner* %this)
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %while_step

if_block4:                                        ; preds = %while_end
  %16 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %17 = call i1 @"pre_!"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %16)
  br i1 %17, label %if_then5, label %if_end6

if_then5:                                         ; preds = %if_block4
  %18 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef8, i32 0, i32 0
  %19 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef8, i32 0, i32 1
  %20 = bitcast %UntypedPtr* %18 to i8**
  %21 = bitcast %UntypedPtr* %19 to i8**
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.12, i32 0, i32 0), i8** %20
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.12, i32 0, i32 39), i8** %21
  %22 = load %StringRef, %StringRef* %tmp.StringRef8
  call void @ctor.448(%String* %tmp.this7, %StringRef %22)
  call void @reportError(%SparrowScanner* %this, %String* %tmp.this7)
  call void @dtor.239(%String* %tmp.this7)
  call void @ctor.393(%TokenType* %_result, i32 0)
  ret void

if_end6:                                          ; preds = %dumy_block9, %if_block4
  %23 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %23)
  call void @ctor.393(%TokenType* %_result, i32 40)
  ret void

dumy_block9:                                      ; No predecessors!
  br label %if_end6
}

; Function Attrs: inlinehint nounwind
define internal i1 @hasLessThan(%SparrowScanner* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = load i32, i32* %n.addr
  %4 = call i1 @hasLessThan.449(%"RangeWithLookahead[BufferedCharSourceRange]"* %2, i32 %3)
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal i1 @hasLessThan.449(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load i32, i32* %n.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %3 = call i32 @size.175(%"Vector[Char]"* %2)
  %4 = call i1 @_Int32_opGE(i32 %1, i32 %3)
  br i1 %4, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %5 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %6 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %7 = call i8 @"post_++.374"(%BufferedCharSourceRange* %6)
  call void @"+="(%"Vector[Char]"* %5, i8 %7)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  %8 = load i32, i32* %n.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 1
  %10 = call i32 @size.175(%"Vector[Char]"* %9)
  %11 = call i1 @_Int32_opGE(i32 %8, i32 %10)
  ret i1 %11

cond.true:                                        ; preds = %while_block
  %12 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 0, i32 0
  %13 = call i1 @"pre_!!"(%BufferedCharSourceRange* %12)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %13, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: noinline nounwind
define i1 @checkEscapeChar(%SparrowScanner* %this) #5 {
  %ch = alloca i8
  %tmp.this = alloca %String
  %tmp.StringRef = alloca %StringRef
  %charVal = alloca i32
  %tmp.this39 = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  store i8 %2, i8* %ch
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load i8, i8* %ch
  %4 = icmp eq i8 %3, 92
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %6 = call i8 @"pre_++.447"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  store i8 %6, i8* %ch
  br label %if_block1

if_end:                                           ; preds = %dumy_block40, %if_block
  ret i1 false

if_block1:                                        ; preds = %if_then
  %7 = load i8, i8* %ch
  %8 = icmp eq i8 %7, 114
  br i1 %8, label %if_then2, label %if_else

if_then2:                                         ; preds = %if_block1
  %9 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 2
  call void @"+=.450"(%String* %10, i8 13)
  br label %if_end3

if_else:                                          ; preds = %if_block1
  br label %if_block4

if_end3:                                          ; preds = %if_end7, %if_then2
  %11 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %11)
  ret i1 true

if_block4:                                        ; preds = %if_else
  %12 = load i8, i8* %ch
  %13 = icmp eq i8 %12, 110
  br i1 %13, label %if_then5, label %if_else6

if_then5:                                         ; preds = %if_block4
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %15 = getelementptr inbounds %Token, %Token* %14, i32 0, i32 2
  call void @"+=.450"(%String* %15, i8 10)
  br label %if_end7

if_else6:                                         ; preds = %if_block4
  br label %if_block8

if_end7:                                          ; preds = %if_end11, %if_then5
  br label %if_end3

if_block8:                                        ; preds = %if_else6
  %16 = load i8, i8* %ch
  %17 = icmp eq i8 %16, 98
  br i1 %17, label %if_then9, label %if_else10

if_then9:                                         ; preds = %if_block8
  %18 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %19 = getelementptr inbounds %Token, %Token* %18, i32 0, i32 2
  call void @"+=.450"(%String* %19, i8 8)
  br label %if_end11

if_else10:                                        ; preds = %if_block8
  br label %if_block12

if_end11:                                         ; preds = %if_end15, %if_then9
  br label %if_end7

if_block12:                                       ; preds = %if_else10
  %20 = load i8, i8* %ch
  %21 = icmp eq i8 %20, 102
  br i1 %21, label %if_then13, label %if_else14

if_then13:                                        ; preds = %if_block12
  %22 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %23 = getelementptr inbounds %Token, %Token* %22, i32 0, i32 2
  call void @"+=.450"(%String* %23, i8 12)
  br label %if_end15

if_else14:                                        ; preds = %if_block12
  br label %if_block16

if_end15:                                         ; preds = %if_end19, %if_then13
  br label %if_end11

if_block16:                                       ; preds = %if_else14
  %24 = load i8, i8* %ch
  %25 = icmp eq i8 %24, 116
  br i1 %25, label %if_then17, label %if_else18

if_then17:                                        ; preds = %if_block16
  %26 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %27 = getelementptr inbounds %Token, %Token* %26, i32 0, i32 2
  call void @"+=.450"(%String* %27, i8 9)
  br label %if_end19

if_else18:                                        ; preds = %if_block16
  br label %if_block20

if_end19:                                         ; preds = %if_end23, %if_then17
  br label %if_end15

if_block20:                                       ; preds = %if_else18
  %28 = load i8, i8* %ch
  %29 = icmp eq i8 %28, 92
  br i1 %29, label %if_then21, label %if_else22

if_then21:                                        ; preds = %if_block20
  %30 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %31 = getelementptr inbounds %Token, %Token* %30, i32 0, i32 2
  call void @"+=.450"(%String* %31, i8 92)
  br label %if_end23

if_else22:                                        ; preds = %if_block20
  br label %if_block24

if_end23:                                         ; preds = %if_end27, %if_then21
  br label %if_end19

if_block24:                                       ; preds = %if_else22
  %32 = load i8, i8* %ch
  %33 = icmp eq i8 %32, 39
  br i1 %33, label %if_then25, label %if_else26

if_then25:                                        ; preds = %if_block24
  %34 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %35 = getelementptr inbounds %Token, %Token* %34, i32 0, i32 2
  call void @"+=.450"(%String* %35, i8 39)
  br label %if_end27

if_else26:                                        ; preds = %if_block24
  br label %if_block28

if_end27:                                         ; preds = %if_end31, %if_then25
  br label %if_end23

if_block28:                                       ; preds = %if_else26
  %36 = load i8, i8* %ch
  %37 = icmp eq i8 %36, 34
  br i1 %37, label %if_then29, label %if_else30

if_then29:                                        ; preds = %if_block28
  %38 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %39 = getelementptr inbounds %Token, %Token* %38, i32 0, i32 2
  call void @"+=.450"(%String* %39, i8 34)
  br label %if_end31

if_else30:                                        ; preds = %if_block28
  br label %if_block32

if_end31:                                         ; preds = %if_end35, %if_then29
  br label %if_end27

if_block32:                                       ; preds = %if_else30
  %40 = load i8, i8* %ch
  %41 = icmp eq i8 %40, 120
  br i1 %41, label %cond.true, label %cond.false

if_then33:                                        ; preds = %cond.end
  br label %if_block36

if_else34:                                        ; preds = %cond.end
  %42 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %43 = getelementptr inbounds %Token, %Token* %42, i32 0, i32 2
  %44 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %45 = call i8 @"pre_++.447"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %44)
  call void @"+=.450"(%String* %43, i8 %45)
  br label %if_end35

if_end35:                                         ; preds = %if_else34, %if_end38
  br label %if_end31

cond.true:                                        ; preds = %if_block32
  br label %cond.end

cond.false:                                       ; preds = %if_block32
  %46 = load i8, i8* %ch
  %47 = icmp eq i8 %46, 88
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ true, %cond.true ], [ %47, %cond.false ]
  br i1 %cond.res, label %if_then33, label %if_else34

if_block36:                                       ; preds = %if_then33
  %48 = call i1 @hasLessThan(%SparrowScanner* %this, i32 2)
  br i1 %48, label %if_then37, label %if_end38

if_then37:                                        ; preds = %if_block36
  %49 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %50 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %51 = bitcast %UntypedPtr* %49 to i8**
  %52 = bitcast %UntypedPtr* %50 to i8**
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @str.11, i32 0, i32 0), i8** %51
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @str.11, i32 0, i32 36), i8** %52
  %53 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.448(%String* %tmp.this, %StringRef %53)
  call void @reportError(%SparrowScanner* %this, %String* %tmp.this)
  call void @dtor.239(%String* %tmp.this)
  ret i1 true

if_end38:                                         ; preds = %dumy_block, %if_block36
  %54 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %55 = call i8 @"pre_++.447"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %54)
  %56 = call i32 @getXdigitVal(i8 %55)
  %57 = call i32 @_Int32_opMul(i32 16, i32 %56)
  store i32 %57, i32* %charVal
  %58 = load i32, i32* %charVal
  %59 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %60 = call i8 @"pre_++.447"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %59)
  %61 = call i32 @getXdigitVal(i8 %60)
  %62 = call i32 @_Int32_opPlus(i32 %58, i32 %61)
  store i32 %62, i32* %charVal
  %63 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %64 = getelementptr inbounds %Token, %Token* %63, i32 0, i32 2
  %65 = load i32, i32* %charVal
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %tmp.this39
  %67 = load i8, i8* %tmp.this39
  call void @"+=.450"(%String* %64, i8 %67)
  br label %if_end35

dumy_block:                                       ; No predecessors!
  br label %if_end38

dumy_block40:                                     ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @"+=.450"(%String* %this, i8 %value) #4 {
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %value.addr
  call void @pushBack.451(%String* %this, i8 %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack.451(%String* %this, i8 %value) #4 {
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  %t = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %2 = getelementptr inbounds %String, %String* %this, i32 0, i32 2
  %3 = call i1 @"==.246"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = call i32 @capacity(%String* %this)
  %5 = call i32 @_Int32_opMul(i32 2, i32 %4)
  store i32 %5, i32* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %6 = load i8, i8* %value.addr
  %7 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %8 = call i8* @value(%"RawPtr[Char]"* %7)
  store i8 %6, i8* %8
  %9 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %10 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %11 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %10)
  store %"RawPtr[Char]" %11, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %9, %"RawPtr[Char]"* %"$tmpForRef")
  ret void

if_block1:                                        ; preds = %if_then
  %12 = load i32, i32* %t
  %13 = call i1 @_Int32_opLT(i32 %12, i32 2)
  br i1 %13, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 2, i32* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %14 = load i32, i32* %t
  call void @reserve(%String* %this, i32 %14)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i32 @getXdigitVal(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  %tmp.this1 = alloca i32
  %tmp.this2 = alloca i32
  %tmp.this3 = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = call i1 @isDigit(i8 %1)
  br i1 %2, label %cond_alt1, label %cond_alt2

cond_alt1:                                        ; preds = %code
  %3 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %3)
  %4 = load i32, i32* %tmp.this
  call void @_ass_32_8z(i32* %tmp.this1, i8 48)
  %5 = load i32, i32* %tmp.this1
  %6 = call i32 @_Int32_opMinus(i32 %4, i32 %5)
  br label %cond_end

cond_alt2:                                        ; preds = %code
  %7 = load i8, i8* %c.addr
  %8 = call i8 @toLower(i8 %7)
  call void @_ass_32_8z(i32* %tmp.this2, i8 %8)
  %9 = load i32, i32* %tmp.this2
  %10 = call i32 @_Int32_opPlus(i32 10, i32 %9)
  call void @_ass_32_8z(i32* %tmp.this3, i8 97)
  %11 = load i32, i32* %tmp.this3
  %12 = call i32 @_Int32_opMinus(i32 %10, i32 %11)
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi i32 [ %6, %cond_alt1 ], [ %12, %cond_alt2 ]
  br i1 %2, label %cond_destruct_alt1, label %cond_destruct_alt2

cond_destruct_alt1:                               ; preds = %cond_end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %cond_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret i32 %cond

cond_destruct_alt14:                              ; preds = %dumy_block
  br label %cond_destruct_end6

cond_destruct_alt25:                              ; preds = %dumy_block
  br label %cond_destruct_end6

cond_destruct_end6:                               ; preds = %cond_destruct_alt25, %cond_destruct_alt14
  unreachable

dumy_block:                                       ; No predecessors!
  br i1 %2, label %cond_destruct_alt14, label %cond_destruct_alt25
}

; Function Attrs: inlinehint nounwind
define internal i1 @isDigit(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isdigit(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @isdigit(i32)

; Function Attrs: inlinehint nounwind
define internal i8 @toLower(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i8
  %tmp.this1 = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this1, i8 %1)
  %2 = load i32, i32* %tmp.this1
  %3 = call i32 @tolower(i32 %2)
  %4 = trunc i32 %3 to i8
  store i8 %4, i8* %tmp.this
  %5 = load i8, i8* %tmp.this
  ret i8 %5
}

declare i32 @tolower(i32)

; Function Attrs: inlinehint nounwind
define internal void @advanceAndCapture1(%SparrowScanner* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 2
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %4 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3)
  call void @"+=.450"(%String* %2, i8 %4)
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseStringNE(%TokenType* sret %_result, %SparrowScanner* %this) #4 {
  %tmp.this = alloca %String
  %tmp.StringRef = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advance.446(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 2)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %3 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  br i1 %3, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  call void @advanceAndCapture1(%SparrowScanner* %this)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_block

cond.true:                                        ; preds = %while_block
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %5 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4)
  %6 = icmp eq i8 %5, 125
  br i1 %6, label %cond.true1, label %cond.false2

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.end3
  %cond.res4 = phi i1 [ %9, %cond.end3 ], [ false, %cond.false ]
  br i1 %cond.res4, label %while_body, label %while_end

cond.true1:                                       ; preds = %cond.true
  %7 = call i8 @peekChar(%SparrowScanner* %this)
  %8 = icmp eq i8 %7, 62
  br label %cond.end3

cond.false2:                                      ; preds = %cond.true
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %8, %cond.true1 ], [ false, %cond.false2 ]
  %9 = xor i1 true, %cond.res
  br label %cond.end

if_block:                                         ; preds = %while_end
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %11 = call i1 @"pre_!"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10)
  br i1 %11, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %12 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %13 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %14 = bitcast %UntypedPtr* %12 to i8**
  %15 = bitcast %UntypedPtr* %13 to i8**
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.13, i32 0, i32 0), i8** %14
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.13, i32 0, i32 39), i8** %15
  %16 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.448(%String* %tmp.this, %StringRef %16)
  call void @reportError(%SparrowScanner* %this, %String* %tmp.this)
  call void @dtor.239(%String* %tmp.this)
  call void @ctor.393(%TokenType* %_result, i32 0)
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  %17 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advance.446(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %17, i32 2)
  call void @ctor.393(%TokenType* %_result, i32 40)
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @isOpChar(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp eq i8 %1, 126
  br i1 %2, label %cond.true49, label %cond.false50

cond.true:                                        ; preds = %cond.end3
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  %3 = load i8, i8* %c.addr
  %4 = icmp eq i8 %3, 42
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res68 = phi i1 [ true, %cond.true ], [ %4, %cond.false ]
  ret i1 %cond.res68

cond.true1:                                       ; preds = %cond.end6
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  %5 = load i8, i8* %c.addr
  %6 = icmp eq i8 %5, 47
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res67 = phi i1 [ true, %cond.true1 ], [ %6, %cond.false2 ]
  br i1 %cond.res67, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  %7 = load i8, i8* %c.addr
  %8 = icmp eq i8 %7, 63
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res66 = phi i1 [ true, %cond.true4 ], [ %8, %cond.false5 ]
  br i1 %cond.res66, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  %9 = load i8, i8* %c.addr
  %10 = icmp eq i8 %9, 62
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res65 = phi i1 [ true, %cond.true7 ], [ %10, %cond.false8 ]
  br i1 %cond.res65, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %cond.end15
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end15
  %11 = load i8, i8* %c.addr
  %12 = icmp eq i8 %11, 60
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res64 = phi i1 [ true, %cond.true10 ], [ %12, %cond.false11 ]
  br i1 %cond.res64, label %cond.true7, label %cond.false8

cond.true13:                                      ; preds = %cond.end18
  br label %cond.end15

cond.false14:                                     ; preds = %cond.end18
  %13 = load i8, i8* %c.addr
  %14 = icmp eq i8 %13, 58
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res63 = phi i1 [ true, %cond.true13 ], [ %14, %cond.false14 ]
  br i1 %cond.res63, label %cond.true10, label %cond.false11

cond.true16:                                      ; preds = %cond.end21
  br label %cond.end18

cond.false17:                                     ; preds = %cond.end21
  %15 = load i8, i8* %c.addr
  %16 = icmp eq i8 %15, 92
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond.res62 = phi i1 [ true, %cond.true16 ], [ %16, %cond.false17 ]
  br i1 %cond.res62, label %cond.true13, label %cond.false14

cond.true19:                                      ; preds = %cond.end24
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end24
  %17 = load i8, i8* %c.addr
  %18 = icmp eq i8 %17, 124
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond.res61 = phi i1 [ true, %cond.true19 ], [ %18, %cond.false20 ]
  br i1 %cond.res61, label %cond.true16, label %cond.false17

cond.true22:                                      ; preds = %cond.end27
  br label %cond.end24

cond.false23:                                     ; preds = %cond.end27
  %19 = load i8, i8* %c.addr
  %20 = icmp eq i8 %19, 61
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond.res60 = phi i1 [ true, %cond.true22 ], [ %20, %cond.false23 ]
  br i1 %cond.res60, label %cond.true19, label %cond.false20

cond.true25:                                      ; preds = %cond.end30
  br label %cond.end27

cond.false26:                                     ; preds = %cond.end30
  %21 = load i8, i8* %c.addr
  %22 = icmp eq i8 %21, 43
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond.res59 = phi i1 [ true, %cond.true25 ], [ %22, %cond.false26 ]
  br i1 %cond.res59, label %cond.true22, label %cond.false23

cond.true28:                                      ; preds = %cond.end33
  br label %cond.end30

cond.false29:                                     ; preds = %cond.end33
  %23 = load i8, i8* %c.addr
  %24 = icmp eq i8 %23, 45
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond.res58 = phi i1 [ true, %cond.true28 ], [ %24, %cond.false29 ]
  br i1 %cond.res58, label %cond.true25, label %cond.false26

cond.true31:                                      ; preds = %cond.end36
  br label %cond.end33

cond.false32:                                     ; preds = %cond.end36
  %25 = load i8, i8* %c.addr
  %26 = icmp eq i8 %25, 38
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond.res57 = phi i1 [ true, %cond.true31 ], [ %26, %cond.false32 ]
  br i1 %cond.res57, label %cond.true28, label %cond.false29

cond.true34:                                      ; preds = %cond.end39
  br label %cond.end36

cond.false35:                                     ; preds = %cond.end39
  %27 = load i8, i8* %c.addr
  %28 = icmp eq i8 %27, 94
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond.res56 = phi i1 [ true, %cond.true34 ], [ %28, %cond.false35 ]
  br i1 %cond.res56, label %cond.true31, label %cond.false32

cond.true37:                                      ; preds = %cond.end42
  br label %cond.end39

cond.false38:                                     ; preds = %cond.end42
  %29 = load i8, i8* %c.addr
  %30 = icmp eq i8 %29, 37
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond.res55 = phi i1 [ true, %cond.true37 ], [ %30, %cond.false38 ]
  br i1 %cond.res55, label %cond.true34, label %cond.false35

cond.true40:                                      ; preds = %cond.end45
  br label %cond.end42

cond.false41:                                     ; preds = %cond.end45
  %31 = load i8, i8* %c.addr
  %32 = icmp eq i8 %31, 36
  br label %cond.end42

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond.res54 = phi i1 [ true, %cond.true40 ], [ %32, %cond.false41 ]
  br i1 %cond.res54, label %cond.true37, label %cond.false38

cond.true43:                                      ; preds = %cond.end48
  br label %cond.end45

cond.false44:                                     ; preds = %cond.end48
  %33 = load i8, i8* %c.addr
  %34 = icmp eq i8 %33, 35
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond.res53 = phi i1 [ true, %cond.true43 ], [ %34, %cond.false44 ]
  br i1 %cond.res53, label %cond.true40, label %cond.false41

cond.true46:                                      ; preds = %cond.end51
  br label %cond.end48

cond.false47:                                     ; preds = %cond.end51
  %35 = load i8, i8* %c.addr
  %36 = icmp eq i8 %35, 64
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond.res52 = phi i1 [ true, %cond.true46 ], [ %36, %cond.false47 ]
  br i1 %cond.res52, label %cond.true43, label %cond.false44

cond.true49:                                      ; preds = %code
  br label %cond.end51

cond.false50:                                     ; preds = %code
  %37 = load i8, i8* %c.addr
  %38 = icmp eq i8 %37, 33
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond.res = phi i1 [ true, %cond.true49 ], [ %38, %cond.false50 ]
  br i1 %cond.res, label %cond.true46, label %cond.false47
}

; Function Attrs: inlinehint nounwind
define internal i1 @isOpCharDot(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp eq i8 %1, 46
  br i1 %2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  br label %cond.end

cond.false:                                       ; preds = %code
  %3 = load i8, i8* %c.addr
  %4 = call i1 @isOpChar(i8 %3)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ true, %cond.true ], [ %4, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseOperator(%SparrowScanner* %this) #4 {
  %ch = alloca i8
  %"$tmpForRef" = alloca %"FunctionPtr1[Bool, Char]"
  %funptr = alloca i1 (i8)*
  %i = alloca i32
  %c = alloca i8
  %hasOtherDot = alloca i1
  %"$tmpForRef7" = alloca %"FunctionPtr1[Bool, Char]"
  %funptr8 = alloca i1 (i8)*
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  store i8 %2, i8* %ch
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load i8, i8* %ch
  %4 = call i1 @isOpChar(i8 %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  store i1 (i8)* @isOpCharDot, i1 (i8)** %funptr
  %5 = bitcast i1 (i8)** %funptr to %"FunctionPtr1[Bool, Char]"*
  %6 = load %"FunctionPtr1[Bool, Char]", %"FunctionPtr1[Bool, Char]"* %5
  store %"FunctionPtr1[Bool, Char]" %6, %"FunctionPtr1[Bool, Char]"* %"$tmpForRef"
  call void @advanceAndCapture(%SparrowScanner* %this, %"FunctionPtr1[Bool, Char]"* %"$tmpForRef")
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %7 = load i8, i8* %ch
  %8 = icmp eq i8 %7, 46
  br i1 %8, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 1, i32* %i
  %9 = load i32, i32* %i
  %10 = call i8 @peekChar.453(%SparrowScanner* %this, i32 %9)
  store i8 %10, i8* %c
  br label %while_block

if_end3:                                          ; preds = %if_end6, %if_block1
  ret i1 false

while_block:                                      ; preds = %while_step, %if_then2
  %11 = load i8, i8* %c
  %12 = call i1 @isOpChar(i8 %11)
  br i1 %12, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %13 = call i32 @"pre_++.19"(i32* %i)
  %14 = call i8 @peekChar.453(%SparrowScanner* %this, i32 %13)
  store i8 %14, i8* %c
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %15 = load i8, i8* %c
  %16 = icmp eq i8 %15, 46
  store i1 %16, i1* %hasOtherDot
  br label %if_block4

if_block4:                                        ; preds = %while_end
  %17 = load i1, i1* %hasOtherDot
  br i1 %17, label %if_then5, label %if_end6

if_then5:                                         ; preds = %if_block4
  store i1 (i8)* @isOpCharDot, i1 (i8)** %funptr8
  %18 = bitcast i1 (i8)** %funptr8 to %"FunctionPtr1[Bool, Char]"*
  %19 = load %"FunctionPtr1[Bool, Char]", %"FunctionPtr1[Bool, Char]"* %18
  store %"FunctionPtr1[Bool, Char]" %19, %"FunctionPtr1[Bool, Char]"* %"$tmpForRef7"
  call void @advanceAndCapture(%SparrowScanner* %this, %"FunctionPtr1[Bool, Char]"* %"$tmpForRef7")
  ret i1 true

if_end6:                                          ; preds = %dumy_block9, %if_block4
  br label %if_end3

dumy_block9:                                      ; No predecessors!
  br label %if_end6
}

; Function Attrs: inlinehint nounwind
define internal void @advanceAndCapture(%SparrowScanner* %this, %"FunctionPtr1[Bool, Char]"* %pred) #4 {
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  br i1 %2, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 2
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %6 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  call void @"+=.450"(%String* %4, i8 %6)
  br label %while_step

while_step:                                       ; preds = %while_body
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %7)
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %9 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %8)
  %10 = call i1 @"().452"(%"FunctionPtr1[Bool, Char]"* %pred, i8 %9)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @"().452"(%"FunctionPtr1[Bool, Char]"* %this, i8 %p1) #4 {
  %p1.addr = alloca i8
  store i8 %p1, i8* %p1.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %p1.addr
  %2 = bitcast %"FunctionPtr1[Bool, Char]"* %this to i1 (i8)**
  %3 = load i1 (i8)*, i1 (i8)** %2
  %4 = call i1 %3(i8 %1)
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal i8 @peekChar.453(%SparrowScanner* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = load i32, i32* %n.addr
  %4 = call i8 @peek(%"RangeWithLookahead[BufferedCharSourceRange]"* %2, i32 %3)
  ret i8 %4
}

; Function Attrs: inlinehint nounwind
define internal i1 @isAlpha(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isalpha(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @isalpha(i32)

; Function Attrs: noinline nounwind
define void @parseIdentifer(%TokenType* sret %_result, %SparrowScanner* %this) #5 {
  %allowSymbolChars = alloca i1
  %firstDot = alloca i1
  %ch = alloca i8
  %data = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %tmp.StringRef24 = alloca %StringRef
  %tmp.StringRef30 = alloca %StringRef
  %tmp.StringRef36 = alloca %StringRef
  %tmp.StringRef42 = alloca %StringRef
  %tmp.StringRef48 = alloca %StringRef
  %tmp.StringRef54 = alloca %StringRef
  %tmp.StringRef60 = alloca %StringRef
  %tmp.StringRef66 = alloca %StringRef
  %tmp.StringRef72 = alloca %StringRef
  %tmp.StringRef78 = alloca %StringRef
  %tmp.StringRef84 = alloca %StringRef
  %tmp.StringRef90 = alloca %StringRef
  %tmp.StringRef96 = alloca %StringRef
  %tmp.StringRef102 = alloca %StringRef
  %tmp.StringRef108 = alloca %StringRef
  %tmp.StringRef114 = alloca %StringRef
  %tmp.StringRef120 = alloca %StringRef
  %tmp.StringRef126 = alloca %StringRef
  %tmp.StringRef132 = alloca %StringRef
  %tmp.StringRef138 = alloca %StringRef
  %tmp.StringRef144 = alloca %StringRef
  %tmp.StringRef150 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  store i1 false, i1* %allowSymbolChars
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 2
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %4 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3)
  call void @"+=.450"(%String* %2, i8 %4)
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  store i1 true, i1* %firstDot
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %7 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %6)
  br i1 %7, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %9 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %8)
  store i8 %9, i8* %ch
  br label %if_block

while_step:                                       ; preds = %if_end7
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10)
  br label %while_block

while_end:                                        ; preds = %if_then, %while_block
  %11 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %12 = getelementptr inbounds %Token, %Token* %11, i32 0, i32 2
  %13 = call %StringRef @asStringRef(%String* %12)
  call void @ctor.49(%StringRef* %data, %StringRef %13)
  br label %if_block16

if_block:                                         ; preds = %while_body
  %14 = load i8, i8* %ch
  %15 = call i1 @isAlpha(i8 %14)
  %16 = xor i1 true, %15
  br i1 %16, label %cond.true1, label %cond.false2

if_then:                                          ; preds = %cond.end
  br label %while_end

if_end:                                           ; preds = %dumy_block, %cond.end
  %17 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %18 = getelementptr inbounds %Token, %Token* %17, i32 0, i32 2
  %19 = load i8, i8* %ch
  call void @"+=.450"(%String* %18, i8 %19)
  br label %if_block5

cond.true:                                        ; preds = %cond.end3
  %20 = load i8, i8* %ch
  %21 = call i1 @isDigit(i8 %20)
  %22 = xor i1 true, %21
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %22, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res4, label %if_then, label %if_end

cond.true1:                                       ; preds = %if_block
  %23 = load i8, i8* %ch
  %24 = icmp ne i8 %23, 95
  br label %cond.end3

cond.false2:                                      ; preds = %if_block
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %24, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block5:                                        ; preds = %if_end
  %25 = load i8, i8* %ch
  %26 = icmp eq i8 %25, 95
  br i1 %26, label %cond.true8, label %cond.false9

if_then6:                                         ; preds = %cond.end10
  %27 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %27)
  br label %if_block12

if_end7:                                          ; preds = %if_end14, %cond.end10
  br label %while_step

cond.true8:                                       ; preds = %if_block5
  %28 = call i8 @peekChar(%SparrowScanner* %this)
  %29 = call i1 @isOpCharDot(i8 %28)
  br label %cond.end10

cond.false9:                                      ; preds = %if_block5
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond.res11 = phi i1 [ %29, %cond.true8 ], [ false, %cond.false9 ]
  br i1 %cond.res11, label %if_then6, label %if_end7

if_block12:                                       ; preds = %if_then6
  %30 = call i1 @parseOperator(%SparrowScanner* %this)
  br i1 %30, label %if_then13, label %if_end14

if_then13:                                        ; preds = %if_block12
  call void @ctor.393(%TokenType* %_result, i32 37)
  ret void

if_end14:                                         ; preds = %dumy_block15, %if_block12
  br label %if_end7

dumy_block15:                                     ; No predecessors!
  br label %if_end14

if_block16:                                       ; preds = %while_end
  %31 = load %StringRef, %StringRef* %data
  %32 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %33 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %34 = bitcast %UntypedPtr* %32 to i8**
  %35 = bitcast %UntypedPtr* %33 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.14, i32 0, i32 0), i8** %34
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.14, i32 0, i32 5), i8** %35
  %36 = load %StringRef, %StringRef* %tmp.StringRef
  %37 = call i1 @"=="(%StringRef %31, %StringRef %36)
  br i1 %37, label %if_then17, label %if_else

if_then17:                                        ; preds = %if_block16
  call void @ctor.393(%TokenType* %_result, i32 11)
  %38 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %38)
  ret void

if_else:                                          ; preds = %if_block16
  br label %if_block20

if_end18:                                         ; preds = %if_end23, %dumy_block19
  %39 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %39)
  ret void

dumy_block19:                                     ; No predecessors!
  br label %if_end18

if_block20:                                       ; preds = %if_else
  %40 = load %StringRef, %StringRef* %data
  %41 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef24, i32 0, i32 0
  %42 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef24, i32 0, i32 1
  %43 = bitcast %UntypedPtr* %41 to i8**
  %44 = bitcast %UntypedPtr* %42 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.15, i32 0, i32 0), i8** %43
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.15, i32 0, i32 5), i8** %44
  %45 = load %StringRef, %StringRef* %tmp.StringRef24
  %46 = call i1 @"=="(%StringRef %40, %StringRef %45)
  br i1 %46, label %if_then21, label %if_else22

if_then21:                                        ; preds = %if_block20
  call void @ctor.393(%TokenType* %_result, i32 12)
  %47 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %47)
  ret void

if_else22:                                        ; preds = %if_block20
  br label %if_block26

if_end23:                                         ; preds = %if_end29, %dumy_block25
  br label %if_end18

dumy_block25:                                     ; No predecessors!
  br label %if_end23

if_block26:                                       ; preds = %if_else22
  %48 = load %StringRef, %StringRef* %data
  %49 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef30, i32 0, i32 0
  %50 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef30, i32 0, i32 1
  %51 = bitcast %UntypedPtr* %49 to i8**
  %52 = bitcast %UntypedPtr* %50 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.16, i32 0, i32 0), i8** %51
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.16, i32 0, i32 7), i8** %52
  %53 = load %StringRef, %StringRef* %tmp.StringRef30
  %54 = call i1 @"=="(%StringRef %48, %StringRef %53)
  br i1 %54, label %if_then27, label %if_else28

if_then27:                                        ; preds = %if_block26
  call void @ctor.393(%TokenType* %_result, i32 4)
  %55 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %55)
  ret void

if_else28:                                        ; preds = %if_block26
  br label %if_block32

if_end29:                                         ; preds = %if_end35, %dumy_block31
  br label %if_end23

dumy_block31:                                     ; No predecessors!
  br label %if_end29

if_block32:                                       ; preds = %if_else28
  %56 = load %StringRef, %StringRef* %data
  %57 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef36, i32 0, i32 0
  %58 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef36, i32 0, i32 1
  %59 = bitcast %UntypedPtr* %57 to i8**
  %60 = bitcast %UntypedPtr* %58 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.17, i32 0, i32 0), i8** %59
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.17, i32 0, i32 8), i8** %60
  %61 = load %StringRef, %StringRef* %tmp.StringRef36
  %62 = call i1 @"=="(%StringRef %56, %StringRef %61)
  br i1 %62, label %if_then33, label %if_else34

if_then33:                                        ; preds = %if_block32
  call void @ctor.393(%TokenType* %_result, i32 13)
  %63 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %63)
  ret void

if_else34:                                        ; preds = %if_block32
  br label %if_block38

if_end35:                                         ; preds = %if_end41, %dumy_block37
  br label %if_end29

dumy_block37:                                     ; No predecessors!
  br label %if_end35

if_block38:                                       ; preds = %if_else34
  %64 = load %StringRef, %StringRef* %data
  %65 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef42, i32 0, i32 0
  %66 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef42, i32 0, i32 1
  %67 = bitcast %UntypedPtr* %65 to i8**
  %68 = bitcast %UntypedPtr* %66 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.18, i32 0, i32 0), i8** %67
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.18, i32 0, i32 8), i8** %68
  %69 = load %StringRef, %StringRef* %tmp.StringRef42
  %70 = call i1 @"=="(%StringRef %64, %StringRef %69)
  br i1 %70, label %if_then39, label %if_else40

if_then39:                                        ; preds = %if_block38
  call void @ctor.393(%TokenType* %_result, i32 5)
  %71 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %71)
  ret void

if_else40:                                        ; preds = %if_block38
  br label %if_block44

if_end41:                                         ; preds = %if_end47, %dumy_block43
  br label %if_end35

dumy_block43:                                     ; No predecessors!
  br label %if_end41

if_block44:                                       ; preds = %if_else40
  %72 = load %StringRef, %StringRef* %data
  %73 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef48, i32 0, i32 0
  %74 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef48, i32 0, i32 1
  %75 = bitcast %UntypedPtr* %73 to i8**
  %76 = bitcast %UntypedPtr* %74 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.19, i32 0, i32 0), i8** %75
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.19, i32 0, i32 3), i8** %76
  %77 = load %StringRef, %StringRef* %tmp.StringRef48
  %78 = call i1 @"=="(%StringRef %72, %StringRef %77)
  br i1 %78, label %if_then45, label %if_else46

if_then45:                                        ; preds = %if_block44
  call void @ctor.393(%TokenType* %_result, i32 6)
  %79 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %79)
  ret void

if_else46:                                        ; preds = %if_block44
  br label %if_block50

if_end47:                                         ; preds = %if_end53, %dumy_block49
  br label %if_end41

dumy_block49:                                     ; No predecessors!
  br label %if_end47

if_block50:                                       ; preds = %if_else46
  %80 = load %StringRef, %StringRef* %data
  %81 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef54, i32 0, i32 0
  %82 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef54, i32 0, i32 1
  %83 = bitcast %UntypedPtr* %81 to i8**
  %84 = bitcast %UntypedPtr* %82 to i8**
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.20, i32 0, i32 0), i8** %83
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.20, i32 0, i32 2), i8** %84
  %85 = load %StringRef, %StringRef* %tmp.StringRef54
  %86 = call i1 @"=="(%StringRef %80, %StringRef %85)
  br i1 %86, label %if_then51, label %if_else52

if_then51:                                        ; preds = %if_block50
  call void @ctor.393(%TokenType* %_result, i32 16)
  %87 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %87)
  ret void

if_else52:                                        ; preds = %if_block50
  br label %if_block56

if_end53:                                         ; preds = %if_end59, %dumy_block55
  br label %if_end47

dumy_block55:                                     ; No predecessors!
  br label %if_end53

if_block56:                                       ; preds = %if_else52
  %88 = load %StringRef, %StringRef* %data
  %89 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef60, i32 0, i32 0
  %90 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef60, i32 0, i32 1
  %91 = bitcast %UntypedPtr* %89 to i8**
  %92 = bitcast %UntypedPtr* %90 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.21, i32 0, i32 0), i8** %91
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.21, i32 0, i32 4), i8** %92
  %93 = load %StringRef, %StringRef* %tmp.StringRef60
  %94 = call i1 @"=="(%StringRef %88, %StringRef %93)
  br i1 %94, label %if_then57, label %if_else58

if_then57:                                        ; preds = %if_block56
  call void @ctor.393(%TokenType* %_result, i32 24)
  %95 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %95)
  ret void

if_else58:                                        ; preds = %if_block56
  br label %if_block62

if_end59:                                         ; preds = %if_end65, %dumy_block61
  br label %if_end53

dumy_block61:                                     ; No predecessors!
  br label %if_end59

if_block62:                                       ; preds = %if_else58
  %96 = load %StringRef, %StringRef* %data
  %97 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef66, i32 0, i32 0
  %98 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef66, i32 0, i32 1
  %99 = bitcast %UntypedPtr* %97 to i8**
  %100 = bitcast %UntypedPtr* %98 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.22, i32 0, i32 0), i8** %99
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.22, i32 0, i32 5), i8** %100
  %101 = load %StringRef, %StringRef* %tmp.StringRef66
  %102 = call i1 @"=="(%StringRef %96, %StringRef %101)
  br i1 %102, label %if_then63, label %if_else64

if_then63:                                        ; preds = %if_block62
  call void @ctor.393(%TokenType* %_result, i32 21)
  %103 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %103)
  ret void

if_else64:                                        ; preds = %if_block62
  br label %if_block68

if_end65:                                         ; preds = %if_end71, %dumy_block67
  br label %if_end59

dumy_block67:                                     ; No predecessors!
  br label %if_end65

if_block68:                                       ; preds = %if_else64
  %104 = load %StringRef, %StringRef* %data
  %105 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef72, i32 0, i32 0
  %106 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef72, i32 0, i32 1
  %107 = bitcast %UntypedPtr* %105 to i8**
  %108 = bitcast %UntypedPtr* %106 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.23, i32 0, i32 0), i8** %107
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.23, i32 0, i32 7), i8** %108
  %109 = load %StringRef, %StringRef* %tmp.StringRef72
  %110 = call i1 @"=="(%StringRef %104, %StringRef %109)
  br i1 %110, label %if_then69, label %if_else70

if_then69:                                        ; preds = %if_block68
  call void @ctor.393(%TokenType* %_result, i32 14)
  %111 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %111)
  ret void

if_else70:                                        ; preds = %if_block68
  br label %if_block74

if_end71:                                         ; preds = %if_end77, %dumy_block73
  br label %if_end65

dumy_block73:                                     ; No predecessors!
  br label %if_end71

if_block74:                                       ; preds = %if_else70
  %112 = load %StringRef, %StringRef* %data
  %113 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef78, i32 0, i32 0
  %114 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef78, i32 0, i32 1
  %115 = bitcast %UntypedPtr* %113 to i8**
  %116 = bitcast %UntypedPtr* %114 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.24, i32 0, i32 0), i8** %115
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.24, i32 0, i32 3), i8** %116
  %117 = load %StringRef, %StringRef* %tmp.StringRef78
  %118 = call i1 @"=="(%StringRef %112, %StringRef %117)
  br i1 %118, label %if_then75, label %if_else76

if_then75:                                        ; preds = %if_block74
  call void @ctor.393(%TokenType* %_result, i32 15)
  %119 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %119)
  ret void

if_else76:                                        ; preds = %if_block74
  br label %if_block80

if_end77:                                         ; preds = %if_end83, %dumy_block79
  br label %if_end71

dumy_block79:                                     ; No predecessors!
  br label %if_end77

if_block80:                                       ; preds = %if_else76
  %120 = load %StringRef, %StringRef* %data
  %121 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef84, i32 0, i32 0
  %122 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef84, i32 0, i32 1
  %123 = bitcast %UntypedPtr* %121 to i8**
  %124 = bitcast %UntypedPtr* %122 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.25, i32 0, i32 0), i8** %123
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.25, i32 0, i32 6), i8** %124
  %125 = load %StringRef, %StringRef* %tmp.StringRef84
  %126 = call i1 @"=="(%StringRef %120, %StringRef %125)
  br i1 %126, label %if_then81, label %if_else82

if_then81:                                        ; preds = %if_block80
  call void @ctor.393(%TokenType* %_result, i32 3)
  %127 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %127)
  ret void

if_else82:                                        ; preds = %if_block80
  br label %if_block86

if_end83:                                         ; preds = %if_end89, %dumy_block85
  br label %if_end77

dumy_block85:                                     ; No predecessors!
  br label %if_end83

if_block86:                                       ; preds = %if_else82
  %128 = load %StringRef, %StringRef* %data
  %129 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef90, i32 0, i32 0
  %130 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef90, i32 0, i32 1
  %131 = bitcast %UntypedPtr* %129 to i8**
  %132 = bitcast %UntypedPtr* %130 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.26, i32 0, i32 0), i8** %131
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.26, i32 0, i32 3), i8** %132
  %133 = load %StringRef, %StringRef* %tmp.StringRef90
  %134 = call i1 @"=="(%StringRef %128, %StringRef %133)
  br i1 %134, label %if_then87, label %if_else88

if_then87:                                        ; preds = %if_block86
  call void @ctor.393(%TokenType* %_result, i32 7)
  %135 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %135)
  ret void

if_else88:                                        ; preds = %if_block86
  br label %if_block92

if_end89:                                         ; preds = %if_end95, %dumy_block91
  br label %if_end83

dumy_block91:                                     ; No predecessors!
  br label %if_end89

if_block92:                                       ; preds = %if_else88
  %136 = load %StringRef, %StringRef* %data
  %137 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef96, i32 0, i32 0
  %138 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef96, i32 0, i32 1
  %139 = bitcast %UntypedPtr* %137 to i8**
  %140 = bitcast %UntypedPtr* %138 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.27, i32 0, i32 0), i8** %139
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.27, i32 0, i32 6), i8** %140
  %141 = load %StringRef, %StringRef* %tmp.StringRef96
  %142 = call i1 @"=="(%StringRef %136, %StringRef %141)
  br i1 %142, label %if_then93, label %if_else94

if_then93:                                        ; preds = %if_block92
  call void @ctor.393(%TokenType* %_result, i32 2)
  %143 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %143)
  ret void

if_else94:                                        ; preds = %if_block92
  br label %if_block98

if_end95:                                         ; preds = %if_end101, %dumy_block97
  br label %if_end89

dumy_block97:                                     ; No predecessors!
  br label %if_end95

if_block98:                                       ; preds = %if_else94
  %144 = load %StringRef, %StringRef* %data
  %145 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef102, i32 0, i32 0
  %146 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef102, i32 0, i32 1
  %147 = bitcast %UntypedPtr* %145 to i8**
  %148 = bitcast %UntypedPtr* %146 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.28, i32 0, i32 0), i8** %147
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.28, i32 0, i32 4), i8** %148
  %149 = load %StringRef, %StringRef* %tmp.StringRef102
  %150 = call i1 @"=="(%StringRef %144, %StringRef %149)
  br i1 %150, label %if_then99, label %if_else100

if_then99:                                        ; preds = %if_block98
  call void @ctor.393(%TokenType* %_result, i32 22)
  %151 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %151)
  ret void

if_else100:                                       ; preds = %if_block98
  br label %if_block104

if_end101:                                        ; preds = %if_end107, %dumy_block103
  br label %if_end95

dumy_block103:                                    ; No predecessors!
  br label %if_end101

if_block104:                                      ; preds = %if_else100
  %152 = load %StringRef, %StringRef* %data
  %153 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef108, i32 0, i32 0
  %154 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef108, i32 0, i32 1
  %155 = bitcast %UntypedPtr* %153 to i8**
  %156 = bitcast %UntypedPtr* %154 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.29, i32 0, i32 0), i8** %155
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.29, i32 0, i32 7), i8** %156
  %157 = load %StringRef, %StringRef* %tmp.StringRef108
  %158 = call i1 @"=="(%StringRef %152, %StringRef %157)
  br i1 %158, label %if_then105, label %if_else106

if_then105:                                       ; preds = %if_block104
  call void @ctor.393(%TokenType* %_result, i32 8)
  %159 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %159)
  ret void

if_else106:                                       ; preds = %if_block104
  br label %if_block110

if_end107:                                        ; preds = %if_end113, %dumy_block109
  br label %if_end101

dumy_block109:                                    ; No predecessors!
  br label %if_end107

if_block110:                                      ; preds = %if_else106
  %160 = load %StringRef, %StringRef* %data
  %161 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef114, i32 0, i32 0
  %162 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef114, i32 0, i32 1
  %163 = bitcast %UntypedPtr* %161 to i8**
  %164 = bitcast %UntypedPtr* %162 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.30, i32 0, i32 0), i8** %163
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.30, i32 0, i32 6), i8** %164
  %165 = load %StringRef, %StringRef* %tmp.StringRef114
  %166 = call i1 @"=="(%StringRef %160, %StringRef %165)
  br i1 %166, label %if_then111, label %if_else112

if_then111:                                       ; preds = %if_block110
  call void @ctor.393(%TokenType* %_result, i32 17)
  %167 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %167)
  ret void

if_else112:                                       ; preds = %if_block110
  br label %if_block116

if_end113:                                        ; preds = %if_end119, %dumy_block115
  br label %if_end107

dumy_block115:                                    ; No predecessors!
  br label %if_end113

if_block116:                                      ; preds = %if_else112
  %168 = load %StringRef, %StringRef* %data
  %169 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef120, i32 0, i32 0
  %170 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef120, i32 0, i32 1
  %171 = bitcast %UntypedPtr* %169 to i8**
  %172 = bitcast %UntypedPtr* %170 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.31, i32 0, i32 0), i8** %171
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.31, i32 0, i32 5), i8** %172
  %173 = load %StringRef, %StringRef* %tmp.StringRef120
  %174 = call i1 @"=="(%StringRef %168, %StringRef %173)
  br i1 %174, label %if_then117, label %if_else118

if_then117:                                       ; preds = %if_block116
  call void @ctor.393(%TokenType* %_result, i32 18)
  %175 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %175)
  ret void

if_else118:                                       ; preds = %if_block116
  br label %if_block122

if_end119:                                        ; preds = %if_end125, %dumy_block121
  br label %if_end113

dumy_block121:                                    ; No predecessors!
  br label %if_end119

if_block122:                                      ; preds = %if_else118
  %176 = load %StringRef, %StringRef* %data
  %177 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef126, i32 0, i32 0
  %178 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef126, i32 0, i32 1
  %179 = bitcast %UntypedPtr* %177 to i8**
  %180 = bitcast %UntypedPtr* %178 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.32, i32 0, i32 0), i8** %179
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.32, i32 0, i32 4), i8** %180
  %181 = load %StringRef, %StringRef* %tmp.StringRef126
  %182 = call i1 @"=="(%StringRef %176, %StringRef %181)
  br i1 %182, label %if_then123, label %if_else124

if_then123:                                       ; preds = %if_block122
  call void @ctor.393(%TokenType* %_result, i32 23)
  %183 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %183)
  ret void

if_else124:                                       ; preds = %if_block122
  br label %if_block128

if_end125:                                        ; preds = %if_end131, %dumy_block127
  br label %if_end119

dumy_block127:                                    ; No predecessors!
  br label %if_end125

if_block128:                                      ; preds = %if_else124
  %184 = load %StringRef, %StringRef* %data
  %185 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef132, i32 0, i32 0
  %186 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef132, i32 0, i32 1
  %187 = bitcast %UntypedPtr* %185 to i8**
  %188 = bitcast %UntypedPtr* %186 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.33, i32 0, i32 0), i8** %187
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.33, i32 0, i32 3), i8** %188
  %189 = load %StringRef, %StringRef* %tmp.StringRef132
  %190 = call i1 @"=="(%StringRef %184, %StringRef %189)
  br i1 %190, label %if_then129, label %if_else130

if_then129:                                       ; preds = %if_block128
  call void @ctor.393(%TokenType* %_result, i32 19)
  %191 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %191)
  ret void

if_else130:                                       ; preds = %if_block128
  br label %if_block134

if_end131:                                        ; preds = %if_end137, %dumy_block133
  br label %if_end125

dumy_block133:                                    ; No predecessors!
  br label %if_end131

if_block134:                                      ; preds = %if_else130
  %192 = load %StringRef, %StringRef* %data
  %193 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef138, i32 0, i32 0
  %194 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef138, i32 0, i32 1
  %195 = bitcast %UntypedPtr* %193 to i8**
  %196 = bitcast %UntypedPtr* %194 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.34, i32 0, i32 0), i8** %195
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.34, i32 0, i32 5), i8** %196
  %197 = load %StringRef, %StringRef* %tmp.StringRef138
  %198 = call i1 @"=="(%StringRef %192, %StringRef %197)
  br i1 %198, label %if_then135, label %if_else136

if_then135:                                       ; preds = %if_block134
  call void @ctor.393(%TokenType* %_result, i32 9)
  %199 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %199)
  ret void

if_else136:                                       ; preds = %if_block134
  br label %if_block140

if_end137:                                        ; preds = %if_end143, %dumy_block139
  br label %if_end131

dumy_block139:                                    ; No predecessors!
  br label %if_end137

if_block140:                                      ; preds = %if_else136
  %200 = load %StringRef, %StringRef* %data
  %201 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef144, i32 0, i32 0
  %202 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef144, i32 0, i32 1
  %203 = bitcast %UntypedPtr* %201 to i8**
  %204 = bitcast %UntypedPtr* %202 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.35, i32 0, i32 0), i8** %203
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.35, i32 0, i32 3), i8** %204
  %205 = load %StringRef, %StringRef* %tmp.StringRef144
  %206 = call i1 @"=="(%StringRef %200, %StringRef %205)
  br i1 %206, label %if_then141, label %if_else142

if_then141:                                       ; preds = %if_block140
  call void @ctor.393(%TokenType* %_result, i32 10)
  %207 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %207)
  ret void

if_else142:                                       ; preds = %if_block140
  br label %if_block146

if_end143:                                        ; preds = %if_end149, %dumy_block145
  br label %if_end137

dumy_block145:                                    ; No predecessors!
  br label %if_end143

if_block146:                                      ; preds = %if_else142
  %208 = load %StringRef, %StringRef* %data
  %209 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef150, i32 0, i32 0
  %210 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef150, i32 0, i32 1
  %211 = bitcast %UntypedPtr* %209 to i8**
  %212 = bitcast %UntypedPtr* %210 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.36, i32 0, i32 0), i8** %211
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.36, i32 0, i32 5), i8** %212
  %213 = load %StringRef, %StringRef* %tmp.StringRef150
  %214 = call i1 @"=="(%StringRef %208, %StringRef %213)
  br i1 %214, label %if_then147, label %if_else148

if_then147:                                       ; preds = %if_block146
  call void @ctor.393(%TokenType* %_result, i32 20)
  %215 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %215)
  ret void

if_else148:                                       ; preds = %if_block146
  call void @ctor.393(%TokenType* %_result, i32 37)
  %216 = load %StringRef, %StringRef* %data
  call void @dtor.51(%StringRef %216)
  ret void

if_end149:                                        ; preds = %dumy_block152, %dumy_block151
  br label %if_end143

dumy_block151:                                    ; No predecessors!
  br label %if_end149

dumy_block152:                                    ; No predecessors!
  br label %if_end149
}

; Function Attrs: noinline nounwind
define void @parseNumeric(%TokenType* sret %_result, %SparrowScanner* %this) #5 {
  %isLong = alloca i1
  %isUnsigned = alloca i1
  %isFloating = alloca i1
  %type = alloca i32
  %ch = alloca i8
  %ch2 = alloca i8
  %ch3 = alloca i8
  %"$tmpForRef" = alloca %"FunctionPtr1[Bool, Char]"
  %funptr = alloca i1 (i8)*
  %"$tmpForRef55" = alloca %"FunctionPtr1[Bool, Char]"
  %funptr56 = alloca i1 (i8)*
  %tmp.this = alloca %String
  %tmp.StringRef = alloca %StringRef
  %tmp.this90 = alloca i8
  %"$tmpForRef91" = alloca %TokenType
  %tmp.this92 = alloca %TokenType
  %tmp.this93 = alloca %TokenType
  %"$tmpForRef102" = alloca %TokenType
  %tmp.this106 = alloca %TokenType
  %tmp.this107 = alloca %TokenType
  %"$tmpForRef116" = alloca %TokenType
  %tmp.this120 = alloca %TokenType
  %tmp.this121 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  store i1 false, i1* %isLong
  store i1 false, i1* %isUnsigned
  store i1 false, i1* %isFloating
  store i32 0, i32* %type
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  store i8 %2, i8* %ch
  %3 = call i8 @peekChar(%SparrowScanner* %this)
  %4 = call i8 @toLower(i8 %3)
  store i8 %4, i8* %ch2
  %5 = call i8 @peekChar.453(%SparrowScanner* %this, i32 2)
  %6 = call i8 @toLower(i8 %5)
  store i8 %6, i8* %ch3
  br label %if_block

if_block:                                         ; preds = %code
  %7 = load i8, i8* %ch
  %8 = icmp eq i8 %7, 48
  br i1 %8, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %9 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advance.446(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %9, i32 2)
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %11 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %12 = getelementptr inbounds %Token, %Token* %11, i32 0, i32 2
  %13 = call i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10, i32 16, %String* %12)
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %15 = getelementptr inbounds %Token, %Token* %14, i32 0, i32 3
  store i64 %13, i64* %15
  br label %if_end

if_else:                                          ; preds = %cond.end
  br label %if_block1

if_end:                                           ; preds = %if_end4, %if_then
  br label %if_block67

cond.true:                                        ; preds = %if_block
  %16 = load i8, i8* %ch2
  %17 = icmp eq i8 %16, 120
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %17, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_else

if_block1:                                        ; preds = %if_else
  %18 = load i8, i8* %ch
  %19 = icmp eq i8 %18, 48
  br i1 %19, label %cond.true5, label %cond.false6

if_then2:                                         ; preds = %cond.end7
  %20 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advance.446(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %20, i32 2)
  %21 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %22 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %23 = getelementptr inbounds %Token, %Token* %22, i32 0, i32 2
  %24 = call i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %21, i32 2, %String* %23)
  %25 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %26 = getelementptr inbounds %Token, %Token* %25, i32 0, i32 3
  store i64 %24, i64* %26
  br label %if_end4

if_else3:                                         ; preds = %cond.end7
  br label %if_block9

if_end4:                                          ; preds = %if_end12, %if_then2
  br label %if_end

cond.true5:                                       ; preds = %if_block1
  %27 = load i8, i8* %ch2
  %28 = icmp eq i8 %27, 98
  br label %cond.end7

cond.false6:                                      ; preds = %if_block1
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond.res8 = phi i1 [ %28, %cond.true5 ], [ false, %cond.false6 ]
  br i1 %cond.res8, label %if_then2, label %if_else3

if_block9:                                        ; preds = %if_else3
  %29 = load i8, i8* %ch
  %30 = icmp eq i8 %29, 48
  br i1 %30, label %cond.true13, label %cond.false14

if_then10:                                        ; preds = %cond.end15
  %31 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @advance.446(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %31, i32 2)
  %32 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %33 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %34 = getelementptr inbounds %Token, %Token* %33, i32 0, i32 2
  %35 = call i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %32, i32 8, %String* %34)
  %36 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %37 = getelementptr inbounds %Token, %Token* %36, i32 0, i32 3
  store i64 %35, i64* %37
  br label %if_end12

if_else11:                                        ; preds = %cond.end15
  %38 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %39 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %40 = getelementptr inbounds %Token, %Token* %39, i32 0, i32 2
  %41 = call i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %38, i32 10, %String* %40)
  %42 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %43 = getelementptr inbounds %Token, %Token* %42, i32 0, i32 3
  store i64 %41, i64* %43
  br label %if_block17

if_end12:                                         ; preds = %if_end19, %if_then10
  br label %if_end4

cond.true13:                                      ; preds = %if_block9
  %44 = load i8, i8* %ch2
  %45 = icmp eq i8 %44, 111
  br label %cond.end15

cond.false14:                                     ; preds = %if_block9
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res16 = phi i1 [ %45, %cond.true13 ], [ false, %cond.false14 ]
  br i1 %cond.res16, label %if_then10, label %if_else11

if_block17:                                       ; preds = %if_else11
  %46 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %47 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %46)
  br i1 %47, label %if_then18, label %if_end19

if_then18:                                        ; preds = %if_block17
  %48 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %49 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %48)
  %50 = call i8 @toLower(i8 %49)
  store i8 %50, i8* %ch
  br label %if_block20

if_end19:                                         ; preds = %if_end22, %if_block17
  br label %if_end12

if_block20:                                       ; preds = %if_then18
  %51 = load i8, i8* %ch
  %52 = icmp eq i8 %51, 46
  br i1 %52, label %cond.true32, label %cond.false33

if_then21:                                        ; preds = %cond.end25
  store i1 true, i1* %isFloating
  br label %if_block39

if_end22:                                         ; preds = %if_end59, %cond.end25
  br label %if_end19

cond.true23:                                      ; preds = %cond.end28
  br label %cond.end25

cond.false24:                                     ; preds = %cond.end28
  %53 = load i8, i8* %ch
  %54 = icmp eq i8 %53, 100
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond.res38 = phi i1 [ true, %cond.true23 ], [ %54, %cond.false24 ]
  br i1 %cond.res38, label %if_then21, label %if_end22

cond.true26:                                      ; preds = %cond.end31
  br label %cond.end28

cond.false27:                                     ; preds = %cond.end31
  %55 = load i8, i8* %ch
  %56 = icmp eq i8 %55, 102
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond.res37 = phi i1 [ true, %cond.true26 ], [ %56, %cond.false27 ]
  br i1 %cond.res37, label %cond.true23, label %cond.false24

cond.true29:                                      ; preds = %cond.end34
  br label %cond.end31

cond.false30:                                     ; preds = %cond.end34
  %57 = load i8, i8* %ch
  %58 = icmp eq i8 %57, 101
  br label %cond.end31

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond.res36 = phi i1 [ true, %cond.true29 ], [ %58, %cond.false30 ]
  br i1 %cond.res36, label %cond.true26, label %cond.false27

cond.true32:                                      ; preds = %if_block20
  %59 = call i8 @peekChar(%SparrowScanner* %this)
  %60 = call i1 @isOpCharDot(i8 %59)
  %61 = xor i1 true, %60
  br label %cond.end34

cond.false33:                                     ; preds = %if_block20
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond.res35 = phi i1 [ %61, %cond.true32 ], [ false, %cond.false33 ]
  br i1 %cond.res35, label %cond.true29, label %cond.false30

if_block39:                                       ; preds = %if_then21
  %62 = load i8, i8* %ch
  %63 = icmp eq i8 %62, 46
  br i1 %63, label %if_then40, label %if_end41

if_then40:                                        ; preds = %if_block39
  call void @advanceAndCapture1(%SparrowScanner* %this)
  store i1 (i8)* @isDigit, i1 (i8)** %funptr
  %64 = bitcast i1 (i8)** %funptr to %"FunctionPtr1[Bool, Char]"*
  %65 = load %"FunctionPtr1[Bool, Char]", %"FunctionPtr1[Bool, Char]"* %64
  store %"FunctionPtr1[Bool, Char]" %65, %"FunctionPtr1[Bool, Char]"* %"$tmpForRef"
  call void @advanceAndCaptureDigit(%SparrowScanner* %this, %"FunctionPtr1[Bool, Char]"* %"$tmpForRef")
  br label %if_end41

if_end41:                                         ; preds = %if_then40, %if_block39
  br label %if_block42

if_block42:                                       ; preds = %if_end41
  %66 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %67 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %66)
  br i1 %67, label %if_then43, label %if_end44

if_then43:                                        ; preds = %if_block42
  %68 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %69 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %68)
  %70 = call i8 @toLower(i8 %69)
  store i8 %70, i8* %ch
  br label %if_block45

if_end44:                                         ; preds = %if_end47, %if_block42
  br label %if_block57

if_block45:                                       ; preds = %if_then43
  %71 = load i8, i8* %ch
  %72 = icmp eq i8 %71, 101
  br i1 %72, label %if_then46, label %if_end47

if_then46:                                        ; preds = %if_block45
  call void @advanceAndCapture1(%SparrowScanner* %this)
  %73 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %74 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %73)
  store i8 %74, i8* %ch
  br label %if_block48

if_end47:                                         ; preds = %if_end50, %if_block45
  br label %if_end44

if_block48:                                       ; preds = %if_then46
  %75 = load i8, i8* %ch
  %76 = icmp eq i8 %75, 43
  br i1 %76, label %cond.true51, label %cond.false52

if_then49:                                        ; preds = %cond.end53
  call void @advanceAndCapture1(%SparrowScanner* %this)
  br label %if_end50

if_end50:                                         ; preds = %if_then49, %cond.end53
  store i1 (i8)* @isDigit, i1 (i8)** %funptr56
  %77 = bitcast i1 (i8)** %funptr56 to %"FunctionPtr1[Bool, Char]"*
  %78 = load %"FunctionPtr1[Bool, Char]", %"FunctionPtr1[Bool, Char]"* %77
  store %"FunctionPtr1[Bool, Char]" %78, %"FunctionPtr1[Bool, Char]"* %"$tmpForRef55"
  call void @advanceAndCaptureDigit(%SparrowScanner* %this, %"FunctionPtr1[Bool, Char]"* %"$tmpForRef55")
  br label %if_end47

cond.true51:                                      ; preds = %if_block48
  br label %cond.end53

cond.false52:                                     ; preds = %if_block48
  %79 = load i8, i8* %ch
  %80 = icmp eq i8 %79, 45
  br label %cond.end53

cond.end53:                                       ; preds = %cond.false52, %cond.true51
  %cond.res54 = phi i1 [ true, %cond.true51 ], [ %80, %cond.false52 ]
  br i1 %cond.res54, label %if_then49, label %if_end50

if_block57:                                       ; preds = %if_end44
  %81 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %82 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %81)
  br i1 %82, label %if_then58, label %if_end59

if_then58:                                        ; preds = %if_block57
  store i1 true, i1* %isLong
  %83 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %84 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %83)
  %85 = call i8 @toLower(i8 %84)
  store i8 %85, i8* %ch
  br label %if_block60

if_end59:                                         ; preds = %if_end63, %if_block57
  br label %if_end22

if_block60:                                       ; preds = %if_then58
  %86 = load i8, i8* %ch
  %87 = icmp eq i8 %86, 102
  br i1 %87, label %if_then61, label %if_else62

if_then61:                                        ; preds = %if_block60
  store i1 false, i1* %isLong
  %88 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %88)
  br label %if_end63

if_else62:                                        ; preds = %if_block60
  br label %if_block64

if_end63:                                         ; preds = %if_end66, %if_then61
  br label %if_end59

if_block64:                                       ; preds = %if_else62
  %89 = load i8, i8* %ch
  %90 = icmp eq i8 %89, 100
  br i1 %90, label %if_then65, label %if_end66

if_then65:                                        ; preds = %if_block64
  %91 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %91)
  br label %if_end66

if_end66:                                         ; preds = %if_then65, %if_block64
  br label %if_end63

if_block67:                                       ; preds = %if_end
  %92 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %93 = getelementptr inbounds %Token, %Token* %92, i32 0, i32 2
  %94 = call i1 @isEmpty.373(%String* %93)
  br i1 %94, label %if_then68, label %if_end69

if_then68:                                        ; preds = %if_block67
  %95 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %96 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %97 = bitcast %UntypedPtr* %95 to i8**
  %98 = bitcast %UntypedPtr* %96 to i8**
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str.37, i32 0, i32 0), i8** %97
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str.37, i32 0, i32 23), i8** %98
  %99 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.448(%String* %tmp.this, %StringRef %99)
  call void @reportError(%SparrowScanner* %this, %String* %tmp.this)
  call void @dtor.239(%String* %tmp.this)
  call void @ctor.393(%TokenType* %_result, i32 0)
  ret void

if_end69:                                         ; preds = %dumy_block, %if_block67
  br label %if_block70

dumy_block:                                       ; No predecessors!
  br label %if_end69

if_block70:                                       ; preds = %if_end69
  %100 = load i1, i1* %isFloating
  %101 = xor i1 true, %100
  br i1 %101, label %if_then71, label %if_end72

if_then71:                                        ; preds = %if_block70
  br label %if_block73

if_end72:                                         ; preds = %if_end82, %if_block70
  br label %if_block87

if_block73:                                       ; preds = %if_then71
  %102 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %103 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %102)
  br i1 %103, label %cond.true76, label %cond.false77

if_then74:                                        ; preds = %cond.end78
  store i1 true, i1* %isUnsigned
  %104 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %104)
  br label %if_end75

if_end75:                                         ; preds = %if_then74, %cond.end78
  br label %if_block80

cond.true76:                                      ; preds = %if_block73
  %105 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %106 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %105)
  %107 = call i8 @toLower(i8 %106)
  %108 = icmp eq i8 %107, 117
  br label %cond.end78

cond.false77:                                     ; preds = %if_block73
  br label %cond.end78

cond.end78:                                       ; preds = %cond.false77, %cond.true76
  %cond.res79 = phi i1 [ %108, %cond.true76 ], [ false, %cond.false77 ]
  br i1 %cond.res79, label %if_then74, label %if_end75

if_block80:                                       ; preds = %if_end75
  %109 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %110 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %109)
  br i1 %110, label %cond.true83, label %cond.false84

if_then81:                                        ; preds = %cond.end85
  store i1 true, i1* %isLong
  %111 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %111)
  br label %if_end82

if_end82:                                         ; preds = %if_then81, %cond.end85
  br label %if_end72

cond.true83:                                      ; preds = %if_block80
  %112 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %113 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %112)
  %114 = call i8 @toLower(i8 %113)
  %115 = icmp eq i8 %114, 108
  br label %cond.end85

cond.false84:                                     ; preds = %if_block80
  br label %cond.end85

cond.end85:                                       ; preds = %cond.false84, %cond.true83
  %cond.res86 = phi i1 [ %115, %cond.true83 ], [ false, %cond.false84 ]
  br i1 %cond.res86, label %if_then81, label %if_end82

if_block87:                                       ; preds = %if_end72
  %116 = load i1, i1* %isFloating
  br i1 %116, label %if_then88, label %if_end89

if_then88:                                        ; preds = %if_block87
  %117 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %118 = getelementptr inbounds %Token, %Token* %117, i32 0, i32 2
  store i8 0, i8* %tmp.this90
  %119 = load i8, i8* %tmp.this90
  call void @"+=.450"(%String* %118, i8 %119)
  %120 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %121 = getelementptr inbounds %Token, %Token* %120, i32 0, i32 2
  %122 = call %StringRef @asStringRef(%String* %121)
  %123 = call double @asFloat(%StringRef %122)
  %124 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %125 = getelementptr inbounds %Token, %Token* %124, i32 0, i32 4
  store double %123, double* %125
  %126 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %127 = getelementptr inbounds %Token, %Token* %126, i32 0, i32 2
  call void @popBack.454(%String* %127)
  %128 = load i1, i1* %isLong
  br i1 %128, label %cond_alt1, label %cond_alt2

if_end89:                                         ; preds = %cond_destruct_end96, %if_block87
  br label %if_block98

cond_alt1:                                        ; preds = %if_then88
  call void @ctor.393(%TokenType* %tmp.this92, i32 46)
  %129 = load %TokenType, %TokenType* %tmp.this92
  br label %cond_end

cond_alt2:                                        ; preds = %if_then88
  call void @ctor.393(%TokenType* %tmp.this93, i32 45)
  %130 = load %TokenType, %TokenType* %tmp.this93
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi %TokenType [ %129, %cond_alt1 ], [ %130, %cond_alt2 ]
  store %TokenType %cond, %TokenType* %"$tmpForRef91"
  call void @ctor.178(%TokenType* %_result, %TokenType* %"$tmpForRef91")
  br i1 %128, label %cond_destruct_alt1, label %cond_destruct_alt2

cond_destruct_alt1:                               ; preds = %cond_end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %cond_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void

cond_destruct_alt194:                             ; preds = %dumy_block97
  br label %cond_destruct_end96

cond_destruct_alt295:                             ; preds = %dumy_block97
  br label %cond_destruct_end96

cond_destruct_end96:                              ; preds = %cond_destruct_alt295, %cond_destruct_alt194
  br label %if_end89

dumy_block97:                                     ; No predecessors!
  br i1 %128, label %cond_destruct_alt194, label %cond_destruct_alt295

if_block98:                                       ; preds = %if_end89
  %131 = load i1, i1* %isUnsigned
  br i1 %131, label %if_then99, label %if_else100

if_then99:                                        ; preds = %if_block98
  %132 = load i1, i1* %isLong
  br i1 %132, label %cond_alt1103, label %cond_alt2104

if_else100:                                       ; preds = %if_block98
  %133 = load i1, i1* %isLong
  br i1 %133, label %cond_alt1117, label %cond_alt2118

if_end101:                                        ; preds = %cond_destruct_end128, %cond_destruct_end114
  ret void

cond_alt1103:                                     ; preds = %if_then99
  call void @ctor.393(%TokenType* %tmp.this106, i32 44)
  %134 = load %TokenType, %TokenType* %tmp.this106
  br label %cond_end105

cond_alt2104:                                     ; preds = %if_then99
  call void @ctor.393(%TokenType* %tmp.this107, i32 43)
  %135 = load %TokenType, %TokenType* %tmp.this107
  br label %cond_end105

cond_end105:                                      ; preds = %cond_alt2104, %cond_alt1103
  %cond108 = phi %TokenType [ %134, %cond_alt1103 ], [ %135, %cond_alt2104 ]
  store %TokenType %cond108, %TokenType* %"$tmpForRef102"
  call void @ctor.178(%TokenType* %_result, %TokenType* %"$tmpForRef102")
  br i1 %132, label %cond_destruct_alt1109, label %cond_destruct_alt2110

cond_destruct_alt1109:                            ; preds = %cond_end105
  br label %cond_destruct_end111

cond_destruct_alt2110:                            ; preds = %cond_end105
  br label %cond_destruct_end111

cond_destruct_end111:                             ; preds = %cond_destruct_alt2110, %cond_destruct_alt1109
  ret void

cond_destruct_alt1112:                            ; preds = %dumy_block115
  br label %cond_destruct_end114

cond_destruct_alt2113:                            ; preds = %dumy_block115
  br label %cond_destruct_end114

cond_destruct_end114:                             ; preds = %cond_destruct_alt2113, %cond_destruct_alt1112
  br label %if_end101

dumy_block115:                                    ; No predecessors!
  br i1 %132, label %cond_destruct_alt1112, label %cond_destruct_alt2113

cond_alt1117:                                     ; preds = %if_else100
  call void @ctor.393(%TokenType* %tmp.this120, i32 42)
  %136 = load %TokenType, %TokenType* %tmp.this120
  br label %cond_end119

cond_alt2118:                                     ; preds = %if_else100
  call void @ctor.393(%TokenType* %tmp.this121, i32 41)
  %137 = load %TokenType, %TokenType* %tmp.this121
  br label %cond_end119

cond_end119:                                      ; preds = %cond_alt2118, %cond_alt1117
  %cond122 = phi %TokenType [ %136, %cond_alt1117 ], [ %137, %cond_alt2118 ]
  store %TokenType %cond122, %TokenType* %"$tmpForRef116"
  call void @ctor.178(%TokenType* %_result, %TokenType* %"$tmpForRef116")
  br i1 %133, label %cond_destruct_alt1123, label %cond_destruct_alt2124

cond_destruct_alt1123:                            ; preds = %cond_end119
  br label %cond_destruct_end125

cond_destruct_alt2124:                            ; preds = %cond_end119
  br label %cond_destruct_end125

cond_destruct_end125:                             ; preds = %cond_destruct_alt2124, %cond_destruct_alt1123
  ret void

cond_destruct_alt1126:                            ; preds = %dumy_block129
  br label %cond_destruct_end128

cond_destruct_alt2127:                            ; preds = %dumy_block129
  br label %cond_destruct_end128

cond_destruct_end128:                             ; preds = %cond_destruct_alt2127, %cond_destruct_alt1126
  br label %if_end101

dumy_block129:                                    ; No predecessors!
  br i1 %133, label %cond_destruct_alt1126, label %cond_destruct_alt2127
}

; Function Attrs: inlinehint nounwind
define internal i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r, i32 %base, %String* %capture) #4 {
  %base.addr = alloca i32
  store i32 %base, i32* %base.addr
  %res = alloca i64
  %tmp.this = alloca i64
  %tmp.this8 = alloca i64
  %tmp.this24 = alloca i64
  %tmp.this25 = alloca i64
  br label %code

code:                                             ; preds = %0
  store i64 0, i64* %res
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load i32, i32* %base.addr
  %2 = call i1 @_Int32_opEQ(i32 %1, i32 16)
  br i1 %2, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  br label %while_block

if_else:                                          ; preds = %if_block
  br label %while_block9

if_end:                                           ; preds = %while_end12, %while_end
  %3 = load i64, i64* %res
  ret i64 %3

while_block:                                      ; preds = %while_step, %if_then
  %4 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  br i1 %4, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  br label %if_block5

while_step:                                       ; preds = %if_end7
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_end

cond.true:                                        ; preds = %while_block
  %5 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %6 = call i1 @isXdigit(i8 %5)
  br i1 %6, label %cond.true1, label %cond.false2

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.end3
  %cond.res4 = phi i1 [ %cond.res, %cond.end3 ], [ false, %cond.false ]
  br i1 %cond.res4, label %while_body, label %while_end

cond.true1:                                       ; preds = %cond.true
  br label %cond.end3

cond.false2:                                      ; preds = %cond.true
  %7 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %8 = icmp eq i8 %7, 95
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ true, %cond.true1 ], [ %8, %cond.false2 ]
  br label %cond.end

if_block5:                                        ; preds = %while_body
  %9 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %10 = icmp ne i8 %9, 95
  br i1 %10, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  %11 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  call void @"+=.450"(%String* %capture, i8 %11)
  %12 = load i64, i64* %res
  %13 = load i32, i32* %base.addr
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %tmp.this
  %15 = load i64, i64* %tmp.this
  %16 = call i64 @_UInt64_opMul(i64 %12, i64 %15)
  store i64 %16, i64* %res
  %17 = load i64, i64* %res
  %18 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %19 = call i32 @getXdigitVal(i8 %18)
  %20 = zext i32 %19 to i64
  store i64 %20, i64* %tmp.this8
  %21 = load i64, i64* %tmp.this8
  %22 = call i64 @_UInt64_opPlus(i64 %17, i64 %21)
  store i64 %22, i64* %res
  br label %if_end7

if_end7:                                          ; preds = %if_then6, %if_block5
  br label %while_step

while_block9:                                     ; preds = %while_step11, %if_else
  %23 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  br i1 %23, label %cond.true13, label %cond.false14

while_body10:                                     ; preds = %cond.end15
  br label %if_block21

while_step11:                                     ; preds = %if_end23
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  br label %while_block9

while_end12:                                      ; preds = %cond.end15
  br label %if_end

cond.true13:                                      ; preds = %while_block9
  %24 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %25 = call i1 @isXdigit(i8 %24)
  br i1 %25, label %cond.true16, label %cond.false17

cond.false14:                                     ; preds = %while_block9
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.end18
  %cond.res20 = phi i1 [ %cond.res19, %cond.end18 ], [ false, %cond.false14 ]
  br i1 %cond.res20, label %while_body10, label %while_end12

cond.true16:                                      ; preds = %cond.true13
  br label %cond.end18

cond.false17:                                     ; preds = %cond.true13
  %26 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %27 = icmp eq i8 %26, 95
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond.res19 = phi i1 [ true, %cond.true16 ], [ %27, %cond.false17 ]
  br label %cond.end15

if_block21:                                       ; preds = %while_body10
  %28 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %29 = icmp ne i8 %28, 95
  br i1 %29, label %if_then22, label %if_end23

if_then22:                                        ; preds = %if_block21
  %30 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  call void @"+=.450"(%String* %capture, i8 %30)
  %31 = load i64, i64* %res
  %32 = load i32, i32* %base.addr
  %33 = zext i32 %32 to i64
  store i64 %33, i64* %tmp.this24
  %34 = load i64, i64* %tmp.this24
  %35 = call i64 @_UInt64_opMul(i64 %31, i64 %34)
  store i64 %35, i64* %res
  %36 = load i64, i64* %res
  %37 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r)
  %38 = call i32 @getDigitVal(i8 %37)
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %tmp.this25
  %40 = load i64, i64* %tmp.this25
  %41 = call i64 @_UInt64_opPlus(i64 %36, i64 %40)
  store i64 %41, i64* %res
  br label %if_end23

if_end23:                                         ; preds = %if_then22, %if_block21
  br label %while_step11
}

; Function Attrs: inlinehint nounwind
define internal i1 @isXdigit(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isxdigit(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @isxdigit(i32)

; Function Attrs: inlinehint nounwind
define internal i32 @getDigitVal(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  %tmp.this1 = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  call void @_ass_32_8z(i32* %tmp.this1, i8 48)
  %3 = load i32, i32* %tmp.this1
  %4 = call i32 @_Int32_opMinus(i32 %2, i32 %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal void @advanceAndCaptureDigit(%SparrowScanner* %this, %"FunctionPtr1[Bool, Char]"* %pred) #4 {
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %2 = call i1 @"pre_!!.418"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  br i1 %2, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  br label %if_block

while_step:                                       ; preds = %if_end
  %3 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  call void @popFront.399(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3)
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %5 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4)
  %6 = call i1 @"().452"(%"FunctionPtr1[Bool, Char]"* %pred, i8 %5)
  br i1 %6, label %cond.true1, label %cond.false2

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.end3
  %cond.res4 = phi i1 [ %cond.res, %cond.end3 ], [ false, %cond.false ]
  br i1 %cond.res4, label %while_body, label %while_end

cond.true1:                                       ; preds = %cond.true
  br label %cond.end3

cond.false2:                                      ; preds = %cond.true
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %8 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %7)
  %9 = icmp eq i8 %8, 95
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ true, %cond.true1 ], [ %9, %cond.false2 ]
  br label %cond.end

if_block:                                         ; preds = %while_body
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %11 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10)
  %12 = icmp ne i8 %11, 95
  br i1 %12, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %13 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 3
  %14 = getelementptr inbounds %Token, %Token* %13, i32 0, i32 2
  %15 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %this, i32 0, i32 2
  %16 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %15)
  call void @"+=.450"(%String* %14, i8 %16)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  br label %while_step
}

; Function Attrs: inlinehint nounwind
define internal void @popBack.454(%String* %this) #4 {
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %2 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %3 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %2, i32 -1)
  store %"RawPtr[Char]" %3, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %"$tmpForRef")
  %4 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %5 = call i8* @value(%"RawPtr[Char]"* %4)
  %6 = load i8, i8* %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @toString.455(%String* sret %_result, %StringRef* %a1, i8* %a2, %StringRef* %a3, i32* %a4, i8* %a5) #4 {
  %s = alloca %StringOutputStream
  %"$tmpC" = alloca %StringOutputStream
  %"$tmpC1" = alloca %StringOutputStream
  %"$tmpC2" = alloca %StringOutputStream
  %"$tmpC3" = alloca %StringOutputStream
  %"$tmpC4" = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.428(%StringOutputStream* %s)
  call void @"<<"(%StringOutputStream* %"$tmpC4", %StringOutputStream* %s, %StringRef* %a1)
  call void @"<<.456"(%StringOutputStream* %"$tmpC3", %StringOutputStream* %"$tmpC4", i8* %a2)
  call void @"<<"(%StringOutputStream* %"$tmpC2", %StringOutputStream* %"$tmpC3", %StringRef* %a3)
  call void @"<<.460"(%StringOutputStream* %"$tmpC1", %StringOutputStream* %"$tmpC2", i32* %a4)
  call void @"<<.456"(%StringOutputStream* %"$tmpC", %StringOutputStream* %"$tmpC1", i8* %a5)
  call void @dtor.431(%StringOutputStream* %"$tmpC")
  call void @dtor.431(%StringOutputStream* %"$tmpC1")
  call void @dtor.431(%StringOutputStream* %"$tmpC2")
  call void @dtor.431(%StringOutputStream* %"$tmpC3")
  call void @dtor.431(%StringOutputStream* %"$tmpC4")
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.165(%String* %_result, %String* %1)
  call void @dtor.431(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.431(%StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"<<.456"(%StringOutputStream* sret %_result, %StringOutputStream* %s, i8* %x) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %x
  call void @"<<<.457"(%StringOutputStream* %s, i8 %1)
  call void @ctor.430(%StringOutputStream* %_result, %StringOutputStream* %s)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.457"(%StringOutputStream* %this, i8 %x) #3 {
  %x.addr = alloca i8
  store i8 %x, i8* %x.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = load i8, i8* %x.addr
  call void @append.458(%String* %1, i8 %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @append.458(%String* %this, i8 %value) #4 {
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %value.addr
  %2 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %3 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %2)
  %4 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %5 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %4)
  call void @ctor.50(%StringRef* %tmp.this, %UntypedPtr %3, %UntypedPtr %5)
  %6 = load %StringRef, %StringRef* %tmp.this
  call void @insertBefore.459(%String* %this, i8 %1, %StringRef %6)
  %7 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %7)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @insertBefore.459(%String* %this, i8 %value, %StringRef %pos) #4 {
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  %pos.addr = alloca %StringRef
  store %StringRef %pos, %StringRef* %pos.addr
  %posCount = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %p = alloca %"RawPtr[Char]"
  %"$tmpForRef1" = alloca %"RawPtr[Char]"
  %q = alloca %"RawPtr[Char]"
  %"$tmpForRef2" = alloca %"RawPtr[Char]"
  %"$tmpForRef3" = alloca %"RawPtr[Char]"
  %"$tmpForRef4" = alloca %"RawPtr[Char]"
  %"$tmpForRef5" = alloca %"RawPtr[Char]"
  %"$tmpForRef6" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %pos.addr
  %2 = call %"RawPtr[Char]" @_frontPtr(%StringRef %1)
  store %"RawPtr[Char]" %2, %"RawPtr[Char]"* %"$tmpForRef"
  %3 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %4 = load %"RawPtr[Char]", %"RawPtr[Char]"* %3
  %5 = call i32 @diff(%"RawPtr[Char]"* %"$tmpForRef", %"RawPtr[Char]" %4)
  store i32 %5, i32* %posCount
  %6 = call i32 @size.166(%String* %this)
  %7 = call i32 @_Int32_opPlus(i32 %6, i32 1)
  call void @reserve(%String* %this, i32 %7)
  %8 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %9 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %8, i32 -1)
  store %"RawPtr[Char]" %9, %"RawPtr[Char]"* %"$tmpForRef1"
  call void @ctor.168(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpForRef1")
  %10 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %11 = load i32, i32* %posCount
  %12 = call i32 @_Int32_opMinus(i32 %11, i32 1)
  %13 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %10, i32 %12)
  store %"RawPtr[Char]" %13, %"RawPtr[Char]"* %"$tmpForRef2"
  call void @ctor.168(%"RawPtr[Char]"* %q, %"RawPtr[Char]"* %"$tmpForRef2")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %14 = call i1 @"==.246"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %q)
  %15 = xor i1 true, %14
  br i1 %15, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %16 = call i8* @value(%"RawPtr[Char]"* %p)
  %17 = load i8, i8* %16
  %18 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %p)
  store %"RawPtr[Char]" %18, %"RawPtr[Char]"* %"$tmpForRef3"
  %19 = call i8* @value(%"RawPtr[Char]"* %"$tmpForRef3")
  store i8 %17, i8* %19
  %20 = call i8* @value(%"RawPtr[Char]"* %p)
  %21 = load i8, i8* %20
  br label %while_step

while_step:                                       ; preds = %while_body
  %22 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %p, i32 -1)
  store %"RawPtr[Char]" %22, %"RawPtr[Char]"* %"$tmpForRef4"
  call void @"=.176"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpForRef4")
  br label %while_block

while_end:                                        ; preds = %while_block
  %23 = load i8, i8* %value.addr
  %24 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %p)
  store %"RawPtr[Char]" %24, %"RawPtr[Char]"* %"$tmpForRef5"
  %25 = call i8* @value(%"RawPtr[Char]"* %"$tmpForRef5")
  store i8 %23, i8* %25
  %26 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %27 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %28 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %27)
  store %"RawPtr[Char]" %28, %"RawPtr[Char]"* %"$tmpForRef6"
  call void @"=.176"(%"RawPtr[Char]"* %26, %"RawPtr[Char]"* %"$tmpForRef6")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"<<.460"(%StringOutputStream* sret %_result, %StringOutputStream* %s, i32* %x) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %x
  call void @"<<<.461"(%StringOutputStream* %s, i32 %1)
  call void @ctor.430(%StringOutputStream* %_result, %StringOutputStream* %s)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.461"(%StringOutputStream* %this, i32 %x) #3 {
  %x.addr = alloca i32
  store i32 %x, i32* %x.addr
  %"$tmpForRef" = alloca %StringRef
  %"$tmpC" = alloca %String
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = load i32, i32* %x.addr
  call void @intToString(%String* %"$tmpC", i32 %2)
  %3 = call %StringRef @all.462(%String* %"$tmpC")
  store %StringRef %3, %StringRef* %"$tmpForRef"
  call void @append(%String* %1, %StringRef* %"$tmpForRef")
  call void @dtor.239(%String* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @all.462(%String* %this) #4 {
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %1)
  %3 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %4 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %3)
  call void @ctor.50(%StringRef* %tmp.this, %UntypedPtr %2, %UntypedPtr %4)
  %5 = load %StringRef, %StringRef* %tmp.this
  %6 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %6)
  ret %StringRef %5

dumy_block:                                       ; No predecessors!
  %7 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %7)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @intToString(%String* sret %_result, i32 %x) #4 {
  %x.addr = alloca i32
  store i32 %x, i32* %x.addr
  %buf = alloca [12 x i8]
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %x.addr
  %2 = bitcast [12 x i8]* %buf to i8*
  call void @_Int_to_CString(i32 %1, i8* %2)
  %3 = bitcast [12 x i8]* %buf to i8*
  %4 = call %StringRef @_String_fromCString(i8* %3)
  call void @ctor.448(%String* %_result, %StringRef %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"+=.463"(%"Vector[Int]"* %this, i32 %value) #4 {
  %value.addr = alloca i32
  store i32 %value, i32* %value.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %value.addr
  call void @pushBack.464(%"Vector[Int]"* %this, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack.464(%"Vector[Int]"* %this, i32 %value) #4 {
  %value.addr = alloca i32
  store i32 %value, i32* %value.addr
  %t = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Int]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  %3 = call i1 @"==.249"(%"RawPtr[Int]"* %1, %"RawPtr[Int]"* %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = call i32 @capacity.465(%"Vector[Int]"* %this)
  %5 = call i32 @_Int32_opMul(i32 2, i32 %4)
  store i32 %5, i32* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %6 = load i32, i32* %value.addr
  %7 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %8 = call i32* @value.250(%"RawPtr[Int]"* %7)
  store i32 %6, i32* %8
  %9 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %10 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %11 = call %"RawPtr[Int]" @advance.251(%"RawPtr[Int]"* %10)
  store %"RawPtr[Int]" %11, %"RawPtr[Int]"* %"$tmpForRef"
  call void @"=.201"(%"RawPtr[Int]"* %9, %"RawPtr[Int]"* %"$tmpForRef")
  ret void

if_block1:                                        ; preds = %if_then
  %12 = load i32, i32* %t
  %13 = call i1 @_Int32_opLT(i32 %12, i32 2)
  br i1 %13, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 2, i32* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %14 = load i32, i32* %t
  call void @reserve.466(%"Vector[Int]"* %this, i32 %14)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i32 @capacity.465(%"Vector[Int]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  %2 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[Int]", %"RawPtr[Int]"* %2
  %4 = call i32 @diff.199(%"RawPtr[Int]"* %1, %"RawPtr[Int]" %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal void @reserve.466(%"Vector[Int]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %curCapacity = alloca i32
  %tmp.this = alloca i32
  %tmp.this7 = alloca double
  %tmp.this8 = alloca i32
  %tmp.this9 = alloca double
  %curSize = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[Int]"
  %"$tmpForRef10" = alloca %"RawPtr[Int]"
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @capacity.465(%"Vector[Int]"* %this)
  store i32 %1, i32* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load i32, i32* %n.addr
  %3 = load i32, i32* %curCapacity
  %4 = call i1 @_Int32_opLE(i32 %2, i32 %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %5 = load i32, i32* %n.addr
  %6 = call i1 @_Int32_opLT(i32 %5, i32 8)
  br i1 %6, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 8, i32* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block4

if_block4:                                        ; preds = %if_end3
  %7 = load i32, i32* %n.addr
  %8 = load i32, i32* %curCapacity
  %9 = sitofp i32 %8 to double
  store double %9, double* %tmp.this7
  %10 = load double, double* %tmp.this7
  %11 = call double @_Float64_opMul(double 2.000000e+00, double %10)
  %12 = fptosi double %11 to i32
  store i32 %12, i32* %tmp.this
  %13 = load i32, i32* %tmp.this
  %14 = call i1 @_Int32_opLT(i32 %7, i32 %13)
  br i1 %14, label %if_then5, label %if_end6

if_then5:                                         ; preds = %if_block4
  %15 = load i32, i32* %curCapacity
  %16 = sitofp i32 %15 to double
  store double %16, double* %tmp.this9
  %17 = load double, double* %tmp.this9
  %18 = call double @_Float64_opMul(double 2.000000e+00, double %17)
  %19 = fptosi double %18 to i32
  store i32 %19, i32* %tmp.this8
  %20 = load i32, i32* %tmp.this8
  store i32 %20, i32* %n.addr
  br label %if_end6

if_end6:                                          ; preds = %if_then5, %if_block4
  %21 = call i32 @size.198(%"Vector[Int]"* %this)
  store i32 %21, i32* %curSize
  %22 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %23 = load i32, i32* %n.addr
  call void @reallocPtr.467(%"RawPtr[Int]"* %22, i32 %23)
  %24 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %25 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %26 = load i32, i32* %curSize
  %27 = call %"RawPtr[Int]" @advance.204(%"RawPtr[Int]"* %25, i32 %26)
  store %"RawPtr[Int]" %27, %"RawPtr[Int]"* %"$tmpForRef"
  call void @"=.201"(%"RawPtr[Int]"* %24, %"RawPtr[Int]"* %"$tmpForRef")
  %28 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  %29 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %30 = load i32, i32* %n.addr
  %31 = call %"RawPtr[Int]" @advance.204(%"RawPtr[Int]"* %29, i32 %30)
  store %"RawPtr[Int]" %31, %"RawPtr[Int]"* %"$tmpForRef10"
  call void @"=.201"(%"RawPtr[Int]"* %28, %"RawPtr[Int]"* %"$tmpForRef10")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reallocPtr.467(%"RawPtr[Int]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  %2 = load i32*, i32** %1
  call void @ctor.200(%UntypedPtr* %tmp.this, i32* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %4 = load i32, i32* %n.addr
  %5 = call i32 @_Int32_opMul(i32 %4, i32 4)
  %6 = call %UntypedPtr @realloc(%UntypedPtr %3, i32 %5)
  %7 = call i32* @asRefOf.206(%UntypedPtr %6)
  %8 = getelementptr inbounds %"RawPtr[Int]", %"RawPtr[Int]"* %this, i32 0, i32 0
  store i32* %7, i32** %8
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.468(%"RangeWithLookahead[SparrowScanner]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  %2 = call i1 @isEmpty.469(%"Vector[Token]"* %1)
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.469(%"Vector[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %3 = call i1 @"==.194"(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %2)
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal void @front.470(%Token* sret %_result, %"RangeWithLookahead[SparrowScanner]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  %2 = call %Token* @front.471(%"Vector[Token]"* %1)
  call void @ctor.177(%Token* %_result, %Token* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Token* @front.471(%"Vector[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %2 = call %Token* @value.195(%"RawPtr[Token]"* %1)
  ret %Token* %2
}

; Function Attrs: noinline nounwind
define void @popFront.472(%"SparrowLayoutDecoder[SparrowScanner]"* %this) #5 {
  %tmp.this = alloca %TokenType
  %oldType = alloca %TokenType
  %"$tmpC" = alloca %Token
  %changeLine = alloca i1
  %"$tmpC1" = alloca %Token
  %tmp.this2 = alloca %TokenType
  %"$tmpC3" = alloca %Token
  %tmp.this4 = alloca %TokenType
  %"$tmpC5" = alloca %Token
  %tmp.this6 = alloca %TokenType
  %tk = alloca %Token
  %outsideParens = alloca i1
  %newCol = alloca i32
  %oldCol = alloca i32
  %tmp.this21 = alloca %TokenType
  %tmp.this34 = alloca %TokenType
  %tmp.this36 = alloca %TokenType
  %tmp.this38 = alloca %TokenType
  %tmp.this40 = alloca %TokenType
  %tmp.this56 = alloca %TokenType
  %tmp.this58 = alloca %TokenType
  %numDedents = alloca i32
  %tmp.this73 = alloca %TokenType
  %"$tmpC77" = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %"$tmpForRef78" = alloca %StringRef
  %tmp.StringRef79 = alloca %StringRef
  %tmp.this83 = alloca %TokenType
  %tmp.this88 = alloca %TokenType
  %tmp.this93 = alloca %TokenType
  %tmp.this101 = alloca %TokenType
  %tmp.this110 = alloca %TokenType
  %tmp.this118 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  %2 = load i32, i32* %1
  %3 = call i1 @_Int32_opGT(i32 %2, i32 0)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  %5 = call i32 @post_--.40(i32* %4)
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  call void @ctor.393(%TokenType* %tmp.this, i32 26)
  call void @"=.275"(%TokenType* %6, %TokenType* %tmp.this)
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  call void @front.473(%Token* %"$tmpC", %"SparrowLayoutDecoder[SparrowScanner]"* %this)
  %7 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  call void @ctor.178(%TokenType* %oldType, %TokenType* %7)
  call void @dtor.238(%Token* %"$tmpC")
  %8 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @popFront.474(%"RangeWithLookahead[SparrowScanner]"* %8)
  %9 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @front.470(%Token* %"$tmpC1", %"RangeWithLookahead[SparrowScanner]"* %9)
  %10 = getelementptr inbounds %Token, %Token* %"$tmpC1", i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this2, i32 1)
  %11 = call i1 @"==.328"(%TokenType* %10, %TokenType* %tmp.this2)
  br i1 %11, label %cond.true, label %cond.false

dumy_block:                                       ; No predecessors!
  br label %if_end

cond.true:                                        ; preds = %if_end
  br label %cond.end

cond.false:                                       ; preds = %if_end
  %12 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @front.470(%Token* %"$tmpC3", %"RangeWithLookahead[SparrowScanner]"* %12)
  %13 = getelementptr inbounds %Token, %Token* %"$tmpC3", i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this4, i32 0)
  %14 = call i1 @"==.328"(%TokenType* %13, %TokenType* %tmp.this4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ true, %cond.true ], [ %14, %cond.false ]
  store i1 %cond.res, i1* %changeLine
  br i1 %11, label %cond_destruct_alt1, label %cond_destruct_alt2

cond_destruct_alt1:                               ; preds = %cond.end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %cond.end
  call void @dtor.238(%Token* %"$tmpC3")
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  call void @dtor.238(%Token* %"$tmpC1")
  br label %while_block

while_block:                                      ; preds = %while_step, %cond_destruct_end
  %15 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @front.470(%Token* %"$tmpC5", %"RangeWithLookahead[SparrowScanner]"* %15)
  %16 = getelementptr inbounds %Token, %Token* %"$tmpC5", i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this6, i32 1)
  %17 = call i1 @"==.328"(%TokenType* %16, %TokenType* %tmp.this6)
  br i1 %17, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %18 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @popFront.474(%"RangeWithLookahead[SparrowScanner]"* %18)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  call void @dtor.238(%Token* %"$tmpC5")
  %19 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @front.470(%Token* %tk, %"RangeWithLookahead[SparrowScanner]"* %19)
  %20 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  %21 = call i1 @isEmpty.392(%"Vector[Char]"* %20)
  br i1 %21, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %while_end
  br label %cond.end9

cond.false8:                                      ; preds = %while_end
  %22 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  %23 = call i8* @back.487(%"Vector[Char]"* %22)
  %24 = load i8, i8* %23
  %25 = icmp eq i8 %24, 123
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res10 = phi i1 [ true, %cond.true7 ], [ %25, %cond.false8 ]
  store i1 %cond.res10, i1* %outsideParens
  br label %if_block11

if_block11:                                       ; preds = %cond.end9
  %26 = load i1, i1* %changeLine
  br i1 %26, label %cond.true14, label %cond.false15

if_then12:                                        ; preds = %cond.end16
  %27 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 0
  %28 = getelementptr inbounds %Location, %Location* %27, i32 0, i32 1
  %29 = getelementptr inbounds %LineCol, %LineCol* %28, i32 0, i32 1
  %30 = load i32, i32* %29
  store i32 %30, i32* %newCol
  %31 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  %32 = call i32* @back.488(%"Vector[Int]"* %31)
  %33 = load i32, i32* %32
  store i32 %33, i32* %oldCol
  br label %if_block18

if_end13:                                         ; preds = %if_end64, %cond.end16
  br label %if_block80

cond.true14:                                      ; preds = %if_block11
  %34 = load i1, i1* %outsideParens
  br label %cond.end16

cond.false15:                                     ; preds = %if_block11
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond.res17 = phi i1 [ %34, %cond.true14 ], [ false, %cond.false15 ]
  br i1 %cond.res17, label %if_then12, label %if_end13

if_block18:                                       ; preds = %if_then12
  %35 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this21, i32 0)
  %36 = call i1 @"==.328"(%TokenType* %35, %TokenType* %tmp.this21)
  br i1 %36, label %if_then19, label %if_end20

if_then19:                                        ; preds = %if_block18
  store i32 1, i32* %newCol
  br label %if_end20

if_end20:                                         ; preds = %if_then19, %if_block18
  br label %if_block22

if_block22:                                       ; preds = %if_end20
  %37 = load i32, i32* %newCol
  %38 = load i32, i32* %oldCol
  %39 = call i1 @_Int32_opEQ(i32 %37, i32 %38)
  br i1 %39, label %cond.true31, label %cond.false32

if_then23:                                        ; preds = %cond.end27
  %40 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  call void @ctor.393(%TokenType* %tmp.this40, i32 32)
  call void @"=.275"(%TokenType* %40, %TokenType* %tmp.this40)
  %41 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  store i32 1, i32* %41
  br label %if_end24

if_end24:                                         ; preds = %if_then23, %cond.end27
  br i1 %cond.res37, label %cond_destruct_alt141, label %cond_destruct_alt242

cond.true25:                                      ; preds = %cond.end30
  call void @ctor.393(%TokenType* %tmp.this38, i32 26)
  %42 = call i1 @"==.328"(%TokenType* %oldType, %TokenType* %tmp.this38)
  %43 = xor i1 true, %42
  br label %cond.end27

cond.false26:                                     ; preds = %cond.end30
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond.res39 = phi i1 [ %43, %cond.true25 ], [ false, %cond.false26 ]
  br i1 %cond.res39, label %if_then23, label %if_end24

cond.true28:                                      ; preds = %cond.end33
  call void @ctor.393(%TokenType* %tmp.this36, i32 32)
  %44 = call i1 @"==.328"(%TokenType* %oldType, %TokenType* %tmp.this36)
  %45 = xor i1 true, %44
  br label %cond.end30

cond.false29:                                     ; preds = %cond.end33
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond.res37 = phi i1 [ %45, %cond.true28 ], [ false, %cond.false29 ]
  br i1 %cond.res37, label %cond.true25, label %cond.false26

cond.true31:                                      ; preds = %if_block22
  %46 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this34, i32 25)
  %47 = call i1 @"==.328"(%TokenType* %46, %TokenType* %tmp.this34)
  %48 = xor i1 true, %47
  br label %cond.end33

cond.false32:                                     ; preds = %if_block22
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond.res35 = phi i1 [ %48, %cond.true31 ], [ false, %cond.false32 ]
  br i1 %cond.res35, label %cond.true28, label %cond.false29

cond_destruct_alt141:                             ; preds = %if_end24
  br label %cond_destruct_end43

cond_destruct_alt242:                             ; preds = %if_end24
  br label %cond_destruct_end43

cond_destruct_end43:                              ; preds = %cond_destruct_alt242, %cond_destruct_alt141
  br i1 %cond.res35, label %cond_destruct_alt144, label %cond_destruct_alt245

cond_destruct_alt144:                             ; preds = %cond_destruct_end43
  br label %cond_destruct_end46

cond_destruct_alt245:                             ; preds = %cond_destruct_end43
  br label %cond_destruct_end46

cond_destruct_end46:                              ; preds = %cond_destruct_alt245, %cond_destruct_alt144
  br i1 %39, label %cond_destruct_alt147, label %cond_destruct_alt248

cond_destruct_alt147:                             ; preds = %cond_destruct_end46
  br label %cond_destruct_end49

cond_destruct_alt248:                             ; preds = %cond_destruct_end46
  br label %cond_destruct_end49

cond_destruct_end49:                              ; preds = %cond_destruct_alt248, %cond_destruct_alt147
  br label %if_block50

if_block50:                                       ; preds = %cond_destruct_end49
  %49 = load i32, i32* %newCol
  %50 = load i32, i32* %oldCol
  %51 = call i1 @_Int32_opGT(i32 %49, i32 %50)
  br i1 %51, label %cond.true53, label %cond.false54

if_then51:                                        ; preds = %cond.end55
  %52 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  call void @ctor.393(%TokenType* %tmp.this58, i32 25)
  call void @"=.275"(%TokenType* %52, %TokenType* %tmp.this58)
  %53 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  store i32 1, i32* %53
  %54 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  %55 = load i32, i32* %newCol
  call void @"+=.463"(%"Vector[Int]"* %54, i32 %55)
  br label %if_end52

if_end52:                                         ; preds = %if_then51, %cond.end55
  br i1 %51, label %cond_destruct_alt159, label %cond_destruct_alt260

cond.true53:                                      ; preds = %if_block50
  %56 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this56, i32 0)
  %57 = call i1 @"==.328"(%TokenType* %56, %TokenType* %tmp.this56)
  %58 = xor i1 true, %57
  br label %cond.end55

cond.false54:                                     ; preds = %if_block50
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false54, %cond.true53
  %cond.res57 = phi i1 [ %58, %cond.true53 ], [ false, %cond.false54 ]
  br i1 %cond.res57, label %if_then51, label %if_end52

cond_destruct_alt159:                             ; preds = %if_end52
  br label %cond_destruct_end61

cond_destruct_alt260:                             ; preds = %if_end52
  br label %cond_destruct_end61

cond_destruct_end61:                              ; preds = %cond_destruct_alt260, %cond_destruct_alt159
  br label %if_block62

if_block62:                                       ; preds = %cond_destruct_end61
  %59 = load i32, i32* %newCol
  %60 = load i32, i32* %oldCol
  %61 = call i1 @_Int32_opLT(i32 %59, i32 %60)
  br i1 %61, label %cond.true65, label %cond.false66

if_then63:                                        ; preds = %cond.end67
  store i32 0, i32* %numDedents
  br label %while_block69

if_end64:                                         ; preds = %if_end76, %cond.end67
  br label %if_end13

cond.true65:                                      ; preds = %if_block62
  %62 = load i32, i32* %newCol
  %63 = call i1 @_Int32_opGE(i32 %62, i32 1)
  br label %cond.end67

cond.false66:                                     ; preds = %if_block62
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false66, %cond.true65
  %cond.res68 = phi i1 [ %63, %cond.true65 ], [ false, %cond.false66 ]
  br i1 %cond.res68, label %if_then63, label %if_end64

while_block69:                                    ; preds = %while_step71, %if_then63
  %64 = load i32, i32* %newCol
  %65 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  %66 = call i32* @back.488(%"Vector[Int]"* %65)
  %67 = load i32, i32* %66
  %68 = call i1 @_Int32_opLT(i32 %64, i32 %67)
  br i1 %68, label %while_body70, label %while_end72

while_body70:                                     ; preds = %while_block69
  %69 = call i32 @"post_++.33"(i32* %numDedents)
  %70 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  call void @popBack.489(%"Vector[Int]"* %70)
  br label %while_step71

while_step71:                                     ; preds = %while_body70
  br label %while_block69

while_end72:                                      ; preds = %while_block69
  %71 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  call void @ctor.393(%TokenType* %tmp.this73, i32 32)
  call void @"=.275"(%TokenType* %71, %TokenType* %tmp.this73)
  %72 = load i32, i32* %numDedents
  %73 = call i32 @_Int32_opPlus(i32 1, i32 %72)
  %74 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  store i32 %73, i32* %74
  br label %if_block74

if_block74:                                       ; preds = %while_end72
  %75 = load i32, i32* %newCol
  %76 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  %77 = call i32* @back.488(%"Vector[Int]"* %76)
  %78 = load i32, i32* %77
  %79 = call i1 @_Int32_opNE(i32 %75, i32 %78)
  br i1 %79, label %if_then75, label %if_end76

if_then75:                                        ; preds = %if_block74
  %80 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 1
  %81 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 0
  %82 = load %Location, %Location* %81
  %83 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %84 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %85 = bitcast %UntypedPtr* %83 to i8**
  %86 = bitcast %UntypedPtr* %84 to i8**
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @str.40, i32 0, i32 0), i8** %85
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @str.40, i32 0, i32 31), i8** %86
  %87 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %87, %StringRef* %"$tmpForRef"
  %88 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 2
  %89 = call i32* @back.488(%"Vector[Int]"* %88)
  %90 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef79, i32 0, i32 0
  %91 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef79, i32 0, i32 1
  %92 = bitcast %UntypedPtr* %90 to i8**
  %93 = bitcast %UntypedPtr* %91 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.41, i32 0, i32 0), i8** %92
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.41, i32 0, i32 6), i8** %93
  %94 = load %StringRef, %StringRef* %tmp.StringRef79
  store %StringRef %94, %StringRef* %"$tmpForRef78"
  call void @toString.490(%String* %"$tmpC77", %StringRef* %"$tmpForRef", i32* %89, %StringRef* %"$tmpForRef78", i32* %newCol)
  call void @reportError.426(%ErrorReporter* %80, %Location %82, %String* %"$tmpC77")
  call void @dtor.239(%String* %"$tmpC77")
  br label %if_end76

if_end76:                                         ; preds = %if_then75, %if_block74
  br label %if_end64

if_block80:                                       ; preds = %if_end13
  %95 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this83, i32 29)
  %96 = call i1 @"==.328"(%TokenType* %95, %TokenType* %tmp.this83)
  br i1 %96, label %if_then81, label %if_else

if_then81:                                        ; preds = %if_block80
  %97 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  call void @"+="(%"Vector[Char]"* %97, i8 40)
  br label %if_end82

if_else:                                          ; preds = %if_block80
  br label %if_block84

if_end82:                                         ; preds = %if_end87, %if_then81
  call void @dtor.238(%Token* %tk)
  ret void

if_block84:                                       ; preds = %if_else
  %98 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this88, i32 27)
  %99 = call i1 @"==.328"(%TokenType* %98, %TokenType* %tmp.this88)
  br i1 %99, label %if_then85, label %if_else86

if_then85:                                        ; preds = %if_block84
  %100 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  call void @"+="(%"Vector[Char]"* %100, i8 91)
  br label %if_end87

if_else86:                                        ; preds = %if_block84
  br label %if_block89

if_end87:                                         ; preds = %if_end92, %if_then85
  br label %if_end82

if_block89:                                       ; preds = %if_else86
  %101 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this93, i32 25)
  %102 = call i1 @"==.328"(%TokenType* %101, %TokenType* %tmp.this93)
  br i1 %102, label %if_then90, label %if_else91

if_then90:                                        ; preds = %if_block89
  %103 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  call void @"+="(%"Vector[Char]"* %103, i8 123)
  br label %if_end92

if_else91:                                        ; preds = %if_block89
  br label %if_block94

if_end92:                                         ; preds = %if_end97, %if_then90
  br label %if_end87

if_block94:                                       ; preds = %if_else91
  %104 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this101, i32 30)
  %105 = call i1 @"==.328"(%TokenType* %104, %TokenType* %tmp.this101)
  br i1 %105, label %cond.true98, label %cond.false99

if_then95:                                        ; preds = %cond.end100
  %106 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  call void @popBack.491(%"Vector[Char]"* %106)
  br label %if_end97

if_else96:                                        ; preds = %cond.end100
  br label %if_block103

if_end97:                                         ; preds = %if_end106, %if_then95
  br label %if_end92

cond.true98:                                      ; preds = %if_block94
  %107 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  %108 = call i8* @back.487(%"Vector[Char]"* %107)
  %109 = load i8, i8* %108
  %110 = icmp eq i8 %109, 40
  br label %cond.end100

cond.false99:                                     ; preds = %if_block94
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false99, %cond.true98
  %cond.res102 = phi i1 [ %110, %cond.true98 ], [ false, %cond.false99 ]
  br i1 %cond.res102, label %if_then95, label %if_else96

if_block103:                                      ; preds = %if_else96
  %111 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this110, i32 28)
  %112 = call i1 @"==.328"(%TokenType* %111, %TokenType* %tmp.this110)
  br i1 %112, label %cond.true107, label %cond.false108

if_then104:                                       ; preds = %cond.end109
  %113 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  call void @popBack.491(%"Vector[Char]"* %113)
  br label %if_end106

if_else105:                                       ; preds = %cond.end109
  br label %if_block112

if_end106:                                        ; preds = %if_end114, %if_then104
  br label %if_end97

cond.true107:                                     ; preds = %if_block103
  %114 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  %115 = call i8* @back.487(%"Vector[Char]"* %114)
  %116 = load i8, i8* %115
  %117 = icmp eq i8 %116, 91
  br label %cond.end109

cond.false108:                                    ; preds = %if_block103
  br label %cond.end109

cond.end109:                                      ; preds = %cond.false108, %cond.true107
  %cond.res111 = phi i1 [ %117, %cond.true107 ], [ false, %cond.false108 ]
  br i1 %cond.res111, label %if_then104, label %if_else105

if_block112:                                      ; preds = %if_else105
  %118 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this118, i32 26)
  %119 = call i1 @"==.328"(%TokenType* %118, %TokenType* %tmp.this118)
  br i1 %119, label %cond.true115, label %cond.false116

if_then113:                                       ; preds = %cond.end117
  %120 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  call void @popBack.491(%"Vector[Char]"* %120)
  br label %if_end114

if_end114:                                        ; preds = %if_then113, %cond.end117
  br label %if_end106

cond.true115:                                     ; preds = %if_block112
  %121 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 3
  %122 = call i8* @back.487(%"Vector[Char]"* %121)
  %123 = load i8, i8* %122
  %124 = icmp eq i8 %123, 123
  br label %cond.end117

cond.false116:                                    ; preds = %if_block112
  br label %cond.end117

cond.end117:                                      ; preds = %cond.false116, %cond.true115
  %cond.res119 = phi i1 [ %124, %cond.true115 ], [ false, %cond.false116 ]
  br i1 %cond.res119, label %if_then113, label %if_end114
}

; Function Attrs: inlinehint nounwind
define internal void @front.473(%Token* sret %_result, %"SparrowLayoutDecoder[SparrowScanner]"* %this) #4 {
  %tk = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  call void @front.470(%Token* %tk, %"RangeWithLookahead[SparrowScanner]"* %1)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  %3 = load i32, i32* %2
  %4 = call i1 @_Int32_opGT(i32 %3, i32 0)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 4
  call void @"=.275"(%TokenType* %5, %TokenType* %6)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  call void @ctor.177(%Token* %_result, %Token* %tk)
  call void @dtor.238(%Token* %tk)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.238(%Token* %tk)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.474(%"RangeWithLookahead[SparrowScanner]"* %this) #4 {
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  call void @remove.475(%"Vector[Token]"* %1, i32 0)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  %3 = call i1 @isEmpty.469(%"Vector[Token]"* %2)
  br i1 %3, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 1
  %5 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  call void @"post_++.387"(%Token* %"$tmpC", %SparrowScanner* %5)
  call void @"+=.385"(%"Vector[Token]"* %4, %Token* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC")
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  ret void

cond.true:                                        ; preds = %if_block
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %this, i32 0, i32 0
  %7 = call i1 @"pre_!!.383"(%SparrowScanner* %6)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %7, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @remove.475(%"Vector[Token]"* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %r = alloca %"ContiguousMemoryRange[Token]"
  %"$tmpForRef" = alloca %"ContiguousMemoryRange[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = call %"ContiguousMemoryRange[Token]" @all.477(%"Vector[Token]"* %this)
  store %"ContiguousMemoryRange[Token]" %1, %"ContiguousMemoryRange[Token]"* %"$tmpForRef"
  call void @ctor.476(%"ContiguousMemoryRange[Token]"* %r, %"ContiguousMemoryRange[Token]"* %"$tmpForRef")
  %2 = load i32, i32* %index.addr
  call void @popFront.479(%"ContiguousMemoryRange[Token]"* %r, i32 %2)
  %3 = call i32 @size.184(%"Vector[Token]"* %this)
  %4 = load i32, i32* %index.addr
  %5 = call i32 @_Int32_opMinus(i32 %3, i32 %4)
  %6 = call i32 @_Int32_opMinus(i32 %5, i32 1)
  call void @popBack.480(%"ContiguousMemoryRange[Token]"* %r, i32 %6)
  %7 = load %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %r
  call void @remove.481(%"Vector[Token]"* %this, %"ContiguousMemoryRange[Token]" %7)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.476(%"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"* %other) #3 {
  %other.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %other, %"ContiguousMemoryRange[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  %2 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %3 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %2, i32 0, i32 0
  call void @ctor.193(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %3)
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 1
  %5 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %5, i32 0, i32 1
  call void @ctor.193(%"RawPtr[Token]"* %4, %"RawPtr[Token]"* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"ContiguousMemoryRange[Token]" @all.477(%"Vector[Token]"* %this) #4 {
  %tmp.this = alloca %"ContiguousMemoryRange[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %2 = load %"RawPtr[Token]", %"RawPtr[Token]"* %1
  %3 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %4 = load %"RawPtr[Token]", %"RawPtr[Token]"* %3
  call void @ctor.478(%"ContiguousMemoryRange[Token]"* %tmp.this, %"RawPtr[Token]" %2, %"RawPtr[Token]" %4)
  %5 = load %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %tmp.this
  ret %"ContiguousMemoryRange[Token]" %5
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.478(%"ContiguousMemoryRange[Token]"* %this, %"RawPtr[Token]" %f_begin, %"RawPtr[Token]" %f_end) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  %f_begin.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %f_begin, %"RawPtr[Token]"* %f_begin.addr
  %f_end.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %f_end, %"RawPtr[Token]"* %f_end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 0
  call void @ctor.193(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %f_begin.addr)
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 1
  call void @ctor.193(%"RawPtr[Token]"* %4, %"RawPtr[Token]"* %f_end.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.479(%"ContiguousMemoryRange[Token]"* %this, i32 %n) #3 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  %3 = load i32, i32* %n.addr
  %4 = call %"RawPtr[Token]" @advance.190(%"RawPtr[Token]"* %2, i32 %3)
  store %"RawPtr[Token]" %4, %"RawPtr[Token]"* %"$tmpForRef"
  call void @"=.187"(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %"$tmpForRef")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.480(%"ContiguousMemoryRange[Token]"* %this, i32 %n) #3 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 1
  %3 = load i32, i32* %n.addr
  %4 = call i32 @_Int32_opMinus1(i32 %3)
  %5 = call %"RawPtr[Token]" @advance.190(%"RawPtr[Token]"* %2, i32 %4)
  store %"RawPtr[Token]" %5, %"RawPtr[Token]"* %"$tmpForRef"
  call void @"=.187"(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %"$tmpForRef")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @remove.481(%"Vector[Token]"* %this, %"ContiguousMemoryRange[Token]" %range) #4 {
  %range.addr = alloca %"ContiguousMemoryRange[Token]"
  store %"ContiguousMemoryRange[Token]" %range, %"ContiguousMemoryRange[Token]"* %range.addr
  %rBegin = alloca %"RawPtr[Token]"
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  %rEnd = alloca %"RawPtr[Token]"
  %"$tmpForRef1" = alloca %"RawPtr[Token]"
  %"$rangeVar" = alloca %"ContiguousMemoryRange[Token]"
  %el = alloca %Token*
  %"$tmpForRef6" = alloca %"RawPtr[Token]"
  %"$tmpForRef7" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = call %"RawPtr[Token]" @frontPtr.482(%"ContiguousMemoryRange[Token]"* %range.addr)
  store %"RawPtr[Token]" %1, %"RawPtr[Token]"* %"$tmpForRef"
  call void @ctor.193(%"RawPtr[Token]"* %rBegin, %"RawPtr[Token]"* %"$tmpForRef")
  %2 = call %"RawPtr[Token]" @backPtr.483(%"ContiguousMemoryRange[Token]"* %range.addr)
  store %"RawPtr[Token]" %2, %"RawPtr[Token]"* %"$tmpForRef1"
  call void @ctor.193(%"RawPtr[Token]"* %rEnd, %"RawPtr[Token]"* %"$tmpForRef1")
  call void @ctor.476(%"ContiguousMemoryRange[Token]"* %"$rangeVar", %"ContiguousMemoryRange[Token]"* %range.addr)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %3 = call i1 @isEmpty.484(%"ContiguousMemoryRange[Token]"* %"$rangeVar")
  %4 = xor i1 true, %3
  br i1 %4, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %5 = call %Token* @front.485(%"ContiguousMemoryRange[Token]"* %"$rangeVar")
  store %Token* %5, %Token** %el
  %6 = load %Token*, %Token** %el
  call void @dtor.238(%Token* %6)
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.486(%"ContiguousMemoryRange[Token]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %while_block2

while_block2:                                     ; preds = %while_step4, %while_end
  %7 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %8 = call i1 @"==.194"(%"RawPtr[Token]"* %rEnd, %"RawPtr[Token]"* %7)
  %9 = xor i1 true, %8
  br i1 %9, label %while_body3, label %while_end5

while_body3:                                      ; preds = %while_block2
  %10 = call %Token* @value.195(%"RawPtr[Token]"* %rBegin)
  %11 = call %Token* @value.195(%"RawPtr[Token]"* %rEnd)
  call void @ctor.177(%Token* %10, %Token* %11)
  %12 = call %Token* @value.195(%"RawPtr[Token]"* %rEnd)
  call void @dtor.238(%Token* %12)
  %13 = call %"RawPtr[Token]" @advance.196(%"RawPtr[Token]"* %rBegin)
  store %"RawPtr[Token]" %13, %"RawPtr[Token]"* %"$tmpForRef6"
  call void @"=.187"(%"RawPtr[Token]"* %rBegin, %"RawPtr[Token]"* %"$tmpForRef6")
  %14 = call %"RawPtr[Token]" @advance.196(%"RawPtr[Token]"* %rEnd)
  store %"RawPtr[Token]" %14, %"RawPtr[Token]"* %"$tmpForRef7"
  call void @"=.187"(%"RawPtr[Token]"* %rEnd, %"RawPtr[Token]"* %"$tmpForRef7")
  br label %while_step4

while_step4:                                      ; preds = %while_body3
  br label %while_block2

while_end5:                                       ; preds = %while_block2
  %15 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  call void @"=.187"(%"RawPtr[Token]"* %15, %"RawPtr[Token]"* %rBegin)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Token]" @frontPtr.482(%"ContiguousMemoryRange[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  %2 = load %"RawPtr[Token]", %"RawPtr[Token]"* %1
  ret %"RawPtr[Token]" %2
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Token]" @backPtr.483(%"ContiguousMemoryRange[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 1
  %2 = load %"RawPtr[Token]", %"RawPtr[Token]"* %1
  ret %"RawPtr[Token]" %2
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.484(%"ContiguousMemoryRange[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %2
  %4 = call i32 @diff.185(%"RawPtr[Token]"* %1, %"RawPtr[Token]" %3)
  %5 = call i1 @_Int32_opLE(i32 %4, i32 0)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal %Token* @front.485(%"ContiguousMemoryRange[Token]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  %2 = call %Token* @value.195(%"RawPtr[Token]"* %1)
  ret %Token* %2
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.486(%"ContiguousMemoryRange[Token]"* %this) #3 {
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  %3 = call %"RawPtr[Token]" @advance.196(%"RawPtr[Token]"* %2)
  store %"RawPtr[Token]" %3, %"RawPtr[Token]"* %"$tmpForRef"
  call void @"=.187"(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %"$tmpForRef")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8* @back.487(%"Vector[Char]"* %this) #4 {
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %2 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %1, i32 -1)
  store %"RawPtr[Char]" %2, %"RawPtr[Char]"* %"$tmpForRef"
  %3 = call i8* @value(%"RawPtr[Char]"* %"$tmpForRef")
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal i32* @back.488(%"Vector[Int]"* %this) #4 {
  %"$tmpForRef" = alloca %"RawPtr[Int]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %2 = call %"RawPtr[Int]" @advance.204(%"RawPtr[Int]"* %1, i32 -1)
  store %"RawPtr[Int]" %2, %"RawPtr[Int]"* %"$tmpForRef"
  %3 = call i32* @value.250(%"RawPtr[Int]"* %"$tmpForRef")
  ret i32* %3
}

; Function Attrs: inlinehint nounwind
define internal void @popBack.489(%"Vector[Int]"* %this) #4 {
  %"$tmpForRef" = alloca %"RawPtr[Int]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %3 = call %"RawPtr[Int]" @advance.204(%"RawPtr[Int]"* %2, i32 -1)
  store %"RawPtr[Int]" %3, %"RawPtr[Int]"* %"$tmpForRef"
  call void @"=.201"(%"RawPtr[Int]"* %1, %"RawPtr[Int]"* %"$tmpForRef")
  %4 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %5 = call i32* @value.250(%"RawPtr[Int]"* %4)
  %6 = load i32, i32* %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @toString.490(%String* sret %_result, %StringRef* %a1, i32* %a2, %StringRef* %a3, i32* %a4) #4 {
  %s = alloca %StringOutputStream
  %"$tmpC" = alloca %StringOutputStream
  %"$tmpC1" = alloca %StringOutputStream
  %"$tmpC2" = alloca %StringOutputStream
  %"$tmpC3" = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.428(%StringOutputStream* %s)
  call void @"<<"(%StringOutputStream* %"$tmpC3", %StringOutputStream* %s, %StringRef* %a1)
  call void @"<<.460"(%StringOutputStream* %"$tmpC2", %StringOutputStream* %"$tmpC3", i32* %a2)
  call void @"<<"(%StringOutputStream* %"$tmpC1", %StringOutputStream* %"$tmpC2", %StringRef* %a3)
  call void @"<<.460"(%StringOutputStream* %"$tmpC", %StringOutputStream* %"$tmpC1", i32* %a4)
  call void @dtor.431(%StringOutputStream* %"$tmpC")
  call void @dtor.431(%StringOutputStream* %"$tmpC1")
  call void @dtor.431(%StringOutputStream* %"$tmpC2")
  call void @dtor.431(%StringOutputStream* %"$tmpC3")
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.165(%String* %_result, %String* %1)
  call void @dtor.431(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.431(%StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popBack.491(%"Vector[Char]"* %this) #4 {
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %3 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %2, i32 -1)
  store %"RawPtr[Char]" %3, %"RawPtr[Char]"* %"$tmpForRef"
  call void @"=.176"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %"$tmpForRef")
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %5 = call i8* @value(%"RawPtr[Char]"* %4)
  %6 = load i8, i8* %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.492(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"* %tokens, %AstBuilder* %astBuilder, %ErrorReporter* %errorReporter) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  call void @ctor.120(%Token* %1)
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @ctor.493(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2, %"SparrowLayoutDecoder[SparrowScanner]"* %tokens)
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 2
  store i1 false, i1* %3
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  call void @ctor.211(%AstBuilder* %4, %AstBuilder* %astBuilder)
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 4
  call void @ctor.179(%ErrorReporter* %5, %ErrorReporter* %errorReporter)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.493(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"* %src) #4 {
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @ctor.124(%"SparrowLayoutDecoder[SparrowScanner]"* %1)
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"=.278"(%"SparrowLayoutDecoder[SparrowScanner]"* %2, %"SparrowLayoutDecoder[SparrowScanner]"* %src)
  %3 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  call void @ctor.126(%"Vector[Token]"* %3)
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  call void @reserve.380(%"Vector[Token]"* %4, i32 10)
  br label %if_block

if_block:                                         ; preds = %code
  %5 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  %6 = call i1 @"pre_!!.494"(%"SparrowLayoutDecoder[SparrowScanner]"* %5)
  br i1 %6, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %7 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"post_++.496"(%Token* %"$tmpC", %"SparrowLayoutDecoder[SparrowScanner]"* %8)
  call void @"+=.385"(%"Vector[Token]"* %7, %Token* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC")
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!!.494"(%"SparrowLayoutDecoder[SparrowScanner]"* %r) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i1 @isEmpty.495(%"SparrowLayoutDecoder[SparrowScanner]"* %r)
  %2 = xor i1 true, %1
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.495(%"SparrowLayoutDecoder[SparrowScanner]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 5
  %2 = load i32, i32* %1
  %3 = call i1 @_Int32_opEQ(i32 %2, i32 0)
  br i1 %3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %this, i32 0, i32 0
  %5 = call i1 @isEmpty.468(%"RangeWithLookahead[SparrowScanner]"* %4)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %5, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: inlinehint nounwind
define internal void @"post_++.496"(%Token* sret %_result, %"SparrowLayoutDecoder[SparrowScanner]"* %r) #4 {
  %res = alloca %Token
  br label %code

code:                                             ; preds = %0
  call void @front.473(%Token* %res, %"SparrowLayoutDecoder[SparrowScanner]"* %r)
  call void @popFront.472(%"SparrowLayoutDecoder[SparrowScanner]"* %r)
  call void @ctor.177(%Token* %_result, %Token* %res)
  call void @dtor.238(%Token* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.238(%Token* %res)
  ret void
}

; Function Attrs: noinline nounwind
define %ParserContext* @spr_parserIf_createParser(%CharSource* %chars, %Location* %loc, %AstBuilder* %astBuilder, %ErrorReporter* %reporter) #5 {
  %res = alloca %ParserContext*
  br label %code

code:                                             ; preds = %0
  %1 = call %ParserContext* @new(%CharSource* %chars, %Location* %loc, %AstBuilder* %astBuilder, %ErrorReporter* %reporter)
  store %ParserContext* %1, %ParserContext** %res
  %2 = load %ParserContext*, %ParserContext** %res
  ret %ParserContext* %2
}

; Function Attrs: inlinehint nounwind
define internal %ParserContext* @new(%CharSource* %arg1, %Location* %arg2, %AstBuilder* %arg3, %ErrorReporter* %arg4) #4 {
  %res = alloca %ParserContext*
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = call %UntypedPtr @malloc(i32 1288)
  store %UntypedPtr %1, %UntypedPtr* %"$tmpForRef"
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %"$tmpForRef", i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = bitcast i8* %3 to %ParserContext*
  store %ParserContext* %4, %ParserContext** %res
  %5 = load %ParserContext*, %ParserContext** %res
  %6 = load %Location, %Location* %arg2
  call void @ctor.364(%ParserContext* %5, %CharSource* %arg1, %Location %6, %AstBuilder* %arg3, %ErrorReporter* %arg4)
  %7 = load %ParserContext*, %ParserContext** %res
  ret %ParserContext* %7
}

; Function Attrs: noinline nounwind
define %ParserContext* @spr_parserIf_createParserFile(%StringRef %filename, %Location* %loc, %AstBuilder* %astBuilder, %ErrorReporter* %reporter) #5 {
  %filename.addr = alloca %StringRef
  store %StringRef %filename, %StringRef* %filename.addr
  %fileCharSource = alloca %FileCharSource*
  %"$tmpC" = alloca %CharSource
  br label %code

code:                                             ; preds = %0
  %1 = call %FileCharSource* @new.497(%StringRef* %filename.addr)
  store %FileCharSource* %1, %FileCharSource** %fileCharSource
  %2 = load %FileCharSource*, %FileCharSource** %fileCharSource
  call void @mkCharSource(%CharSource* %"$tmpC", %FileCharSource* %2)
  %3 = call %ParserContext* @spr_parserIf_createParser(%CharSource* %"$tmpC", %Location* %loc, %AstBuilder* %astBuilder, %ErrorReporter* %reporter)
  ret %ParserContext* %3
}

; Function Attrs: inlinehint nounwind
define internal %FileCharSource* @new.497(%StringRef* %arg1) #4 {
  %res = alloca %FileCharSource*
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = call %UntypedPtr @malloc(i32 8)
  store %UntypedPtr %1, %UntypedPtr* %"$tmpForRef"
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %"$tmpForRef", i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = bitcast i8* %3 to %FileCharSource*
  store %FileCharSource* %4, %FileCharSource** %res
  %5 = load %FileCharSource*, %FileCharSource** %res
  %6 = load %StringRef, %StringRef* %arg1
  call void @ctor.498(%FileCharSource* %5, %StringRef %6)
  %7 = load %FileCharSource*, %FileCharSource** %res
  ret %FileCharSource* %7
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.498(%FileCharSource* %this, %StringRef %filename) #4 {
  %filename.addr = alloca %StringRef
  store %StringRef %filename, %StringRef* %filename.addr
  %tmp.StringRef = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileCharSource, %FileCharSource* %this, i32 0, i32 0
  %2 = load %StringRef, %StringRef* %filename.addr
  %3 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %4 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %5 = bitcast %UntypedPtr* %3 to i8**
  %6 = bitcast %UntypedPtr* %4 to i8**
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.42, i32 0, i32 0), i8** %5
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.42, i32 0, i32 1), i8** %6
  %7 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.499(%File* %1, %StringRef %2, %StringRef %7)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.499(%File* %this, %StringRef %filename, %StringRef %mode) #4 {
  %filename.addr = alloca %StringRef
  store %StringRef %filename, %StringRef* %filename.addr
  %mode.addr = alloca %StringRef
  store %StringRef %mode, %StringRef* %mode.addr
  %"$tmpForRef" = alloca %File
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %File, %File* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  %2 = getelementptr inbounds %File, %File* %this, i32 0, i32 0
  %3 = load %StringRef, %StringRef* %filename.addr
  %4 = call i8* @cStr(%StringRef %3)
  %5 = load %StringRef, %StringRef* %mode.addr
  %6 = call i8* @cStr(%StringRef %5)
  %7 = call %File @fopen(i8* %4, i8* %6)
  store %File %7, %File* %"$tmpForRef"
  %8 = getelementptr inbounds %File, %File* %"$tmpForRef", i32 0, i32 0
  call void @"="(%UntypedPtr* %2, %UntypedPtr* %8)
  ret void
}

declare %File @fopen(i8*, i8*)

; Function Attrs: inlinehint nounwind
define internal void @mkCharSource(%CharSource* sret %_result, %FileCharSource* %obj) #4 {
  %res = alloca %CharSource
  %"$tmpForRef" = alloca %UntypedPtr
  %"$tmpForRef1" = alloca %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"
  %funptr = alloca void (%FileCharSource*, %String*, i32)*
  br label %code

code:                                             ; preds = %0
  call void @ctor.112(%CharSource* %res)
  %1 = getelementptr inbounds %CharSource, %CharSource* %res, i32 0, i32 0
  %2 = call %UntypedPtr @_eraseType(%FileCharSource* %obj)
  store %UntypedPtr %2, %UntypedPtr* %"$tmpForRef"
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %"$tmpForRef")
  %3 = getelementptr inbounds %CharSource, %CharSource* %res, i32 0, i32 1
  store void (%FileCharSource*, %String*, i32)* @readChars.502, void (%FileCharSource*, %String*, i32)** %funptr
  %4 = bitcast void (%FileCharSource*, %String*, i32)** %funptr to %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"*
  %5 = load %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]", %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %4
  store %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]" %5, %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %"$tmpForRef1"
  call void @_reinterpretAssign(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %3, %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %"$tmpForRef1")
  call void @ctor.163(%CharSource* %_result, %CharSource* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %UntypedPtr @_eraseType(%FileCharSource* %obj) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  call void @ctor.500(%UntypedPtr* %tmp.this, %FileCharSource* %obj)
  %1 = load %UntypedPtr, %UntypedPtr* %tmp.this
  ret %UntypedPtr %1
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.500(%UntypedPtr* %this, %FileCharSource* %val) #4 {
  %val.addr = alloca %FileCharSource*
  store %FileCharSource* %val, %FileCharSource** %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = load %FileCharSource*, %FileCharSource** %val.addr
  %3 = bitcast %FileCharSource* %2 to i8*
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @_reinterpretAssign(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %dest, %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %src) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = bitcast %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %dest to %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"*
  call void @"=.501"(%"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %1, %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %src)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.501"(%"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %this, %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"*
  store %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %other, %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]", %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"*, %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]", %"FunctionPtr3[Void, FileCharSource mut, String mut, Int]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @readChars.502(%FileCharSource* %this, %String* %dest, i32 %numChars) #4 {
  %numChars.addr = alloca i32
  store i32 %numChars, i32* %numChars.addr
  %"$rangeVar" = alloca %"NumericRangeInc[Int]"
  %"$tmpForRef" = alloca i32
  %i = alloca i32
  %ch = alloca i8
  br label %code

code:                                             ; preds = %0
  store i32 0, i32* %"$tmpForRef"
  %1 = load i32, i32* %numChars.addr
  call void @..(%"NumericRangeInc[Int]"* %"$rangeVar", i32* %"$tmpForRef", i32 %1)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = call i1 @isEmpty.504(%"NumericRangeInc[Int]"* %"$rangeVar")
  %3 = xor i1 true, %2
  br i1 %3, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %4 = call i32 @front.505(%"NumericRangeInc[Int]"* %"$rangeVar")
  store i32 %4, i32* %i
  %5 = getelementptr inbounds %FileCharSource, %FileCharSource* %this, i32 0, i32 0
  %6 = call i8 @readChar(%File* %5)
  store i8 %6, i8* %ch
  br label %if_block

while_step:                                       ; preds = %if_end
  call void @popFront.506(%"NumericRangeInc[Int]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %if_then, %while_block
  ret void

if_block:                                         ; preds = %while_body
  %7 = getelementptr inbounds %FileCharSource, %FileCharSource* %this, i32 0, i32 0
  %8 = call i1 @isEof(%File* %7)
  br i1 %8, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  br label %while_end

if_end:                                           ; preds = %dumy_block, %if_block
  %9 = load i8, i8* %ch
  call void @"+=.450"(%String* %dest, i8 %9)
  br label %while_step

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @..(%"NumericRangeInc[Int]"* sret %_result, i32* %start, i32 %end) #4 {
  %end.addr = alloca i32
  store i32 %end, i32* %end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %start
  %2 = load i32, i32* %end.addr
  call void @ctor.503(%"NumericRangeInc[Int]"* %_result, i32 %1, i32 %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.503(%"NumericRangeInc[Int]"* %this, i32 %start, i32 %end) #4 {
  %start.addr = alloca i32
  store i32 %start, i32* %start.addr
  %end.addr = alloca i32
  store i32 %end, i32* %end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %start.addr
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 0
  store i32 %1, i32* %2
  %3 = load i32, i32* %end.addr
  %4 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 1
  store i32 %3, i32* %4
  %5 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 2
  store i1 false, i1* %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.504(%"NumericRangeInc[Int]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 2
  %2 = load i1, i1* %1
  br i1 %2, label %cond_alt1, label %cond_alt2

cond_alt1:                                        ; preds = %code
  %3 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 1
  %6 = load i32, i32* %5
  %7 = call i1 @_Int32_opGT(i32 %4, i32 %6)
  br label %cond_end

cond_alt2:                                        ; preds = %code
  %8 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 0
  %9 = load i32, i32* %8
  %10 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 1
  %11 = load i32, i32* %10
  %12 = call i1 @_Int32_opGE(i32 %9, i32 %11)
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi i1 [ %7, %cond_alt1 ], [ %12, %cond_alt2 ]
  ret i1 %cond
}

; Function Attrs: inlinehint nounwind
define internal i32 @front.505(%"NumericRangeInc[Int]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 0
  %2 = load i32, i32* %1
  ret i32 %2
}

; Function Attrs: inlinehint nounwind
define internal i8 @readChar(%File* %this) #4 {
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load %File, %File* %this
  %2 = call i32 @fgetc(%File %1)
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* %tmp.this
  %4 = load i8, i8* %tmp.this
  ret i8 %4
}

declare i32 @fgetc(%File)

; Function Attrs: inlinehint nounwind
define internal i1 @isEof(%File* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = load %File, %File* %this
  %2 = call i32 @feof(%File %1)
  %3 = call i1 @_Int32_opNE(i32 0, i32 %2)
  ret i1 %3
}

declare i32 @feof(%File)

; Function Attrs: alwaysinline nounwind
define internal void @popFront.506(%"NumericRangeInc[Int]"* %this) #3 {
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 0
  %2 = load i32, i32* %1
  store i32 1, i32* %tmp.this
  %3 = load i32, i32* %tmp.this
  %4 = call i32 @_Int32_opPlus(i32 %2, i32 %3)
  %5 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 0
  store i32 %4, i32* %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.507(%"NumericRangeInc[Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.508(%CharSource* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: noinline nounwind
define %ParserContext* @spr_parserIf_createParserStringRef(%StringRef %code, %Location* %loc, %AstBuilder* %astBuilder, %ErrorReporter* %reporter) #5 {
  %code.addr = alloca %StringRef
  store %StringRef %code, %StringRef* %code.addr
  %stringCharSource = alloca %StringCharSource*
  %"$tmpC" = alloca %CharSource
  br label %code1

code1:                                            ; preds = %0
  %1 = call %StringCharSource* @new.509(%StringRef* %code.addr)
  store %StringCharSource* %1, %StringCharSource** %stringCharSource
  %2 = load %StringCharSource*, %StringCharSource** %stringCharSource
  call void @mkCharSource.511(%CharSource* %"$tmpC", %StringCharSource* %2)
  %3 = call %ParserContext* @spr_parserIf_createParser(%CharSource* %"$tmpC", %Location* %loc, %AstBuilder* %astBuilder, %ErrorReporter* %reporter)
  ret %ParserContext* %3
}

; Function Attrs: inlinehint nounwind
define internal %StringCharSource* @new.509(%StringRef* %arg1) #4 {
  %res = alloca %StringCharSource*
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = call %UntypedPtr @malloc(i32 16)
  store %UntypedPtr %1, %UntypedPtr* %"$tmpForRef"
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %"$tmpForRef", i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = bitcast i8* %3 to %StringCharSource*
  store %StringCharSource* %4, %StringCharSource** %res
  %5 = load %StringCharSource*, %StringCharSource** %res
  %6 = load %StringRef, %StringRef* %arg1
  call void @ctor.510(%StringCharSource* %5, %StringRef %6)
  %7 = load %StringCharSource*, %StringCharSource** %res
  ret %StringCharSource* %7
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.510(%StringCharSource* %this, %StringRef %f_content) #3 {
  %this.addr = alloca %StringCharSource*
  store %StringCharSource* %this, %StringCharSource** %this.addr
  %f_content.addr = alloca %StringRef
  store %StringRef %f_content, %StringRef* %f_content.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringCharSource*, %StringCharSource** %this.addr
  %2 = getelementptr inbounds %StringCharSource, %StringCharSource* %1, i32 0, i32 0
  %3 = load %StringRef, %StringRef* %f_content.addr
  call void @ctor.49(%StringRef* %2, %StringRef %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @mkCharSource.511(%CharSource* sret %_result, %StringCharSource* %obj) #4 {
  %res = alloca %CharSource
  %"$tmpForRef" = alloca %UntypedPtr
  %"$tmpForRef1" = alloca %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"
  %funptr = alloca void (%StringCharSource*, %String*, i32)*
  br label %code

code:                                             ; preds = %0
  call void @ctor.112(%CharSource* %res)
  %1 = getelementptr inbounds %CharSource, %CharSource* %res, i32 0, i32 0
  %2 = call %UntypedPtr @_eraseType.512(%StringCharSource* %obj)
  store %UntypedPtr %2, %UntypedPtr* %"$tmpForRef"
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %"$tmpForRef")
  %3 = getelementptr inbounds %CharSource, %CharSource* %res, i32 0, i32 1
  store void (%StringCharSource*, %String*, i32)* @readChars.516, void (%StringCharSource*, %String*, i32)** %funptr
  %4 = bitcast void (%StringCharSource*, %String*, i32)** %funptr to %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"*
  %5 = load %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]", %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %4
  store %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]" %5, %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %"$tmpForRef1"
  call void @_reinterpretAssign.514(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %3, %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %"$tmpForRef1")
  call void @ctor.163(%CharSource* %_result, %CharSource* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %UntypedPtr @_eraseType.512(%StringCharSource* %obj) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  call void @ctor.513(%UntypedPtr* %tmp.this, %StringCharSource* %obj)
  %1 = load %UntypedPtr, %UntypedPtr* %tmp.this
  ret %UntypedPtr %1
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.513(%UntypedPtr* %this, %StringCharSource* %val) #4 {
  %val.addr = alloca %StringCharSource*
  store %StringCharSource* %val, %StringCharSource** %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = load %StringCharSource*, %StringCharSource** %val.addr
  %3 = bitcast %StringCharSource* %2 to i8*
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @_reinterpretAssign.514(%"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %dest, %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %src) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = bitcast %"FunctionPtr3[Void, UntypedPtr, String mut, Int]"* %dest to %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"*
  call void @"=.515"(%"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %1, %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %src)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.515"(%"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %this, %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %other) #3 {
  %other.addr = alloca %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"*
  store %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %other, %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]", %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %this, i32 0, i32 0
  %2 = load %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"*, %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"** %other.addr
  %3 = getelementptr inbounds %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]", %"FunctionPtr3[Void, StringCharSource mut, String mut, Int]"* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @readChars.516(%StringCharSource* %this, %String* %dest, i32 %numChars) #4 {
  %numChars.addr = alloca i32
  store i32 %numChars, i32* %numChars.addr
  %sz = alloca i32
  %toRead = alloca i32
  %"$rangeVar" = alloca %"NumericRangeInc[Int]"
  %"$tmpForRef" = alloca i32
  %i = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringCharSource, %StringCharSource* %this, i32 0, i32 0
  %2 = load %StringRef, %StringRef* %1
  %3 = call i32 @size(%StringRef %2)
  store i32 %3, i32* %sz
  %4 = load i32, i32* %numChars.addr
  %5 = load i32, i32* %sz
  %6 = call i1 @_Int32_opLT(i32 %4, i32 %5)
  br i1 %6, label %cond_alt1, label %cond_alt2

cond_alt1:                                        ; preds = %code
  %7 = load i32, i32* %numChars.addr
  br label %cond_end

cond_alt2:                                        ; preds = %code
  %8 = load i32, i32* %sz
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi i32 [ %7, %cond_alt1 ], [ %8, %cond_alt2 ]
  store i32 %cond, i32* %toRead
  store i32 0, i32* %"$tmpForRef"
  %9 = load i32, i32* %sz
  call void @..(%"NumericRangeInc[Int]"* %"$rangeVar", i32* %"$tmpForRef", i32 %9)
  br label %while_block

while_block:                                      ; preds = %while_step, %cond_end
  %10 = call i1 @isEmpty.504(%"NumericRangeInc[Int]"* %"$rangeVar")
  %11 = xor i1 true, %10
  br i1 %11, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %12 = call i32 @front.505(%"NumericRangeInc[Int]"* %"$rangeVar")
  store i32 %12, i32* %i
  %13 = getelementptr inbounds %StringCharSource, %StringCharSource* %this, i32 0, i32 0
  %14 = load %StringRef, %StringRef* %13
  %15 = call i8* @front(%StringRef %14)
  %16 = load i8, i8* %15
  call void @"+=.450"(%String* %dest, i8 %16)
  %17 = getelementptr inbounds %StringCharSource, %StringCharSource* %this, i32 0, i32 0
  call void @popFront(%StringRef* %17)
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.506(%"NumericRangeInc[Int]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: noinline nounwind
define void @spr_parserIf_destroyParser(%ParserContext* %ctx) #5 {
  br label %code

code:                                             ; preds = %0
  call void @delete(%ParserContext* %ctx)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @delete(%ParserContext* %obj) #4 {
  %obj.addr = alloca %ParserContext*
  store %ParserContext* %obj, %ParserContext** %obj.addr
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %ParserContext*, %ParserContext** %obj.addr
  %2 = bitcast %ParserContext* %1 to i8*
  %3 = call i1 @implOpRefNE(i8* %2, i8* null)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %ParserContext*, %ParserContext** %obj.addr
  call void @dtor.236(%ParserContext* %4)
  %5 = load %ParserContext*, %ParserContext** %obj.addr
  call void @ctor.517(%UntypedPtr* %tmp.this, %ParserContext* %5)
  %6 = load %UntypedPtr, %UntypedPtr* %tmp.this
  call void @free(%UntypedPtr %6)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.517(%UntypedPtr* %this, %ParserContext* %val) #4 {
  %val.addr = alloca %ParserContext*
  store %ParserContext* %val, %ParserContext** %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = load %ParserContext*, %ParserContext** %val.addr
  %3 = bitcast %ParserContext* %2 to i8*
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: noinline nounwind
define void @spr_parserIf_nextToken(%ParserContext* %ctx, %Token* %outToken) #5 {
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ParserContext, %ParserContext* %ctx, i32 0, i32 0
  call void @"post_++.387"(%Token* %"$tmpC", %SparrowScanner* %1)
  call void @"=.274"(%Token* %outToken, %Token* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC")
  ret void
}

; Function Attrs: noinline nounwind
define %Node @spr_parserIf_parseModule(%ParserContext* %ctx) #5 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ParserContext, %ParserContext* %ctx, i32 0, i32 2
  %2 = call %Node @parseModule(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  ret %Node %2
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseModule(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %moduleName = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %decls = alloca %Node
  %tmp.this = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  %2 = call %Node @parseModuleName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %2, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %moduleName, %Node* %"$tmpForRef1")
  call void @ctor.531(%Node* %decls)
  call void @parseStmts(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true, %Node* %decls)
  call void @ctor.393(%TokenType* %tmp.this, i32 0)
  %3 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %5 = load %Location, %Location* %loc
  %6 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %7 = call %Location @span(%Location %5, %Location %6)
  %8 = load %Node, %Node* %moduleName
  %9 = load %Node, %Node* %decls
  %10 = call %Node @mkModule(%AstBuilder* %4, %Location %7, %Node %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 0
  %3 = load %Location, %Location* %2
  call void @dtor.238(%Token* %"$tmpC")
  ret %Location %3

dumy_block:                                       ; No predecessors!
  call void @dtor.238(%Token* %"$tmpC")
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @"pre_*.518"(%Token* sret %_result, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %r) #4 {
  br label %code

code:                                             ; preds = %0
  call void @front.519(%Token* %_result, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %r)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @front.519(%Token* sret %_result, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %2 = call %Token* @front.471(%"Vector[Token]"* %1)
  call void @ctor.177(%Token* %_result, %Token* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.520(%Node* %this, %Node* %other) #3 {
  %other.addr = alloca %Node*
  store %Node* %other, %Node** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Node, %Node* %this, i32 0, i32 0
  %2 = load %Node*, %Node** %other.addr
  %3 = getelementptr inbounds %Node, %Node* %2, i32 0, i32 0
  %4 = load %UntypedPtr, %UntypedPtr* %3
  call void @ctor.45(%UntypedPtr* %1, %UntypedPtr %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseModuleName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %qid = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this2 = alloca %TokenType
  %tmp.this3 = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  call void @ctor.393(%TokenType* %tmp.this, i32 32)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %if_block

if_block:                                         ; preds = %while_end
  call void @ctor.393(%TokenType* %tmp.this1, i32 2)
  %2 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = call %Node @parseQualifiedName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 false)
  store %Node %3, %Node* %"$tmpForRef"
  call void @ctor.520(%Node* %qid, %Node* %"$tmpForRef")
  call void @ctor.393(%TokenType* %tmp.this2, i32 32)
  %4 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this2)
  %5 = load %Node, %Node* %qid
  ret %Node %5

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.531(%Node* %tmp.this3)
  %6 = load %Node, %Node* %tmp.this3
  ret %Node %6

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %t) #4 {
  %"$tmpC" = alloca %Token
  %"$tmpC1" = alloca %Token
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  %3 = call i1 @"==.328"(%TokenType* %2, %TokenType* %t)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"post_++.521"(%Token* %"$tmpC1", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %5)
  call void @"=.274"(%Token* %4, %Token* %"$tmpC1")
  call void @dtor.238(%Token* %"$tmpC1")
  call void @dtor.238(%Token* %"$tmpC")
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  call void @dtor.238(%Token* %"$tmpC")
  ret i1 false

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @"post_++.521"(%Token* sret %_result, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %r) #4 {
  %res = alloca %Token
  br label %code

code:                                             ; preds = %0
  call void @front.519(%Token* %res, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %r)
  call void @popFront.522(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %r)
  call void @ctor.177(%Token* %_result, %Token* %res)
  call void @dtor.238(%Token* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.238(%Token* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.522(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  call void @remove.475(%"Vector[Token]"* %1, i32 0)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %3 = call i1 @isEmpty.469(%"Vector[Token]"* %2)
  br i1 %3, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %5 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"post_++.496"(%Token* %"$tmpC", %"SparrowLayoutDecoder[SparrowScanner]"* %5)
  call void @"+=.385"(%"Vector[Token]"* %4, %Token* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC")
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  ret void

cond.true:                                        ; preds = %if_block
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  %7 = call i1 @"pre_!!.494"(%"SparrowLayoutDecoder[SparrowScanner]"* %6)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %7, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseQualifiedName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %allowStar) #4 {
  %allowStar.addr = alloca i1
  store i1 %allowStar, i1* %allowStar.addr
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %tmp.this = alloca %TokenType
  %base = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %lastId = alloca %String
  %tmp.this2 = alloca %TokenType
  %tmp.this3 = alloca %TokenType
  %"$tmpForRef4" = alloca %Node
  %tmp.this8 = alloca %TokenType
  %"$tmpForRef9" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  call void @ctor.393(%TokenType* %tmp.this, i32 37)
  %2 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %4 = load %Location, %Location* %loc
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 2
  %7 = call %StringRef @asStringRef(%String* %6)
  %8 = call %Node @mkIdentifier(%AstBuilder* %3, %Location %4, %StringRef %7)
  store %Node %8, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %base, %Node* %"$tmpForRef1")
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 2
  call void @ctor.165(%String* %lastId, %String* %10)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  call void @ctor.393(%TokenType* %tmp.this2, i32 34)
  %11 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this2)
  br i1 %11, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block

while_step:                                       ; preds = %cond_destruct_end7
  br label %while_block

while_end:                                        ; preds = %cond_destruct_end, %while_block
  %12 = load %Node, %Node* %base
  call void @dtor.239(%String* %lastId)
  ret %Node %12

if_block:                                         ; preds = %while_body
  %13 = load i1, i1* %allowStar.addr
  br i1 %13, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %15 = load %Location, %Location* %loc
  %16 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %17 = call %Location @span(%Location %15, %Location %16)
  %18 = load %Node, %Node* %base
  %19 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %20 = getelementptr inbounds %Token, %Token* %19, i32 0, i32 2
  %21 = call %StringRef @asStringRef(%String* %20)
  %22 = call %Node @mkStarExpr(%AstBuilder* %14, %Location %17, %Node %18, %StringRef %21)
  store %Node %22, %Node* %"$tmpForRef4"
  call void @"=.529"(%Node* %base, %Node* %"$tmpForRef4")
  br i1 %13, label %cond_destruct_alt1, label %cond_destruct_alt2

if_end:                                           ; preds = %dumy_block, %cond.end
  br i1 %13, label %cond_destruct_alt15, label %cond_destruct_alt26

cond.true:                                        ; preds = %if_block
  call void @ctor.393(%TokenType* %tmp.this3, i32 38)
  %23 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this3)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %23, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end

cond_destruct_alt1:                               ; preds = %if_then
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_then
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  br label %while_end

dumy_block:                                       ; No predecessors!
  br label %if_end

cond_destruct_alt15:                              ; preds = %if_end
  br label %cond_destruct_end7

cond_destruct_alt26:                              ; preds = %if_end
  br label %cond_destruct_end7

cond_destruct_end7:                               ; preds = %cond_destruct_alt26, %cond_destruct_alt15
  call void @ctor.393(%TokenType* %tmp.this8, i32 37)
  %24 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this8)
  %25 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %26 = load %Location, %Location* %loc
  %27 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %28 = call %Location @span(%Location %26, %Location %27)
  %29 = load %Node, %Node* %base
  %30 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %31 = getelementptr inbounds %Token, %Token* %30, i32 0, i32 2
  %32 = call %StringRef @asStringRef(%String* %31)
  %33 = call %Node @mkCompoundExpr(%AstBuilder* %25, %Location %28, %Node %29, %StringRef %32)
  store %Node %33, %Node* %"$tmpForRef9"
  call void @"=.529"(%Node* %base, %Node* %"$tmpForRef9")
  br label %while_step

dumy_block10:                                     ; No predecessors!
  call void @dtor.239(%String* %lastId)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %t) #4 {
  %"$tmpC" = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %"$tmpC5" = alloca %Token
  %"$tmpForRef6" = alloca %StringRef
  %tmp.StringRef7 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %t)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 2
  %3 = load i1, i1* %2
  br i1 %3, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  %4 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %5 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %6 = bitcast %UntypedPtr* %4 to i8**
  %7 = bitcast %UntypedPtr* %5 to i8**
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.93, i32 0, i32 0), i8** %6
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.93, i32 0, i32 25), i8** %7
  %8 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %8, %StringRef* %"$tmpForRef"
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC5", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  %10 = getelementptr inbounds %Token, %Token* %"$tmpC5", i32 0, i32 1
  %11 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef7, i32 0, i32 0
  %12 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef7, i32 0, i32 1
  %13 = bitcast %UntypedPtr* %11 to i8**
  %14 = bitcast %UntypedPtr* %12 to i8**
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.94, i32 0, i32 0), i8** %13
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.94, i32 0, i32 12), i8** %14
  %15 = load %StringRef, %StringRef* %tmp.StringRef7
  store %StringRef %15, %StringRef* %"$tmpForRef6"
  call void @toString.524(%String* %"$tmpC", %StringRef* %"$tmpForRef", %TokenType* %10, %StringRef* %"$tmpForRef6", %TokenType* %t)
  call void @reportError.523(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC5")
  ret i1 false

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal void @reportError.523(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %String* %msg) #4 {
  %"$tmpC" = alloca %Token
  %"$tmpC1" = alloca %Token
  %tmp.this = alloca %TokenType
  %"$tmpC2" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 4
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  %3 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 0
  %4 = load %Location, %Location* %3
  call void @reportError.426(%ErrorReporter* %1, %Location %4, %String* %msg)
  call void @dtor.238(%Token* %"$tmpC")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC1", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %5)
  %6 = getelementptr inbounds %Token, %Token* %"$tmpC1", i32 0, i32 1
  call void @ctor.393(%TokenType* %tmp.this, i32 0)
  %7 = call i1 @"==.328"(%TokenType* %6, %TokenType* %tmp.this)
  %8 = xor i1 true, %7
  br i1 %8, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"post_++.521"(%Token* %"$tmpC2", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %10)
  call void @"=.274"(%Token* %9, %Token* %"$tmpC2")
  call void @dtor.238(%Token* %"$tmpC2")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  call void @dtor.238(%Token* %"$tmpC1")
  %11 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 2
  store i1 true, i1* %11
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @toString.524(%String* sret %_result, %StringRef* %a1, %TokenType* %a2, %StringRef* %a3, %TokenType* %a4) #4 {
  %s = alloca %StringOutputStream
  %"$tmpC" = alloca %StringOutputStream
  %"$tmpC1" = alloca %StringOutputStream
  %"$tmpC2" = alloca %StringOutputStream
  %"$tmpC3" = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.428(%StringOutputStream* %s)
  call void @"<<"(%StringOutputStream* %"$tmpC3", %StringOutputStream* %s, %StringRef* %a1)
  call void @"<<.525"(%StringOutputStream* %"$tmpC2", %StringOutputStream* %"$tmpC3", %TokenType* %a2)
  call void @"<<"(%StringOutputStream* %"$tmpC1", %StringOutputStream* %"$tmpC2", %StringRef* %a3)
  call void @"<<.525"(%StringOutputStream* %"$tmpC", %StringOutputStream* %"$tmpC1", %TokenType* %a4)
  call void @dtor.431(%StringOutputStream* %"$tmpC")
  call void @dtor.431(%StringOutputStream* %"$tmpC1")
  call void @dtor.431(%StringOutputStream* %"$tmpC2")
  call void @dtor.431(%StringOutputStream* %"$tmpC3")
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.165(%String* %_result, %String* %1)
  call void @dtor.431(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.431(%StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"<<.525"(%StringOutputStream* sret %_result, %StringOutputStream* %s, %TokenType* %x) #4 {
  br label %code

code:                                             ; preds = %0
  call void @">>"(%TokenType* %x, %StringOutputStream* %s)
  call void @ctor.430(%StringOutputStream* %_result, %StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @">>"(%TokenType* %t, %StringOutputStream* %os) #4 {
  %"$tmpC" = alloca %StringOutputStream
  %"$tmpC1" = alloca %String
  br label %code

code:                                             ; preds = %0
  call void @_asString(%String* %"$tmpC1", %TokenType* %t)
  call void @"<<.526"(%StringOutputStream* %"$tmpC", %StringOutputStream* %os, %String* %"$tmpC1")
  call void @dtor.431(%StringOutputStream* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC1")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"<<.526"(%StringOutputStream* sret %_result, %StringOutputStream* %s, %String* %x) #4 {
  br label %code

code:                                             ; preds = %0
  call void @">>.527"(%String* %x, %StringOutputStream* %s)
  call void @ctor.430(%StringOutputStream* %_result, %StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @">>.527"(%String* %this, %StringOutputStream* %os) #4 {
  %"$tmpC" = alloca %StringOutputStream
  %"$tmpForRef" = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = call %StringRef @asStringRef(%String* %this)
  store %StringRef %1, %StringRef* %"$tmpForRef"
  call void @"<<"(%StringOutputStream* %"$tmpC", %StringOutputStream* %os, %StringRef* %"$tmpForRef")
  call void @dtor.431(%StringOutputStream* %"$tmpC")
  ret void
}

; Function Attrs: noinline nounwind
define void @_asString(%String* sret %_result, %TokenType* %t) #5 {
  %tmp.this = alloca %TokenType
  %tmp.StringRef = alloca %StringRef
  %tmp.this5 = alloca %TokenType
  %tmp.StringRef6 = alloca %StringRef
  %tmp.this12 = alloca %TokenType
  %tmp.StringRef13 = alloca %StringRef
  %tmp.this19 = alloca %TokenType
  %tmp.StringRef20 = alloca %StringRef
  %tmp.this26 = alloca %TokenType
  %tmp.StringRef27 = alloca %StringRef
  %tmp.this33 = alloca %TokenType
  %tmp.StringRef34 = alloca %StringRef
  %tmp.this40 = alloca %TokenType
  %tmp.StringRef41 = alloca %StringRef
  %tmp.this47 = alloca %TokenType
  %tmp.StringRef48 = alloca %StringRef
  %tmp.this54 = alloca %TokenType
  %tmp.StringRef55 = alloca %StringRef
  %tmp.this61 = alloca %TokenType
  %tmp.StringRef62 = alloca %StringRef
  %tmp.this68 = alloca %TokenType
  %tmp.StringRef69 = alloca %StringRef
  %tmp.this75 = alloca %TokenType
  %tmp.StringRef76 = alloca %StringRef
  %tmp.this82 = alloca %TokenType
  %tmp.StringRef83 = alloca %StringRef
  %tmp.this89 = alloca %TokenType
  %tmp.StringRef90 = alloca %StringRef
  %tmp.this96 = alloca %TokenType
  %tmp.StringRef97 = alloca %StringRef
  %tmp.this103 = alloca %TokenType
  %tmp.StringRef104 = alloca %StringRef
  %tmp.this110 = alloca %TokenType
  %tmp.StringRef111 = alloca %StringRef
  %tmp.this117 = alloca %TokenType
  %tmp.StringRef118 = alloca %StringRef
  %tmp.this124 = alloca %TokenType
  %tmp.StringRef125 = alloca %StringRef
  %tmp.this131 = alloca %TokenType
  %tmp.StringRef132 = alloca %StringRef
  %tmp.this138 = alloca %TokenType
  %tmp.StringRef139 = alloca %StringRef
  %tmp.this145 = alloca %TokenType
  %tmp.StringRef146 = alloca %StringRef
  %tmp.this152 = alloca %TokenType
  %tmp.StringRef153 = alloca %StringRef
  %tmp.this159 = alloca %TokenType
  %tmp.StringRef160 = alloca %StringRef
  %tmp.this166 = alloca %TokenType
  %tmp.StringRef167 = alloca %StringRef
  %tmp.this173 = alloca %TokenType
  %tmp.StringRef174 = alloca %StringRef
  %tmp.this180 = alloca %TokenType
  %tmp.StringRef181 = alloca %StringRef
  %tmp.this187 = alloca %TokenType
  %tmp.StringRef188 = alloca %StringRef
  %tmp.this194 = alloca %TokenType
  %tmp.StringRef195 = alloca %StringRef
  %tmp.this201 = alloca %TokenType
  %tmp.StringRef202 = alloca %StringRef
  %tmp.this208 = alloca %TokenType
  %tmp.StringRef209 = alloca %StringRef
  %tmp.this215 = alloca %TokenType
  %tmp.StringRef216 = alloca %StringRef
  %tmp.this222 = alloca %TokenType
  %tmp.StringRef223 = alloca %StringRef
  %tmp.this229 = alloca %TokenType
  %tmp.StringRef230 = alloca %StringRef
  %tmp.this236 = alloca %TokenType
  %tmp.StringRef237 = alloca %StringRef
  %tmp.this243 = alloca %TokenType
  %tmp.StringRef244 = alloca %StringRef
  %tmp.this250 = alloca %TokenType
  %tmp.StringRef251 = alloca %StringRef
  %tmp.this257 = alloca %TokenType
  %tmp.StringRef258 = alloca %StringRef
  %tmp.this264 = alloca %TokenType
  %tmp.StringRef265 = alloca %StringRef
  %tmp.this271 = alloca %TokenType
  %tmp.StringRef272 = alloca %StringRef
  %tmp.this278 = alloca %TokenType
  %tmp.StringRef279 = alloca %StringRef
  %tmp.this285 = alloca %TokenType
  %tmp.StringRef286 = alloca %StringRef
  %tmp.this292 = alloca %TokenType
  %tmp.StringRef293 = alloca %StringRef
  %tmp.this299 = alloca %TokenType
  %tmp.StringRef300 = alloca %StringRef
  %tmp.this306 = alloca %TokenType
  %tmp.StringRef307 = alloca %StringRef
  %tmp.this313 = alloca %TokenType
  %tmp.StringRef314 = alloca %StringRef
  %tmp.this320 = alloca %TokenType
  %tmp.StringRef321 = alloca %StringRef
  %tmp.this327 = alloca %TokenType
  %tmp.StringRef328 = alloca %StringRef
  %tmp.this334 = alloca %TokenType
  %tmp.StringRef335 = alloca %StringRef
  %tmp.this340 = alloca %TokenType
  %tmp.StringRef341 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 0)
  %1 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %3 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %4 = bitcast %UntypedPtr* %2 to i8**
  %5 = bitcast %UntypedPtr* %3 to i8**
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.43, i32 0, i32 0), i8** %4
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.43, i32 0, i32 11), i8** %5
  %6 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.448(%String* %_result, %StringRef %6)
  ret void

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %if_end4, %dumy_block
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_else
  call void @ctor.393(%TokenType* %tmp.this5, i32 1)
  %7 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this5)
  br i1 %7, label %if_then2, label %if_else3

if_then2:                                         ; preds = %if_block1
  %8 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef6, i32 0, i32 0
  %9 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef6, i32 0, i32 1
  %10 = bitcast %UntypedPtr* %8 to i8**
  %11 = bitcast %UntypedPtr* %9 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.44, i32 0, i32 0), i8** %10
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.44, i32 0, i32 8), i8** %11
  %12 = load %StringRef, %StringRef* %tmp.StringRef6
  call void @ctor.448(%String* %_result, %StringRef %12)
  ret void

if_else3:                                         ; preds = %if_block1
  br label %if_block8

if_end4:                                          ; preds = %if_end11, %dumy_block7
  br label %if_end

dumy_block7:                                      ; No predecessors!
  br label %if_end4

if_block8:                                        ; preds = %if_else3
  call void @ctor.393(%TokenType* %tmp.this12, i32 2)
  %13 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this12)
  br i1 %13, label %if_then9, label %if_else10

if_then9:                                         ; preds = %if_block8
  %14 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef13, i32 0, i32 0
  %15 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef13, i32 0, i32 1
  %16 = bitcast %UntypedPtr* %14 to i8**
  %17 = bitcast %UntypedPtr* %15 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.45, i32 0, i32 0), i8** %16
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.45, i32 0, i32 8), i8** %17
  %18 = load %StringRef, %StringRef* %tmp.StringRef13
  call void @ctor.448(%String* %_result, %StringRef %18)
  ret void

if_else10:                                        ; preds = %if_block8
  br label %if_block15

if_end11:                                         ; preds = %if_end18, %dumy_block14
  br label %if_end4

dumy_block14:                                     ; No predecessors!
  br label %if_end11

if_block15:                                       ; preds = %if_else10
  call void @ctor.393(%TokenType* %tmp.this19, i32 3)
  %19 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this19)
  br i1 %19, label %if_then16, label %if_else17

if_then16:                                        ; preds = %if_block15
  %20 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef20, i32 0, i32 0
  %21 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef20, i32 0, i32 1
  %22 = bitcast %UntypedPtr* %20 to i8**
  %23 = bitcast %UntypedPtr* %21 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.46, i32 0, i32 0), i8** %22
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.46, i32 0, i32 8), i8** %23
  %24 = load %StringRef, %StringRef* %tmp.StringRef20
  call void @ctor.448(%String* %_result, %StringRef %24)
  ret void

if_else17:                                        ; preds = %if_block15
  br label %if_block22

if_end18:                                         ; preds = %if_end25, %dumy_block21
  br label %if_end11

dumy_block21:                                     ; No predecessors!
  br label %if_end18

if_block22:                                       ; preds = %if_else17
  call void @ctor.393(%TokenType* %tmp.this26, i32 4)
  %25 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this26)
  br i1 %25, label %if_then23, label %if_else24

if_then23:                                        ; preds = %if_block22
  %26 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef27, i32 0, i32 0
  %27 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef27, i32 0, i32 1
  %28 = bitcast %UntypedPtr* %26 to i8**
  %29 = bitcast %UntypedPtr* %27 to i8**
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.47, i32 0, i32 0), i8** %28
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.47, i32 0, i32 9), i8** %29
  %30 = load %StringRef, %StringRef* %tmp.StringRef27
  call void @ctor.448(%String* %_result, %StringRef %30)
  ret void

if_else24:                                        ; preds = %if_block22
  br label %if_block29

if_end25:                                         ; preds = %if_end32, %dumy_block28
  br label %if_end18

dumy_block28:                                     ; No predecessors!
  br label %if_end25

if_block29:                                       ; preds = %if_else24
  call void @ctor.393(%TokenType* %tmp.this33, i32 5)
  %31 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this33)
  br i1 %31, label %if_then30, label %if_else31

if_then30:                                        ; preds = %if_block29
  %32 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef34, i32 0, i32 0
  %33 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef34, i32 0, i32 1
  %34 = bitcast %UntypedPtr* %32 to i8**
  %35 = bitcast %UntypedPtr* %33 to i8**
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.48, i32 0, i32 0), i8** %34
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.48, i32 0, i32 10), i8** %35
  %36 = load %StringRef, %StringRef* %tmp.StringRef34
  call void @ctor.448(%String* %_result, %StringRef %36)
  ret void

if_else31:                                        ; preds = %if_block29
  br label %if_block36

if_end32:                                         ; preds = %if_end39, %dumy_block35
  br label %if_end25

dumy_block35:                                     ; No predecessors!
  br label %if_end32

if_block36:                                       ; preds = %if_else31
  call void @ctor.393(%TokenType* %tmp.this40, i32 6)
  %37 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this40)
  br i1 %37, label %if_then37, label %if_else38

if_then37:                                        ; preds = %if_block36
  %38 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef41, i32 0, i32 0
  %39 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef41, i32 0, i32 1
  %40 = bitcast %UntypedPtr* %38 to i8**
  %41 = bitcast %UntypedPtr* %39 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.49, i32 0, i32 0), i8** %40
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.49, i32 0, i32 5), i8** %41
  %42 = load %StringRef, %StringRef* %tmp.StringRef41
  call void @ctor.448(%String* %_result, %StringRef %42)
  ret void

if_else38:                                        ; preds = %if_block36
  br label %if_block43

if_end39:                                         ; preds = %if_end46, %dumy_block42
  br label %if_end32

dumy_block42:                                     ; No predecessors!
  br label %if_end39

if_block43:                                       ; preds = %if_else38
  call void @ctor.393(%TokenType* %tmp.this47, i32 8)
  %43 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this47)
  br i1 %43, label %if_then44, label %if_else45

if_then44:                                        ; preds = %if_block43
  %44 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef48, i32 0, i32 0
  %45 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef48, i32 0, i32 1
  %46 = bitcast %UntypedPtr* %44 to i8**
  %47 = bitcast %UntypedPtr* %45 to i8**
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.50, i32 0, i32 0), i8** %46
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.50, i32 0, i32 9), i8** %47
  %48 = load %StringRef, %StringRef* %tmp.StringRef48
  call void @ctor.448(%String* %_result, %StringRef %48)
  ret void

if_else45:                                        ; preds = %if_block43
  br label %if_block50

if_end46:                                         ; preds = %if_end53, %dumy_block49
  br label %if_end39

dumy_block49:                                     ; No predecessors!
  br label %if_end46

if_block50:                                       ; preds = %if_else45
  call void @ctor.393(%TokenType* %tmp.this54, i32 9)
  %49 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this54)
  br i1 %49, label %if_then51, label %if_else52

if_then51:                                        ; preds = %if_block50
  %50 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef55, i32 0, i32 0
  %51 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef55, i32 0, i32 1
  %52 = bitcast %UntypedPtr* %50 to i8**
  %53 = bitcast %UntypedPtr* %51 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.51, i32 0, i32 0), i8** %52
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.51, i32 0, i32 7), i8** %53
  %54 = load %StringRef, %StringRef* %tmp.StringRef55
  call void @ctor.448(%String* %_result, %StringRef %54)
  ret void

if_else52:                                        ; preds = %if_block50
  br label %if_block57

if_end53:                                         ; preds = %if_end60, %dumy_block56
  br label %if_end46

dumy_block56:                                     ; No predecessors!
  br label %if_end53

if_block57:                                       ; preds = %if_else52
  call void @ctor.393(%TokenType* %tmp.this61, i32 7)
  %55 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this61)
  br i1 %55, label %if_then58, label %if_else59

if_then58:                                        ; preds = %if_block57
  %56 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef62, i32 0, i32 0
  %57 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef62, i32 0, i32 1
  %58 = bitcast %UntypedPtr* %56 to i8**
  %59 = bitcast %UntypedPtr* %57 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.52, i32 0, i32 0), i8** %58
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.52, i32 0, i32 5), i8** %59
  %60 = load %StringRef, %StringRef* %tmp.StringRef62
  call void @ctor.448(%String* %_result, %StringRef %60)
  ret void

if_else59:                                        ; preds = %if_block57
  br label %if_block64

if_end60:                                         ; preds = %if_end67, %dumy_block63
  br label %if_end53

dumy_block63:                                     ; No predecessors!
  br label %if_end60

if_block64:                                       ; preds = %if_else59
  call void @ctor.393(%TokenType* %tmp.this68, i32 10)
  %61 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this68)
  br i1 %61, label %if_then65, label %if_else66

if_then65:                                        ; preds = %if_block64
  %62 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef69, i32 0, i32 0
  %63 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef69, i32 0, i32 1
  %64 = bitcast %UntypedPtr* %62 to i8**
  %65 = bitcast %UntypedPtr* %63 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.53, i32 0, i32 0), i8** %64
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.53, i32 0, i32 5), i8** %65
  %66 = load %StringRef, %StringRef* %tmp.StringRef69
  call void @ctor.448(%String* %_result, %StringRef %66)
  ret void

if_else66:                                        ; preds = %if_block64
  br label %if_block71

if_end67:                                         ; preds = %if_end74, %dumy_block70
  br label %if_end60

dumy_block70:                                     ; No predecessors!
  br label %if_end67

if_block71:                                       ; preds = %if_else66
  call void @ctor.393(%TokenType* %tmp.this75, i32 11)
  %67 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this75)
  br i1 %67, label %if_then72, label %if_else73

if_then72:                                        ; preds = %if_block71
  %68 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef76, i32 0, i32 0
  %69 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef76, i32 0, i32 1
  %70 = bitcast %UntypedPtr* %68 to i8**
  %71 = bitcast %UntypedPtr* %69 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.54, i32 0, i32 0), i8** %70
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.54, i32 0, i32 7), i8** %71
  %72 = load %StringRef, %StringRef* %tmp.StringRef76
  call void @ctor.448(%String* %_result, %StringRef %72)
  ret void

if_else73:                                        ; preds = %if_block71
  br label %if_block78

if_end74:                                         ; preds = %if_end81, %dumy_block77
  br label %if_end67

dumy_block77:                                     ; No predecessors!
  br label %if_end74

if_block78:                                       ; preds = %if_else73
  call void @ctor.393(%TokenType* %tmp.this82, i32 12)
  %73 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this82)
  br i1 %73, label %if_then79, label %if_else80

if_then79:                                        ; preds = %if_block78
  %74 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef83, i32 0, i32 0
  %75 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef83, i32 0, i32 1
  %76 = bitcast %UntypedPtr* %74 to i8**
  %77 = bitcast %UntypedPtr* %75 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.55, i32 0, i32 0), i8** %76
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.55, i32 0, i32 7), i8** %77
  %78 = load %StringRef, %StringRef* %tmp.StringRef83
  call void @ctor.448(%String* %_result, %StringRef %78)
  ret void

if_else80:                                        ; preds = %if_block78
  br label %if_block85

if_end81:                                         ; preds = %if_end88, %dumy_block84
  br label %if_end74

dumy_block84:                                     ; No predecessors!
  br label %if_end81

if_block85:                                       ; preds = %if_else80
  call void @ctor.393(%TokenType* %tmp.this89, i32 13)
  %79 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this89)
  br i1 %79, label %if_then86, label %if_else87

if_then86:                                        ; preds = %if_block85
  %80 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef90, i32 0, i32 0
  %81 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef90, i32 0, i32 1
  %82 = bitcast %UntypedPtr* %80 to i8**
  %83 = bitcast %UntypedPtr* %81 to i8**
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.56, i32 0, i32 0), i8** %82
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.56, i32 0, i32 10), i8** %83
  %84 = load %StringRef, %StringRef* %tmp.StringRef90
  call void @ctor.448(%String* %_result, %StringRef %84)
  ret void

if_else87:                                        ; preds = %if_block85
  br label %if_block92

if_end88:                                         ; preds = %if_end95, %dumy_block91
  br label %if_end81

dumy_block91:                                     ; No predecessors!
  br label %if_end88

if_block92:                                       ; preds = %if_else87
  call void @ctor.393(%TokenType* %tmp.this96, i32 14)
  %85 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this96)
  br i1 %85, label %if_then93, label %if_else94

if_then93:                                        ; preds = %if_block92
  %86 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef97, i32 0, i32 0
  %87 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef97, i32 0, i32 1
  %88 = bitcast %UntypedPtr* %86 to i8**
  %89 = bitcast %UntypedPtr* %87 to i8**
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.57, i32 0, i32 0), i8** %88
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.57, i32 0, i32 9), i8** %89
  %90 = load %StringRef, %StringRef* %tmp.StringRef97
  call void @ctor.448(%String* %_result, %StringRef %90)
  ret void

if_else94:                                        ; preds = %if_block92
  br label %if_block99

if_end95:                                         ; preds = %if_end102, %dumy_block98
  br label %if_end88

dumy_block98:                                     ; No predecessors!
  br label %if_end95

if_block99:                                       ; preds = %if_else94
  call void @ctor.393(%TokenType* %tmp.this103, i32 15)
  %91 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this103)
  br i1 %91, label %if_then100, label %if_else101

if_then100:                                       ; preds = %if_block99
  %92 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef104, i32 0, i32 0
  %93 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef104, i32 0, i32 1
  %94 = bitcast %UntypedPtr* %92 to i8**
  %95 = bitcast %UntypedPtr* %93 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.58, i32 0, i32 0), i8** %94
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.58, i32 0, i32 5), i8** %95
  %96 = load %StringRef, %StringRef* %tmp.StringRef104
  call void @ctor.448(%String* %_result, %StringRef %96)
  ret void

if_else101:                                       ; preds = %if_block99
  br label %if_block106

if_end102:                                        ; preds = %if_end109, %dumy_block105
  br label %if_end95

dumy_block105:                                    ; No predecessors!
  br label %if_end102

if_block106:                                      ; preds = %if_else101
  call void @ctor.393(%TokenType* %tmp.this110, i32 16)
  %97 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this110)
  br i1 %97, label %if_then107, label %if_else108

if_then107:                                       ; preds = %if_block106
  %98 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef111, i32 0, i32 0
  %99 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef111, i32 0, i32 1
  %100 = bitcast %UntypedPtr* %98 to i8**
  %101 = bitcast %UntypedPtr* %99 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.59, i32 0, i32 0), i8** %100
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.59, i32 0, i32 4), i8** %101
  %102 = load %StringRef, %StringRef* %tmp.StringRef111
  call void @ctor.448(%String* %_result, %StringRef %102)
  ret void

if_else108:                                       ; preds = %if_block106
  br label %if_block113

if_end109:                                        ; preds = %if_end116, %dumy_block112
  br label %if_end102

dumy_block112:                                    ; No predecessors!
  br label %if_end109

if_block113:                                      ; preds = %if_else108
  call void @ctor.393(%TokenType* %tmp.this117, i32 17)
  %103 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this117)
  br i1 %103, label %if_then114, label %if_else115

if_then114:                                       ; preds = %if_block113
  %104 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef118, i32 0, i32 0
  %105 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef118, i32 0, i32 1
  %106 = bitcast %UntypedPtr* %104 to i8**
  %107 = bitcast %UntypedPtr* %105 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.60, i32 0, i32 0), i8** %106
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.60, i32 0, i32 8), i8** %107
  %108 = load %StringRef, %StringRef* %tmp.StringRef118
  call void @ctor.448(%String* %_result, %StringRef %108)
  ret void

if_else115:                                       ; preds = %if_block113
  br label %if_block120

if_end116:                                        ; preds = %if_end123, %dumy_block119
  br label %if_end109

dumy_block119:                                    ; No predecessors!
  br label %if_end116

if_block120:                                      ; preds = %if_else115
  call void @ctor.393(%TokenType* %tmp.this124, i32 18)
  %109 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this124)
  br i1 %109, label %if_then121, label %if_else122

if_then121:                                       ; preds = %if_block120
  %110 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef125, i32 0, i32 0
  %111 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef125, i32 0, i32 1
  %112 = bitcast %UntypedPtr* %110 to i8**
  %113 = bitcast %UntypedPtr* %111 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.61, i32 0, i32 0), i8** %112
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.61, i32 0, i32 7), i8** %113
  %114 = load %StringRef, %StringRef* %tmp.StringRef125
  call void @ctor.448(%String* %_result, %StringRef %114)
  ret void

if_else122:                                       ; preds = %if_block120
  br label %if_block127

if_end123:                                        ; preds = %if_end130, %dumy_block126
  br label %if_end116

dumy_block126:                                    ; No predecessors!
  br label %if_end123

if_block127:                                      ; preds = %if_else122
  call void @ctor.393(%TokenType* %tmp.this131, i32 19)
  %115 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this131)
  br i1 %115, label %if_then128, label %if_else129

if_then128:                                       ; preds = %if_block127
  %116 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef132, i32 0, i32 0
  %117 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef132, i32 0, i32 1
  %118 = bitcast %UntypedPtr* %116 to i8**
  %119 = bitcast %UntypedPtr* %117 to i8**
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.62, i32 0, i32 0), i8** %118
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.62, i32 0, i32 5), i8** %119
  %120 = load %StringRef, %StringRef* %tmp.StringRef132
  call void @ctor.448(%String* %_result, %StringRef %120)
  ret void

if_else129:                                       ; preds = %if_block127
  br label %if_block134

if_end130:                                        ; preds = %if_end137, %dumy_block133
  br label %if_end123

dumy_block133:                                    ; No predecessors!
  br label %if_end130

if_block134:                                      ; preds = %if_else129
  call void @ctor.393(%TokenType* %tmp.this138, i32 20)
  %121 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this138)
  br i1 %121, label %if_then135, label %if_else136

if_then135:                                       ; preds = %if_block134
  %122 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef139, i32 0, i32 0
  %123 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef139, i32 0, i32 1
  %124 = bitcast %UntypedPtr* %122 to i8**
  %125 = bitcast %UntypedPtr* %123 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.63, i32 0, i32 0), i8** %124
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.63, i32 0, i32 7), i8** %125
  %126 = load %StringRef, %StringRef* %tmp.StringRef139
  call void @ctor.448(%String* %_result, %StringRef %126)
  ret void

if_else136:                                       ; preds = %if_block134
  br label %if_block141

if_end137:                                        ; preds = %if_end144, %dumy_block140
  br label %if_end130

dumy_block140:                                    ; No predecessors!
  br label %if_end137

if_block141:                                      ; preds = %if_else136
  call void @ctor.393(%TokenType* %tmp.this145, i32 21)
  %127 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this145)
  br i1 %127, label %if_then142, label %if_else143

if_then142:                                       ; preds = %if_block141
  %128 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef146, i32 0, i32 0
  %129 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef146, i32 0, i32 1
  %130 = bitcast %UntypedPtr* %128 to i8**
  %131 = bitcast %UntypedPtr* %129 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.64, i32 0, i32 0), i8** %130
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.64, i32 0, i32 7), i8** %131
  %132 = load %StringRef, %StringRef* %tmp.StringRef146
  call void @ctor.448(%String* %_result, %StringRef %132)
  ret void

if_else143:                                       ; preds = %if_block141
  br label %if_block148

if_end144:                                        ; preds = %if_end151, %dumy_block147
  br label %if_end137

dumy_block147:                                    ; No predecessors!
  br label %if_end144

if_block148:                                      ; preds = %if_else143
  call void @ctor.393(%TokenType* %tmp.this152, i32 22)
  %133 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this152)
  br i1 %133, label %if_then149, label %if_else150

if_then149:                                       ; preds = %if_block148
  %134 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef153, i32 0, i32 0
  %135 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef153, i32 0, i32 1
  %136 = bitcast %UntypedPtr* %134 to i8**
  %137 = bitcast %UntypedPtr* %135 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.65, i32 0, i32 0), i8** %136
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.65, i32 0, i32 6), i8** %137
  %138 = load %StringRef, %StringRef* %tmp.StringRef153
  call void @ctor.448(%String* %_result, %StringRef %138)
  ret void

if_else150:                                       ; preds = %if_block148
  br label %if_block155

if_end151:                                        ; preds = %if_end158, %dumy_block154
  br label %if_end144

dumy_block154:                                    ; No predecessors!
  br label %if_end151

if_block155:                                      ; preds = %if_else150
  call void @ctor.393(%TokenType* %tmp.this159, i32 23)
  %139 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this159)
  br i1 %139, label %if_then156, label %if_else157

if_then156:                                       ; preds = %if_block155
  %140 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef160, i32 0, i32 0
  %141 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef160, i32 0, i32 1
  %142 = bitcast %UntypedPtr* %140 to i8**
  %143 = bitcast %UntypedPtr* %141 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.66, i32 0, i32 0), i8** %142
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.66, i32 0, i32 6), i8** %143
  %144 = load %StringRef, %StringRef* %tmp.StringRef160
  call void @ctor.448(%String* %_result, %StringRef %144)
  ret void

if_else157:                                       ; preds = %if_block155
  br label %if_block162

if_end158:                                        ; preds = %if_end165, %dumy_block161
  br label %if_end151

dumy_block161:                                    ; No predecessors!
  br label %if_end158

if_block162:                                      ; preds = %if_else157
  call void @ctor.393(%TokenType* %tmp.this166, i32 24)
  %145 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this166)
  br i1 %145, label %if_then163, label %if_else164

if_then163:                                       ; preds = %if_block162
  %146 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef167, i32 0, i32 0
  %147 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef167, i32 0, i32 1
  %148 = bitcast %UntypedPtr* %146 to i8**
  %149 = bitcast %UntypedPtr* %147 to i8**
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.67, i32 0, i32 0), i8** %148
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.67, i32 0, i32 6), i8** %149
  %150 = load %StringRef, %StringRef* %tmp.StringRef167
  call void @ctor.448(%String* %_result, %StringRef %150)
  ret void

if_else164:                                       ; preds = %if_block162
  br label %if_block169

if_end165:                                        ; preds = %if_end172, %dumy_block168
  br label %if_end158

dumy_block168:                                    ; No predecessors!
  br label %if_end165

if_block169:                                      ; preds = %if_else164
  call void @ctor.393(%TokenType* %tmp.this173, i32 25)
  %151 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this173)
  br i1 %151, label %if_then170, label %if_else171

if_then170:                                       ; preds = %if_block169
  %152 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef174, i32 0, i32 0
  %153 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef174, i32 0, i32 1
  %154 = bitcast %UntypedPtr* %152 to i8**
  %155 = bitcast %UntypedPtr* %153 to i8**
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.68, i32 0, i32 0), i8** %154
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.68, i32 0, i32 15), i8** %155
  %156 = load %StringRef, %StringRef* %tmp.StringRef174
  call void @ctor.448(%String* %_result, %StringRef %156)
  ret void

if_else171:                                       ; preds = %if_block169
  br label %if_block176

if_end172:                                        ; preds = %if_end179, %dumy_block175
  br label %if_end165

dumy_block175:                                    ; No predecessors!
  br label %if_end172

if_block176:                                      ; preds = %if_else171
  call void @ctor.393(%TokenType* %tmp.this180, i32 26)
  %157 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this180)
  br i1 %157, label %if_then177, label %if_else178

if_then177:                                       ; preds = %if_block176
  %158 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef181, i32 0, i32 0
  %159 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef181, i32 0, i32 1
  %160 = bitcast %UntypedPtr* %158 to i8**
  %161 = bitcast %UntypedPtr* %159 to i8**
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.69, i32 0, i32 0), i8** %160
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.69, i32 0, i32 15), i8** %161
  %162 = load %StringRef, %StringRef* %tmp.StringRef181
  call void @ctor.448(%String* %_result, %StringRef %162)
  ret void

if_else178:                                       ; preds = %if_block176
  br label %if_block183

if_end179:                                        ; preds = %if_end186, %dumy_block182
  br label %if_end172

dumy_block182:                                    ; No predecessors!
  br label %if_end179

if_block183:                                      ; preds = %if_else178
  call void @ctor.393(%TokenType* %tmp.this187, i32 27)
  %163 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this187)
  br i1 %163, label %if_then184, label %if_else185

if_then184:                                       ; preds = %if_block183
  %164 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef188, i32 0, i32 0
  %165 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef188, i32 0, i32 1
  %166 = bitcast %UntypedPtr* %164 to i8**
  %167 = bitcast %UntypedPtr* %165 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.70, i32 0, i32 0), i8** %166
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.70, i32 0, i32 3), i8** %167
  %168 = load %StringRef, %StringRef* %tmp.StringRef188
  call void @ctor.448(%String* %_result, %StringRef %168)
  ret void

if_else185:                                       ; preds = %if_block183
  br label %if_block190

if_end186:                                        ; preds = %if_end193, %dumy_block189
  br label %if_end179

dumy_block189:                                    ; No predecessors!
  br label %if_end186

if_block190:                                      ; preds = %if_else185
  call void @ctor.393(%TokenType* %tmp.this194, i32 28)
  %169 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this194)
  br i1 %169, label %if_then191, label %if_else192

if_then191:                                       ; preds = %if_block190
  %170 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef195, i32 0, i32 0
  %171 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef195, i32 0, i32 1
  %172 = bitcast %UntypedPtr* %170 to i8**
  %173 = bitcast %UntypedPtr* %171 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.71, i32 0, i32 0), i8** %172
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.71, i32 0, i32 3), i8** %173
  %174 = load %StringRef, %StringRef* %tmp.StringRef195
  call void @ctor.448(%String* %_result, %StringRef %174)
  ret void

if_else192:                                       ; preds = %if_block190
  br label %if_block197

if_end193:                                        ; preds = %if_end200, %dumy_block196
  br label %if_end186

dumy_block196:                                    ; No predecessors!
  br label %if_end193

if_block197:                                      ; preds = %if_else192
  call void @ctor.393(%TokenType* %tmp.this201, i32 29)
  %175 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this201)
  br i1 %175, label %if_then198, label %if_else199

if_then198:                                       ; preds = %if_block197
  %176 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef202, i32 0, i32 0
  %177 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef202, i32 0, i32 1
  %178 = bitcast %UntypedPtr* %176 to i8**
  %179 = bitcast %UntypedPtr* %177 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.72, i32 0, i32 0), i8** %178
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.72, i32 0, i32 3), i8** %179
  %180 = load %StringRef, %StringRef* %tmp.StringRef202
  call void @ctor.448(%String* %_result, %StringRef %180)
  ret void

if_else199:                                       ; preds = %if_block197
  br label %if_block204

if_end200:                                        ; preds = %if_end207, %dumy_block203
  br label %if_end193

dumy_block203:                                    ; No predecessors!
  br label %if_end200

if_block204:                                      ; preds = %if_else199
  call void @ctor.393(%TokenType* %tmp.this208, i32 30)
  %181 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this208)
  br i1 %181, label %if_then205, label %if_else206

if_then205:                                       ; preds = %if_block204
  %182 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef209, i32 0, i32 0
  %183 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef209, i32 0, i32 1
  %184 = bitcast %UntypedPtr* %182 to i8**
  %185 = bitcast %UntypedPtr* %183 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.73, i32 0, i32 0), i8** %184
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.73, i32 0, i32 3), i8** %185
  %186 = load %StringRef, %StringRef* %tmp.StringRef209
  call void @ctor.448(%String* %_result, %StringRef %186)
  ret void

if_else206:                                       ; preds = %if_block204
  br label %if_block211

if_end207:                                        ; preds = %if_end214, %dumy_block210
  br label %if_end200

dumy_block210:                                    ; No predecessors!
  br label %if_end207

if_block211:                                      ; preds = %if_else206
  call void @ctor.393(%TokenType* %tmp.this215, i32 31)
  %187 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this215)
  br i1 %187, label %if_then212, label %if_else213

if_then212:                                       ; preds = %if_block211
  %188 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef216, i32 0, i32 0
  %189 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef216, i32 0, i32 1
  %190 = bitcast %UntypedPtr* %188 to i8**
  %191 = bitcast %UntypedPtr* %189 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.74, i32 0, i32 0), i8** %190
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.74, i32 0, i32 3), i8** %191
  %192 = load %StringRef, %StringRef* %tmp.StringRef216
  call void @ctor.448(%String* %_result, %StringRef %192)
  ret void

if_else213:                                       ; preds = %if_block211
  br label %if_block218

if_end214:                                        ; preds = %if_end221, %dumy_block217
  br label %if_end207

dumy_block217:                                    ; No predecessors!
  br label %if_end214

if_block218:                                      ; preds = %if_else213
  call void @ctor.393(%TokenType* %tmp.this222, i32 32)
  %193 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this222)
  br i1 %193, label %if_then219, label %if_else220

if_then219:                                       ; preds = %if_block218
  %194 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef223, i32 0, i32 0
  %195 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef223, i32 0, i32 1
  %196 = bitcast %UntypedPtr* %194 to i8**
  %197 = bitcast %UntypedPtr* %195 to i8**
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.75, i32 0, i32 0), i8** %196
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.75, i32 0, i32 16), i8** %197
  %198 = load %StringRef, %StringRef* %tmp.StringRef223
  call void @ctor.448(%String* %_result, %StringRef %198)
  ret void

if_else220:                                       ; preds = %if_block218
  br label %if_block225

if_end221:                                        ; preds = %if_end228, %dumy_block224
  br label %if_end214

dumy_block224:                                    ; No predecessors!
  br label %if_end221

if_block225:                                      ; preds = %if_else220
  call void @ctor.393(%TokenType* %tmp.this229, i32 33)
  %199 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this229)
  br i1 %199, label %if_then226, label %if_else227

if_then226:                                       ; preds = %if_block225
  %200 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef230, i32 0, i32 0
  %201 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef230, i32 0, i32 1
  %202 = bitcast %UntypedPtr* %200 to i8**
  %203 = bitcast %UntypedPtr* %201 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.76, i32 0, i32 0), i8** %202
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.76, i32 0, i32 3), i8** %203
  %204 = load %StringRef, %StringRef* %tmp.StringRef230
  call void @ctor.448(%String* %_result, %StringRef %204)
  ret void

if_else227:                                       ; preds = %if_block225
  br label %if_block232

if_end228:                                        ; preds = %if_end235, %dumy_block231
  br label %if_end221

dumy_block231:                                    ; No predecessors!
  br label %if_end228

if_block232:                                      ; preds = %if_else227
  call void @ctor.393(%TokenType* %tmp.this236, i32 34)
  %205 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this236)
  br i1 %205, label %if_then233, label %if_else234

if_then233:                                       ; preds = %if_block232
  %206 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef237, i32 0, i32 0
  %207 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef237, i32 0, i32 1
  %208 = bitcast %UntypedPtr* %206 to i8**
  %209 = bitcast %UntypedPtr* %207 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.77, i32 0, i32 0), i8** %208
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.77, i32 0, i32 3), i8** %209
  %210 = load %StringRef, %StringRef* %tmp.StringRef237
  call void @ctor.448(%String* %_result, %StringRef %210)
  ret void

if_else234:                                       ; preds = %if_block232
  br label %if_block239

if_end235:                                        ; preds = %if_end242, %dumy_block238
  br label %if_end228

dumy_block238:                                    ; No predecessors!
  br label %if_end235

if_block239:                                      ; preds = %if_else234
  call void @ctor.393(%TokenType* %tmp.this243, i32 35)
  %211 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this243)
  br i1 %211, label %if_then240, label %if_else241

if_then240:                                       ; preds = %if_block239
  %212 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef244, i32 0, i32 0
  %213 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef244, i32 0, i32 1
  %214 = bitcast %UntypedPtr* %212 to i8**
  %215 = bitcast %UntypedPtr* %213 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.78, i32 0, i32 0), i8** %214
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.78, i32 0, i32 3), i8** %215
  %216 = load %StringRef, %StringRef* %tmp.StringRef244
  call void @ctor.448(%String* %_result, %StringRef %216)
  ret void

if_else241:                                       ; preds = %if_block239
  br label %if_block246

if_end242:                                        ; preds = %if_end249, %dumy_block245
  br label %if_end235

dumy_block245:                                    ; No predecessors!
  br label %if_end242

if_block246:                                      ; preds = %if_else241
  call void @ctor.393(%TokenType* %tmp.this250, i32 36)
  %217 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this250)
  br i1 %217, label %if_then247, label %if_else248

if_then247:                                       ; preds = %if_block246
  %218 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef251, i32 0, i32 0
  %219 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef251, i32 0, i32 1
  %220 = bitcast %UntypedPtr* %218 to i8**
  %221 = bitcast %UntypedPtr* %219 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.79, i32 0, i32 0), i8** %220
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.79, i32 0, i32 3), i8** %221
  %222 = load %StringRef, %StringRef* %tmp.StringRef251
  call void @ctor.448(%String* %_result, %StringRef %222)
  ret void

if_else248:                                       ; preds = %if_block246
  br label %if_block253

if_end249:                                        ; preds = %if_end256, %dumy_block252
  br label %if_end242

dumy_block252:                                    ; No predecessors!
  br label %if_end249

if_block253:                                      ; preds = %if_else248
  call void @ctor.393(%TokenType* %tmp.this257, i32 37)
  %223 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this257)
  br i1 %223, label %if_then254, label %if_else255

if_then254:                                       ; preds = %if_block253
  %224 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef258, i32 0, i32 0
  %225 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef258, i32 0, i32 1
  %226 = bitcast %UntypedPtr* %224 to i8**
  %227 = bitcast %UntypedPtr* %225 to i8**
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.80, i32 0, i32 0), i8** %226
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.80, i32 0, i32 10), i8** %227
  %228 = load %StringRef, %StringRef* %tmp.StringRef258
  call void @ctor.448(%String* %_result, %StringRef %228)
  ret void

if_else255:                                       ; preds = %if_block253
  br label %if_block260

if_end256:                                        ; preds = %if_end263, %dumy_block259
  br label %if_end249

dumy_block259:                                    ; No predecessors!
  br label %if_end256

if_block260:                                      ; preds = %if_else255
  call void @ctor.393(%TokenType* %tmp.this264, i32 38)
  %229 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this264)
  br i1 %229, label %if_then261, label %if_else262

if_then261:                                       ; preds = %if_block260
  %230 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef265, i32 0, i32 0
  %231 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef265, i32 0, i32 1
  %232 = bitcast %UntypedPtr* %230 to i8**
  %233 = bitcast %UntypedPtr* %231 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.81, i32 0, i32 0), i8** %232
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.81, i32 0, i32 8), i8** %233
  %234 = load %StringRef, %StringRef* %tmp.StringRef265
  call void @ctor.448(%String* %_result, %StringRef %234)
  ret void

if_else262:                                       ; preds = %if_block260
  br label %if_block267

if_end263:                                        ; preds = %if_end270, %dumy_block266
  br label %if_end256

dumy_block266:                                    ; No predecessors!
  br label %if_end263

if_block267:                                      ; preds = %if_else262
  call void @ctor.393(%TokenType* %tmp.this271, i32 39)
  %235 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this271)
  br i1 %235, label %if_then268, label %if_else269

if_then268:                                       ; preds = %if_block267
  %236 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef272, i32 0, i32 0
  %237 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef272, i32 0, i32 1
  %238 = bitcast %UntypedPtr* %236 to i8**
  %239 = bitcast %UntypedPtr* %237 to i8**
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.82, i32 0, i32 0), i8** %238
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.82, i32 0, i32 12), i8** %239
  %240 = load %StringRef, %StringRef* %tmp.StringRef272
  call void @ctor.448(%String* %_result, %StringRef %240)
  ret void

if_else269:                                       ; preds = %if_block267
  br label %if_block274

if_end270:                                        ; preds = %if_end277, %dumy_block273
  br label %if_end263

dumy_block273:                                    ; No predecessors!
  br label %if_end270

if_block274:                                      ; preds = %if_else269
  call void @ctor.393(%TokenType* %tmp.this278, i32 40)
  %241 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this278)
  br i1 %241, label %if_then275, label %if_else276

if_then275:                                       ; preds = %if_block274
  %242 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef279, i32 0, i32 0
  %243 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef279, i32 0, i32 1
  %244 = bitcast %UntypedPtr* %242 to i8**
  %245 = bitcast %UntypedPtr* %243 to i8**
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.83, i32 0, i32 0), i8** %244
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.83, i32 0, i32 14), i8** %245
  %246 = load %StringRef, %StringRef* %tmp.StringRef279
  call void @ctor.448(%String* %_result, %StringRef %246)
  ret void

if_else276:                                       ; preds = %if_block274
  br label %if_block281

if_end277:                                        ; preds = %if_end284, %dumy_block280
  br label %if_end270

dumy_block280:                                    ; No predecessors!
  br label %if_end277

if_block281:                                      ; preds = %if_else276
  call void @ctor.393(%TokenType* %tmp.this285, i32 41)
  %247 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this285)
  br i1 %247, label %if_then282, label %if_else283

if_then282:                                       ; preds = %if_block281
  %248 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef286, i32 0, i32 0
  %249 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef286, i32 0, i32 1
  %250 = bitcast %UntypedPtr* %248 to i8**
  %251 = bitcast %UntypedPtr* %249 to i8**
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.84, i32 0, i32 0), i8** %250
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.84, i32 0, i32 11), i8** %251
  %252 = load %StringRef, %StringRef* %tmp.StringRef286
  call void @ctor.448(%String* %_result, %StringRef %252)
  ret void

if_else283:                                       ; preds = %if_block281
  br label %if_block288

if_end284:                                        ; preds = %if_end291, %dumy_block287
  br label %if_end277

dumy_block287:                                    ; No predecessors!
  br label %if_end284

if_block288:                                      ; preds = %if_else283
  call void @ctor.393(%TokenType* %tmp.this292, i32 42)
  %253 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this292)
  br i1 %253, label %if_then289, label %if_else290

if_then289:                                       ; preds = %if_block288
  %254 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef293, i32 0, i32 0
  %255 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef293, i32 0, i32 1
  %256 = bitcast %UntypedPtr* %254 to i8**
  %257 = bitcast %UntypedPtr* %255 to i8**
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.85, i32 0, i32 0), i8** %256
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.85, i32 0, i32 12), i8** %257
  %258 = load %StringRef, %StringRef* %tmp.StringRef293
  call void @ctor.448(%String* %_result, %StringRef %258)
  ret void

if_else290:                                       ; preds = %if_block288
  br label %if_block295

if_end291:                                        ; preds = %if_end298, %dumy_block294
  br label %if_end284

dumy_block294:                                    ; No predecessors!
  br label %if_end291

if_block295:                                      ; preds = %if_else290
  call void @ctor.393(%TokenType* %tmp.this299, i32 43)
  %259 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this299)
  br i1 %259, label %if_then296, label %if_else297

if_then296:                                       ; preds = %if_block295
  %260 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef300, i32 0, i32 0
  %261 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef300, i32 0, i32 1
  %262 = bitcast %UntypedPtr* %260 to i8**
  %263 = bitcast %UntypedPtr* %261 to i8**
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.86, i32 0, i32 0), i8** %262
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.86, i32 0, i32 12), i8** %263
  %264 = load %StringRef, %StringRef* %tmp.StringRef300
  call void @ctor.448(%String* %_result, %StringRef %264)
  ret void

if_else297:                                       ; preds = %if_block295
  br label %if_block302

if_end298:                                        ; preds = %if_end305, %dumy_block301
  br label %if_end291

dumy_block301:                                    ; No predecessors!
  br label %if_end298

if_block302:                                      ; preds = %if_else297
  call void @ctor.393(%TokenType* %tmp.this306, i32 44)
  %265 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this306)
  br i1 %265, label %if_then303, label %if_else304

if_then303:                                       ; preds = %if_block302
  %266 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef307, i32 0, i32 0
  %267 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef307, i32 0, i32 1
  %268 = bitcast %UntypedPtr* %266 to i8**
  %269 = bitcast %UntypedPtr* %267 to i8**
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.87, i32 0, i32 0), i8** %268
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.87, i32 0, i32 13), i8** %269
  %270 = load %StringRef, %StringRef* %tmp.StringRef307
  call void @ctor.448(%String* %_result, %StringRef %270)
  ret void

if_else304:                                       ; preds = %if_block302
  br label %if_block309

if_end305:                                        ; preds = %if_end312, %dumy_block308
  br label %if_end298

dumy_block308:                                    ; No predecessors!
  br label %if_end305

if_block309:                                      ; preds = %if_else304
  call void @ctor.393(%TokenType* %tmp.this313, i32 45)
  %271 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this313)
  br i1 %271, label %if_then310, label %if_else311

if_then310:                                       ; preds = %if_block309
  %272 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef314, i32 0, i32 0
  %273 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef314, i32 0, i32 1
  %274 = bitcast %UntypedPtr* %272 to i8**
  %275 = bitcast %UntypedPtr* %273 to i8**
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.88, i32 0, i32 0), i8** %274
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.88, i32 0, i32 13), i8** %275
  %276 = load %StringRef, %StringRef* %tmp.StringRef314
  call void @ctor.448(%String* %_result, %StringRef %276)
  ret void

if_else311:                                       ; preds = %if_block309
  br label %if_block316

if_end312:                                        ; preds = %if_end319, %dumy_block315
  br label %if_end305

dumy_block315:                                    ; No predecessors!
  br label %if_end312

if_block316:                                      ; preds = %if_else311
  call void @ctor.393(%TokenType* %tmp.this320, i32 46)
  %277 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this320)
  br i1 %277, label %if_then317, label %if_else318

if_then317:                                       ; preds = %if_block316
  %278 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef321, i32 0, i32 0
  %279 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef321, i32 0, i32 1
  %280 = bitcast %UntypedPtr* %278 to i8**
  %281 = bitcast %UntypedPtr* %279 to i8**
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.89, i32 0, i32 0), i8** %280
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.89, i32 0, i32 14), i8** %281
  %282 = load %StringRef, %StringRef* %tmp.StringRef321
  call void @ctor.448(%String* %_result, %StringRef %282)
  ret void

if_else318:                                       ; preds = %if_block316
  br label %if_block323

if_end319:                                        ; preds = %if_end326, %dumy_block322
  br label %if_end312

dumy_block322:                                    ; No predecessors!
  br label %if_end319

if_block323:                                      ; preds = %if_else318
  call void @ctor.393(%TokenType* %tmp.this327, i32 253)
  %283 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this327)
  br i1 %283, label %if_then324, label %if_else325

if_then324:                                       ; preds = %if_block323
  %284 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef328, i32 0, i32 0
  %285 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef328, i32 0, i32 1
  %286 = bitcast %UntypedPtr* %284 to i8**
  %287 = bitcast %UntypedPtr* %285 to i8**
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.90, i32 0, i32 0), i8** %286
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.90, i32 0, i32 13), i8** %287
  %288 = load %StringRef, %StringRef* %tmp.StringRef328
  call void @ctor.448(%String* %_result, %StringRef %288)
  ret void

if_else325:                                       ; preds = %if_block323
  br label %if_block330

if_end326:                                        ; preds = %if_end333, %dumy_block329
  br label %if_end319

dumy_block329:                                    ; No predecessors!
  br label %if_end326

if_block330:                                      ; preds = %if_else325
  call void @ctor.393(%TokenType* %tmp.this334, i32 254)
  %289 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this334)
  br i1 %289, label %if_then331, label %if_else332

if_then331:                                       ; preds = %if_block330
  %290 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef335, i32 0, i32 0
  %291 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef335, i32 0, i32 1
  %292 = bitcast %UntypedPtr* %290 to i8**
  %293 = bitcast %UntypedPtr* %291 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.91, i32 0, i32 0), i8** %292
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.91, i32 0, i32 7), i8** %293
  %294 = load %StringRef, %StringRef* %tmp.StringRef335
  call void @ctor.448(%String* %_result, %StringRef %294)
  ret void

if_else332:                                       ; preds = %if_block330
  br label %if_block337

if_end333:                                        ; preds = %if_end339, %dumy_block336
  br label %if_end326

dumy_block336:                                    ; No predecessors!
  br label %if_end333

if_block337:                                      ; preds = %if_else332
  call void @ctor.393(%TokenType* %tmp.this340, i32 255)
  %295 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this340)
  br i1 %295, label %if_then338, label %if_end339

if_then338:                                       ; preds = %if_block337
  %296 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef341, i32 0, i32 0
  %297 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef341, i32 0, i32 1
  %298 = bitcast %UntypedPtr* %296 to i8**
  %299 = bitcast %UntypedPtr* %297 to i8**
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.92, i32 0, i32 0), i8** %298
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.92, i32 0, i32 10), i8** %299
  %300 = load %StringRef, %StringRef* %tmp.StringRef341
  call void @ctor.448(%String* %_result, %StringRef %300)
  ret void

if_end339:                                        ; preds = %dumy_block342, %if_block337
  br label %if_end333

dumy_block342:                                    ; No predecessors!
  br label %if_end339
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkIdentifier(%AstBuilder* %obj, %Location %loc, %StringRef %id) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 18
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %id.addr
  %5 = call %Node @"().528"(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().528"(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %StringRef, %StringRef* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %this to %Node (%UntypedPtr, %Location*, %StringRef)**
  %4 = load %Node (%UntypedPtr, %Location*, %StringRef)*, %Node (%UntypedPtr, %Location*, %StringRef)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, %StringRef %2)
  ret %Node %5
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.529"(%Node* %this, %Node* %other) #3 {
  %other.addr = alloca %Node*
  store %Node* %other, %Node** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Node, %Node* %this, i32 0, i32 0
  %2 = load %Node*, %Node** %other.addr
  %3 = getelementptr inbounds %Node, %Node* %2, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkStarExpr(%AstBuilder* %obj, %Location %loc, %Node %base, %StringRef %id) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 20
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %base.addr
  %5 = load %StringRef, %StringRef* %id.addr
  %6 = call %Node @"().530"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %StringRef %5)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().530"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %StringRef %p4) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %StringRef
  store %StringRef %p4, %StringRef* %p4.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %Node, %Node* %p3.addr
  %3 = load %StringRef, %StringRef* %p4.addr
  %4 = bitcast %"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %this to %Node (%UntypedPtr, %Location*, %Node, %StringRef)**
  %5 = load %Node (%UntypedPtr, %Location*, %Node, %StringRef)*, %Node (%UntypedPtr, %Location*, %Node, %StringRef)** %4
  %6 = call %Node %5(%UntypedPtr %1, %Location* %p2, %Node %2, %StringRef %3)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Location @span(%Location %start, %Location %end) #4 {
  %start.addr = alloca %Location
  store %Location %start, %Location* %start.addr
  %end.addr = alloca %Location
  store %Location %end, %Location* %end.addr
  %res = alloca %Location
  br label %code

code:                                             ; preds = %0
  call void @ctor.159(%Location* %res, %Location* %start.addr)
  %1 = load %Location, %Location* %end.addr
  call void @copyEnd(%Location* %res, %Location %1)
  %2 = load %Location, %Location* %res
  ret %Location %2
}

; Function Attrs: inlinehint nounwind
define internal void @copyEnd(%Location* %l, %Location %other) #4 {
  %other.addr = alloca %Location
  store %Location %other, %Location* %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %2 = getelementptr inbounds %Location, %Location* %other.addr, i32 0, i32 2
  call void @"=.263"(%LineCol* %1, %LineCol* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 0
  %3 = load %Location, %Location* %2
  ret %Location %3
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkCompoundExpr(%AstBuilder* %obj, %Location %loc, %Node %base, %StringRef %id) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 19
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %base.addr
  %5 = load %StringRef, %StringRef* %id.addr
  %6 = call %Node @"().530"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %StringRef %5)
  ret %Node %6
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.531(%Node* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Node, %Node* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseStmts(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %topLevel, %Node* %res) #4 {
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %child = alloca %Node
  %"$tmpForRef" = alloca %Node
  %"$tmpForRef1" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %1 = load i1, i1* %topLevel.addr
  %2 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %1)
  store %Node %2, %Node* %"$tmpForRef"
  call void @ctor.520(%Node* %child, %Node* %"$tmpForRef")
  br label %if_block

while_step:                                       ; preds = %dumy_block2, %if_then
  br label %while_block

while_end:                                        ; preds = %if_end, %while_block
  ret void

if_block:                                         ; preds = %while_body
  %3 = load %Node, %Node* %child
  %4 = call i1 @isSet.572(%Node %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %6 = load %Node, %Node* %res
  %7 = load %Node, %Node* %child
  %8 = call %Node @addToNodeList(%AstBuilder* %5, %Node %6, %Node %7)
  store %Node %8, %Node* %"$tmpForRef1"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef1")
  br label %while_step

if_end:                                           ; preds = %dumy_block, %if_block
  br label %while_end

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block2:                                      ; No predecessors!
  br label %while_step
}

; Function Attrs: noinline nounwind
define %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %topLevel) #5 {
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %res = alloca %Node
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %mods = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %found = alloca i1
  %"$tmpForRef57" = alloca %Node
  %"$tmpC" = alloca %String
  %"$tmpForRef58" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %"$tmpC59" = alloca %Token
  %"$tmpForRef60" = alloca %StringRef
  %tmp.StringRef61 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  call void @consumeSemis(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  %2 = call %Node @parseModifiers(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %2, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %mods, %Node* %"$tmpForRef1")
  %3 = call i1 @parseImportLineOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br i1 %3, label %cond.true38, label %cond.false39

cond.true:                                        ; preds = %cond.end4
  br label %cond.end

cond.false:                                       ; preds = %cond.end4
  %4 = call i1 @parseReturnStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res53 = phi i1 [ true, %cond.true ], [ %4, %cond.false ]
  store i1 %cond.res53, i1* %found
  br label %if_block

cond.true2:                                       ; preds = %cond.end7
  br label %cond.end4

cond.false3:                                      ; preds = %cond.end7
  %5 = call i1 @parseContinueStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end4

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond.res52 = phi i1 [ true, %cond.true2 ], [ %5, %cond.false3 ]
  br i1 %cond.res52, label %cond.true, label %cond.false

cond.true5:                                       ; preds = %cond.end10
  br label %cond.end7

cond.false6:                                      ; preds = %cond.end10
  %6 = call i1 @parseBreakStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond.res51 = phi i1 [ true, %cond.true5 ], [ %6, %cond.false6 ]
  br i1 %cond.res51, label %cond.true2, label %cond.false3

cond.true8:                                       ; preds = %cond.end13
  br label %cond.end10

cond.false9:                                      ; preds = %cond.end13
  %7 = load i1, i1* %topLevel.addr
  %8 = call i1 @parseWhileStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %7)
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond.res50 = phi i1 [ true, %cond.true8 ], [ %8, %cond.false9 ]
  br i1 %cond.res50, label %cond.true5, label %cond.false6

cond.true11:                                      ; preds = %cond.end16
  br label %cond.end13

cond.false12:                                     ; preds = %cond.end16
  %9 = load i1, i1* %topLevel.addr
  %10 = call i1 @parseForStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %9)
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond.res49 = phi i1 [ true, %cond.true11 ], [ %10, %cond.false12 ]
  br i1 %cond.res49, label %cond.true8, label %cond.false9

cond.true14:                                      ; preds = %cond.end19
  br label %cond.end16

cond.false15:                                     ; preds = %cond.end19
  %11 = load i1, i1* %topLevel.addr
  %12 = call i1 @parseIfStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %11)
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond.res48 = phi i1 [ true, %cond.true14 ], [ %12, %cond.false15 ]
  br i1 %cond.res48, label %cond.true11, label %cond.false12

cond.true17:                                      ; preds = %cond.end22
  br label %cond.end19

cond.false18:                                     ; preds = %cond.end22
  %13 = load i1, i1* %topLevel.addr
  %14 = call i1 @parseBlockStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %13)
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond.res47 = phi i1 [ true, %cond.true17 ], [ %14, %cond.false18 ]
  br i1 %cond.res47, label %cond.true14, label %cond.false15

cond.true20:                                      ; preds = %cond.end25
  br label %cond.end22

cond.false21:                                     ; preds = %cond.end25
  %15 = call i1 @parseExprStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end22

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond.res46 = phi i1 [ true, %cond.true20 ], [ %15, %cond.false21 ]
  br i1 %cond.res46, label %cond.true17, label %cond.false18

cond.true23:                                      ; preds = %cond.end28
  br label %cond.end25

cond.false24:                                     ; preds = %cond.end28
  %16 = call i1 @parseFunDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond.res45 = phi i1 [ true, %cond.true23 ], [ %16, %cond.false24 ]
  br i1 %cond.res45, label %cond.true20, label %cond.false21

cond.true26:                                      ; preds = %cond.end31
  br label %cond.end28

cond.false27:                                     ; preds = %cond.end31
  %17 = call i1 @parseVarLikeDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond.res44 = phi i1 [ true, %cond.true26 ], [ %17, %cond.false27 ]
  br i1 %cond.res44, label %cond.true23, label %cond.false24

cond.true29:                                      ; preds = %cond.end34
  br label %cond.end31

cond.false30:                                     ; preds = %cond.end34
  %18 = call i1 @parseConceptDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end31

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond.res43 = phi i1 [ true, %cond.true29 ], [ %18, %cond.false30 ]
  br i1 %cond.res43, label %cond.true26, label %cond.false27

cond.true32:                                      ; preds = %cond.end37
  br label %cond.end34

cond.false33:                                     ; preds = %cond.end37
  %19 = call i1 @parseDatatypeDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond.res42 = phi i1 [ true, %cond.true32 ], [ %19, %cond.false33 ]
  br i1 %cond.res42, label %cond.true29, label %cond.false30

cond.true35:                                      ; preds = %cond.end40
  br label %cond.end37

cond.false36:                                     ; preds = %cond.end40
  %20 = call i1 @parsePackageDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false36, %cond.true35
  %cond.res41 = phi i1 [ true, %cond.true35 ], [ %20, %cond.false36 ]
  br i1 %cond.res41, label %cond.true32, label %cond.false33

cond.true38:                                      ; preds = %code
  br label %cond.end40

cond.false39:                                     ; preds = %code
  %21 = call i1 @parseUsingDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond.res = phi i1 [ true, %cond.true38 ], [ %21, %cond.false39 ]
  br i1 %cond.res, label %cond.true35, label %cond.false36

if_block:                                         ; preds = %cond.end
  %22 = load %Node, %Node* %mods
  %23 = call i1 @isSet.572(%Node %22)
  br i1 %23, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  br label %if_block54

if_end:                                           ; preds = %if_end56, %if_block
  %24 = load %Node, %Node* %res
  ret %Node %24

if_block54:                                       ; preds = %if_then
  %25 = load i1, i1* %found
  br i1 %25, label %if_then55, label %if_else

if_then55:                                        ; preds = %if_block54
  %26 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %27 = load %Location, %Location* %loc
  %28 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %29 = call %Location @span(%Location %27, %Location %28)
  %30 = load %Node, %Node* %res
  %31 = load %Node, %Node* %mods
  %32 = call %Node @mkModifiers(%AstBuilder* %26, %Location %29, %Node %30, %Node %31)
  store %Node %32, %Node* %"$tmpForRef57"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef57")
  br label %if_end56

if_else:                                          ; preds = %if_block54
  %33 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %34 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %35 = bitcast %UntypedPtr* %33 to i8**
  %36 = bitcast %UntypedPtr* %34 to i8**
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.109, i32 0, i32 0), i8** %35
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.109, i32 0, i32 25), i8** %36
  %37 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %37, %StringRef* %"$tmpForRef58"
  %38 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC59", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %38)
  %39 = getelementptr inbounds %Token, %Token* %"$tmpC59", i32 0, i32 1
  %40 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef61, i32 0, i32 0
  %41 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef61, i32 0, i32 1
  %42 = bitcast %UntypedPtr* %40 to i8**
  %43 = bitcast %UntypedPtr* %41 to i8**
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.110, i32 0, i32 0), i8** %42
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.110, i32 0, i32 21), i8** %43
  %44 = load %StringRef, %StringRef* %tmp.StringRef61
  store %StringRef %44, %StringRef* %"$tmpForRef60"
  call void @toString.574(%String* %"$tmpC", %StringRef* %"$tmpForRef58", %TokenType* %39, %StringRef* %"$tmpForRef60")
  call void @reportError.523(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC59")
  br label %if_end56

if_end56:                                         ; preds = %if_else, %if_then55
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @consumeSemis(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %tmp.this = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  call void @ctor.393(%TokenType* %tmp.this, i32 32)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseModifiers(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %Node
  %tmp.this = alloca %TokenType
  %e = alloca %Node
  %"$tmpForRef" = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %tmp.this2 = alloca %TokenType
  %"$tmpForRef3" = alloca %Node
  %"$tmpForRef4" = alloca %Node
  %tmp.this5 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 27)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  call void @ctor.531(%Node* %e)
  %2 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %2, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %e, %Node* %"$tmpForRef")
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %4 = load %Node, %Node* %res
  %5 = load %Node, %Node* %e
  %6 = call %Node @addToNodeList(%AstBuilder* %3, %Node %4, %Node %5)
  store %Node %6, %Node* %"$tmpForRef1"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef1")
  br label %while_block

if_end:                                           ; preds = %while_end, %if_block
  %7 = load %Node, %Node* %res
  ret %Node %7

while_block:                                      ; preds = %while_step, %if_then
  call void @ctor.393(%TokenType* %tmp.this2, i32 33)
  %8 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this2)
  br i1 %8, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %9 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %9, %Node* %"$tmpForRef3"
  call void @"=.529"(%Node* %e, %Node* %"$tmpForRef3")
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %11 = load %Node, %Node* %res
  %12 = load %Node, %Node* %e
  %13 = call %Node @addToNodeList(%AstBuilder* %10, %Node %11, %Node %12)
  store %Node %13, %Node* %"$tmpForRef4"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef4")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  call void @ctor.393(%TokenType* %tmp.this5, i32 28)
  %14 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  call void @consumeSemis(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %baseExpr = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %op = alloca %String
  %"$tmpC" = alloca %String
  %rhs = alloca %Node
  %"$tmpForRef5" = alloca %Node
  %"$tmpForRef6" = alloca %Node
  %"$tmpForRef7" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  %2 = load i1, i1* %withEqual.addr
  %3 = call %Node @parsePrefixExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %2)
  store %Node %3, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %baseExpr, %Node* %"$tmpForRef1")
  call void @ctor.114(%String* %op)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %4 = load i1, i1* %withEqual.addr
  call void @parseIdOrOperOpt(%String* %"$tmpC", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %4)
  %5 = call %String* @"=.267"(%String* %op, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  br label %if_block

while_step:                                       ; preds = %if_end4
  br label %while_block

while_end:                                        ; preds = %if_else, %if_then, %while_block
  %6 = load %Node, %Node* %baseExpr
  call void @dtor.239(%String* %op)
  ret %Node %6

if_block:                                         ; preds = %while_body
  %7 = call i1 @isEmpty.373(%String* %op)
  br i1 %7, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  br label %while_end

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block2

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block2:                                        ; preds = %if_end
  %8 = load i1, i1* %withEqual.addr
  %9 = call i1 @nextIsExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %8)
  br i1 %9, label %if_then3, label %if_else

if_then3:                                         ; preds = %if_block2
  %10 = load i1, i1* %withEqual.addr
  %11 = call %Node @parsePrefixExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %10)
  store %Node %11, %Node* %"$tmpForRef5"
  call void @ctor.520(%Node* %rhs, %Node* %"$tmpForRef5")
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %13 = load %Location, %Location* %loc
  %14 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %15 = call %Location @span(%Location %13, %Location %14)
  %16 = load %Node, %Node* %baseExpr
  %17 = call %StringRef @asStringRef(%String* %op)
  %18 = load %Node, %Node* %rhs
  %19 = call %Node @mkInfixOp(%AstBuilder* %12, %Location %15, %Node %16, %StringRef %17, %Node %18)
  store %Node %19, %Node* %"$tmpForRef6"
  call void @"=.529"(%Node* %baseExpr, %Node* %"$tmpForRef6")
  br label %if_end4

if_else:                                          ; preds = %if_block2
  %20 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %21 = load %Location, %Location* %loc
  %22 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %23 = call %Location @span(%Location %21, %Location %22)
  %24 = load %Node, %Node* %baseExpr
  %25 = call %StringRef @asStringRef(%String* %op)
  %26 = call %Node @mkPostfixOp(%AstBuilder* %20, %Location %23, %Node %24, %StringRef %25)
  store %Node %26, %Node* %"$tmpForRef7"
  call void @"=.529"(%Node* %baseExpr, %Node* %"$tmpForRef7")
  br label %while_end

if_end4:                                          ; preds = %dumy_block8, %if_then3
  br label %while_step

dumy_block8:                                      ; No predecessors!
  br label %if_end4

dumy_block9:                                      ; No predecessors!
  call void @dtor.239(%String* %op)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @parsePrefixExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %op = alloca %String
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %String
  %tmp.this1 = alloca %TokenType
  %"$tmpC2" = alloca %String
  %baseExpr = alloca %Node
  %"$tmpForRef7" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  call void @ctor.114(%String* %op)
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 35)
  %2 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %2, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  call void @parseId(%String* %"$tmpC", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %3 = call %String* @"=.267"(%String* %op, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  call void @ctor.393(%TokenType* %tmp.this1, i32 35)
  %4 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  br label %if_end

if_else:                                          ; preds = %if_block
  call void @parseOperOpt(%String* %"$tmpC2", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  %5 = call %String* @"=.267"(%String* %op, %String* %"$tmpC2")
  call void @dtor.239(%String* %"$tmpC2")
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  br label %if_block3

if_block3:                                        ; preds = %if_end
  %6 = call i1 @isEmpty.373(%String* %op)
  br i1 %6, label %if_then4, label %if_else5

if_then4:                                         ; preds = %if_block3
  %7 = call %Node @parseSimpleExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  call void @dtor.239(%String* %op)
  ret %Node %7

if_else5:                                         ; preds = %if_block3
  %8 = call %Node @parsePrefixExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %8, %Node* %"$tmpForRef7"
  call void @ctor.520(%Node* %baseExpr, %Node* %"$tmpForRef7")
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %10 = load %Location, %Location* %loc
  %11 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %12 = call %Location @span(%Location %10, %Location %11)
  %13 = call %StringRef @asStringRef(%String* %op)
  %14 = load %Node, %Node* %baseExpr
  %15 = call %Node @mkPrefixOp(%AstBuilder* %9, %Location %12, %StringRef %13, %Node %14)
  call void @dtor.239(%String* %op)
  ret %Node %15

if_end6:                                          ; preds = %dumy_block8, %dumy_block
  call void @dtor.239(%String* %op)
  unreachable

dumy_block:                                       ; No predecessors!
  br label %if_end6

dumy_block8:                                      ; No predecessors!
  br label %if_end6
}

; Function Attrs: inlinehint nounwind
define internal void @parseId(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %tmp.this = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  call void @ctor.393(%TokenType* %tmp.this, i32 37)
  %1 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 2
  call void @ctor.165(%String* %_result, %String* %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseOperOpt(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %tmp.this = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 38)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 2
  call void @ctor.165(%String* %_result, %String* %3)
  ret void

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %cond_destruct_end13, %dumy_block
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_else
  %4 = load i1, i1* %withEqual.addr
  br i1 %4, label %cond.true, label %cond.false

if_then2:                                         ; preds = %cond.end
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 2
  call void @ctor.165(%String* %_result, %String* %6)
  br i1 %4, label %cond_destruct_alt1, label %cond_destruct_alt2

if_else3:                                         ; preds = %cond.end
  call void @ctor.114(%String* %_result)
  br i1 %4, label %cond_destruct_alt17, label %cond_destruct_alt28

if_end4:                                          ; preds = %dumy_block10, %dumy_block6
  br i1 %4, label %cond_destruct_alt111, label %cond_destruct_alt212

cond.true:                                        ; preds = %if_block1
  call void @ctor.393(%TokenType* %tmp.this5, i32 36)
  %7 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  br label %cond.end

cond.false:                                       ; preds = %if_block1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %7, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then2, label %if_else3

cond_destruct_alt1:                               ; preds = %if_then2
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_then2
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void

dumy_block6:                                      ; No predecessors!
  br label %if_end4

cond_destruct_alt17:                              ; preds = %if_else3
  br label %cond_destruct_end9

cond_destruct_alt28:                              ; preds = %if_else3
  br label %cond_destruct_end9

cond_destruct_end9:                               ; preds = %cond_destruct_alt28, %cond_destruct_alt17
  ret void

dumy_block10:                                     ; No predecessors!
  br label %if_end4

cond_destruct_alt111:                             ; preds = %if_end4
  br label %cond_destruct_end13

cond_destruct_alt212:                             ; preds = %if_end4
  br label %cond_destruct_end13

cond_destruct_end13:                              ; preds = %cond_destruct_alt212, %cond_destruct_alt111
  br label %if_end
}

; Function Attrs: noinline nounwind
define %Node @parseSimpleExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #5 {
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %res = alloca %Node
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef2" = alloca %Node
  %tmp.this7 = alloca %TokenType
  %"$tmpForRef8" = alloca %Node
  %tmp.this9 = alloca %TokenType
  %tmp.this14 = alloca %TokenType
  %"$tmpForRef15" = alloca %Node
  %tmp.this20 = alloca %TokenType
  %"$tmpForRef21" = alloca %Node
  %tmp.this26 = alloca %TokenType
  %"$tmpForRef27" = alloca %Node
  %tmp.this32 = alloca %TokenType
  %"$tmpForRef33" = alloca %Node
  %tmp.this38 = alloca %TokenType
  %"$tmpForRef39" = alloca %Node
  %tmp.this40 = alloca i32
  %tmp.this45 = alloca %TokenType
  %"$tmpForRef46" = alloca %Node
  %tmp.this47 = alloca i32
  %tmp.this52 = alloca %TokenType
  %"$tmpForRef53" = alloca %Node
  %tmp.this54 = alloca i64
  %tmp.this59 = alloca %TokenType
  %"$tmpForRef60" = alloca %Node
  %tmp.this61 = alloca i64
  %tmp.this66 = alloca %TokenType
  %"$tmpForRef67" = alloca %Node
  %tmp.this68 = alloca float
  %tmp.this73 = alloca %TokenType
  %"$tmpForRef74" = alloca %Node
  %tmp.this75 = alloca double
  %tmp.this80 = alloca %TokenType
  %"$tmpForRef81" = alloca %Node
  %tmp.this85 = alloca %TokenType
  %"$tmpForRef86" = alloca %Node
  %"$tmpC" = alloca %String
  %"$tmpForRef90" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %"$tmpC91" = alloca %Token
  %"$tmpForRef92" = alloca %StringRef
  %tmp.StringRef93 = alloca %StringRef
  %tmp.this94 = alloca %Node
  %tmp.this99 = alloca %TokenType
  %args = alloca %Node
  %"$tmpForRef100" = alloca %Node
  %tmp.this101 = alloca %TokenType
  %"$tmpForRef102" = alloca %Node
  %tmp.this107 = alloca %TokenType
  %tmp.this112 = alloca %TokenType
  %tmp.this113 = alloca %TokenType
  %"$tmpForRef114" = alloca %Node
  %tmp.StringRef115 = alloca %StringRef
  %id = alloca %String
  %"$tmpForRef116" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 29)
  %2 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %2, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %3 = call %Node @parseLambdaExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %3, %Node* %"$tmpForRef2"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef2")
  br label %if_end

if_else:                                          ; preds = %cond.end
  br label %if_block3

if_end:                                           ; preds = %if_end6, %if_then
  br i1 %2, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true:                                        ; preds = %if_block
  call void @ctor.393(%TokenType* %tmp.this1, i32 6)
  %4 = call i1 @next2Is(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %4, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_else

if_block3:                                        ; preds = %if_else
  call void @ctor.393(%TokenType* %tmp.this7, i32 29)
  %5 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this7)
  br i1 %5, label %if_then4, label %if_else5

if_then4:                                         ; preds = %if_block3
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %7 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  %8 = call %Node @mkParenthesisExpr(%AstBuilder* %6, %Node %7)
  store %Node %8, %Node* %"$tmpForRef8"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef8")
  call void @ctor.393(%TokenType* %tmp.this9, i32 30)
  %9 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this9)
  br label %if_end6

if_else5:                                         ; preds = %if_block3
  br label %if_block10

if_end6:                                          ; preds = %if_end13, %if_then4
  br label %if_end

if_block10:                                       ; preds = %if_else5
  call void @ctor.393(%TokenType* %tmp.this14, i32 37)
  %10 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this14)
  br i1 %10, label %if_then11, label %if_else12

if_then11:                                        ; preds = %if_block10
  %11 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %13 = getelementptr inbounds %Token, %Token* %12, i32 0, i32 0
  %14 = load %Location, %Location* %13
  %15 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %16 = getelementptr inbounds %Token, %Token* %15, i32 0, i32 2
  %17 = call %StringRef @asStringRef(%String* %16)
  %18 = call %Node @mkIdentifier(%AstBuilder* %11, %Location %14, %StringRef %17)
  store %Node %18, %Node* %"$tmpForRef15"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef15")
  br label %if_end13

if_else12:                                        ; preds = %if_block10
  br label %if_block16

if_end13:                                         ; preds = %if_end19, %if_then11
  br label %if_end6

if_block16:                                       ; preds = %if_else12
  call void @ctor.393(%TokenType* %tmp.this20, i32 22)
  %19 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this20)
  br i1 %19, label %if_then17, label %if_else18

if_then17:                                        ; preds = %if_block16
  %20 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %21 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %22 = getelementptr inbounds %Token, %Token* %21, i32 0, i32 0
  %23 = load %Location, %Location* %22
  %24 = call %Node @mkNullLiteral(%AstBuilder* %20, %Location %23)
  store %Node %24, %Node* %"$tmpForRef21"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef21")
  br label %if_end19

if_else18:                                        ; preds = %if_block16
  br label %if_block22

if_end19:                                         ; preds = %if_end25, %if_then17
  br label %if_end13

if_block22:                                       ; preds = %if_else18
  call void @ctor.393(%TokenType* %tmp.this26, i32 23)
  %25 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this26)
  br i1 %25, label %if_then23, label %if_else24

if_then23:                                        ; preds = %if_block22
  %26 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %27 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %28 = getelementptr inbounds %Token, %Token* %27, i32 0, i32 0
  %29 = load %Location, %Location* %28
  %30 = call %Node @mkBoolLiteral(%AstBuilder* %26, %Location %29, i1 true)
  store %Node %30, %Node* %"$tmpForRef27"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef27")
  br label %if_end25

if_else24:                                        ; preds = %if_block22
  br label %if_block28

if_end25:                                         ; preds = %if_end31, %if_then23
  br label %if_end19

if_block28:                                       ; preds = %if_else24
  call void @ctor.393(%TokenType* %tmp.this32, i32 21)
  %31 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this32)
  br i1 %31, label %if_then29, label %if_else30

if_then29:                                        ; preds = %if_block28
  %32 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %33 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %34 = getelementptr inbounds %Token, %Token* %33, i32 0, i32 0
  %35 = load %Location, %Location* %34
  %36 = call %Node @mkBoolLiteral(%AstBuilder* %32, %Location %35, i1 false)
  store %Node %36, %Node* %"$tmpForRef33"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef33")
  br label %if_end31

if_else30:                                        ; preds = %if_block28
  br label %if_block34

if_end31:                                         ; preds = %if_end37, %if_then29
  br label %if_end25

if_block34:                                       ; preds = %if_else30
  call void @ctor.393(%TokenType* %tmp.this38, i32 41)
  %37 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this38)
  br i1 %37, label %if_then35, label %if_else36

if_then35:                                        ; preds = %if_block34
  %38 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %39 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %40 = getelementptr inbounds %Token, %Token* %39, i32 0, i32 0
  %41 = load %Location, %Location* %40
  %42 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %43 = getelementptr inbounds %Token, %Token* %42, i32 0, i32 3
  %44 = load i64, i64* %43
  %45 = trunc i64 %44 to i32
  store i32 %45, i32* %tmp.this40
  %46 = load i32, i32* %tmp.this40
  %47 = call %Node @mkIntLiteral(%AstBuilder* %38, %Location %41, i32 %46)
  store %Node %47, %Node* %"$tmpForRef39"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef39")
  br label %if_end37

if_else36:                                        ; preds = %if_block34
  br label %if_block41

if_end37:                                         ; preds = %if_end44, %if_then35
  br label %if_end31

if_block41:                                       ; preds = %if_else36
  call void @ctor.393(%TokenType* %tmp.this45, i32 43)
  %48 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this45)
  br i1 %48, label %if_then42, label %if_else43

if_then42:                                        ; preds = %if_block41
  %49 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %50 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %51 = getelementptr inbounds %Token, %Token* %50, i32 0, i32 0
  %52 = load %Location, %Location* %51
  %53 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %54 = getelementptr inbounds %Token, %Token* %53, i32 0, i32 3
  %55 = load i64, i64* %54
  %56 = trunc i64 %55 to i32
  store i32 %56, i32* %tmp.this47
  %57 = load i32, i32* %tmp.this47
  %58 = call %Node @mkUIntLiteral(%AstBuilder* %49, %Location %52, i32 %57)
  store %Node %58, %Node* %"$tmpForRef46"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef46")
  br label %if_end44

if_else43:                                        ; preds = %if_block41
  br label %if_block48

if_end44:                                         ; preds = %if_end51, %if_then42
  br label %if_end37

if_block48:                                       ; preds = %if_else43
  call void @ctor.393(%TokenType* %tmp.this52, i32 42)
  %59 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this52)
  br i1 %59, label %if_then49, label %if_else50

if_then49:                                        ; preds = %if_block48
  %60 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %61 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %62 = getelementptr inbounds %Token, %Token* %61, i32 0, i32 0
  %63 = load %Location, %Location* %62
  %64 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %65 = getelementptr inbounds %Token, %Token* %64, i32 0, i32 3
  %66 = load i64, i64* %65
  store i64 %66, i64* %tmp.this54
  %67 = load i64, i64* %tmp.this54
  %68 = call %Node @mkLongLiteral(%AstBuilder* %60, %Location %63, i64 %67)
  store %Node %68, %Node* %"$tmpForRef53"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef53")
  br label %if_end51

if_else50:                                        ; preds = %if_block48
  br label %if_block55

if_end51:                                         ; preds = %if_end58, %if_then49
  br label %if_end44

if_block55:                                       ; preds = %if_else50
  call void @ctor.393(%TokenType* %tmp.this59, i32 44)
  %69 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this59)
  br i1 %69, label %if_then56, label %if_else57

if_then56:                                        ; preds = %if_block55
  %70 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %71 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %72 = getelementptr inbounds %Token, %Token* %71, i32 0, i32 0
  %73 = load %Location, %Location* %72
  %74 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %75 = getelementptr inbounds %Token, %Token* %74, i32 0, i32 3
  %76 = load i64, i64* %75
  store i64 %76, i64* %tmp.this61
  %77 = load i64, i64* %tmp.this61
  %78 = call %Node @mkULongLiteral(%AstBuilder* %70, %Location %73, i64 %77)
  store %Node %78, %Node* %"$tmpForRef60"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef60")
  br label %if_end58

if_else57:                                        ; preds = %if_block55
  br label %if_block62

if_end58:                                         ; preds = %if_end65, %if_then56
  br label %if_end51

if_block62:                                       ; preds = %if_else57
  call void @ctor.393(%TokenType* %tmp.this66, i32 45)
  %79 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this66)
  br i1 %79, label %if_then63, label %if_else64

if_then63:                                        ; preds = %if_block62
  %80 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %81 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %82 = getelementptr inbounds %Token, %Token* %81, i32 0, i32 0
  %83 = load %Location, %Location* %82
  %84 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %85 = getelementptr inbounds %Token, %Token* %84, i32 0, i32 4
  %86 = load double, double* %85
  %87 = fptrunc double %86 to float
  store float %87, float* %tmp.this68
  %88 = load float, float* %tmp.this68
  %89 = call %Node @mkFloatLiteral(%AstBuilder* %80, %Location %83, float %88)
  store %Node %89, %Node* %"$tmpForRef67"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef67")
  br label %if_end65

if_else64:                                        ; preds = %if_block62
  br label %if_block69

if_end65:                                         ; preds = %if_end72, %if_then63
  br label %if_end58

if_block69:                                       ; preds = %if_else64
  call void @ctor.393(%TokenType* %tmp.this73, i32 46)
  %90 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this73)
  br i1 %90, label %if_then70, label %if_else71

if_then70:                                        ; preds = %if_block69
  %91 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %92 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %93 = getelementptr inbounds %Token, %Token* %92, i32 0, i32 0
  %94 = load %Location, %Location* %93
  %95 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %96 = getelementptr inbounds %Token, %Token* %95, i32 0, i32 4
  %97 = load double, double* %96
  store double %97, double* %tmp.this75
  %98 = load double, double* %tmp.this75
  %99 = call %Node @mkDoubleLiteral(%AstBuilder* %91, %Location %94, double %98)
  store %Node %99, %Node* %"$tmpForRef74"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef74")
  br label %if_end72

if_else71:                                        ; preds = %if_block69
  br label %if_block76

if_end72:                                         ; preds = %if_end79, %if_then70
  br label %if_end65

if_block76:                                       ; preds = %if_else71
  call void @ctor.393(%TokenType* %tmp.this80, i32 39)
  %100 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this80)
  br i1 %100, label %if_then77, label %if_else78

if_then77:                                        ; preds = %if_block76
  %101 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %102 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %103 = getelementptr inbounds %Token, %Token* %102, i32 0, i32 0
  %104 = load %Location, %Location* %103
  %105 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %106 = getelementptr inbounds %Token, %Token* %105, i32 0, i32 2
  %107 = call i8* @"().321"(%String* %106, i32 0)
  %108 = load i8, i8* %107
  %109 = call %Node @mkCharLiteral(%AstBuilder* %101, %Location %104, i8 %108)
  store %Node %109, %Node* %"$tmpForRef81"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef81")
  br label %if_end79

if_else78:                                        ; preds = %if_block76
  br label %if_block82

if_end79:                                         ; preds = %if_end84, %if_then77
  br label %if_end72

if_block82:                                       ; preds = %if_else78
  call void @ctor.393(%TokenType* %tmp.this85, i32 40)
  %110 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this85)
  br i1 %110, label %if_then83, label %if_end84

if_then83:                                        ; preds = %if_block82
  %111 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %112 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %113 = getelementptr inbounds %Token, %Token* %112, i32 0, i32 0
  %114 = load %Location, %Location* %113
  %115 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %116 = getelementptr inbounds %Token, %Token* %115, i32 0, i32 2
  %117 = call %StringRef @asStringRef(%String* %116)
  %118 = call %Node @mkStringLiteral(%AstBuilder* %111, %Location %114, %StringRef %117)
  store %Node %118, %Node* %"$tmpForRef86"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef86")
  br label %if_end84

if_end84:                                         ; preds = %if_then83, %if_block82
  br label %if_end79

cond_destruct_alt1:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  br label %if_block87

if_block87:                                       ; preds = %cond_destruct_end
  %119 = load %Node, %Node* %res
  %120 = call i1 @isNull(%Node %119)
  br i1 %120, label %if_then88, label %if_end89

if_then88:                                        ; preds = %if_block87
  %121 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %122 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %123 = bitcast %UntypedPtr* %121 to i8**
  %124 = bitcast %UntypedPtr* %122 to i8**
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.98, i32 0, i32 0), i8** %123
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.98, i32 0, i32 25), i8** %124
  %125 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %125, %StringRef* %"$tmpForRef90"
  %126 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC91", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %126)
  %127 = getelementptr inbounds %Token, %Token* %"$tmpC91", i32 0, i32 1
  %128 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef93, i32 0, i32 0
  %129 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef93, i32 0, i32 1
  %130 = bitcast %UntypedPtr* %128 to i8**
  %131 = bitcast %UntypedPtr* %129 to i8**
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str.99, i32 0, i32 0), i8** %130
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str.99, i32 0, i32 22), i8** %131
  %132 = load %StringRef, %StringRef* %tmp.StringRef93
  store %StringRef %132, %StringRef* %"$tmpForRef92"
  call void @toString.574(%String* %"$tmpC", %StringRef* %"$tmpForRef90", %TokenType* %127, %StringRef* %"$tmpForRef92")
  call void @reportError.523(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC91")
  call void @ctor.531(%Node* %tmp.this94)
  %133 = load %Node, %Node* %tmp.this94
  ret %Node %133

if_end89:                                         ; preds = %dumy_block, %if_block87
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end89

while_block:                                      ; preds = %while_step, %if_end89
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block95

while_step:                                       ; preds = %if_end98
  br label %while_block

while_end:                                        ; preds = %if_else105, %while_block
  %134 = load %Node, %Node* %res
  ret %Node %134

if_block95:                                       ; preds = %while_body
  call void @ctor.393(%TokenType* %tmp.this99, i32 29)
  %135 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this99)
  br i1 %135, label %if_then96, label %if_else97

if_then96:                                        ; preds = %if_block95
  %136 = call %Node @parseExprListOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %136, %Node* %"$tmpForRef100"
  call void @ctor.520(%Node* %args, %Node* %"$tmpForRef100")
  call void @ctor.393(%TokenType* %tmp.this101, i32 30)
  %137 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this101)
  %138 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %139 = load %Location, %Location* %loc
  %140 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %141 = call %Location @span(%Location %139, %Location %140)
  %142 = load %Node, %Node* %res
  %143 = load %Node, %Node* %args
  %144 = call %Node @mkFunAppExpr(%AstBuilder* %138, %Location %141, %Node %142, %Node %143)
  store %Node %144, %Node* %"$tmpForRef102"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef102")
  br label %if_end98

if_else97:                                        ; preds = %if_block95
  br label %if_block103

if_end98:                                         ; preds = %if_end106, %if_then96
  br label %while_step

if_block103:                                      ; preds = %if_else97
  call void @ctor.393(%TokenType* %tmp.this107, i32 34)
  %145 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this107)
  br i1 %145, label %if_then104, label %if_else105

if_then104:                                       ; preds = %if_block103
  br label %if_block108

if_else105:                                       ; preds = %if_block103
  br label %while_end

if_end106:                                        ; preds = %dumy_block117, %if_end111
  br label %if_end98

if_block108:                                      ; preds = %if_then104
  call void @ctor.393(%TokenType* %tmp.this112, i32 29)
  %146 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this112)
  br i1 %146, label %if_then109, label %if_else110

if_then109:                                       ; preds = %if_block108
  call void @ctor.393(%TokenType* %tmp.this113, i32 30)
  %147 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this113)
  %148 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %149 = load %Location, %Location* %loc
  %150 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %151 = call %Location @span(%Location %149, %Location %150)
  %152 = load %Node, %Node* %res
  %153 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef115, i32 0, i32 0
  %154 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef115, i32 0, i32 1
  %155 = bitcast %UntypedPtr* %153 to i8**
  %156 = bitcast %UntypedPtr* %154 to i8**
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.100, i32 0, i32 0), i8** %155
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.100, i32 0, i32 2), i8** %156
  %157 = load %StringRef, %StringRef* %tmp.StringRef115
  %158 = call %Node @mkDotExpr(%AstBuilder* %148, %Location %151, %Node %152, %StringRef %157)
  store %Node %158, %Node* %"$tmpForRef114"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef114")
  br label %if_end111

if_else110:                                       ; preds = %if_block108
  %159 = load i1, i1* %withEqual.addr
  call void @parseIdOrOper(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %159)
  %160 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %161 = load %Location, %Location* %loc
  %162 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %163 = call %Location @span(%Location %161, %Location %162)
  %164 = load %Node, %Node* %res
  %165 = call %StringRef @asStringRef(%String* %id)
  %166 = call %Node @mkDotExpr(%AstBuilder* %160, %Location %163, %Node %164, %StringRef %165)
  store %Node %166, %Node* %"$tmpForRef116"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef116")
  call void @dtor.239(%String* %id)
  br label %if_end111

if_end111:                                        ; preds = %if_else110, %if_then109
  br label %if_end106

dumy_block117:                                    ; No predecessors!
  br label %if_end106
}

; Function Attrs: inlinehint nounwind
define internal i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %t) #4 {
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  %3 = call i1 @"==.328"(%TokenType* %2, %TokenType* %t)
  call void @dtor.238(%Token* %"$tmpC")
  ret i1 %3

dumy_block:                                       ; No predecessors!
  call void @dtor.238(%Token* %"$tmpC")
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal i1 @next2Is(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %t) #4 {
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @peek.532(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 1)
  %2 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  %3 = call i1 @"==.328"(%TokenType* %2, %TokenType* %t)
  call void @dtor.238(%Token* %"$tmpC")
  ret i1 %3

dumy_block:                                       ; No predecessors!
  call void @dtor.238(%Token* %"$tmpC")
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @peek.532(%Token* sret %_result, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load i32, i32* %n.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %3 = call i32 @size.184(%"Vector[Token]"* %2)
  %4 = call i1 @_Int32_opGE(i32 %1, i32 %3)
  br i1 %4, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %5 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"post_++.496"(%Token* %"$tmpC", %"SparrowLayoutDecoder[SparrowScanner]"* %6)
  call void @"+=.385"(%"Vector[Token]"* %5, %Token* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_block

cond.true:                                        ; preds = %while_block
  %7 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  %8 = call i1 @"pre_!!.494"(%"SparrowLayoutDecoder[SparrowScanner]"* %7)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %8, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

if_block:                                         ; preds = %while_end
  %9 = load i32, i32* %n.addr
  %10 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %11 = call i32 @size.184(%"Vector[Token]"* %10)
  %12 = call i1 @_Int32_opLT(i32 %9, i32 %11)
  br i1 %12, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %13 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %14 = load i32, i32* %n.addr
  %15 = call %Token* @"().533"(%"Vector[Token]"* %13, i32 %14)
  call void @ctor.177(%Token* %_result, %Token* %15)
  ret void

if_else:                                          ; preds = %if_block
  call void @ctor.120(%Token* %_result)
  ret void

if_end:                                           ; preds = %dumy_block1, %dumy_block
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block1:                                      ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Token* @"().533"(%"Vector[Token]"* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %"$tmpForRef" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %2 = load i32, i32* %index.addr
  %3 = call %"RawPtr[Token]" @advance.190(%"RawPtr[Token]"* %1, i32 %2)
  store %"RawPtr[Token]" %3, %"RawPtr[Token]"* %"$tmpForRef"
  %4 = call %Token* @value.195(%"RawPtr[Token]"* %"$tmpForRef")
  ret %Token* %4
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseLambdaExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %closureParams = alloca %Node
  %"$tmpForRef2" = alloca %Node
  %formals = alloca %Node
  %"$tmpForRef3" = alloca %Node
  %retType = alloca %Node
  %"$tmpForRef4" = alloca %Node
  %body = alloca %Node
  %bodyExp = alloca %Node
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef6" = alloca %Node
  %"$tmpForRef7" = alloca %Node
  %tmp.this8 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  call void @ctor.393(%TokenType* %tmp.this, i32 29)
  %2 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  call void @ctor.393(%TokenType* %tmp.this1, i32 6)
  %3 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  %4 = call %Node @parseClosureParams(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %4, %Node* %"$tmpForRef2"
  call void @ctor.520(%Node* %closureParams, %Node* %"$tmpForRef2")
  %5 = call %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %5, %Node* %"$tmpForRef3"
  call void @ctor.520(%Node* %formals, %Node* %"$tmpForRef3")
  %6 = call %Node @parseTypeNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %6, %Node* %"$tmpForRef4"
  call void @ctor.520(%Node* %retType, %Node* %"$tmpForRef4")
  call void @ctor.531(%Node* %body)
  call void @ctor.531(%Node* %bodyExp)
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this5, i32 36)
  %7 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  br i1 %7, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %8 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %8, %Node* %"$tmpForRef6"
  call void @"=.529"(%Node* %bodyExp, %Node* %"$tmpForRef6")
  br label %if_end

if_else:                                          ; preds = %if_block
  %9 = call %Node @parseFunBody(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %9, %Node* %"$tmpForRef7"
  call void @"=.529"(%Node* %body, %Node* %"$tmpForRef7")
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  call void @ctor.393(%TokenType* %tmp.this8, i32 30)
  %10 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this8)
  %11 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %12 = load %Location, %Location* %loc
  %13 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %14 = call %Location @span(%Location %12, %Location %13)
  %15 = load %Node, %Node* %closureParams
  %16 = load %Node, %Node* %formals
  %17 = load %Node, %Node* %retType
  %18 = load %Node, %Node* %body
  %19 = load %Node, %Node* %bodyExp
  %20 = call %Node @mkLambdaExpr(%AstBuilder* %11, %Location %14, %Node %15, %Node %16, %Node %17, %Node %18, %Node %19)
  ret %Node %20
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseClosureParams(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %Node
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this6 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 34)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  call void @ctor.393(%TokenType* %tmp.this1, i32 25)
  %2 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  br label %if_block2

if_end:                                           ; preds = %if_end4, %if_block
  %3 = load %Node, %Node* %res
  ret %Node %3

if_block2:                                        ; preds = %if_then
  call void @ctor.393(%TokenType* %tmp.this5, i32 37)
  %4 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  br i1 %4, label %if_then3, label %if_end4

if_then3:                                         ; preds = %if_block2
  %5 = call %Node @parseIdListNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %5, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  br label %if_end4

if_end4:                                          ; preds = %if_then3, %if_block2
  call void @ctor.393(%TokenType* %tmp.this6, i32 26)
  %6 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this6)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseIdListNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %Node
  %id = alloca %String
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %String
  %"$tmpForRef1" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %2 = load %Node, %Node* %res
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %5 = getelementptr inbounds %Token, %Token* %4, i32 0, i32 0
  %6 = load %Location, %Location* %5
  %7 = call %StringRef @asStringRef(%String* %id)
  %8 = call %Node @mkIdentifier(%AstBuilder* %3, %Location %6, %StringRef %7)
  %9 = call %Node @addToNodeList(%AstBuilder* %1, %Node %2, %Node %8)
  store %Node %9, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  call void @ctor.393(%TokenType* %tmp.this, i32 33)
  %10 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %10, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  call void @parseId(%String* %"$tmpC", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %11 = call %String* @"=.267"(%String* %id, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %13 = load %Node, %Node* %res
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %15 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %16 = getelementptr inbounds %Token, %Token* %15, i32 0, i32 0
  %17 = load %Location, %Location* %16
  %18 = call %StringRef @asStringRef(%String* %id)
  %19 = call %Node @mkIdentifier(%AstBuilder* %14, %Location %17, %StringRef %18)
  %20 = call %Node @addToNodeList(%AstBuilder* %12, %Node %13, %Node %19)
  store %Node %20, %Node* %"$tmpForRef1"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef1")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %21 = load %Node, %Node* %res
  call void @dtor.239(%String* %id)
  ret %Node %21

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @addToNodeList(%AstBuilder* %obj, %Node %nl, %Node %newNode) #4 {
  %nl.addr = alloca %Node
  store %Node %nl, %Node* %nl.addr
  %newNode.addr = alloca %Node
  store %Node %newNode, %Node* %newNode.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 1
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %nl.addr
  %5 = load %Node, %Node* %newNode.addr
  %6 = call %Node @"().534"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %1, %UntypedPtr %3, %Node %4, %Node %5)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().534"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %UntypedPtr %p1, %Node %p2, %Node %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Node
  store %Node %p2, %Node* %p2.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %Node, %Node* %p2.addr
  %3 = load %Node, %Node* %p3.addr
  %4 = bitcast %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this to %Node (%UntypedPtr, %Node, %Node)**
  %5 = load %Node (%UntypedPtr, %Node, %Node)*, %Node (%UntypedPtr, %Node, %Node)** %4
  %6 = call %Node %5(%UntypedPtr %1, %Node %2, %Node %3)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %Node
  %tmp.this = alloca %TokenType
  %tmp.this4 = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %tmp.this6 = alloca %TokenType
  %tmp.this10 = alloca %TokenType
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %ids = alloca %"Vector[LocString]"
  %tmp.StringRef = alloca %StringRef
  %tmp.this11 = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 29)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  br label %if_block1

if_else:                                          ; preds = %if_block
  br label %if_block7

if_end:                                           ; preds = %if_end9, %while_end
  %2 = load %Node, %Node* %res
  ret %Node %2

if_block1:                                        ; preds = %if_then
  call void @ctor.393(%TokenType* %tmp.this4, i32 30)
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this4)
  br i1 %3, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  %4 = load %Node, %Node* %res
  ret %Node %4

if_end3:                                          ; preds = %dumy_block, %if_block1
  call void @parseFormal(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end3

while_block:                                      ; preds = %while_step, %if_end3
  call void @ctor.393(%TokenType* %tmp.this5, i32 33)
  %5 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  br i1 %5, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  call void @parseFormal(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  call void @ctor.393(%TokenType* %tmp.this6, i32 30)
  %6 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this6)
  br label %if_end

if_block7:                                        ; preds = %if_else
  call void @ctor.393(%TokenType* %tmp.this10, i32 37)
  %7 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this10)
  br i1 %7, label %if_then8, label %if_end9

if_then8:                                         ; preds = %if_block7
  %8 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %8, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  call void @parseIdList(%"Vector[LocString]"* %ids, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %11 = load %Location, %Location* %loc
  %12 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %13 = call %Location @span(%Location %11, %Location %12)
  %14 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %15 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %16 = bitcast %UntypedPtr* %14 to i8**
  %17 = bitcast %UntypedPtr* %15 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.95, i32 0, i32 0), i8** %16
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.95, i32 0, i32 7), i8** %17
  %18 = load %StringRef, %StringRef* %tmp.StringRef
  %19 = call %Node @mkIdentifier(%AstBuilder* %10, %Location %13, %StringRef %18)
  call void @ctor.531(%Node* %tmp.this11)
  %20 = load %Node, %Node* %tmp.this11
  call void @createFormals(%AstBuilder* %9, %"Vector[LocString]"* %ids, %Node %19, %Node %20, i32 2, %Node* %res)
  call void @dtor.562(%"Vector[LocString]"* %ids)
  br label %if_end9

if_end9:                                          ; preds = %if_then8, %if_block7
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @parseFormal(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %ids = alloca %"Vector[LocString]"
  %tmp.this = alloca %TokenType
  %typeNode = alloca %Node
  %"$tmpForRef" = alloca %Node
  %init = alloca %Node
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef2" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @parseIdList(%"Vector[LocString]"* %ids, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  call void @ctor.393(%TokenType* %tmp.this, i32 31)
  %1 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %2 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 false)
  store %Node %2, %Node* %"$tmpForRef"
  call void @ctor.520(%Node* %typeNode, %Node* %"$tmpForRef")
  call void @ctor.531(%Node* %init)
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this1, i32 36)
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %4, %Node* %"$tmpForRef2"
  call void @"=.529"(%Node* %init, %Node* %"$tmpForRef2")
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %6 = load %Node, %Node* %typeNode
  %7 = load %Node, %Node* %init
  call void @createFormals(%AstBuilder* %5, %"Vector[LocString]"* %ids, %Node %6, %Node %7, i32 2, %Node* %res)
  call void @dtor.562(%"Vector[LocString]"* %ids)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseIdList(%"Vector[LocString]"* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %"Vector[LocString]"
  %id = alloca %String
  %tmp.this = alloca %LocString
  %"$tmpC" = alloca %"Tuple[Location, String]"
  %tmp.this1 = alloca %TokenType
  %"$tmpC2" = alloca %String
  %tmp.this3 = alloca %LocString
  %"$tmpC4" = alloca %"Tuple[Location, String]"
  br label %code

code:                                             ; preds = %0
  call void @ctor.535(%"Vector[LocString]"* %res)
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 0
  call void @"~"(%"Tuple[Location, String]"* %"$tmpC", %Location* %2, %String* %id)
  call void @ctor.554(%LocString* %tmp.this, %"Tuple[Location, String]"* %"$tmpC")
  call void @"+=.537"(%"Vector[LocString]"* %res, %LocString* %tmp.this)
  call void @dtor.556(%LocString* %tmp.this)
  call void @dtor.557(%"Tuple[Location, String]"* %"$tmpC")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  call void @ctor.393(%TokenType* %tmp.this1, i32 33)
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  br i1 %3, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  call void @parseId(%String* %"$tmpC2", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %4 = call %String* @"=.267"(%String* %id, %String* %"$tmpC2")
  call void @dtor.239(%String* %"$tmpC2")
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 0
  call void @"~"(%"Tuple[Location, String]"* %"$tmpC4", %Location* %6, %String* %id)
  call void @ctor.554(%LocString* %tmp.this3, %"Tuple[Location, String]"* %"$tmpC4")
  call void @"+=.537"(%"Vector[LocString]"* %res, %LocString* %tmp.this3)
  call void @dtor.556(%LocString* %tmp.this3)
  call void @dtor.557(%"Tuple[Location, String]"* %"$tmpC4")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  call void @ctor.558(%"Vector[LocString]"* %_result, %"Vector[LocString]"* %res)
  call void @dtor.239(%String* %id)
  call void @dtor.562(%"Vector[LocString]"* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %id)
  call void @dtor.562(%"Vector[LocString]"* %res)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.535(%"Vector[LocString]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  call void @ctor.536(%"RawPtr[LocString]"* %1)
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  call void @ctor.536(%"RawPtr[LocString]"* %2)
  %3 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 2
  call void @ctor.536(%"RawPtr[LocString]"* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.536(%"RawPtr[LocString]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  store %LocString* null, %LocString** %1
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"+=.537"(%"Vector[LocString]"* %this, %LocString* %value) #4 {
  br label %code

code:                                             ; preds = %0
  call void @pushBack.538(%"Vector[LocString]"* %this, %LocString* %value)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack.538(%"Vector[LocString]"* %this, %LocString* %value) #4 {
  %t = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 2
  %3 = call i1 @"==.539"(%"RawPtr[LocString]"* %1, %"RawPtr[LocString]"* %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = call i32 @capacity.540(%"Vector[LocString]"* %this)
  %5 = call i32 @_Int32_opMul(i32 2, i32 %4)
  store i32 %5, i32* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %6 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %7 = call %LocString* @value.552(%"RawPtr[LocString]"* %6)
  call void @ctor.550(%LocString* %7, %LocString* %value)
  %8 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %9 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %10 = call %"RawPtr[LocString]" @advance.553(%"RawPtr[LocString]"* %9)
  store %"RawPtr[LocString]" %10, %"RawPtr[LocString]"* %"$tmpForRef"
  call void @"=.547"(%"RawPtr[LocString]"* %8, %"RawPtr[LocString]"* %"$tmpForRef")
  ret void

if_block1:                                        ; preds = %if_then
  %11 = load i32, i32* %t
  %12 = call i1 @_Int32_opLT(i32 %11, i32 2)
  br i1 %12, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 2, i32* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %13 = load i32, i32* %t
  call void @reserve.543(%"Vector[LocString]"* %this, i32 %13)
  br label %if_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.539"(%"RawPtr[LocString]"* %this, %"RawPtr[LocString]"* %other) #3 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  %other.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %other, %"RawPtr[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %2
  %4 = bitcast %LocString* %3 to i8*
  %5 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %other.addr
  %6 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %5, i32 0, i32 0
  %7 = load %LocString*, %LocString** %6
  %8 = bitcast %LocString* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal i32 @capacity.540(%"Vector[LocString]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 2
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %2
  %4 = call i32 @diff.541(%"RawPtr[LocString]"* %1, %"RawPtr[LocString]" %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal i32 @diff.541(%"RawPtr[LocString]"* %this, %"RawPtr[LocString]" %other) #4 {
  %other.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %other, %"RawPtr[LocString]"* %other.addr
  %tmp.this = alloca %UntypedPtr
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  %2 = load %LocString*, %LocString** %1
  call void @ctor.542(%UntypedPtr* %tmp.this, %LocString* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %4 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %other.addr, i32 0, i32 0
  %5 = load %LocString*, %LocString** %4
  call void @ctor.542(%UntypedPtr* %tmp.this1, %LocString* %5)
  %6 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %7 = call i32 bitcast (i32 (i8*, i8*)* @ptrDiff to i32 (%UntypedPtr, %UntypedPtr)*)(%UntypedPtr %3, %UntypedPtr %6)
  %8 = call i32 @_Int32_opDiv(i32 %7, i32 48)
  ret i32 %8
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.542(%UntypedPtr* %this, %LocString* %val) #4 {
  %val.addr = alloca %LocString*
  store %LocString* %val, %LocString** %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* null, i8** %1
  %2 = load %LocString*, %LocString** %val.addr
  %3 = bitcast %LocString* %2 to i8*
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this, i32 0, i32 0
  store i8* %3, i8** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reserve.543(%"Vector[LocString]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %curCapacity = alloca i32
  %tmp.this = alloca i32
  %tmp.this7 = alloca double
  %tmp.this8 = alloca i32
  %tmp.this9 = alloca double
  %curSize = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[LocString]"
  %"$tmpForRef10" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @capacity.540(%"Vector[LocString]"* %this)
  store i32 %1, i32* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load i32, i32* %n.addr
  %3 = load i32, i32* %curCapacity
  %4 = call i1 @_Int32_opLE(i32 %2, i32 %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %5 = load i32, i32* %n.addr
  %6 = call i1 @_Int32_opLT(i32 %5, i32 8)
  br i1 %6, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 8, i32* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block4

if_block4:                                        ; preds = %if_end3
  %7 = load i32, i32* %n.addr
  %8 = load i32, i32* %curCapacity
  %9 = sitofp i32 %8 to double
  store double %9, double* %tmp.this7
  %10 = load double, double* %tmp.this7
  %11 = call double @_Float64_opMul(double 2.000000e+00, double %10)
  %12 = fptosi double %11 to i32
  store i32 %12, i32* %tmp.this
  %13 = load i32, i32* %tmp.this
  %14 = call i1 @_Int32_opLT(i32 %7, i32 %13)
  br i1 %14, label %if_then5, label %if_end6

if_then5:                                         ; preds = %if_block4
  %15 = load i32, i32* %curCapacity
  %16 = sitofp i32 %15 to double
  store double %16, double* %tmp.this9
  %17 = load double, double* %tmp.this9
  %18 = call double @_Float64_opMul(double 2.000000e+00, double %17)
  %19 = fptosi double %18 to i32
  store i32 %19, i32* %tmp.this8
  %20 = load i32, i32* %tmp.this8
  store i32 %20, i32* %n.addr
  br label %if_end6

if_end6:                                          ; preds = %if_then5, %if_block4
  %21 = call i32 @size.544(%"Vector[LocString]"* %this)
  store i32 %21, i32* %curSize
  %22 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %23 = load i32, i32* %n.addr
  call void @reallocPtr.545(%"RawPtr[LocString]"* %22, i32 %23)
  %24 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %25 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %26 = load i32, i32* %curSize
  %27 = call %"RawPtr[LocString]" @advance.548(%"RawPtr[LocString]"* %25, i32 %26)
  store %"RawPtr[LocString]" %27, %"RawPtr[LocString]"* %"$tmpForRef"
  call void @"=.547"(%"RawPtr[LocString]"* %24, %"RawPtr[LocString]"* %"$tmpForRef")
  %28 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 2
  %29 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %30 = load i32, i32* %n.addr
  %31 = call %"RawPtr[LocString]" @advance.548(%"RawPtr[LocString]"* %29, i32 %30)
  store %"RawPtr[LocString]" %31, %"RawPtr[LocString]"* %"$tmpForRef10"
  call void @"=.547"(%"RawPtr[LocString]"* %28, %"RawPtr[LocString]"* %"$tmpForRef10")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32 @size.544(%"Vector[LocString]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %2
  %4 = call i32 @diff.541(%"RawPtr[LocString]"* %1, %"RawPtr[LocString]" %3)
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal void @reallocPtr.545(%"RawPtr[LocString]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  %2 = load %LocString*, %LocString** %1
  call void @ctor.542(%UntypedPtr* %tmp.this, %LocString* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %4 = load i32, i32* %n.addr
  %5 = call i32 @_Int32_opMul(i32 %4, i32 48)
  %6 = call %UntypedPtr @realloc(%UntypedPtr %3, i32 %5)
  %7 = call %LocString* @asRefOf.546(%UntypedPtr %6)
  %8 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  store %LocString* %7, %LocString** %8
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %LocString* @asRefOf.546(%UntypedPtr %this) #4 {
  %this.addr = alloca %UntypedPtr
  store %UntypedPtr %this, %UntypedPtr* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %this.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = bitcast i8* %2 to %LocString*
  ret %LocString* %3
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.547"(%"RawPtr[LocString]"* %this, %"RawPtr[LocString]"* %other) #3 {
  %other.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %other, %"RawPtr[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %2
  %4 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  store %LocString* %3, %LocString** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[LocString]" @advance.548(%"RawPtr[LocString]"* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca %"RawPtr[LocString]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  %2 = load %LocString*, %LocString** %1
  call void @ctor.542(%UntypedPtr* %tmp.this1, %LocString* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %4 = load i32, i32* %n.addr
  %5 = call i32 @_Int32_opMul(i32 %4, i32 48)
  %6 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 %5)
  call void @ctor.549(%"RawPtr[LocString]"* %tmp.this, %UntypedPtr %6)
  %7 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %tmp.this
  ret %"RawPtr[LocString]" %7
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.549(%"RawPtr[LocString]"* %this, %UntypedPtr %p) #4 {
  %p.addr = alloca %UntypedPtr
  store %UntypedPtr %p, %UntypedPtr* %p.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  store %LocString* null, %LocString** %1
  %2 = load %UntypedPtr, %UntypedPtr* %p.addr
  %3 = call %LocString* @asRefOf.546(%UntypedPtr %2)
  %4 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  store %LocString* %3, %LocString** %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.550(%LocString* %this, %LocString* %other) #3 {
  %other.addr = alloca %LocString*
  store %LocString* %other, %LocString** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %LocString, %LocString* %this, i32 0, i32 0
  %2 = load %LocString*, %LocString** %other.addr
  %3 = getelementptr inbounds %LocString, %LocString* %2, i32 0, i32 0
  call void @ctor.551(%"Tuple[Location, String]"* %1, %"Tuple[Location, String]"* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.551(%"Tuple[Location, String]"* %this, %"Tuple[Location, String]"* %other) #3 {
  %other.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %other, %"Tuple[Location, String]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %this, i32 0, i32 0
  %2 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %3 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %2, i32 0, i32 0
  call void @ctor.159(%Location* %1, %Location* %3)
  %4 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %this, i32 0, i32 1
  %5 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %6 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %5, i32 0, i32 1
  call void @ctor.165(%String* %4, %String* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %LocString* @value.552(%"RawPtr[LocString]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  %2 = load %LocString*, %LocString** %1
  ret %LocString* %2
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[LocString]" @advance.553(%"RawPtr[LocString]"* %this) #4 {
  %tmp.this = alloca %"RawPtr[LocString]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  %2 = load %LocString*, %LocString** %1
  call void @ctor.542(%UntypedPtr* %tmp.this1, %LocString* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  %4 = call %UntypedPtr bitcast (i8* (i8*, i32)* @ptrAdd to %UntypedPtr (%UntypedPtr, i32)*)(%UntypedPtr %3, i32 48)
  call void @ctor.549(%"RawPtr[LocString]"* %tmp.this, %UntypedPtr %4)
  %5 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %tmp.this
  ret %"RawPtr[LocString]" %5
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.554(%LocString* %this, %"Tuple[Location, String]"* %fdata) #3 {
  %this.addr = alloca %LocString*
  store %LocString* %this, %LocString** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %this.addr
  %2 = getelementptr inbounds %LocString, %LocString* %1, i32 0, i32 0
  call void @ctor.551(%"Tuple[Location, String]"* %2, %"Tuple[Location, String]"* %fdata)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"~"(%"Tuple[Location, String]"* sret %_result, %Location* %v1, %String* %v2) #4 {
  br label %code

code:                                             ; preds = %0
  call void @mkTuple(%"Tuple[Location, String]"* %_result, %Location* %v1, %String* %v2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @mkTuple(%"Tuple[Location, String]"* sret %_result, %Location* %v1, %String* %v2) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = load %Location, %Location* %v1
  call void @ctor.555(%"Tuple[Location, String]"* %_result, %Location %1, %String* %v2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.555(%"Tuple[Location, String]"* %this, %Location %fv1, %String* %fv2) #3 {
  %this.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %this, %"Tuple[Location, String]"** %this.addr
  %fv1.addr = alloca %Location
  store %Location %fv1, %Location* %fv1.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %2 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %1, i32 0, i32 0
  call void @ctor.159(%Location* %2, %Location* %fv1.addr)
  %3 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %4 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %3, i32 0, i32 1
  call void @ctor.165(%String* %4, %String* %fv2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.556(%LocString* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %LocString, %LocString* %this, i32 0, i32 0
  call void @dtor.557(%"Tuple[Location, String]"* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.557(%"Tuple[Location, String]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %this, i32 0, i32 1
  call void @dtor.239(%String* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.558(%"Vector[LocString]"* %this, %"Vector[LocString]"* %other) #4 {
  %size = alloca i32
  %"$tmpForRef" = alloca %"RawPtr[LocString]"
  %"$tmpForRef1" = alloca %"RawPtr[LocString]"
  %dst = alloca %"RawPtr[LocString]"
  %src = alloca %"RawPtr[LocString]"
  %"$tmpForRef2" = alloca %"RawPtr[LocString]"
  %"$tmpForRef3" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  call void @ctor.536(%"RawPtr[LocString]"* %1)
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  call void @ctor.536(%"RawPtr[LocString]"* %2)
  %3 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 2
  call void @ctor.536(%"RawPtr[LocString]"* %3)
  %4 = call i32 @size.544(%"Vector[LocString]"* %other)
  store i32 %4, i32* %size
  %5 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %6 = load i32, i32* %size
  %7 = call %"RawPtr[LocString]" @allocRawPtr.559(i32 %6)
  store %"RawPtr[LocString]" %7, %"RawPtr[LocString]"* %"$tmpForRef"
  call void @"=.547"(%"RawPtr[LocString]"* %5, %"RawPtr[LocString]"* %"$tmpForRef")
  %8 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %9 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %10 = load i32, i32* %size
  %11 = call %"RawPtr[LocString]" @advance.548(%"RawPtr[LocString]"* %9, i32 %10)
  store %"RawPtr[LocString]" %11, %"RawPtr[LocString]"* %"$tmpForRef1"
  call void @"=.547"(%"RawPtr[LocString]"* %8, %"RawPtr[LocString]"* %"$tmpForRef1")
  %12 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 2
  %13 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  call void @"=.547"(%"RawPtr[LocString]"* %12, %"RawPtr[LocString]"* %13)
  %14 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  call void @ctor.561(%"RawPtr[LocString]"* %dst, %"RawPtr[LocString]"* %14)
  %15 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %other, i32 0, i32 0
  call void @ctor.561(%"RawPtr[LocString]"* %src, %"RawPtr[LocString]"* %15)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %16 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %17 = call i1 @"==.539"(%"RawPtr[LocString]"* %dst, %"RawPtr[LocString]"* %16)
  %18 = xor i1 true, %17
  br i1 %18, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %19 = call %LocString* @value.552(%"RawPtr[LocString]"* %dst)
  %20 = call %LocString* @value.552(%"RawPtr[LocString]"* %src)
  call void @ctor.550(%LocString* %19, %LocString* %20)
  %21 = call %"RawPtr[LocString]" @advance.553(%"RawPtr[LocString]"* %dst)
  store %"RawPtr[LocString]" %21, %"RawPtr[LocString]"* %"$tmpForRef2"
  call void @"=.547"(%"RawPtr[LocString]"* %dst, %"RawPtr[LocString]"* %"$tmpForRef2")
  %22 = call %"RawPtr[LocString]" @advance.553(%"RawPtr[LocString]"* %src)
  store %"RawPtr[LocString]" %22, %"RawPtr[LocString]"* %"$tmpForRef3"
  call void @"=.547"(%"RawPtr[LocString]"* %src, %"RawPtr[LocString]"* %"$tmpForRef3")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[LocString]" @allocRawPtr.559(i32 %num) #4 {
  %num.addr = alloca i32
  store i32 %num, i32* %num.addr
  %tmp.this = alloca %"RawPtr[LocString]"
  %"$tmpForRef" = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %num.addr
  %2 = call i32 @_Int32_opMul(i32 %1, i32 48)
  %3 = call %UntypedPtr @malloc(i32 %2)
  store %UntypedPtr %3, %UntypedPtr* %"$tmpForRef"
  %4 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %"$tmpForRef", i32 0, i32 0
  %5 = load i8*, i8** %4
  %6 = bitcast i8* %5 to %LocString*
  call void @ctor.560(%"RawPtr[LocString]"* %tmp.this, %LocString* %6)
  %7 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %tmp.this
  ret %"RawPtr[LocString]" %7
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.560(%"RawPtr[LocString]"* %this, %LocString* %f_ptr) #3 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  %f_ptr.addr = alloca %LocString*
  store %LocString* %f_ptr, %LocString** %f_ptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %f_ptr.addr
  %2 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %3 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %2, i32 0, i32 0
  store %LocString* %1, %LocString** %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.561(%"RawPtr[LocString]"* %this, %"RawPtr[LocString]"* %other) #3 {
  %other.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %other, %"RawPtr[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %2
  %4 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  store %LocString* %3, %LocString** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.562(%"Vector[LocString]"* %this) #4 {
  %p = alloca %"RawPtr[LocString]"
  %"$tmpForRef" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  call void @ctor.561(%"RawPtr[LocString]"* %p, %"RawPtr[LocString]"* %1)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %3 = call i1 @"==.539"(%"RawPtr[LocString]"* %p, %"RawPtr[LocString]"* %2)
  %4 = xor i1 true, %3
  br i1 %4, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %5 = call %LocString* @value.552(%"RawPtr[LocString]"* %p)
  call void @dtor.556(%LocString* %5)
  br label %while_step

while_step:                                       ; preds = %while_body
  %6 = call %"RawPtr[LocString]" @advance.553(%"RawPtr[LocString]"* %p)
  store %"RawPtr[LocString]" %6, %"RawPtr[LocString]"* %"$tmpForRef"
  call void @"=.547"(%"RawPtr[LocString]"* %p, %"RawPtr[LocString]"* %"$tmpForRef")
  br label %while_block

while_end:                                        ; preds = %while_block
  %7 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  call void @freePtr.563(%"RawPtr[LocString]"* %7)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @freePtr.563(%"RawPtr[LocString]"* %this) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i1 @isSet.564(%"RawPtr[LocString]"* %this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  %3 = load %LocString*, %LocString** %2
  call void @ctor.542(%UntypedPtr* %tmp.this, %LocString* %3)
  %4 = load %UntypedPtr, %UntypedPtr* %tmp.this
  call void @free(%UntypedPtr %4)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet.564(%"RawPtr[LocString]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this, i32 0, i32 0
  %2 = load %LocString*, %LocString** %1
  %3 = bitcast %LocString* %2 to i8*
  %4 = call i1 @implOpRefNE(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal void @createFormals(%AstBuilder* %astBuilder, %"Vector[LocString]"* %ids, %Node %typeNode, %Node %init, i32 %kind, %Node* %res) #4 {
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  %kind.addr = alloca i32
  store i32 %kind, i32* %kind.addr
  %"$rangeVar" = alloca %"ContiguousMemoryRange[LocString]"
  %"$tmpForRef" = alloca %"ContiguousMemoryRange[LocString]"
  %id = alloca %LocString
  %v = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %"$tmpForRef2" = alloca %Node
  %"$rangeVar7" = alloca %"ContiguousMemoryRange[LocString]"
  %"$tmpForRef8" = alloca %"ContiguousMemoryRange[LocString]"
  %id13 = alloca %LocString
  %v14 = alloca %Node
  %"$tmpForRef15" = alloca %Node
  %"$tmpForRef16" = alloca %Node
  %"$rangeVar17" = alloca %"ContiguousMemoryRange[LocString]"
  %"$tmpForRef18" = alloca %"ContiguousMemoryRange[LocString]"
  %id23 = alloca %LocString
  %p = alloca %Node
  %"$tmpForRef24" = alloca %Node
  %"$tmpForRef25" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load i32, i32* %kind.addr
  %2 = call i1 @_Int32_opEQ(i32 %1, i32 0)
  br i1 %2, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %3 = call %"ContiguousMemoryRange[LocString]" @all.566(%"Vector[LocString]"* %ids)
  store %"ContiguousMemoryRange[LocString]" %3, %"ContiguousMemoryRange[LocString]"* %"$tmpForRef"
  call void @ctor.565(%"ContiguousMemoryRange[LocString]"* %"$rangeVar", %"ContiguousMemoryRange[LocString]"* %"$tmpForRef")
  br label %while_block

if_else:                                          ; preds = %if_block
  br label %if_block3

if_end:                                           ; preds = %if_end6, %while_end
  ret void

while_block:                                      ; preds = %while_step, %if_then
  %4 = call i1 @isEmpty.568(%"ContiguousMemoryRange[LocString]"* %"$rangeVar")
  %5 = xor i1 true, %4
  br i1 %5, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %6 = call %LocString* @front.569(%"ContiguousMemoryRange[LocString]"* %"$rangeVar")
  call void @ctor.550(%LocString* %id, %LocString* %6)
  %7 = getelementptr inbounds %LocString, %LocString* %id, i32 0, i32 0
  %8 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %7, i32 0, i32 0
  %9 = load %Location, %Location* %8
  %10 = getelementptr inbounds %LocString, %LocString* %id, i32 0, i32 0
  %11 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %10, i32 0, i32 1
  %12 = call %StringRef @asStringRef(%String* %11)
  %13 = load %Node, %Node* %typeNode.addr
  %14 = load %Node, %Node* %init.addr
  %15 = call %Node @mkLet(%AstBuilder* %astBuilder, %Location %9, %StringRef %12, %Node %13, %Node %14)
  store %Node %15, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %v, %Node* %"$tmpForRef1")
  %16 = load %Node, %Node* %res
  %17 = load %Node, %Node* %v
  %18 = call %Node @addToNodeList(%AstBuilder* %astBuilder, %Node %16, %Node %17)
  store %Node %18, %Node* %"$tmpForRef2"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef2")
  call void @dtor.556(%LocString* %id)
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.571(%"ContiguousMemoryRange[LocString]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %if_end

if_block3:                                        ; preds = %if_else
  %19 = load i32, i32* %kind.addr
  %20 = call i1 @_Int32_opEQ(i32 %19, i32 1)
  br i1 %20, label %if_then4, label %if_else5

if_then4:                                         ; preds = %if_block3
  %21 = call %"ContiguousMemoryRange[LocString]" @all.566(%"Vector[LocString]"* %ids)
  store %"ContiguousMemoryRange[LocString]" %21, %"ContiguousMemoryRange[LocString]"* %"$tmpForRef8"
  call void @ctor.565(%"ContiguousMemoryRange[LocString]"* %"$rangeVar7", %"ContiguousMemoryRange[LocString]"* %"$tmpForRef8")
  br label %while_block9

if_else5:                                         ; preds = %if_block3
  %22 = call %"ContiguousMemoryRange[LocString]" @all.566(%"Vector[LocString]"* %ids)
  store %"ContiguousMemoryRange[LocString]" %22, %"ContiguousMemoryRange[LocString]"* %"$tmpForRef18"
  call void @ctor.565(%"ContiguousMemoryRange[LocString]"* %"$rangeVar17", %"ContiguousMemoryRange[LocString]"* %"$tmpForRef18")
  br label %while_block19

if_end6:                                          ; preds = %while_end22, %while_end12
  br label %if_end

while_block9:                                     ; preds = %while_step11, %if_then4
  %23 = call i1 @isEmpty.568(%"ContiguousMemoryRange[LocString]"* %"$rangeVar7")
  %24 = xor i1 true, %23
  br i1 %24, label %while_body10, label %while_end12

while_body10:                                     ; preds = %while_block9
  %25 = call %LocString* @front.569(%"ContiguousMemoryRange[LocString]"* %"$rangeVar7")
  call void @ctor.550(%LocString* %id13, %LocString* %25)
  %26 = getelementptr inbounds %LocString, %LocString* %id13, i32 0, i32 0
  %27 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %26, i32 0, i32 0
  %28 = load %Location, %Location* %27
  %29 = getelementptr inbounds %LocString, %LocString* %id13, i32 0, i32 0
  %30 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %29, i32 0, i32 1
  %31 = call %StringRef @asStringRef(%String* %30)
  %32 = load %Node, %Node* %typeNode.addr
  %33 = load %Node, %Node* %init.addr
  %34 = call %Node @mkVar(%AstBuilder* %astBuilder, %Location %28, %StringRef %31, %Node %32, %Node %33)
  store %Node %34, %Node* %"$tmpForRef15"
  call void @ctor.520(%Node* %v14, %Node* %"$tmpForRef15")
  %35 = load %Node, %Node* %res
  %36 = load %Node, %Node* %v14
  %37 = call %Node @addToNodeList(%AstBuilder* %astBuilder, %Node %35, %Node %36)
  store %Node %37, %Node* %"$tmpForRef16"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef16")
  call void @dtor.556(%LocString* %id13)
  br label %while_step11

while_step11:                                     ; preds = %while_body10
  call void @popFront.571(%"ContiguousMemoryRange[LocString]"* %"$rangeVar7")
  br label %while_block9

while_end12:                                      ; preds = %while_block9
  br label %if_end6

while_block19:                                    ; preds = %while_step21, %if_else5
  %38 = call i1 @isEmpty.568(%"ContiguousMemoryRange[LocString]"* %"$rangeVar17")
  %39 = xor i1 true, %38
  br i1 %39, label %while_body20, label %while_end22

while_body20:                                     ; preds = %while_block19
  %40 = call %LocString* @front.569(%"ContiguousMemoryRange[LocString]"* %"$rangeVar17")
  call void @ctor.550(%LocString* %id23, %LocString* %40)
  %41 = getelementptr inbounds %LocString, %LocString* %id23, i32 0, i32 0
  %42 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %41, i32 0, i32 0
  %43 = load %Location, %Location* %42
  %44 = getelementptr inbounds %LocString, %LocString* %id23, i32 0, i32 0
  %45 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %44, i32 0, i32 1
  %46 = call %StringRef @asStringRef(%String* %45)
  %47 = load %Node, %Node* %typeNode.addr
  %48 = load %Node, %Node* %init.addr
  %49 = call %Node @mkParameter(%AstBuilder* %astBuilder, %Location %43, %StringRef %46, %Node %47, %Node %48)
  store %Node %49, %Node* %"$tmpForRef24"
  call void @ctor.520(%Node* %p, %Node* %"$tmpForRef24")
  %50 = load %Node, %Node* %res
  %51 = load %Node, %Node* %p
  %52 = call %Node @addToNodeList(%AstBuilder* %astBuilder, %Node %50, %Node %51)
  store %Node %52, %Node* %"$tmpForRef25"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef25")
  call void @dtor.556(%LocString* %id23)
  br label %while_step21

while_step21:                                     ; preds = %while_body20
  call void @popFront.571(%"ContiguousMemoryRange[LocString]"* %"$rangeVar17")
  br label %while_block19

while_end22:                                      ; preds = %while_block19
  br label %if_end6
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.565(%"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"* %other) #3 {
  %other.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %other, %"ContiguousMemoryRange[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 0
  %2 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %3 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %2, i32 0, i32 0
  call void @ctor.561(%"RawPtr[LocString]"* %1, %"RawPtr[LocString]"* %3)
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 1
  %5 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %5, i32 0, i32 1
  call void @ctor.561(%"RawPtr[LocString]"* %4, %"RawPtr[LocString]"* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"ContiguousMemoryRange[LocString]" @all.566(%"Vector[LocString]"* %this) #4 {
  %tmp.this = alloca %"ContiguousMemoryRange[LocString]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %2 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %1
  %3 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %4 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %3
  call void @ctor.567(%"ContiguousMemoryRange[LocString]"* %tmp.this, %"RawPtr[LocString]" %2, %"RawPtr[LocString]" %4)
  %5 = load %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %tmp.this
  ret %"ContiguousMemoryRange[LocString]" %5
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.567(%"ContiguousMemoryRange[LocString]"* %this, %"RawPtr[LocString]" %f_begin, %"RawPtr[LocString]" %f_end) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"** %this.addr
  %f_begin.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %f_begin, %"RawPtr[LocString]"* %f_begin.addr
  %f_end.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %f_end, %"RawPtr[LocString]"* %f_end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %1, i32 0, i32 0
  call void @ctor.561(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %f_begin.addr)
  %3 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %3, i32 0, i32 1
  call void @ctor.561(%"RawPtr[LocString]"* %4, %"RawPtr[LocString]"* %f_end.addr)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.568(%"ContiguousMemoryRange[LocString]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 1
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 0
  %3 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %2
  %4 = call i32 @diff.541(%"RawPtr[LocString]"* %1, %"RawPtr[LocString]" %3)
  %5 = call i1 @_Int32_opLE(i32 %4, i32 0)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal %LocString* @front.569(%"ContiguousMemoryRange[LocString]"* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 0
  %2 = call %LocString* @value.552(%"RawPtr[LocString]"* %1)
  ret %LocString* %2
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkLet(%AstBuilder* %obj, %Location %loc, %StringRef %name, %Node %typeNode, %Node %init) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 10
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %name.addr
  %5 = load %Node, %Node* %typeNode.addr
  %6 = load %Node, %Node* %init.addr
  %7 = call %Node @"().570"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5, %Node %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().570"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4, %Node %p5) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %StringRef, %StringRef* %p3.addr
  %3 = load %Node, %Node* %p4.addr
  %4 = load %Node, %Node* %p5.addr
  %5 = bitcast %"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %this to %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node)**
  %6 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node)** %5
  %7 = call %Node %6(%UntypedPtr %1, %Location* %p2, %StringRef %2, %Node %3, %Node %4)
  ret %Node %7
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.571(%"ContiguousMemoryRange[LocString]"* %this) #3 {
  %"$tmpForRef" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 0
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 0
  %3 = call %"RawPtr[LocString]" @advance.553(%"RawPtr[LocString]"* %2)
  store %"RawPtr[LocString]" %3, %"RawPtr[LocString]"* %"$tmpForRef"
  call void @"=.547"(%"RawPtr[LocString]"* %1, %"RawPtr[LocString]"* %"$tmpForRef")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkVar(%AstBuilder* %obj, %Location %loc, %StringRef %name, %Node %typeNode, %Node %init) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 11
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %name.addr
  %5 = load %Node, %Node* %typeNode.addr
  %6 = load %Node, %Node* %init.addr
  %7 = call %Node @"().570"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5, %Node %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkParameter(%AstBuilder* %obj, %Location %loc, %StringRef %name, %Node %typeNode, %Node %init) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 12
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %name.addr
  %5 = load %Node, %Node* %typeNode.addr
  %6 = load %Node, %Node* %init.addr
  %7 = call %Node @"().570"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5, %Node %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseTypeNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 31)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 false)
  ret %Node %2

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.531(%Node* %tmp.this1)
  %3 = load %Node, %Node* %tmp.this1
  ret %Node %3

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseFunBody(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %Node
  %res = alloca %Node
  %"$tmpC" = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %"$tmpC5" = alloca %Token
  %"$tmpForRef6" = alloca %StringRef
  %tmp.StringRef7 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 32)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  call void @ctor.531(%Node* %tmp.this1)
  %2 = load %Node, %Node* %tmp.this1
  ret %Node %2

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.531(%Node* %res)
  br label %if_block2

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block2:                                        ; preds = %if_end
  %3 = call i1 @parseBlockStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 false)
  %4 = xor i1 true, %3
  br i1 %4, label %if_then3, label %if_end4

if_then3:                                         ; preds = %if_block2
  %5 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %6 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %7 = bitcast %UntypedPtr* %5 to i8**
  %8 = bitcast %UntypedPtr* %6 to i8**
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.96, i32 0, i32 0), i8** %7
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.96, i32 0, i32 25), i8** %8
  %9 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %9, %StringRef* %"$tmpForRef"
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC5", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %10)
  %11 = getelementptr inbounds %Token, %Token* %"$tmpC5", i32 0, i32 1
  %12 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef7, i32 0, i32 0
  %13 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef7, i32 0, i32 1
  %14 = bitcast %UntypedPtr* %12 to i8**
  %15 = bitcast %UntypedPtr* %13 to i8**
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str.97, i32 0, i32 0), i8** %14
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str.97, i32 0, i32 27), i8** %15
  %16 = load %StringRef, %StringRef* %tmp.StringRef7
  store %StringRef %16, %StringRef* %"$tmpForRef6"
  call void @toString.574(%String* %"$tmpC", %StringRef* %"$tmpForRef", %TokenType* %11, %StringRef* %"$tmpForRef6")
  call void @reportError.523(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC5")
  br label %if_end4

if_end4:                                          ; preds = %if_then3, %if_block2
  %17 = load %Node, %Node* %res
  ret %Node %17
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseBlockStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %topLevel) #4 {
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %Node
  %tmp.this2 = alloca %TokenType
  %s = alloca %Node
  %"$tmpForRef3" = alloca %Node
  %"$tmpForRef7" = alloca %Node
  %tmp.this8 = alloca %TokenType
  %"$tmpForRef12" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 25)
  %2 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  call void @ctor.531(%Node* %tmp.this1)
  call void @"=.529"(%Node* %res, %Node* %tmp.this1)
  br label %while_block

if_end:                                           ; preds = %dumy_block13, %if_block
  ret i1 false

while_block:                                      ; preds = %while_step, %if_then
  call void @ctor.393(%TokenType* %tmp.this2, i32 26)
  %3 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this2)
  %4 = xor i1 true, %3
  br i1 %4, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %5 = load i1, i1* %topLevel.addr
  %6 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %5)
  store %Node %6, %Node* %"$tmpForRef3"
  call void @ctor.520(%Node* %s, %Node* %"$tmpForRef3")
  br label %if_block4

while_step:                                       ; preds = %if_end6
  br label %while_block

while_end:                                        ; preds = %if_else, %cond.end
  call void @ctor.393(%TokenType* %tmp.this8, i32 26)
  %7 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this8)
  br label %if_block9

cond.true:                                        ; preds = %while_block
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 2
  %9 = load i1, i1* %8
  %10 = xor i1 true, %9
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

if_block4:                                        ; preds = %while_body
  %11 = load %Node, %Node* %s
  %12 = call i1 @isSet.572(%Node %11)
  br i1 %12, label %if_then5, label %if_else

if_then5:                                         ; preds = %if_block4
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %14 = load %Node, %Node* %res
  %15 = load %Node, %Node* %s
  %16 = call %Node @addToNodeList(%AstBuilder* %13, %Node %14, %Node %15)
  store %Node %16, %Node* %"$tmpForRef7"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef7")
  br label %if_end6

if_else:                                          ; preds = %if_block4
  br label %while_end

if_end6:                                          ; preds = %dumy_block, %if_then5
  br label %while_step

dumy_block:                                       ; No predecessors!
  br label %if_end6

if_block9:                                        ; preds = %while_end
  %17 = load i1, i1* %topLevel.addr
  %18 = xor i1 true, %17
  br i1 %18, label %if_then10, label %if_end11

if_then10:                                        ; preds = %if_block9
  %19 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %20 = load %Location, %Location* %loc
  %21 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %22 = call %Location @span(%Location %20, %Location %21)
  %23 = load %Node, %Node* %res
  %24 = call %Node @mkBlockStmt(%AstBuilder* %19, %Location %22, %Node %23)
  store %Node %24, %Node* %"$tmpForRef12"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef12")
  br label %if_end11

if_end11:                                         ; preds = %if_then10, %if_block9
  ret i1 true

dumy_block13:                                     ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet.572(%Node %n) #4 {
  %n.addr = alloca %Node
  store %Node %n, %Node* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Node, %Node* %n.addr, i32 0, i32 0
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = call i1 @implOpRefNE(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkBlockStmt(%AstBuilder* %obj, %Location %loc, %Node %stmts) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %stmts.addr = alloca %Node
  store %Node %stmts, %Node* %stmts.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 34
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %stmts.addr
  %5 = call %Node @"().573"(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().573"(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %Node, %Node* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %this to %Node (%UntypedPtr, %Location*, %Node)**
  %4 = load %Node (%UntypedPtr, %Location*, %Node)*, %Node (%UntypedPtr, %Location*, %Node)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, %Node %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal void @toString.574(%String* sret %_result, %StringRef* %a1, %TokenType* %a2, %StringRef* %a3) #4 {
  %s = alloca %StringOutputStream
  %"$tmpC" = alloca %StringOutputStream
  %"$tmpC1" = alloca %StringOutputStream
  %"$tmpC2" = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.428(%StringOutputStream* %s)
  call void @"<<"(%StringOutputStream* %"$tmpC2", %StringOutputStream* %s, %StringRef* %a1)
  call void @"<<.525"(%StringOutputStream* %"$tmpC1", %StringOutputStream* %"$tmpC2", %TokenType* %a2)
  call void @"<<"(%StringOutputStream* %"$tmpC", %StringOutputStream* %"$tmpC1", %StringRef* %a3)
  call void @dtor.431(%StringOutputStream* %"$tmpC")
  call void @dtor.431(%StringOutputStream* %"$tmpC1")
  call void @dtor.431(%StringOutputStream* %"$tmpC2")
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.165(%String* %_result, %String* %1)
  call void @dtor.431(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.431(%StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkLambdaExpr(%AstBuilder* %obj, %Location %loc, %Node %closureParams, %Node %formals, %Node %retType, %Node %body, %Node %bodyExpr) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %closureParams.addr = alloca %Node
  store %Node %closureParams, %Node* %closureParams.addr
  %formals.addr = alloca %Node
  store %Node %formals, %Node* %formals.addr
  %retType.addr = alloca %Node
  store %Node %retType, %Node* %retType.addr
  %body.addr = alloca %Node
  store %Node %body, %Node* %body.addr
  %bodyExpr.addr = alloca %Node
  store %Node %bodyExpr, %Node* %bodyExpr.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 23
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %closureParams.addr
  %5 = load %Node, %Node* %formals.addr
  %6 = load %Node, %Node* %retType.addr
  %7 = load %Node, %Node* %body.addr
  %8 = load %Node, %Node* %bodyExpr.addr
  %9 = call %Node @"().575"(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %Node %5, %Node %6, %Node %7, %Node %8)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().575"(%"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %Node %p4, %Node %p5, %Node %p6, %Node %p7) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  %p7.addr = alloca %Node
  store %Node %p7, %Node* %p7.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %Node, %Node* %p3.addr
  %3 = load %Node, %Node* %p4.addr
  %4 = load %Node, %Node* %p5.addr
  %5 = load %Node, %Node* %p6.addr
  %6 = load %Node, %Node* %p7.addr
  %7 = bitcast %"FunctionPtr7[Node, UntypedPtr, Location const, Node, Node, Node, Node, Node]"* %this to %Node (%UntypedPtr, %Location*, %Node, %Node, %Node, %Node, %Node)**
  %8 = load %Node (%UntypedPtr, %Location*, %Node, %Node, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %Node, %Node, %Node, %Node, %Node)** %7
  %9 = call %Node %8(%UntypedPtr %1, %Location* %p2, %Node %2, %Node %3, %Node %4, %Node %5, %Node %6)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkParenthesisExpr(%AstBuilder* %obj, %Node %expr) #4 {
  %expr.addr = alloca %Node
  store %Node %expr, %Node* %expr.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 14
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %expr.addr
  %5 = call %Node @"().576"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %1, %UntypedPtr %3, %Node %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().576"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %UntypedPtr %p1, %Node %p2) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Node
  store %Node %p2, %Node* %p2.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %Node, %Node* %p2.addr
  %3 = bitcast %"FunctionPtr2[Node, UntypedPtr, Node]"* %this to %Node (%UntypedPtr, %Node)**
  %4 = load %Node (%UntypedPtr, %Node)*, %Node (%UntypedPtr, %Node)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Node %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkNullLiteral(%AstBuilder* %obj, %Location %loc) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 24
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = call %Node @"().577"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %1, %UntypedPtr %3, %Location* %loc.addr)
  ret %Node %4
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().577"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %this, %UntypedPtr %p1, %Location* %p2) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = bitcast %"FunctionPtr2[Node, UntypedPtr, Location const]"* %this to %Node (%UntypedPtr, %Location*)**
  %3 = load %Node (%UntypedPtr, %Location*)*, %Node (%UntypedPtr, %Location*)** %2
  %4 = call %Node %3(%UntypedPtr %1, %Location* %p2)
  ret %Node %4
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkBoolLiteral(%AstBuilder* %obj, %Location %loc, i1 %val) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %val.addr = alloca i1
  store i1 %val, i1* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 25
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load i1, i1* %val.addr
  %5 = call %Node @"().578"(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %1, %UntypedPtr %3, %Location* %loc.addr, i1 %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().578"(%"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this, %UntypedPtr %p1, %Location* %p2, i1 %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca i1
  store i1 %p3, i1* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load i1, i1* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, Bool]"* %this to %Node (%UntypedPtr, %Location*, i1)**
  %4 = load %Node (%UntypedPtr, %Location*, i1)*, %Node (%UntypedPtr, %Location*, i1)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, i1 %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkIntLiteral(%AstBuilder* %obj, %Location %loc, i32 %val) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %val.addr = alloca i32
  store i32 %val, i32* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 26
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load i32, i32* %val.addr
  %5 = call %Node @"().579"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %1, %UntypedPtr %3, %Location* %loc.addr, i32 %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().579"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this, %UntypedPtr %p1, %Location* %p2, i32 %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca i32
  store i32 %p3, i32* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load i32, i32* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, Int]"* %this to %Node (%UntypedPtr, %Location*, i32)**
  %4 = load %Node (%UntypedPtr, %Location*, i32)*, %Node (%UntypedPtr, %Location*, i32)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, i32 %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkUIntLiteral(%AstBuilder* %obj, %Location %loc, i32 %val) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %val.addr = alloca i32
  store i32 %val, i32* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 27
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load i32, i32* %val.addr
  %5 = call %Node @"().580"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %1, %UntypedPtr %3, %Location* %loc.addr, i32 %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().580"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this, %UntypedPtr %p1, %Location* %p2, i32 %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca i32
  store i32 %p3, i32* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load i32, i32* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, UInt32]"* %this to %Node (%UntypedPtr, %Location*, i32)**
  %4 = load %Node (%UntypedPtr, %Location*, i32)*, %Node (%UntypedPtr, %Location*, i32)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, i32 %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkLongLiteral(%AstBuilder* %obj, %Location %loc, i64 %val) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %val.addr = alloca i64
  store i64 %val, i64* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 28
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load i64, i64* %val.addr
  %5 = call %Node @"().581"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %1, %UntypedPtr %3, %Location* %loc.addr, i64 %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().581"(%"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this, %UntypedPtr %p1, %Location* %p2, i64 %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca i64
  store i64 %p3, i64* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load i64, i64* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, Int64]"* %this to %Node (%UntypedPtr, %Location*, i64)**
  %4 = load %Node (%UntypedPtr, %Location*, i64)*, %Node (%UntypedPtr, %Location*, i64)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, i64 %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkULongLiteral(%AstBuilder* %obj, %Location %loc, i64 %val) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %val.addr = alloca i64
  store i64 %val, i64* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 29
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load i64, i64* %val.addr
  %5 = call %Node @"().582"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %1, %UntypedPtr %3, %Location* %loc.addr, i64 %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().582"(%"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this, %UntypedPtr %p1, %Location* %p2, i64 %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca i64
  store i64 %p3, i64* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load i64, i64* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, UInt64]"* %this to %Node (%UntypedPtr, %Location*, i64)**
  %4 = load %Node (%UntypedPtr, %Location*, i64)*, %Node (%UntypedPtr, %Location*, i64)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, i64 %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkFloatLiteral(%AstBuilder* %obj, %Location %loc, float %val) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %val.addr = alloca float
  store float %val, float* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 30
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load float, float* %val.addr
  %5 = call %Node @"().583"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %1, %UntypedPtr %3, %Location* %loc.addr, float %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().583"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this, %UntypedPtr %p1, %Location* %p2, float %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca float
  store float %p3, float* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load float, float* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, Float32]"* %this to %Node (%UntypedPtr, %Location*, float)**
  %4 = load %Node (%UntypedPtr, %Location*, float)*, %Node (%UntypedPtr, %Location*, float)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, float %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkDoubleLiteral(%AstBuilder* %obj, %Location %loc, double %val) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %val.addr = alloca double
  store double %val, double* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 31
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load double, double* %val.addr
  %5 = call %Node @"().584"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %1, %UntypedPtr %3, %Location* %loc.addr, double %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().584"(%"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this, %UntypedPtr %p1, %Location* %p2, double %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca double
  store double %p3, double* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load double, double* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, Float]"* %this to %Node (%UntypedPtr, %Location*, double)**
  %4 = load %Node (%UntypedPtr, %Location*, double)*, %Node (%UntypedPtr, %Location*, double)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, double %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkCharLiteral(%AstBuilder* %obj, %Location %loc, i8 %val) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %val.addr = alloca i8
  store i8 %val, i8* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 32
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load i8, i8* %val.addr
  %5 = call %Node @"().585"(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %1, %UntypedPtr %3, %Location* %loc.addr, i8 %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().585"(%"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this, %UntypedPtr %p1, %Location* %p2, i8 %p3) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca i8
  store i8 %p3, i8* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load i8, i8* %p3.addr
  %3 = bitcast %"FunctionPtr3[Node, UntypedPtr, Location const, Char]"* %this to %Node (%UntypedPtr, %Location*, i8)**
  %4 = load %Node (%UntypedPtr, %Location*, i8)*, %Node (%UntypedPtr, %Location*, i8)** %3
  %5 = call %Node %4(%UntypedPtr %1, %Location* %p2, i8 %2)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkStringLiteral(%AstBuilder* %obj, %Location %loc, %StringRef %data) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %data.addr = alloca %StringRef
  store %StringRef %data, %StringRef* %data.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 33
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %data.addr
  %5 = call %Node @"().528"(%"FunctionPtr3[Node, UntypedPtr, Location const, StringRef]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal i1 @isNull(%Node %n) #4 {
  %n.addr = alloca %Node
  store %Node %n, %Node* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Node, %Node* %n.addr, i32 0, i32 0
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = call i1 @implOpRefEQ(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseExprListOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %Node
  %expr = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpForRef1" = alloca %Node
  %"$tmpForRef2" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  call void @ctor.531(%Node* %expr)
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i1 @parseExprOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %expr, i1 false)
  %2 = xor i1 true, %1
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = load %Node, %Node* %res
  ret %Node %3

if_end:                                           ; preds = %dumy_block, %if_block
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %5 = load %Node, %Node* %res
  %6 = load %Node, %Node* %expr
  %7 = call %Node @addToNodeList(%AstBuilder* %4, %Node %5, %Node %6)
  store %Node %7, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  call void @ctor.393(%TokenType* %tmp.this, i32 33)
  %8 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %8, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %9 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %9, %Node* %"$tmpForRef1"
  call void @"=.529"(%Node* %expr, %Node* %"$tmpForRef1")
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %11 = load %Node, %Node* %res
  %12 = load %Node, %Node* %expr
  %13 = call %Node @addToNodeList(%AstBuilder* %10, %Node %11, %Node %12)
  store %Node %13, %Node* %"$tmpForRef2"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef2")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %14 = load %Node, %Node* %res
  ret %Node %14
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseExprOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %allowSemicolons) #4 {
  %allowSemicolons.addr = alloca i1
  store i1 %allowSemicolons, i1* %allowSemicolons.addr
  %"$tmpForRef" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i1 @nextIsExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %2, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  br label %if_block1

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block1:                                        ; preds = %if_then
  %3 = load i1, i1* %allowSemicolons.addr
  br i1 %3, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  call void @consumeSemis(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @nextIsExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %t = alloca %TokenType
  %"$tmpC" = alloca %Token
  %tmp.this = alloca %TokenType
  %tmp.this40 = alloca %TokenType
  %tmp.this41 = alloca %TokenType
  %tmp.this42 = alloca %TokenType
  %tmp.this44 = alloca %TokenType
  %tmp.this46 = alloca %TokenType
  %tmp.this48 = alloca %TokenType
  %tmp.this50 = alloca %TokenType
  %tmp.this52 = alloca %TokenType
  %tmp.this54 = alloca %TokenType
  %tmp.this56 = alloca %TokenType
  %tmp.this58 = alloca %TokenType
  %tmp.this60 = alloca %TokenType
  %tmp.this62 = alloca %TokenType
  %tmp.this64 = alloca %TokenType
  %tmp.this66 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  call void @ctor.178(%TokenType* %t, %TokenType* %2)
  call void @dtor.238(%Token* %"$tmpC")
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 36)
  %3 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load i1, i1* %withEqual.addr
  ret i1 %4

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.393(%TokenType* %tmp.this40, i32 37)
  %5 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this40)
  br i1 %5, label %cond.true37, label %cond.false38

dumy_block:                                       ; No predecessors!
  br label %if_end

cond.true:                                        ; preds = %cond.end3
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  call void @ctor.393(%TokenType* %tmp.this66, i32 46)
  %6 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this66)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res67 = phi i1 [ true, %cond.true ], [ %6, %cond.false ]
  br i1 %cond.res65, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true1:                                       ; preds = %cond.end6
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  call void @ctor.393(%TokenType* %tmp.this64, i32 45)
  %7 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this64)
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res65 = phi i1 [ true, %cond.true1 ], [ %7, %cond.false2 ]
  br i1 %cond.res65, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  call void @ctor.393(%TokenType* %tmp.this62, i32 44)
  %8 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this62)
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res63 = phi i1 [ true, %cond.true4 ], [ %8, %cond.false5 ]
  br i1 %cond.res63, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  call void @ctor.393(%TokenType* %tmp.this60, i32 43)
  %9 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this60)
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res61 = phi i1 [ true, %cond.true7 ], [ %9, %cond.false8 ]
  br i1 %cond.res61, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %cond.end15
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end15
  call void @ctor.393(%TokenType* %tmp.this58, i32 42)
  %10 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this58)
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res59 = phi i1 [ true, %cond.true10 ], [ %10, %cond.false11 ]
  br i1 %cond.res59, label %cond.true7, label %cond.false8

cond.true13:                                      ; preds = %cond.end18
  br label %cond.end15

cond.false14:                                     ; preds = %cond.end18
  call void @ctor.393(%TokenType* %tmp.this56, i32 41)
  %11 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this56)
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res57 = phi i1 [ true, %cond.true13 ], [ %11, %cond.false14 ]
  br i1 %cond.res57, label %cond.true10, label %cond.false11

cond.true16:                                      ; preds = %cond.end21
  br label %cond.end18

cond.false17:                                     ; preds = %cond.end21
  call void @ctor.393(%TokenType* %tmp.this54, i32 40)
  %12 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this54)
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond.res55 = phi i1 [ true, %cond.true16 ], [ %12, %cond.false17 ]
  br i1 %cond.res55, label %cond.true13, label %cond.false14

cond.true19:                                      ; preds = %cond.end24
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end24
  call void @ctor.393(%TokenType* %tmp.this52, i32 39)
  %13 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this52)
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond.res53 = phi i1 [ true, %cond.true19 ], [ %13, %cond.false20 ]
  br i1 %cond.res53, label %cond.true16, label %cond.false17

cond.true22:                                      ; preds = %cond.end27
  br label %cond.end24

cond.false23:                                     ; preds = %cond.end27
  call void @ctor.393(%TokenType* %tmp.this50, i32 21)
  %14 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this50)
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond.res51 = phi i1 [ true, %cond.true22 ], [ %14, %cond.false23 ]
  br i1 %cond.res51, label %cond.true19, label %cond.false20

cond.true25:                                      ; preds = %cond.end30
  br label %cond.end27

cond.false26:                                     ; preds = %cond.end30
  call void @ctor.393(%TokenType* %tmp.this48, i32 23)
  %15 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this48)
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond.res49 = phi i1 [ true, %cond.true25 ], [ %15, %cond.false26 ]
  br i1 %cond.res49, label %cond.true22, label %cond.false23

cond.true28:                                      ; preds = %cond.end33
  br label %cond.end30

cond.false29:                                     ; preds = %cond.end33
  call void @ctor.393(%TokenType* %tmp.this46, i32 22)
  %16 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this46)
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond.res47 = phi i1 [ true, %cond.true28 ], [ %16, %cond.false29 ]
  br i1 %cond.res47, label %cond.true25, label %cond.false26

cond.true31:                                      ; preds = %cond.end36
  br label %cond.end33

cond.false32:                                     ; preds = %cond.end36
  call void @ctor.393(%TokenType* %tmp.this44, i32 29)
  %17 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this44)
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond.res45 = phi i1 [ true, %cond.true31 ], [ %17, %cond.false32 ]
  br i1 %cond.res45, label %cond.true28, label %cond.false29

cond.true34:                                      ; preds = %cond.end39
  br label %cond.end36

cond.false35:                                     ; preds = %cond.end39
  call void @ctor.393(%TokenType* %tmp.this42, i32 35)
  %18 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this42)
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond.res43 = phi i1 [ true, %cond.true34 ], [ %18, %cond.false35 ]
  br i1 %cond.res43, label %cond.true31, label %cond.false32

cond.true37:                                      ; preds = %if_end
  br label %cond.end39

cond.false38:                                     ; preds = %if_end
  call void @ctor.393(%TokenType* %tmp.this41, i32 38)
  %19 = call i1 @"==.328"(%TokenType* %t, %TokenType* %tmp.this41)
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond.res = phi i1 [ true, %cond.true37 ], [ %19, %cond.false38 ]
  br i1 %cond.res, label %cond.true34, label %cond.false35

cond_destruct_alt1:                               ; preds = %cond.end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %cond.end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  br i1 %cond.res63, label %cond_destruct_alt168, label %cond_destruct_alt269

cond_destruct_alt168:                             ; preds = %cond_destruct_end
  br label %cond_destruct_end70

cond_destruct_alt269:                             ; preds = %cond_destruct_end
  br label %cond_destruct_end70

cond_destruct_end70:                              ; preds = %cond_destruct_alt269, %cond_destruct_alt168
  br i1 %cond.res61, label %cond_destruct_alt171, label %cond_destruct_alt272

cond_destruct_alt171:                             ; preds = %cond_destruct_end70
  br label %cond_destruct_end73

cond_destruct_alt272:                             ; preds = %cond_destruct_end70
  br label %cond_destruct_end73

cond_destruct_end73:                              ; preds = %cond_destruct_alt272, %cond_destruct_alt171
  br i1 %cond.res59, label %cond_destruct_alt174, label %cond_destruct_alt275

cond_destruct_alt174:                             ; preds = %cond_destruct_end73
  br label %cond_destruct_end76

cond_destruct_alt275:                             ; preds = %cond_destruct_end73
  br label %cond_destruct_end76

cond_destruct_end76:                              ; preds = %cond_destruct_alt275, %cond_destruct_alt174
  br i1 %cond.res57, label %cond_destruct_alt177, label %cond_destruct_alt278

cond_destruct_alt177:                             ; preds = %cond_destruct_end76
  br label %cond_destruct_end79

cond_destruct_alt278:                             ; preds = %cond_destruct_end76
  br label %cond_destruct_end79

cond_destruct_end79:                              ; preds = %cond_destruct_alt278, %cond_destruct_alt177
  br i1 %cond.res55, label %cond_destruct_alt180, label %cond_destruct_alt281

cond_destruct_alt180:                             ; preds = %cond_destruct_end79
  br label %cond_destruct_end82

cond_destruct_alt281:                             ; preds = %cond_destruct_end79
  br label %cond_destruct_end82

cond_destruct_end82:                              ; preds = %cond_destruct_alt281, %cond_destruct_alt180
  br i1 %cond.res53, label %cond_destruct_alt183, label %cond_destruct_alt284

cond_destruct_alt183:                             ; preds = %cond_destruct_end82
  br label %cond_destruct_end85

cond_destruct_alt284:                             ; preds = %cond_destruct_end82
  br label %cond_destruct_end85

cond_destruct_end85:                              ; preds = %cond_destruct_alt284, %cond_destruct_alt183
  br i1 %cond.res51, label %cond_destruct_alt186, label %cond_destruct_alt287

cond_destruct_alt186:                             ; preds = %cond_destruct_end85
  br label %cond_destruct_end88

cond_destruct_alt287:                             ; preds = %cond_destruct_end85
  br label %cond_destruct_end88

cond_destruct_end88:                              ; preds = %cond_destruct_alt287, %cond_destruct_alt186
  br i1 %cond.res49, label %cond_destruct_alt189, label %cond_destruct_alt290

cond_destruct_alt189:                             ; preds = %cond_destruct_end88
  br label %cond_destruct_end91

cond_destruct_alt290:                             ; preds = %cond_destruct_end88
  br label %cond_destruct_end91

cond_destruct_end91:                              ; preds = %cond_destruct_alt290, %cond_destruct_alt189
  br i1 %cond.res47, label %cond_destruct_alt192, label %cond_destruct_alt293

cond_destruct_alt192:                             ; preds = %cond_destruct_end91
  br label %cond_destruct_end94

cond_destruct_alt293:                             ; preds = %cond_destruct_end91
  br label %cond_destruct_end94

cond_destruct_end94:                              ; preds = %cond_destruct_alt293, %cond_destruct_alt192
  br i1 %cond.res45, label %cond_destruct_alt195, label %cond_destruct_alt296

cond_destruct_alt195:                             ; preds = %cond_destruct_end94
  br label %cond_destruct_end97

cond_destruct_alt296:                             ; preds = %cond_destruct_end94
  br label %cond_destruct_end97

cond_destruct_end97:                              ; preds = %cond_destruct_alt296, %cond_destruct_alt195
  br i1 %cond.res43, label %cond_destruct_alt198, label %cond_destruct_alt299

cond_destruct_alt198:                             ; preds = %cond_destruct_end97
  br label %cond_destruct_end100

cond_destruct_alt299:                             ; preds = %cond_destruct_end97
  br label %cond_destruct_end100

cond_destruct_end100:                             ; preds = %cond_destruct_alt299, %cond_destruct_alt198
  br i1 %cond.res, label %cond_destruct_alt1101, label %cond_destruct_alt2102

cond_destruct_alt1101:                            ; preds = %cond_destruct_end100
  br label %cond_destruct_end103

cond_destruct_alt2102:                            ; preds = %cond_destruct_end100
  br label %cond_destruct_end103

cond_destruct_end103:                             ; preds = %cond_destruct_alt2102, %cond_destruct_alt1101
  br i1 %5, label %cond_destruct_alt1104, label %cond_destruct_alt2105

cond_destruct_alt1104:                            ; preds = %cond_destruct_end103
  br label %cond_destruct_end106

cond_destruct_alt2105:                            ; preds = %cond_destruct_end103
  br label %cond_destruct_end106

cond_destruct_end106:                             ; preds = %cond_destruct_alt2105, %cond_destruct_alt1104
  ret i1 %cond.res67

cond_destruct_alt1107:                            ; preds = %dumy_block110
  br label %cond_destruct_end109

cond_destruct_alt2108:                            ; preds = %dumy_block110
  br label %cond_destruct_end109

cond_destruct_end109:                             ; preds = %cond_destruct_alt2108, %cond_destruct_alt1107
  br i1 %cond.res63, label %cond_destruct_alt1111, label %cond_destruct_alt2112

dumy_block110:                                    ; No predecessors!
  br i1 %cond.res65, label %cond_destruct_alt1107, label %cond_destruct_alt2108

cond_destruct_alt1111:                            ; preds = %cond_destruct_end109
  br label %cond_destruct_end113

cond_destruct_alt2112:                            ; preds = %cond_destruct_end109
  br label %cond_destruct_end113

cond_destruct_end113:                             ; preds = %cond_destruct_alt2112, %cond_destruct_alt1111
  br i1 %cond.res61, label %cond_destruct_alt1114, label %cond_destruct_alt2115

cond_destruct_alt1114:                            ; preds = %cond_destruct_end113
  br label %cond_destruct_end116

cond_destruct_alt2115:                            ; preds = %cond_destruct_end113
  br label %cond_destruct_end116

cond_destruct_end116:                             ; preds = %cond_destruct_alt2115, %cond_destruct_alt1114
  br i1 %cond.res59, label %cond_destruct_alt1117, label %cond_destruct_alt2118

cond_destruct_alt1117:                            ; preds = %cond_destruct_end116
  br label %cond_destruct_end119

cond_destruct_alt2118:                            ; preds = %cond_destruct_end116
  br label %cond_destruct_end119

cond_destruct_end119:                             ; preds = %cond_destruct_alt2118, %cond_destruct_alt1117
  br i1 %cond.res57, label %cond_destruct_alt1120, label %cond_destruct_alt2121

cond_destruct_alt1120:                            ; preds = %cond_destruct_end119
  br label %cond_destruct_end122

cond_destruct_alt2121:                            ; preds = %cond_destruct_end119
  br label %cond_destruct_end122

cond_destruct_end122:                             ; preds = %cond_destruct_alt2121, %cond_destruct_alt1120
  br i1 %cond.res55, label %cond_destruct_alt1123, label %cond_destruct_alt2124

cond_destruct_alt1123:                            ; preds = %cond_destruct_end122
  br label %cond_destruct_end125

cond_destruct_alt2124:                            ; preds = %cond_destruct_end122
  br label %cond_destruct_end125

cond_destruct_end125:                             ; preds = %cond_destruct_alt2124, %cond_destruct_alt1123
  br i1 %cond.res53, label %cond_destruct_alt1126, label %cond_destruct_alt2127

cond_destruct_alt1126:                            ; preds = %cond_destruct_end125
  br label %cond_destruct_end128

cond_destruct_alt2127:                            ; preds = %cond_destruct_end125
  br label %cond_destruct_end128

cond_destruct_end128:                             ; preds = %cond_destruct_alt2127, %cond_destruct_alt1126
  br i1 %cond.res51, label %cond_destruct_alt1129, label %cond_destruct_alt2130

cond_destruct_alt1129:                            ; preds = %cond_destruct_end128
  br label %cond_destruct_end131

cond_destruct_alt2130:                            ; preds = %cond_destruct_end128
  br label %cond_destruct_end131

cond_destruct_end131:                             ; preds = %cond_destruct_alt2130, %cond_destruct_alt1129
  br i1 %cond.res49, label %cond_destruct_alt1132, label %cond_destruct_alt2133

cond_destruct_alt1132:                            ; preds = %cond_destruct_end131
  br label %cond_destruct_end134

cond_destruct_alt2133:                            ; preds = %cond_destruct_end131
  br label %cond_destruct_end134

cond_destruct_end134:                             ; preds = %cond_destruct_alt2133, %cond_destruct_alt1132
  br i1 %cond.res47, label %cond_destruct_alt1135, label %cond_destruct_alt2136

cond_destruct_alt1135:                            ; preds = %cond_destruct_end134
  br label %cond_destruct_end137

cond_destruct_alt2136:                            ; preds = %cond_destruct_end134
  br label %cond_destruct_end137

cond_destruct_end137:                             ; preds = %cond_destruct_alt2136, %cond_destruct_alt1135
  br i1 %cond.res45, label %cond_destruct_alt1138, label %cond_destruct_alt2139

cond_destruct_alt1138:                            ; preds = %cond_destruct_end137
  br label %cond_destruct_end140

cond_destruct_alt2139:                            ; preds = %cond_destruct_end137
  br label %cond_destruct_end140

cond_destruct_end140:                             ; preds = %cond_destruct_alt2139, %cond_destruct_alt1138
  br i1 %cond.res43, label %cond_destruct_alt1141, label %cond_destruct_alt2142

cond_destruct_alt1141:                            ; preds = %cond_destruct_end140
  br label %cond_destruct_end143

cond_destruct_alt2142:                            ; preds = %cond_destruct_end140
  br label %cond_destruct_end143

cond_destruct_end143:                             ; preds = %cond_destruct_alt2142, %cond_destruct_alt1141
  br i1 %cond.res, label %cond_destruct_alt1144, label %cond_destruct_alt2145

cond_destruct_alt1144:                            ; preds = %cond_destruct_end143
  br label %cond_destruct_end146

cond_destruct_alt2145:                            ; preds = %cond_destruct_end143
  br label %cond_destruct_end146

cond_destruct_end146:                             ; preds = %cond_destruct_alt2145, %cond_destruct_alt1144
  br i1 %5, label %cond_destruct_alt1147, label %cond_destruct_alt2148

cond_destruct_alt1147:                            ; preds = %cond_destruct_end146
  br label %cond_destruct_end149

cond_destruct_alt2148:                            ; preds = %cond_destruct_end146
  br label %cond_destruct_end149

cond_destruct_end149:                             ; preds = %cond_destruct_alt2148, %cond_destruct_alt1147
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkFunAppExpr(%AstBuilder* %obj, %Location %loc, %Node %base, %Node %args) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %args.addr = alloca %Node
  store %Node %args, %Node* %args.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 22
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %base.addr
  %5 = load %Node, %Node* %args.addr
  %6 = call %Node @"().586"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %Node %5)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().586"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %Node %p4) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %Node, %Node* %p3.addr
  %3 = load %Node, %Node* %p4.addr
  %4 = bitcast %"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %this to %Node (%UntypedPtr, %Location*, %Node, %Node)**
  %5 = load %Node (%UntypedPtr, %Location*, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %Node, %Node)** %4
  %6 = call %Node %5(%UntypedPtr %1, %Location* %p2, %Node %2, %Node %3)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkDotExpr(%AstBuilder* %obj, %Location %loc, %Node %base, %StringRef %id) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 21
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %base.addr
  %5 = load %StringRef, %StringRef* %id.addr
  %6 = call %Node @"().530"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %StringRef %5)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal void @parseIdOrOper(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %tmp.this = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %tmp.this10 = alloca %TokenType
  %tmp.StringRef = alloca %StringRef
  %"$tmpC" = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef15 = alloca %StringRef
  %"$tmpC16" = alloca %Token
  %"$tmpForRef17" = alloca %StringRef
  %tmp.StringRef18 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 37)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 2
  call void @ctor.165(%String* %_result, %String* %3)
  ret void

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %if_end4, %dumy_block
  %4 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef15, i32 0, i32 0
  %5 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef15, i32 0, i32 1
  %6 = bitcast %UntypedPtr* %4 to i8**
  %7 = bitcast %UntypedPtr* %5 to i8**
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.102, i32 0, i32 0), i8** %6
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.102, i32 0, i32 25), i8** %7
  %8 = load %StringRef, %StringRef* %tmp.StringRef15
  store %StringRef %8, %StringRef* %"$tmpForRef"
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC16", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  %10 = getelementptr inbounds %Token, %Token* %"$tmpC16", i32 0, i32 1
  %11 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef18, i32 0, i32 0
  %12 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef18, i32 0, i32 1
  %13 = bitcast %UntypedPtr* %11 to i8**
  %14 = bitcast %UntypedPtr* %12 to i8**
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str.103, i32 0, i32 0), i8** %13
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str.103, i32 0, i32 34), i8** %14
  %15 = load %StringRef, %StringRef* %tmp.StringRef18
  store %StringRef %15, %StringRef* %"$tmpForRef17"
  call void @toString.574(%String* %"$tmpC", %StringRef* %"$tmpForRef", %TokenType* %10, %StringRef* %"$tmpForRef17")
  call void @reportError.523(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC16")
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_else
  call void @ctor.393(%TokenType* %tmp.this5, i32 38)
  %16 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  br i1 %16, label %if_then2, label %if_else3

if_then2:                                         ; preds = %if_block1
  %17 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %18 = getelementptr inbounds %Token, %Token* %17, i32 0, i32 2
  call void @ctor.165(%String* %_result, %String* %18)
  ret void

if_else3:                                         ; preds = %if_block1
  br label %if_block7

if_end4:                                          ; preds = %cond_destruct_end14, %dumy_block6
  br label %if_end

dumy_block6:                                      ; No predecessors!
  br label %if_end4

if_block7:                                        ; preds = %if_else3
  %19 = load i1, i1* %withEqual.addr
  br i1 %19, label %cond.true, label %cond.false

if_then8:                                         ; preds = %cond.end
  %20 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %21 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %22 = bitcast %UntypedPtr* %20 to i8**
  %23 = bitcast %UntypedPtr* %21 to i8**
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.101, i32 0, i32 0), i8** %22
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.101, i32 0, i32 1), i8** %23
  %24 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.448(%String* %_result, %StringRef %24)
  br i1 %19, label %cond_destruct_alt1, label %cond_destruct_alt2

if_end9:                                          ; preds = %dumy_block11, %cond.end
  br i1 %19, label %cond_destruct_alt112, label %cond_destruct_alt213

cond.true:                                        ; preds = %if_block7
  call void @ctor.393(%TokenType* %tmp.this10, i32 36)
  %25 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this10)
  br label %cond.end

cond.false:                                       ; preds = %if_block7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %25, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then8, label %if_end9

cond_destruct_alt1:                               ; preds = %if_then8
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_then8
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void

dumy_block11:                                     ; No predecessors!
  br label %if_end9

cond_destruct_alt112:                             ; preds = %if_end9
  br label %cond_destruct_end14

cond_destruct_alt213:                             ; preds = %if_end9
  br label %cond_destruct_end14

cond_destruct_end14:                              ; preds = %cond_destruct_alt213, %cond_destruct_alt112
  br label %if_end4
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkPrefixOp(%AstBuilder* %obj, %Location %loc, %StringRef %op, %Node %base) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %op.addr = alloca %StringRef
  store %StringRef %op, %StringRef* %op.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 17
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %op.addr
  %5 = load %Node, %Node* %base.addr
  %6 = call %Node @"().587"(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().587"(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %StringRef, %StringRef* %p3.addr
  %3 = load %Node, %Node* %p4.addr
  %4 = bitcast %"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %this to %Node (%UntypedPtr, %Location*, %StringRef, %Node)**
  %5 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node)** %4
  %6 = call %Node %5(%UntypedPtr %1, %Location* %p2, %StringRef %2, %Node %3)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal void @parseIdOrOperOpt(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %tmp.this = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %tmp.this11 = alloca %TokenType
  %tmp.StringRef = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 37)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 2
  call void @ctor.165(%String* %_result, %String* %3)
  ret void

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %if_end4, %dumy_block
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_else
  call void @ctor.393(%TokenType* %tmp.this5, i32 38)
  %4 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  br i1 %4, label %if_then2, label %if_else3

if_then2:                                         ; preds = %if_block1
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 2
  call void @ctor.165(%String* %_result, %String* %6)
  ret void

if_else3:                                         ; preds = %if_block1
  br label %if_block7

if_end4:                                          ; preds = %cond_destruct_end19, %dumy_block6
  br label %if_end

dumy_block6:                                      ; No predecessors!
  br label %if_end4

if_block7:                                        ; preds = %if_else3
  %7 = load i1, i1* %withEqual.addr
  br i1 %7, label %cond.true, label %cond.false

if_then8:                                         ; preds = %cond.end
  %8 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %9 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %10 = bitcast %UntypedPtr* %8 to i8**
  %11 = bitcast %UntypedPtr* %9 to i8**
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.104, i32 0, i32 0), i8** %10
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.104, i32 0, i32 1), i8** %11
  %12 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.448(%String* %_result, %StringRef %12)
  br i1 %7, label %cond_destruct_alt1, label %cond_destruct_alt2

if_else9:                                         ; preds = %cond.end
  call void @ctor.114(%String* %_result)
  br i1 %7, label %cond_destruct_alt113, label %cond_destruct_alt214

if_end10:                                         ; preds = %dumy_block16, %dumy_block12
  br i1 %7, label %cond_destruct_alt117, label %cond_destruct_alt218

cond.true:                                        ; preds = %if_block7
  call void @ctor.393(%TokenType* %tmp.this11, i32 36)
  %13 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this11)
  br label %cond.end

cond.false:                                       ; preds = %if_block7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %13, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then8, label %if_else9

cond_destruct_alt1:                               ; preds = %if_then8
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_then8
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void

dumy_block12:                                     ; No predecessors!
  br label %if_end10

cond_destruct_alt113:                             ; preds = %if_else9
  br label %cond_destruct_end15

cond_destruct_alt214:                             ; preds = %if_else9
  br label %cond_destruct_end15

cond_destruct_end15:                              ; preds = %cond_destruct_alt214, %cond_destruct_alt113
  ret void

dumy_block16:                                     ; No predecessors!
  br label %if_end10

cond_destruct_alt117:                             ; preds = %if_end10
  br label %cond_destruct_end19

cond_destruct_alt218:                             ; preds = %if_end10
  br label %cond_destruct_end19

cond_destruct_end19:                              ; preds = %cond_destruct_alt218, %cond_destruct_alt117
  br label %if_end4
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkInfixOp(%AstBuilder* %obj, %Location %loc, %Node %lhs, %StringRef %op, %Node %rhs) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %lhs.addr = alloca %Node
  store %Node %lhs, %Node* %lhs.addr
  %op.addr = alloca %StringRef
  store %StringRef %op, %StringRef* %op.addr
  %rhs.addr = alloca %Node
  store %Node %rhs, %Node* %rhs.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 16
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %lhs.addr
  %5 = load %StringRef, %StringRef* %op.addr
  %6 = load %Node, %Node* %rhs.addr
  %7 = call %Node @"().588"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %StringRef %5, %Node %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().588"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %StringRef %p4, %Node %p5) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %StringRef
  store %StringRef %p4, %StringRef* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %Node, %Node* %p3.addr
  %3 = load %StringRef, %StringRef* %p4.addr
  %4 = load %Node, %Node* %p5.addr
  %5 = bitcast %"FunctionPtr5[Node, UntypedPtr, Location const, Node, StringRef, Node]"* %this to %Node (%UntypedPtr, %Location*, %Node, %StringRef, %Node)**
  %6 = load %Node (%UntypedPtr, %Location*, %Node, %StringRef, %Node)*, %Node (%UntypedPtr, %Location*, %Node, %StringRef, %Node)** %5
  %7 = call %Node %6(%UntypedPtr %1, %Location* %p2, %Node %2, %StringRef %3, %Node %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkPostfixOp(%AstBuilder* %obj, %Location %loc, %Node %base, %StringRef %op) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %op.addr = alloca %StringRef
  store %StringRef %op, %StringRef* %op.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 15
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %base.addr
  %5 = load %StringRef, %StringRef* %op.addr
  %6 = call %Node @"().530"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, StringRef]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %StringRef %5)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseImportLineOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %tmp.this = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this1 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 3)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = call %Node @parseImportNames(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %2, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  call void @ctor.393(%TokenType* %tmp.this1, i32 32)
  %3 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseImportNames(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpForRef1" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %2 = load %Node, %Node* %res
  %3 = call %Node @parseImportName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %4 = call %Node @addToNodeList(%AstBuilder* %1, %Node %2, %Node %3)
  store %Node %4, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  call void @ctor.393(%TokenType* %tmp.this, i32 33)
  %5 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %5, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %7 = load %Node, %Node* %res
  %8 = call %Node @parseImportName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %9 = call %Node @addToNodeList(%AstBuilder* %6, %Node %7, %Node %8)
  store %Node %9, %Node* %"$tmpForRef1"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef1")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %10 = load %Node, %Node* %res
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseImportName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %id = alloca %String
  %toImport = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %declNames = alloca %Node
  %"$tmpForRef2" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  call void @parseIdEqualOpt(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %2 = call %Node @parseQidOrString(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %2, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %toImport, %Node* %"$tmpForRef1")
  %3 = call %Node @parseImportDeclNamesOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %3, %Node* %"$tmpForRef2"
  call void @ctor.520(%Node* %declNames, %Node* %"$tmpForRef2")
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %5 = load %Location, %Location* %loc
  %6 = call %Location @lastLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %7 = call %Location @span(%Location %5, %Location %6)
  %8 = call %StringRef @asStringRef(%String* %id)
  %9 = load %Node, %Node* %toImport
  %10 = load %Node, %Node* %declNames
  %11 = call %Node @mkImportName(%AstBuilder* %4, %Location %7, %StringRef %8, %Node %9, %Node %10)
  call void @dtor.239(%String* %id)
  ret %Node %11

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @parseIdEqualOpt(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %id = alloca %String
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %tmp.this2 = alloca %TokenType
  %tmp.this3 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  call void @ctor.114(%String* %id)
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 37)
  %1 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  call void @ctor.393(%TokenType* %tmp.this2, i32 37)
  %2 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this2)
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 2
  %5 = call %String* @"=.267"(%String* %id, %String* %4)
  call void @ctor.393(%TokenType* %tmp.this3, i32 36)
  %6 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this3)
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  br i1 %1, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true:                                        ; preds = %if_block
  call void @ctor.393(%TokenType* %tmp.this1, i32 36)
  %7 = call i1 @next2Is(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %7, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end

cond_destruct_alt1:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  call void @ctor.165(%String* %_result, %String* %id)
  call void @dtor.239(%String* %id)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %id)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseQidOrString(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %tmp.this = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 40)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  %5 = load %Location, %Location* %4
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 2
  %8 = call %StringRef @asStringRef(%String* %7)
  %9 = call %Node @mkStringLiteral(%AstBuilder* %2, %Location %5, %StringRef %8)
  ret %Node %9

if_end:                                           ; preds = %dumy_block, %if_block
  %10 = call %Node @parseQualifiedName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 false)
  ret %Node %10

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseImportDeclNamesOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this1 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 29)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = call %Node @parseIdOrOperListNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %2, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  call void @ctor.393(%TokenType* %tmp.this1, i32 30)
  %3 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %4 = load %Node, %Node* %res
  ret %Node %4
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseIdOrOperListNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %Node
  %id = alloca %String
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %String
  %"$tmpForRef1" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.531(%Node* %res)
  call void @parseIdOrOper(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  %1 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %2 = load %Node, %Node* %res
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %5 = getelementptr inbounds %Token, %Token* %4, i32 0, i32 0
  %6 = load %Location, %Location* %5
  %7 = call %StringRef @asStringRef(%String* %id)
  %8 = call %Node @mkIdentifier(%AstBuilder* %3, %Location %6, %StringRef %7)
  %9 = call %Node @addToNodeList(%AstBuilder* %1, %Node %2, %Node %8)
  store %Node %9, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  call void @ctor.393(%TokenType* %tmp.this, i32 33)
  %10 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %10, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  call void @parseIdOrOper(%String* %"$tmpC", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  %11 = call %String* @"=.267"(%String* %id, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %13 = load %Node, %Node* %res
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %15 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %16 = getelementptr inbounds %Token, %Token* %15, i32 0, i32 0
  %17 = load %Location, %Location* %16
  %18 = call %StringRef @asStringRef(%String* %id)
  %19 = call %Node @mkIdentifier(%AstBuilder* %14, %Location %17, %StringRef %18)
  %20 = call %Node @addToNodeList(%AstBuilder* %12, %Node %13, %Node %19)
  store %Node %20, %Node* %"$tmpForRef1"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef1")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %21 = load %Node, %Node* %res
  call void @dtor.239(%String* %id)
  ret %Node %21

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkImportName(%AstBuilder* %obj, %Location %loc, %StringRef %alias, %Node %toImport, %Node %decls) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %alias.addr = alloca %StringRef
  store %StringRef %alias, %StringRef* %alias.addr
  %toImport.addr = alloca %Node
  store %Node %toImport, %Node* %toImport.addr
  %decls.addr = alloca %Node
  store %Node %decls, %Node* %decls.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 4
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %alias.addr
  %5 = load %Node, %Node* %toImport.addr
  %6 = load %Node, %Node* %decls.addr
  %7 = call %Node @"().570"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5, %Node %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseUsingDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %usingNode = alloca %Node
  %"$tmpForRef" = alloca %Node
  %"$tmpForRef4" = alloca %Node
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef6" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 9)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %2 = xor i1 true, %1
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  call void @ctor.159(%Location* %loc, %Location* %4)
  call void @parseIdEqualOpt(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  call void @ctor.531(%Node* %usingNode)
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %5 = call i1 @isEmpty.373(%String* %id)
  br i1 %5, label %if_then2, label %if_else

if_then2:                                         ; preds = %if_block1
  %6 = call %Node @parseQualifiedName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %6, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %usingNode, %Node* %"$tmpForRef")
  br label %if_end3

if_else:                                          ; preds = %if_block1
  %7 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %7, %Node* %"$tmpForRef4"
  call void @"=.529"(%Node* %usingNode, %Node* %"$tmpForRef4")
  br label %if_end3

if_end3:                                          ; preds = %if_else, %if_then2
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %9 = getelementptr inbounds %Token, %Token* %8, i32 0, i32 0
  %10 = load %Location, %Location* %9
  call void @copyEnd(%Location* %loc, %Location %10)
  call void @ctor.393(%TokenType* %tmp.this5, i32 32)
  %11 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %13 = load %Location, %Location* %loc
  %14 = call %StringRef @asStringRef(%String* %id)
  %15 = load %Node, %Node* %usingNode
  %16 = call %Node @mkUsing(%AstBuilder* %12, %Location %13, %StringRef %14, %Node %15)
  store %Node %16, %Node* %"$tmpForRef6"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef6")
  call void @dtor.239(%String* %id)
  ret i1 true

dumy_block7:                                      ; No predecessors!
  call void @dtor.239(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkUsing(%AstBuilder* %obj, %Location %loc, %StringRef %alias, %Node %usingNode) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %alias.addr = alloca %StringRef
  store %StringRef %alias, %StringRef* %alias.addr
  %usingNode.addr = alloca %Node
  store %Node %usingNode, %Node* %usingNode.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 5
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %alias.addr
  %5 = load %Node, %Node* %usingNode.addr
  %6 = call %Node @"().587"(%"FunctionPtr4[Node, UntypedPtr, Location const, StringRef, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal i1 @parsePackageDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %formals = alloca %Node
  %"$tmpForRef" = alloca %Node
  %ifClause = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %tmp.this2 = alloca %TokenType
  %children = alloca %Node
  %tmp.this3 = alloca %TokenType
  %"$tmpForRef4" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 8)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %2 = xor i1 true, %1
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  call void @ctor.159(%Location* %loc, %Location* %4)
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %5 = call %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %5, %Node* %"$tmpForRef"
  call void @ctor.520(%Node* %formals, %Node* %"$tmpForRef")
  %6 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %6, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %ifClause, %Node* %"$tmpForRef1")
  call void @ctor.393(%TokenType* %tmp.this2, i32 25)
  %7 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this2)
  call void @ctor.531(%Node* %children)
  call void @parseStmts(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true, %Node* %children)
  call void @ctor.393(%TokenType* %tmp.this3, i32 26)
  %8 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this3)
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 0
  %11 = load %Location, %Location* %10
  call void @copyEnd(%Location* %loc, %Location %11)
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %13 = load %Location, %Location* %loc
  %14 = call %StringRef @asStringRef(%String* %id)
  %15 = load %Node, %Node* %children
  %16 = load %Node, %Node* %formals
  %17 = load %Node, %Node* %ifClause
  %18 = call %Node @mkPackage(%AstBuilder* %12, %Location %13, %StringRef %14, %Node %15, %Node %16, %Node %17)
  store %Node %18, %Node* %"$tmpForRef4"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef4")
  call void @dtor.239(%String* %id)
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block5:                                      ; No predecessors!
  call void @dtor.239(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 16)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  ret %Node %2

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.531(%Node* %tmp.this1)
  %3 = load %Node, %Node* %tmp.this1
  ret %Node %3

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkPackage(%AstBuilder* %obj, %Location %loc, %StringRef %name, %Node %children, %Node %params, %Node %ifClause) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %children.addr = alloca %Node
  store %Node %children, %Node* %children.addr
  %params.addr = alloca %Node
  store %Node %params, %Node* %params.addr
  %ifClause.addr = alloca %Node
  store %Node %ifClause, %Node* %ifClause.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 6
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %name.addr
  %5 = load %Node, %Node* %children.addr
  %6 = load %Node, %Node* %params.addr
  %7 = load %Node, %Node* %ifClause.addr
  %8 = call %Node @"().589"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5, %Node %6, %Node %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().589"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4, %Node %p5, %Node %p6) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %StringRef, %StringRef* %p3.addr
  %3 = load %Node, %Node* %p4.addr
  %4 = load %Node, %Node* %p5.addr
  %5 = load %Node, %Node* %p6.addr
  %6 = bitcast %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %this to %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node)**
  %7 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node)** %6
  %8 = call %Node %7(%UntypedPtr %1, %Location* %p2, %StringRef %2, %Node %3, %Node %4, %Node %5)
  ret %Node %8
}

; Function Attrs: noinline nounwind
define i1 @parseDatatypeDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #5 {
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %formals = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this4 = alloca %TokenType
  %underlyingData = alloca %Node
  %"$tmpForRef5" = alloca %Node
  %ifClause = alloca %Node
  %"$tmpForRef6" = alloca %Node
  %tmp.this7 = alloca %TokenType
  %"$tmpForRef8" = alloca %Node
  %tmp.this9 = alloca %Node
  %ifClause10 = alloca %Node
  %"$tmpForRef11" = alloca %Node
  %children = alloca %Node
  %tmp.this16 = alloca %TokenType
  %tmp.this17 = alloca %TokenType
  %tmp.this18 = alloca %TokenType
  %tmp.this26 = alloca %TokenType
  %tmp.this27 = alloca %TokenType
  %tmp.this32 = alloca %TokenType
  %usingNode = alloca %Node
  %"$tmpForRef38" = alloca %Node
  %tmp.this46 = alloca %TokenType
  %tmp.this47 = alloca %TokenType
  %tmp.this52 = alloca %TokenType
  %"$tmpForRef53" = alloca %Node
  %tmp.this54 = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 5)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %2 = xor i1 true, %1
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  call void @ctor.159(%Location* %loc, %Location* %4)
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %5 = call %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %5, %Node* %"$tmpForRef"
  call void @ctor.520(%Node* %formals, %Node* %"$tmpForRef")
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  call void @ctor.393(%TokenType* %tmp.this4, i32 36)
  %6 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this4)
  br i1 %6, label %if_then2, label %if_else

if_then2:                                         ; preds = %if_block1
  %7 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %7, %Node* %"$tmpForRef5"
  call void @ctor.520(%Node* %underlyingData, %Node* %"$tmpForRef5")
  %8 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %8, %Node* %"$tmpForRef6"
  call void @ctor.520(%Node* %ifClause, %Node* %"$tmpForRef6")
  call void @ctor.393(%TokenType* %tmp.this7, i32 32)
  %9 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this7)
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %11 = getelementptr inbounds %Token, %Token* %10, i32 0, i32 0
  %12 = load %Location, %Location* %11
  call void @copyEnd(%Location* %loc, %Location %12)
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %14 = load %Location, %Location* %loc
  %15 = call %StringRef @asStringRef(%String* %id)
  %16 = load %Node, %Node* %formals
  %17 = load %Node, %Node* %underlyingData
  %18 = load %Node, %Node* %ifClause
  call void @ctor.531(%Node* %tmp.this9)
  %19 = load %Node, %Node* %tmp.this9
  %20 = call %Node @mkDatatype(%AstBuilder* %13, %Location %14, %StringRef %15, %Node %16, %Node %17, %Node %18, %Node %19)
  store %Node %20, %Node* %"$tmpForRef8"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef8")
  br label %if_end3

if_else:                                          ; preds = %if_block1
  %21 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %21, %Node* %"$tmpForRef11"
  call void @ctor.520(%Node* %ifClause10, %Node* %"$tmpForRef11")
  call void @ctor.531(%Node* %children)
  br label %if_block12

if_end3:                                          ; preds = %if_end15, %if_then2
  call void @dtor.239(%String* %id)
  ret i1 true

if_block12:                                       ; preds = %if_else
  call void @ctor.393(%TokenType* %tmp.this16, i32 32)
  %22 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this16)
  br i1 %22, label %if_then13, label %if_else14

if_then13:                                        ; preds = %if_block12
  br label %if_end15

if_else14:                                        ; preds = %if_block12
  call void @ctor.393(%TokenType* %tmp.this17, i32 25)
  %23 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this17)
  br label %while_block

if_end15:                                         ; preds = %while_end, %if_then13
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %25 = getelementptr inbounds %Token, %Token* %24, i32 0, i32 0
  %26 = load %Location, %Location* %25
  call void @copyEnd(%Location* %loc, %Location %26)
  %27 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %28 = load %Location, %Location* %loc
  %29 = call %StringRef @asStringRef(%String* %id)
  %30 = load %Node, %Node* %formals
  call void @ctor.531(%Node* %tmp.this54)
  %31 = load %Node, %Node* %tmp.this54
  %32 = load %Node, %Node* %ifClause10
  %33 = load %Node, %Node* %children
  %34 = call %Node @mkDatatype(%AstBuilder* %27, %Location %28, %StringRef %29, %Node %30, %Node %31, %Node %32, %Node %33)
  store %Node %34, %Node* %"$tmpForRef53"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef53")
  br label %if_end3

while_block:                                      ; preds = %while_step, %if_else14
  call void @ctor.393(%TokenType* %tmp.this18, i32 26)
  %35 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this18)
  %36 = xor i1 true, %35
  br i1 %36, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  br label %while_block19

while_step:                                       ; preds = %cond_destruct_end51
  br label %while_block

while_end:                                        ; preds = %if_then30, %cond.end
  call void @ctor.393(%TokenType* %tmp.this52, i32 26)
  %37 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this52)
  br label %if_end15

cond.true:                                        ; preds = %while_block
  %38 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 2
  %39 = load i1, i1* %38
  %40 = xor i1 true, %39
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %40, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

while_block19:                                    ; preds = %while_step21, %while_body
  call void @ctor.393(%TokenType* %tmp.this26, i32 33)
  %41 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this26)
  br i1 %41, label %cond.true23, label %cond.false24

while_body20:                                     ; preds = %cond.end25
  br label %while_step21

while_step21:                                     ; preds = %while_body20
  br label %while_block19

while_end22:                                      ; preds = %cond.end25
  br i1 %41, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true23:                                      ; preds = %while_block19
  br label %cond.end25

cond.false24:                                     ; preds = %while_block19
  call void @ctor.393(%TokenType* %tmp.this27, i32 32)
  %42 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this27)
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond.res28 = phi i1 [ true, %cond.true23 ], [ %42, %cond.false24 ]
  br i1 %cond.res28, label %while_body20, label %while_end22

cond_destruct_alt1:                               ; preds = %while_end22
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %while_end22
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  br label %if_block29

if_block29:                                       ; preds = %cond_destruct_end
  call void @ctor.393(%TokenType* %tmp.this32, i32 26)
  %43 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this32)
  br i1 %43, label %if_then30, label %if_end31

if_then30:                                        ; preds = %if_block29
  br label %while_end

if_end31:                                         ; preds = %dumy_block33, %if_block29
  call void @ctor.531(%Node* %usingNode)
  br label %if_block34

dumy_block33:                                     ; No predecessors!
  br label %if_end31

if_block34:                                       ; preds = %if_end31
  %44 = call i1 @parseUsingDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %usingNode)
  br i1 %44, label %if_then35, label %if_else36

if_then35:                                        ; preds = %if_block34
  %45 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %46 = load %Node, %Node* %children
  %47 = load %Node, %Node* %usingNode
  %48 = call %Node @addToNodeList(%AstBuilder* %45, %Node %46, %Node %47)
  store %Node %48, %Node* %"$tmpForRef38"
  call void @"=.529"(%Node* %children, %Node* %"$tmpForRef38")
  br label %if_end37

if_else36:                                        ; preds = %if_block34
  call void @parseFieldsLine(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %children)
  br label %if_end37

if_end37:                                         ; preds = %if_else36, %if_then35
  br label %while_block39

while_block39:                                    ; preds = %while_step41, %if_end37
  call void @ctor.393(%TokenType* %tmp.this46, i32 33)
  %49 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this46)
  br i1 %49, label %cond.true43, label %cond.false44

while_body40:                                     ; preds = %cond.end45
  br label %while_step41

while_step41:                                     ; preds = %while_body40
  br label %while_block39

while_end42:                                      ; preds = %cond.end45
  br i1 %49, label %cond_destruct_alt149, label %cond_destruct_alt250

cond.true43:                                      ; preds = %while_block39
  br label %cond.end45

cond.false44:                                     ; preds = %while_block39
  call void @ctor.393(%TokenType* %tmp.this47, i32 32)
  %50 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this47)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond.res48 = phi i1 [ true, %cond.true43 ], [ %50, %cond.false44 ]
  br i1 %cond.res48, label %while_body40, label %while_end42

cond_destruct_alt149:                             ; preds = %while_end42
  br label %cond_destruct_end51

cond_destruct_alt250:                             ; preds = %while_end42
  br label %cond_destruct_end51

cond_destruct_end51:                              ; preds = %cond_destruct_alt250, %cond_destruct_alt149
  br label %while_step

dumy_block55:                                     ; No predecessors!
  call void @dtor.239(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkDatatype(%AstBuilder* %obj, %Location %loc, %StringRef %name, %Node %params, %Node %underlyingData, %Node %ifClause, %Node %children) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %params.addr = alloca %Node
  store %Node %params, %Node* %params.addr
  %underlyingData.addr = alloca %Node
  store %Node %underlyingData, %Node* %underlyingData.addr
  %ifClause.addr = alloca %Node
  store %Node %ifClause, %Node* %ifClause.addr
  %children.addr = alloca %Node
  store %Node %children, %Node* %children.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 7
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %name.addr
  %5 = load %Node, %Node* %params.addr
  %6 = load %Node, %Node* %underlyingData.addr
  %7 = load %Node, %Node* %ifClause.addr
  %8 = load %Node, %Node* %children.addr
  %9 = call %Node @"().590"(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5, %Node %6, %Node %7, %Node %8)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().590"(%"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4, %Node %p5, %Node %p6, %Node %p7) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  %p7.addr = alloca %Node
  store %Node %p7, %Node* %p7.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %StringRef, %StringRef* %p3.addr
  %3 = load %Node, %Node* %p4.addr
  %4 = load %Node, %Node* %p5.addr
  %5 = load %Node, %Node* %p6.addr
  %6 = load %Node, %Node* %p7.addr
  %7 = bitcast %"FunctionPtr7[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node]"* %this to %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node)**
  %8 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node)** %7
  %9 = call %Node %8(%UntypedPtr %1, %Location* %p2, %StringRef %2, %Node %3, %Node %4, %Node %5, %Node %6)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal void @parseFieldsLine(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %ids = alloca %"Vector[LocString]"
  %tmp.this = alloca %TokenType
  %typeNode = alloca %Node
  %"$tmpForRef" = alloca %Node
  %init = alloca %Node
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef2" = alloca %Node
  %"$rangeVar" = alloca %"ContiguousMemoryRange[LocString]"
  %"$tmpForRef3" = alloca %"ContiguousMemoryRange[LocString]"
  %id = alloca %LocString
  %v = alloca %Node
  %"$tmpForRef4" = alloca %Node
  %"$tmpForRef5" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @parseIdList(%"Vector[LocString]"* %ids, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  call void @ctor.393(%TokenType* %tmp.this, i32 31)
  %1 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %2 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 false)
  store %Node %2, %Node* %"$tmpForRef"
  call void @ctor.520(%Node* %typeNode, %Node* %"$tmpForRef")
  call void @ctor.531(%Node* %init)
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this1, i32 36)
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %4, %Node* %"$tmpForRef2"
  call void @"=.529"(%Node* %init, %Node* %"$tmpForRef2")
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %5 = call %"ContiguousMemoryRange[LocString]" @all.566(%"Vector[LocString]"* %ids)
  store %"ContiguousMemoryRange[LocString]" %5, %"ContiguousMemoryRange[LocString]"* %"$tmpForRef3"
  call void @ctor.565(%"ContiguousMemoryRange[LocString]"* %"$rangeVar", %"ContiguousMemoryRange[LocString]"* %"$tmpForRef3")
  br label %while_block

while_block:                                      ; preds = %while_step, %if_end
  %6 = call i1 @isEmpty.568(%"ContiguousMemoryRange[LocString]"* %"$rangeVar")
  %7 = xor i1 true, %6
  br i1 %7, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %8 = call %LocString* @front.569(%"ContiguousMemoryRange[LocString]"* %"$rangeVar")
  call void @ctor.550(%LocString* %id, %LocString* %8)
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %10 = getelementptr inbounds %LocString, %LocString* %id, i32 0, i32 0
  %11 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %10, i32 0, i32 0
  %12 = load %Location, %Location* %11
  %13 = getelementptr inbounds %LocString, %LocString* %id, i32 0, i32 0
  %14 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %13, i32 0, i32 1
  %15 = call %StringRef @asStringRef(%String* %14)
  %16 = load %Node, %Node* %typeNode
  %17 = load %Node, %Node* %init
  %18 = call %Node @mkField(%AstBuilder* %9, %Location %12, %StringRef %15, %Node %16, %Node %17)
  store %Node %18, %Node* %"$tmpForRef4"
  call void @ctor.520(%Node* %v, %Node* %"$tmpForRef4")
  %19 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %20 = load %Node, %Node* %res
  %21 = load %Node, %Node* %v
  %22 = call %Node @addToNodeList(%AstBuilder* %19, %Node %20, %Node %21)
  store %Node %22, %Node* %"$tmpForRef5"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef5")
  call void @dtor.556(%LocString* %id)
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.571(%"ContiguousMemoryRange[LocString]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  call void @dtor.562(%"Vector[LocString]"* %ids)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkField(%AstBuilder* %obj, %Location %loc, %StringRef %name, %Node %typeNode, %Node %init) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 8
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %name.addr
  %5 = load %Node, %Node* %typeNode.addr
  %6 = load %Node, %Node* %init.addr
  %7 = call %Node @"().570"(%"FunctionPtr5[Node, UntypedPtr, Location const, StringRef, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5, %Node %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseConceptDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %tmp.this1 = alloca %TokenType
  %paramName = alloca %String
  %baseConcept = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this2 = alloca %TokenType
  %ifClause = alloca %Node
  %"$tmpForRef3" = alloca %Node
  %tmp.this4 = alloca %TokenType
  %"$tmpForRef5" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 4)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %2 = xor i1 true, %1
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  call void @ctor.159(%Location* %loc, %Location* %4)
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  call void @ctor.393(%TokenType* %tmp.this1, i32 29)
  %5 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  call void @parseId(%String* %paramName, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %6 = call %Node @parseTypeNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %6, %Node* %"$tmpForRef"
  call void @ctor.520(%Node* %baseConcept, %Node* %"$tmpForRef")
  call void @ctor.393(%TokenType* %tmp.this2, i32 30)
  %7 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this2)
  %8 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %8, %Node* %"$tmpForRef3"
  call void @ctor.520(%Node* %ifClause, %Node* %"$tmpForRef3")
  call void @ctor.393(%TokenType* %tmp.this4, i32 32)
  %9 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this4)
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %11 = getelementptr inbounds %Token, %Token* %10, i32 0, i32 0
  %12 = load %Location, %Location* %11
  call void @copyEnd(%Location* %loc, %Location %12)
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %14 = load %Location, %Location* %loc
  %15 = call %StringRef @asStringRef(%String* %id)
  %16 = call %StringRef @asStringRef(%String* %paramName)
  %17 = load %Node, %Node* %baseConcept
  %18 = load %Node, %Node* %ifClause
  %19 = call %Node @mkConcept(%AstBuilder* %13, %Location %14, %StringRef %15, %StringRef %16, %Node %17, %Node %18)
  store %Node %19, %Node* %"$tmpForRef5"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef5")
  call void @dtor.239(%String* %paramName)
  call void @dtor.239(%String* %id)
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block6:                                      ; No predecessors!
  call void @dtor.239(%String* %paramName)
  call void @dtor.239(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkConcept(%AstBuilder* %obj, %Location %loc, %StringRef %name, %StringRef %paramName, %Node %baseConcept, %Node %ifClause) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %paramName.addr = alloca %StringRef
  store %StringRef %paramName, %StringRef* %paramName.addr
  %baseConcept.addr = alloca %Node
  store %Node %baseConcept, %Node* %baseConcept.addr
  %ifClause.addr = alloca %Node
  store %Node %ifClause, %Node* %ifClause.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 9
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %name.addr
  %5 = load %StringRef, %StringRef* %paramName.addr
  %6 = load %Node, %Node* %baseConcept.addr
  %7 = load %Node, %Node* %ifClause.addr
  %8 = call %Node @"().591"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %StringRef %5, %Node %6, %Node %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().591"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %StringRef %p4, %Node %p5, %Node %p6) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %StringRef
  store %StringRef %p4, %StringRef* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %StringRef, %StringRef* %p3.addr
  %3 = load %StringRef, %StringRef* %p4.addr
  %4 = load %Node, %Node* %p5.addr
  %5 = load %Node, %Node* %p6.addr
  %6 = bitcast %"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, StringRef, Node, Node]"* %this to %Node (%UntypedPtr, %Location*, %StringRef, %StringRef, %Node, %Node)**
  %7 = load %Node (%UntypedPtr, %Location*, %StringRef, %StringRef, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %StringRef, %Node, %Node)** %6
  %8 = call %Node %7(%UntypedPtr %1, %Location* %p2, %StringRef %2, %StringRef %3, %Node %4, %Node %5)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseVarLikeDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %kind = alloca i32
  %tmp.this = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %ids = alloca %"Vector[LocString]"
  %typeNode = alloca %Node
  %init = alloca %Node
  %tmp.this10 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this14 = alloca %TokenType
  %"$tmpForRef15" = alloca %Node
  %tmp.this16 = alloca %TokenType
  %"$tmpForRef17" = alloca %Node
  %tmp.this18 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  store i32 0, i32* %kind
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 7)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  store i32 0, i32* %kind
  br label %if_end

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %if_end4, %if_then
  call void @parseIdList(%"Vector[LocString]"* %ids, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  call void @ctor.531(%Node* %typeNode)
  call void @ctor.531(%Node* %init)
  br label %if_block6

if_block1:                                        ; preds = %if_else
  call void @ctor.393(%TokenType* %tmp.this5, i32 10)
  %2 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  br i1 %2, label %if_then2, label %if_else3

if_then2:                                         ; preds = %if_block1
  store i32 1, i32* %kind
  br label %if_end4

if_else3:                                         ; preds = %if_block1
  ret i1 false

if_end4:                                          ; preds = %dumy_block, %if_then2
  br label %if_end

dumy_block:                                       ; No predecessors!
  br label %if_end4

if_block6:                                        ; preds = %if_end
  call void @ctor.393(%TokenType* %tmp.this10, i32 31)
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this10)
  br i1 %3, label %if_then7, label %if_else8

if_then7:                                         ; preds = %if_block6
  %4 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 false)
  store %Node %4, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %typeNode, %Node* %"$tmpForRef")
  br label %if_block11

if_else8:                                         ; preds = %if_block6
  call void @ctor.393(%TokenType* %tmp.this16, i32 36)
  %5 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this16)
  %6 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %6, %Node* %"$tmpForRef17"
  call void @"=.529"(%Node* %init, %Node* %"$tmpForRef17")
  br label %if_end9

if_end9:                                          ; preds = %if_else8, %if_end13
  call void @ctor.393(%TokenType* %tmp.this18, i32 32)
  %7 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this18)
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %9 = load %Node, %Node* %typeNode
  %10 = load %Node, %Node* %init
  %11 = load i32, i32* %kind
  call void @createFormals(%AstBuilder* %8, %"Vector[LocString]"* %ids, %Node %9, %Node %10, i32 %11, %Node* %res)
  call void @dtor.562(%"Vector[LocString]"* %ids)
  ret i1 true

if_block11:                                       ; preds = %if_then7
  call void @ctor.393(%TokenType* %tmp.this14, i32 36)
  %12 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this14)
  br i1 %12, label %if_then12, label %if_end13

if_then12:                                        ; preds = %if_block11
  %13 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %13, %Node* %"$tmpForRef15"
  call void @"=.529"(%Node* %init, %Node* %"$tmpForRef15")
  br label %if_end13

if_end13:                                         ; preds = %if_then12, %if_block11
  br label %if_end9

dumy_block19:                                     ; No predecessors!
  call void @dtor.562(%"Vector[LocString]"* %ids)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseFunDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %formals = alloca %Node
  %"$tmpForRef" = alloca %Node
  %retType = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %body = alloca %Node
  %bodyExp = alloca %Node
  %ifClause = alloca %Node
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef6" = alloca %Node
  %"$tmpForRef7" = alloca %Node
  %tmp.this8 = alloca %TokenType
  %"$tmpForRef9" = alloca %Node
  %"$tmpForRef10" = alloca %Node
  %"$tmpForRef11" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 6)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  %2 = xor i1 true, %1
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  call void @ctor.159(%Location* %loc, %Location* %4)
  call void @parseFunNameString(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  %5 = call %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %5, %Node* %"$tmpForRef"
  call void @ctor.520(%Node* %formals, %Node* %"$tmpForRef")
  %6 = call %Node @parseTypeNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %6, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %retType, %Node* %"$tmpForRef1")
  call void @ctor.531(%Node* %body)
  call void @ctor.531(%Node* %bodyExp)
  call void @ctor.531(%Node* %ifClause)
  br label %if_block2

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block2:                                        ; preds = %if_end
  call void @ctor.393(%TokenType* %tmp.this5, i32 36)
  %7 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  br i1 %7, label %if_then3, label %if_else

if_then3:                                         ; preds = %if_block2
  %8 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %8, %Node* %"$tmpForRef6"
  call void @"=.529"(%Node* %bodyExp, %Node* %"$tmpForRef6")
  %9 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %9, %Node* %"$tmpForRef7"
  call void @"=.529"(%Node* %ifClause, %Node* %"$tmpForRef7")
  call void @ctor.393(%TokenType* %tmp.this8, i32 32)
  %10 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this8)
  br label %if_end4

if_else:                                          ; preds = %if_block2
  %11 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %11, %Node* %"$tmpForRef9"
  call void @"=.529"(%Node* %ifClause, %Node* %"$tmpForRef9")
  %12 = call %Node @parseFunBody(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Node %12, %Node* %"$tmpForRef10"
  call void @"=.529"(%Node* %body, %Node* %"$tmpForRef10")
  br label %if_end4

if_end4:                                          ; preds = %if_else, %if_then3
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %14 = getelementptr inbounds %Token, %Token* %13, i32 0, i32 0
  %15 = load %Location, %Location* %14
  call void @copyEnd(%Location* %loc, %Location %15)
  %16 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %17 = load %Location, %Location* %loc
  %18 = call %StringRef @asStringRef(%String* %id)
  %19 = load %Node, %Node* %formals
  %20 = load %Node, %Node* %retType
  %21 = load %Node, %Node* %body
  %22 = load %Node, %Node* %bodyExp
  %23 = load %Node, %Node* %ifClause
  %24 = call %Node @mkFun(%AstBuilder* %16, %Location %17, %StringRef %18, %Node %19, %Node %20, %Node %21, %Node %22, %Node %23)
  store %Node %24, %Node* %"$tmpForRef11"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef11")
  call void @dtor.239(%String* %id)
  ret i1 true

dumy_block12:                                     ; No predecessors!
  call void @dtor.239(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @parseFunNameString(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %tmp.this = alloca %TokenType
  %tmp.StringRef = alloca %StringRef
  %tmp.this4 = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %tmp.StringRef6 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 34)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %3 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %4 = bitcast %UntypedPtr* %2 to i8**
  %5 = bitcast %UntypedPtr* %3 to i8**
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.105, i32 0, i32 0), i8** %4
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.105, i32 0, i32 1), i8** %5
  %6 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.448(%String* %_result, %StringRef %6)
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  call void @ctor.393(%TokenType* %tmp.this4, i32 29)
  %7 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this4)
  br i1 %7, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  call void @ctor.393(%TokenType* %tmp.this5, i32 30)
  %8 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  %9 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef6, i32 0, i32 0
  %10 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef6, i32 0, i32 1
  %11 = bitcast %UntypedPtr* %9 to i8**
  %12 = bitcast %UntypedPtr* %10 to i8**
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.106, i32 0, i32 0), i8** %11
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.106, i32 0, i32 2), i8** %12
  %13 = load %StringRef, %StringRef* %tmp.StringRef6
  call void @ctor.448(%String* %_result, %StringRef %13)
  ret void

if_end3:                                          ; preds = %dumy_block7, %if_block1
  call void @parseIdOrOper(%String* %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  ret void

dumy_block7:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkFun(%AstBuilder* %obj, %Location %loc, %StringRef %name, %Node %formals, %Node %retType, %Node %body, %Node %bodyExp, %Node %ifClause) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %formals.addr = alloca %Node
  store %Node %formals, %Node* %formals.addr
  %retType.addr = alloca %Node
  store %Node %retType, %Node* %retType.addr
  %body.addr = alloca %Node
  store %Node %body, %Node* %body.addr
  %bodyExp.addr = alloca %Node
  store %Node %bodyExp, %Node* %bodyExp.addr
  %ifClause.addr = alloca %Node
  store %Node %ifClause, %Node* %ifClause.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 13
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %name.addr
  %5 = load %Node, %Node* %formals.addr
  %6 = load %Node, %Node* %retType.addr
  %7 = load %Node, %Node* %body.addr
  %8 = load %Node, %Node* %bodyExp.addr
  %9 = load %Node, %Node* %ifClause.addr
  %10 = call %Node @"().592"(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5, %Node %6, %Node %7, %Node %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().592"(%"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4, %Node %p5, %Node %p6, %Node %p7, %Node %p8) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  %p7.addr = alloca %Node
  store %Node %p7, %Node* %p7.addr
  %p8.addr = alloca %Node
  store %Node %p8, %Node* %p8.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %StringRef, %StringRef* %p3.addr
  %3 = load %Node, %Node* %p4.addr
  %4 = load %Node, %Node* %p5.addr
  %5 = load %Node, %Node* %p6.addr
  %6 = load %Node, %Node* %p7.addr
  %7 = load %Node, %Node* %p8.addr
  %8 = bitcast %"FunctionPtr8[Node, UntypedPtr, Location const, StringRef, Node, Node, Node, Node, Node]"* %this to %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node, %Node)**
  %9 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node, %Node)** %8
  %10 = call %Node %9(%UntypedPtr %1, %Location* %p2, %StringRef %2, %Node %3, %Node %4, %Node %5, %Node %6, %Node %7)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseExprStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i1 @parseExprOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 true)
  ret i1 %1
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseIfStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %topLevel) #4 {
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %tmp.this = alloca %TokenType
  %expr = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %thenClause = alloca %Node
  %"$tmpForRef2" = alloca %Node
  %elseClause = alloca %Node
  %tmp.this6 = alloca %TokenType
  %"$tmpForRef7" = alloca %Node
  %"$tmpForRef8" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 16)
  %2 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %3, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %expr, %Node* %"$tmpForRef1")
  %4 = load i1, i1* %topLevel.addr
  %5 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %4)
  store %Node %5, %Node* %"$tmpForRef2"
  call void @ctor.520(%Node* %thenClause, %Node* %"$tmpForRef2")
  call void @ctor.531(%Node* %elseClause)
  br label %if_block3

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block3:                                        ; preds = %if_then
  call void @ctor.393(%TokenType* %tmp.this6, i32 24)
  %6 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this6)
  br i1 %6, label %if_then4, label %if_end5

if_then4:                                         ; preds = %if_block3
  %7 = load i1, i1* %topLevel.addr
  %8 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %7)
  store %Node %8, %Node* %"$tmpForRef7"
  call void @"=.529"(%Node* %elseClause, %Node* %"$tmpForRef7")
  br label %if_end5

if_end5:                                          ; preds = %if_then4, %if_block3
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 0
  %11 = load %Location, %Location* %10
  call void @copyEnd(%Location* %loc, %Location %11)
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %13 = load %Location, %Location* %loc
  %14 = load %Node, %Node* %expr
  %15 = load %Node, %Node* %thenClause
  %16 = load %Node, %Node* %elseClause
  %17 = call %Node @mkIfStmt(%AstBuilder* %12, %Location %13, %Node %14, %Node %15, %Node %16)
  store %Node %17, %Node* %"$tmpForRef8"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef8")
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkIfStmt(%AstBuilder* %obj, %Location %loc, %Node %expr, %Node %thenClause, %Node %elseClause) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %expr.addr = alloca %Node
  store %Node %expr, %Node* %expr.addr
  %thenClause.addr = alloca %Node
  store %Node %thenClause, %Node* %thenClause.addr
  %elseClause.addr = alloca %Node
  store %Node %elseClause, %Node* %elseClause.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 35
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %expr.addr
  %5 = load %Node, %Node* %thenClause.addr
  %6 = load %Node, %Node* %elseClause.addr
  %7 = call %Node @"().593"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %Node %5, %Node %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().593"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %Node %p4, %Node %p5) #4 {
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %2 = load %Node, %Node* %p3.addr
  %3 = load %Node, %Node* %p4.addr
  %4 = load %Node, %Node* %p5.addr
  %5 = bitcast %"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %this to %Node (%UntypedPtr, %Location*, %Node, %Node, %Node)**
  %6 = load %Node (%UntypedPtr, %Location*, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %Node, %Node, %Node)** %5
  %7 = call %Node %6(%UntypedPtr %1, %Location* %p2, %Node %2, %Node %3, %Node %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseForStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %topLevel) #4 {
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %tmp.this = alloca %TokenType
  %id = alloca %String
  %typeNode = alloca %Node
  %tmp.this4 = alloca %TokenType
  %"$tmpForRef5" = alloca %Node
  %tmp.this6 = alloca %TokenType
  %range = alloca %Node
  %"$tmpForRef7" = alloca %Node
  %action = alloca %Node
  %"$tmpForRef8" = alloca %Node
  %"$tmpForRef9" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 15)
  %2 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  call void @ctor.531(%Node* %typeNode)
  br label %if_block1

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block1:                                        ; preds = %if_then
  call void @ctor.393(%TokenType* %tmp.this4, i32 31)
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this4)
  br i1 %3, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  %4 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 false)
  store %Node %4, %Node* %"$tmpForRef5"
  call void @"=.529"(%Node* %typeNode, %Node* %"$tmpForRef5")
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  call void @ctor.393(%TokenType* %tmp.this6, i32 36)
  %5 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this6)
  %6 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %6, %Node* %"$tmpForRef7"
  call void @ctor.520(%Node* %range, %Node* %"$tmpForRef7")
  %7 = load i1, i1* %topLevel.addr
  %8 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %7)
  store %Node %8, %Node* %"$tmpForRef8"
  call void @ctor.520(%Node* %action, %Node* %"$tmpForRef8")
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 0
  %11 = load %Location, %Location* %10
  call void @copyEnd(%Location* %loc, %Location %11)
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %13 = load %Location, %Location* %loc
  %14 = call %StringRef @asStringRef(%String* %id)
  %15 = load %Node, %Node* %typeNode
  %16 = load %Node, %Node* %range
  %17 = load %Node, %Node* %action
  %18 = call %Node @mkForStmt(%AstBuilder* %12, %Location %13, %StringRef %14, %Node %15, %Node %16, %Node %17)
  store %Node %18, %Node* %"$tmpForRef9"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef9")
  call void @dtor.239(%String* %id)
  ret i1 true

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %id)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkForStmt(%AstBuilder* %obj, %Location %loc, %StringRef %id, %Node %typeNode, %Node %range, %Node %action) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %range.addr = alloca %Node
  store %Node %range, %Node* %range.addr
  %action.addr = alloca %Node
  store %Node %action, %Node* %action.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 36
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %id.addr
  %5 = load %Node, %Node* %typeNode.addr
  %6 = load %Node, %Node* %range.addr
  %7 = load %Node, %Node* %action.addr
  %8 = call %Node @"().589"(%"FunctionPtr6[Node, UntypedPtr, Location const, StringRef, Node, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4, %Node %5, %Node %6, %Node %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseWhileStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %topLevel) #4 {
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %loc = alloca %Location
  %"$tmpForRef" = alloca %Location
  %tmp.this = alloca %TokenType
  %expr = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %stepAction = alloca %Node
  %tmp.this5 = alloca %TokenType
  %"$tmpC" = alloca %String
  %"$tmpForRef9" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %"$tmpC10" = alloca %Token
  %"$tmpForRef11" = alloca %StringRef
  %tmp.StringRef12 = alloca %StringRef
  %body = alloca %Node
  %"$tmpForRef13" = alloca %Node
  %"$tmpForRef14" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = call %Location @curLoc(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this)
  store %Location %1, %Location* %"$tmpForRef"
  call void @ctor.159(%Location* %loc, %Location* %"$tmpForRef")
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 20)
  %2 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %3, %Node* %"$tmpForRef1"
  call void @ctor.520(%Node* %expr, %Node* %"$tmpForRef1")
  call void @ctor.531(%Node* %stepAction)
  br label %if_block2

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block2:                                        ; preds = %if_then
  call void @ctor.393(%TokenType* %tmp.this5, i32 32)
  %4 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this5)
  br i1 %4, label %if_then3, label %if_end4

if_then3:                                         ; preds = %if_block2
  br label %if_block6

if_end4:                                          ; preds = %if_end8, %if_block2
  %5 = load i1, i1* %topLevel.addr
  %6 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %5)
  store %Node %6, %Node* %"$tmpForRef13"
  call void @ctor.520(%Node* %body, %Node* %"$tmpForRef13")
  %7 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %8 = getelementptr inbounds %Token, %Token* %7, i32 0, i32 0
  %9 = load %Location, %Location* %8
  call void @copyEnd(%Location* %loc, %Location %9)
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %11 = load %Location, %Location* %loc
  %12 = load %Node, %Node* %expr
  %13 = load %Node, %Node* %stepAction
  %14 = load %Node, %Node* %body
  %15 = call %Node @mkWhileStmt(%AstBuilder* %10, %Location %11, %Node %12, %Node %13, %Node %14)
  store %Node %15, %Node* %"$tmpForRef14"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef14")
  ret i1 true

if_block6:                                        ; preds = %if_then3
  %16 = call i1 @parseExprOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %stepAction, i1 true)
  %17 = xor i1 true, %16
  br i1 %17, label %cond.true, label %cond.false

if_then7:                                         ; preds = %cond.end
  %18 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %19 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  %20 = bitcast %UntypedPtr* %18 to i8**
  %21 = bitcast %UntypedPtr* %19 to i8**
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.107, i32 0, i32 0), i8** %20
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.107, i32 0, i32 25), i8** %21
  %22 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %22, %StringRef* %"$tmpForRef9"
  %23 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 0
  call void @"pre_*.518"(%Token* %"$tmpC10", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %23)
  %24 = getelementptr inbounds %Token, %Token* %"$tmpC10", i32 0, i32 1
  %25 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef12, i32 0, i32 0
  %26 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef12, i32 0, i32 1
  %27 = bitcast %UntypedPtr* %25 to i8**
  %28 = bitcast %UntypedPtr* %26 to i8**
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @str.108, i32 0, i32 0), i8** %27
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @str.108, i32 0, i32 41), i8** %28
  %29 = load %StringRef, %StringRef* %tmp.StringRef12
  store %StringRef %29, %StringRef* %"$tmpForRef11"
  call void @toString.574(%String* %"$tmpC", %StringRef* %"$tmpForRef9", %TokenType* %24, %StringRef* %"$tmpForRef11")
  call void @reportError.523(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %String* %"$tmpC")
  call void @dtor.239(%String* %"$tmpC")
  call void @dtor.238(%Token* %"$tmpC10")
  br label %if_end8

if_end8:                                          ; preds = %if_then7, %cond.end
  br label %if_end4

cond.true:                                        ; preds = %if_block6
  %30 = load i1, i1* %topLevel.addr
  %31 = call i1 @parseBlockStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %stepAction, i1 %30)
  %32 = xor i1 true, %31
  br label %cond.end

cond.false:                                       ; preds = %if_block6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %32, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then7, label %if_end8

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkWhileStmt(%AstBuilder* %obj, %Location %loc, %Node %expr, %Node %stepAction, %Node %body) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %expr.addr = alloca %Node
  store %Node %expr, %Node* %expr.addr
  %stepAction.addr = alloca %Node
  store %Node %stepAction, %Node* %stepAction.addr
  %body.addr = alloca %Node
  store %Node %body, %Node* %body.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 37
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %expr.addr
  %5 = load %Node, %Node* %stepAction.addr
  %6 = load %Node, %Node* %body.addr
  %7 = call %Node @"().593"(%"FunctionPtr5[Node, UntypedPtr, Location const, Node, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %Node %5, %Node %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseBreakStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 11)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 0
  call void @ctor.159(%Location* %loc, %Location* %3)
  call void @ctor.393(%TokenType* %tmp.this1, i32 32)
  %4 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %6 = load %Location, %Location* %loc
  %7 = call %Node @mkBreakStmt(%AstBuilder* %5, %Location %6)
  store %Node %7, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkBreakStmt(%AstBuilder* %obj, %Location %loc) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 38
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = call %Node @"().577"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %1, %UntypedPtr %3, %Location* %loc.addr)
  ret %Node %4
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseContinueStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 13)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 0
  call void @ctor.159(%Location* %loc, %Location* %3)
  call void @ctor.393(%TokenType* %tmp.this1, i32 32)
  %4 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %6 = load %Location, %Location* %loc
  %7 = call %Node @mkContinueStmt(%AstBuilder* %5, %Location %6)
  store %Node %7, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef")
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkContinueStmt(%AstBuilder* %obj, %Location %loc) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 39
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = call %Node @"().577"(%"FunctionPtr2[Node, UntypedPtr, Location const]"* %1, %UntypedPtr %3, %Location* %loc.addr)
  ret %Node %4
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseReturnStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %expr = alloca %Node
  %tmp.this3 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this4 = alloca %TokenType
  %"$tmpForRef5" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.393(%TokenType* %tmp.this, i32 17)
  %1 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 1
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 0
  call void @ctor.159(%Location* %loc, %Location* %3)
  call void @ctor.531(%Node* %expr)
  br label %if_block1

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block1:                                        ; preds = %if_then
  call void @ctor.393(%TokenType* %tmp.this3, i32 32)
  %4 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this3)
  br i1 %4, label %if_end2, label %if_else

if_else:                                          ; preds = %if_block1
  %5 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %5, %Node* %"$tmpForRef"
  call void @"=.529"(%Node* %expr, %Node* %"$tmpForRef")
  call void @ctor.393(%TokenType* %tmp.this4, i32 32)
  %6 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this4)
  br label %if_end2

if_end2:                                          ; preds = %if_else, %if_block1
  %7 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 0, i32 3
  %8 = load %Location, %Location* %loc
  %9 = load %Node, %Node* %expr
  %10 = call %Node @mkReturnStmt(%AstBuilder* %7, %Location %8, %Node %9)
  store %Node %10, %Node* %"$tmpForRef5"
  call void @"=.529"(%Node* %res, %Node* %"$tmpForRef5")
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkReturnStmt(%AstBuilder* %obj, %Location %loc, %Node %expr) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %expr.addr = alloca %Node
  store %Node %expr, %Node* %expr.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 40
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %expr.addr
  %5 = call %Node @"().573"(%"FunctionPtr3[Node, UntypedPtr, Location const, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4)
  ret %Node %5
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkModifiers(%AstBuilder* %obj, %Location %loc, %Node %main, %Node %mods) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %main.addr = alloca %Node
  store %Node %main, %Node* %main.addr
  %mods.addr = alloca %Node
  store %Node %mods, %Node* %mods.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 2
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %main.addr
  %5 = load %Node, %Node* %mods.addr
  %6 = call %Node @"().586"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %Node %5)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkModule(%AstBuilder* %obj, %Location %loc, %Node %moduleName, %Node %decls) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %moduleName.addr = alloca %Node
  store %Node %moduleName, %Node* %moduleName.addr
  %decls.addr = alloca %Node
  store %Node %decls, %Node* %decls.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 3
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Node, %Node* %moduleName.addr
  %5 = load %Node, %Node* %decls.addr
  %6 = call %Node @"().586"(%"FunctionPtr4[Node, UntypedPtr, Location const, Node, Node]"* %1, %UntypedPtr %3, %Location* %loc.addr, %Node %4, %Node %5)
  ret %Node %6
}

; Function Attrs: noinline nounwind
define %Node @spr_parserIf_parseExpression(%ParserContext* %ctx) #5 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ParserContext, %ParserContext* %ctx, i32 0, i32 2
  %2 = call %Node @parseExpression(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  ret %Node %2
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseExpression(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %res = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  %1 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 true)
  store %Node %1, %Node* %"$tmpForRef"
  call void @ctor.520(%Node* %res, %Node* %"$tmpForRef")
  call void @ctor.393(%TokenType* %tmp.this, i32 32)
  %2 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this)
  call void @ctor.393(%TokenType* %tmp.this1, i32 0)
  %3 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType* %tmp.this1)
  %4 = load %Node, %Node* %res
  ret %Node %4
}

; Function Attrs: inlinehint nounwind
define internal i1 @isOctalDigit(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp sle i8 48, %1
  br i1 %2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %3 = load i8, i8* %c.addr
  %4 = icmp sle i8 %3, 55
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %4, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: inlinehint nounwind
define internal i1 @isBinDigit(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp eq i8 %1, 48
  br i1 %2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  br label %cond.end

cond.false:                                       ; preds = %code
  %3 = load i8, i8* %c.addr
  %4 = icmp eq i8 %3, 49
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ true, %cond.true ], [ %4, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.594(%LocString* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %LocString, %LocString* %this, i32 0, i32 0
  call void @ctor.595(%"Tuple[Location, String]"* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.595(%"Tuple[Location, String]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %this, i32 0, i32 0
  call void @ctor.108(%Location* %1)
  %2 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %this, i32 0, i32 1
  call void @ctor.114(%String* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.596"(%LocString* %this, %LocString* %other) #3 {
  %other.addr = alloca %LocString*
  store %LocString* %other, %LocString** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %LocString, %LocString* %this, i32 0, i32 0
  %2 = load %LocString*, %LocString** %other.addr
  %3 = getelementptr inbounds %LocString, %LocString* %2, i32 0, i32 0
  call void @"=.597"(%"Tuple[Location, String]"* %1, %"Tuple[Location, String]"* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.597"(%"Tuple[Location, String]"* %this, %"Tuple[Location, String]"* %other) #3 {
  %other.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %other, %"Tuple[Location, String]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %this, i32 0, i32 0
  %2 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %3 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %2, i32 0, i32 0
  call void @"=.261"(%Location* %1, %Location* %3)
  %4 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %this, i32 0, i32 1
  %5 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %6 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %5, i32 0, i32 1
  %7 = call %String* @"=.267"(%String* %4, %String* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.598"(%LocString* %this, %LocString* %other) #3 {
  %this.addr = alloca %LocString*
  store %LocString* %this, %LocString** %this.addr
  %other.addr = alloca %LocString*
  store %LocString* %other, %LocString** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %this.addr
  %2 = getelementptr inbounds %LocString, %LocString* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %other.addr
  %4 = getelementptr inbounds %LocString, %LocString* %3, i32 0, i32 0
  %5 = call i1 @"==.599"(%"Tuple[Location, String]"* %2, %"Tuple[Location, String]"* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.599"(%"Tuple[Location, String]"* %this, %"Tuple[Location, String]"* %other) #3 {
  %this.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %this, %"Tuple[Location, String]"** %this.addr
  %other.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %other, %"Tuple[Location, String]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %2 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %1, i32 0, i32 0
  %3 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %4 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %3, i32 0, i32 0
  %5 = call i1 @"==.313"(%Location* %2, %Location* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %7 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %6, i32 0, i32 1
  %8 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %9 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %8, i32 0, i32 1
  %10 = call i1 @"==.320"(%String* %7, %String* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: inlinehint nounwind
define internal %LineCol @mkLineCol(i32 %line, i32 %col) #4 {
  %line.addr = alloca i32
  store i32 %line, i32* %line.addr
  %col.addr = alloca i32
  store i32 %col, i32* %col.addr
  %res = alloca %LineCol
  br label %code

code:                                             ; preds = %0
  call void @ctor.110(%LineCol* %res)
  %1 = load i32, i32* %line.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %res, i32 0, i32 0
  store i32 %1, i32* %2
  %3 = load i32, i32* %col.addr
  %4 = getelementptr inbounds %LineCol, %LineCol* %res, i32 0, i32 1
  store i32 %3, i32* %4
  %5 = load %LineCol, %LineCol* %res
  ret %LineCol %5
}

; Function Attrs: inlinehint nounwind
define internal %Location @mkLocation() #4 {
  %res = alloca %Location
  br label %code

code:                                             ; preds = %0
  call void @ctor.108(%Location* %res)
  call void @setOne(%Location* %res)
  %1 = load %Location, %Location* %res
  ret %Location %1
}

; Function Attrs: inlinehint nounwind
define internal void @setOne(%Location* %l) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 1
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  store i32 1, i32* %2
  %3 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 1
  %4 = getelementptr inbounds %LineCol, %LineCol* %3, i32 0, i32 1
  store i32 1, i32* %4
  %5 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %6 = getelementptr inbounds %LineCol, %LineCol* %5, i32 0, i32 0
  store i32 1, i32* %6
  %7 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %8 = getelementptr inbounds %LineCol, %LineCol* %7, i32 0, i32 1
  store i32 1, i32* %8
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Location @mkLocation.600(%SourceCode %sourceCode) #4 {
  %sourceCode.addr = alloca %SourceCode
  store %SourceCode %sourceCode, %SourceCode* %sourceCode.addr
  %res = alloca %Location
  br label %code

code:                                             ; preds = %0
  call void @ctor.108(%Location* %res)
  %1 = getelementptr inbounds %Location, %Location* %res, i32 0, i32 0
  call void @"=.262"(%SourceCode* %1, %SourceCode* %sourceCode.addr)
  call void @setOne(%Location* %res)
  %2 = load %Location, %Location* %res
  ret %Location %2
}

; Function Attrs: inlinehint nounwind
define internal %Location @mkLocation.601(%SourceCode %sourceCode, %LineCol %start, %LineCol %end) #4 {
  %sourceCode.addr = alloca %SourceCode
  store %SourceCode %sourceCode, %SourceCode* %sourceCode.addr
  %start.addr = alloca %LineCol
  store %LineCol %start, %LineCol* %start.addr
  %end.addr = alloca %LineCol
  store %LineCol %end, %LineCol* %end.addr
  %res = alloca %Location
  br label %code

code:                                             ; preds = %0
  call void @ctor.108(%Location* %res)
  %1 = getelementptr inbounds %Location, %Location* %res, i32 0, i32 0
  call void @"=.262"(%SourceCode* %1, %SourceCode* %sourceCode.addr)
  %2 = getelementptr inbounds %Location, %Location* %res, i32 0, i32 1
  call void @"=.263"(%LineCol* %2, %LineCol* %start.addr)
  %3 = getelementptr inbounds %Location, %Location* %res, i32 0, i32 2
  call void @"=.263"(%LineCol* %3, %LineCol* %end.addr)
  %4 = load %Location, %Location* %res
  ret %Location %4
}

; Function Attrs: inlinehint nounwind
define internal void @copyStart(%Location* %l, %Location %other) #4 {
  %other.addr = alloca %Location
  store %Location %other, %Location* %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 1
  %2 = getelementptr inbounds %Location, %Location* %other.addr, i32 0, i32 1
  call void @"=.263"(%LineCol* %1, %LineCol* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @setAsStartOf(%Location* %l, %Location %other) #4 {
  %other.addr = alloca %Location
  store %Location %other, %Location* %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 1
  %2 = getelementptr inbounds %Location, %Location* %other.addr, i32 0, i32 1
  call void @"=.263"(%LineCol* %1, %LineCol* %2)
  %3 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %4 = getelementptr inbounds %Location, %Location* %other.addr, i32 0, i32 1
  call void @"=.263"(%LineCol* %3, %LineCol* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @setAsEndOf(%Location* %l, %Location %other) #4 {
  %other.addr = alloca %Location
  store %Location %other, %Location* %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 1
  %2 = getelementptr inbounds %Location, %Location* %other.addr, i32 0, i32 2
  call void @"=.263"(%LineCol* %1, %LineCol* %2)
  %3 = getelementptr inbounds %Location, %Location* %l, i32 0, i32 2
  %4 = getelementptr inbounds %Location, %Location* %other.addr, i32 0, i32 2
  call void @"=.263"(%LineCol* %3, %LineCol* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @"<"(%Location %lhs, %Location %rhs) #4 {
  %lhs.addr = alloca %Location
  store %Location %lhs, %Location* %lhs.addr
  %rhs.addr = alloca %Location
  store %Location %rhs, %Location* %rhs.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %Location, %Location* %lhs.addr, i32 0, i32 1
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = getelementptr inbounds %Location, %Location* %rhs.addr, i32 0, i32 1
  %5 = getelementptr inbounds %LineCol, %LineCol* %4, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = call i1 @_Int32_opLT(i32 %3, i32 %6)
  br i1 %7, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %8 = getelementptr inbounds %Location, %Location* %lhs.addr, i32 0, i32 1
  %9 = getelementptr inbounds %LineCol, %LineCol* %8, i32 0, i32 0
  %10 = load i32, i32* %9
  %11 = getelementptr inbounds %Location, %Location* %rhs.addr, i32 0, i32 1
  %12 = getelementptr inbounds %LineCol, %LineCol* %11, i32 0, i32 0
  %13 = load i32, i32* %12
  %14 = call i1 @_Int32_opGT(i32 %10, i32 %13)
  br i1 %14, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  br label %if_block5

dumy_block4:                                      ; No predecessors!
  br label %if_end3

if_block5:                                        ; preds = %if_end3
  %15 = getelementptr inbounds %Location, %Location* %lhs.addr, i32 0, i32 1
  %16 = getelementptr inbounds %LineCol, %LineCol* %15, i32 0, i32 1
  %17 = load i32, i32* %16
  %18 = getelementptr inbounds %Location, %Location* %rhs.addr, i32 0, i32 1
  %19 = getelementptr inbounds %LineCol, %LineCol* %18, i32 0, i32 1
  %20 = load i32, i32* %19
  %21 = call i1 @_Int32_opLT(i32 %17, i32 %20)
  br i1 %21, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  ret i1 true

if_end7:                                          ; preds = %dumy_block8, %if_block5
  br label %if_block9

dumy_block8:                                      ; No predecessors!
  br label %if_end7

if_block9:                                        ; preds = %if_end7
  %22 = getelementptr inbounds %Location, %Location* %lhs.addr, i32 0, i32 1
  %23 = getelementptr inbounds %LineCol, %LineCol* %22, i32 0, i32 1
  %24 = load i32, i32* %23
  %25 = getelementptr inbounds %Location, %Location* %rhs.addr, i32 0, i32 1
  %26 = getelementptr inbounds %LineCol, %LineCol* %25, i32 0, i32 1
  %27 = load i32, i32* %26
  %28 = call i1 @_Int32_opGT(i32 %24, i32 %27)
  br i1 %28, label %if_then10, label %if_end11

if_then10:                                        ; preds = %if_block9
  ret i1 false

if_end11:                                         ; preds = %dumy_block12, %if_block9
  br label %if_block13

dumy_block12:                                     ; No predecessors!
  br label %if_end11

if_block13:                                       ; preds = %if_end11
  %29 = getelementptr inbounds %Location, %Location* %lhs.addr, i32 0, i32 2
  %30 = getelementptr inbounds %LineCol, %LineCol* %29, i32 0, i32 0
  %31 = load i32, i32* %30
  %32 = getelementptr inbounds %Location, %Location* %rhs.addr, i32 0, i32 2
  %33 = getelementptr inbounds %LineCol, %LineCol* %32, i32 0, i32 0
  %34 = load i32, i32* %33
  %35 = call i1 @_Int32_opLT(i32 %31, i32 %34)
  br i1 %35, label %if_then14, label %if_end15

if_then14:                                        ; preds = %if_block13
  ret i1 true

if_end15:                                         ; preds = %dumy_block16, %if_block13
  br label %if_block17

dumy_block16:                                     ; No predecessors!
  br label %if_end15

if_block17:                                       ; preds = %if_end15
  %36 = getelementptr inbounds %Location, %Location* %lhs.addr, i32 0, i32 2
  %37 = getelementptr inbounds %LineCol, %LineCol* %36, i32 0, i32 0
  %38 = load i32, i32* %37
  %39 = getelementptr inbounds %Location, %Location* %rhs.addr, i32 0, i32 2
  %40 = getelementptr inbounds %LineCol, %LineCol* %39, i32 0, i32 0
  %41 = load i32, i32* %40
  %42 = call i1 @_Int32_opGT(i32 %38, i32 %41)
  br i1 %42, label %if_then18, label %if_end19

if_then18:                                        ; preds = %if_block17
  ret i1 false

if_end19:                                         ; preds = %dumy_block20, %if_block17
  %43 = getelementptr inbounds %Location, %Location* %lhs.addr, i32 0, i32 2
  %44 = getelementptr inbounds %LineCol, %LineCol* %43, i32 0, i32 1
  %45 = load i32, i32* %44
  %46 = getelementptr inbounds %Location, %Location* %rhs.addr, i32 0, i32 2
  %47 = getelementptr inbounds %LineCol, %LineCol* %46, i32 0, i32 1
  %48 = load i32, i32* %47
  %49 = call i1 @_Int32_opLT(i32 %45, i32 %48)
  ret i1 %49

dumy_block20:                                     ; No predecessors!
  br label %if_end19
}

; Function Attrs: inlinehint nounwind
define internal i1 @"<.602"(%LineCol %lhs, %LineCol %rhs) #4 {
  %lhs.addr = alloca %LineCol
  store %LineCol %lhs, %LineCol* %lhs.addr
  %rhs.addr = alloca %LineCol
  store %LineCol %rhs, %LineCol* %rhs.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = getelementptr inbounds %LineCol, %LineCol* %lhs.addr, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = getelementptr inbounds %LineCol, %LineCol* %rhs.addr, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = call i1 @_Int32_opLT(i32 %2, i32 %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %6 = getelementptr inbounds %LineCol, %LineCol* %lhs.addr, i32 0, i32 0
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %LineCol, %LineCol* %rhs.addr, i32 0, i32 0
  %9 = load i32, i32* %8
  %10 = call i1 @_Int32_opGT(i32 %7, i32 %9)
  br i1 %10, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  %11 = getelementptr inbounds %LineCol, %LineCol* %lhs.addr, i32 0, i32 1
  %12 = load i32, i32* %11
  %13 = getelementptr inbounds %LineCol, %LineCol* %rhs.addr, i32 0, i32 1
  %14 = load i32, i32* %13
  %15 = call i1 @_Int32_opLT(i32 %12, i32 %14)
  ret i1 %15

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.603(%String* %this, i32 %count, i8 %ch) #4 {
  %count.addr = alloca i32
  store i32 %count, i32* %count.addr
  %ch.addr = alloca i8
  store i8 %ch, i8* %ch.addr
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %count.addr
  call void @ctor.167(%String* %this, i32 %1)
  %2 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %3 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %2)
  %4 = load i8, i8* %ch.addr
  store i8 %4, i8* %tmp.this
  %5 = load i8, i8* %tmp.this
  %6 = load i32, i32* %count.addr
  call void bitcast (void (i8*, i8, i64)* @_spr_memset to void (%UntypedPtr, i8, i32)*)(%UntypedPtr %3, i8 %5, i32 %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.604(%String* %this, %"RawPtr[Char]" %_begin, %"RawPtr[Char]" %_end) #4 {
  %_begin.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %_begin, %"RawPtr[Char]"* %_begin.addr
  %_end.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %_end, %"RawPtr[Char]"* %_end.addr
  %size = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]", %"RawPtr[Char]"* %_begin.addr
  %2 = call i32 @diff(%"RawPtr[Char]"* %_end.addr, %"RawPtr[Char]" %1)
  store i32 %2, i32* %size
  %3 = load i32, i32* %size
  call void @ctor.167(%String* %this, i32 %3)
  %4 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %5 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %4)
  %6 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %_begin.addr)
  %7 = load i32, i32* %size
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %5, %UntypedPtr %6, i32 %7)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @"!="(%String* %this, %String* %other) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i1 @"==.320"(%String* %this, %String* %other)
  %2 = xor i1 true, %1
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal i8* @at.605(%String* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = load i32, i32* %index.addr
  %3 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %1, i32 %2)
  store %"RawPtr[Char]" %3, %"RawPtr[Char]"* %"$tmpForRef"
  %4 = call i8* @value(%"RawPtr[Char]"* %"$tmpForRef")
  ret i8* %4
}

; Function Attrs: inlinehint nounwind
define internal i8* @front.606(%String* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = call i8* @value(%"RawPtr[Char]"* %1)
  ret i8* %2
}

; Function Attrs: inlinehint nounwind
define internal i8* @back.607(%String* %this) #4 {
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %2 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %1, i32 -1)
  store %"RawPtr[Char]" %2, %"RawPtr[Char]"* %"$tmpForRef"
  %3 = call i8* @value(%"RawPtr[Char]"* %"$tmpForRef")
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @subrange.608(%String* %this, i32 %index, i32 %num) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %num.addr = alloca i32
  store i32 %num, i32* %num.addr
  %tmp.this = alloca %StringRef
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %"$tmpForRef1" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %2 = load i32, i32* %index.addr
  %3 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %1, i32 %2)
  store %"RawPtr[Char]" %3, %"RawPtr[Char]"* %"$tmpForRef"
  %4 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %"$tmpForRef")
  %5 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %6 = load i32, i32* %index.addr
  %7 = load i32, i32* %num.addr
  %8 = call i32 @_Int32_opPlus(i32 %6, i32 %7)
  %9 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %5, i32 %8)
  store %"RawPtr[Char]" %9, %"RawPtr[Char]"* %"$tmpForRef1"
  %10 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %"$tmpForRef1")
  call void @ctor.50(%StringRef* %tmp.this, %UntypedPtr %4, %UntypedPtr %10)
  %11 = load %StringRef, %StringRef* %tmp.this
  %12 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %12)
  ret %StringRef %11

dumy_block:                                       ; No predecessors!
  %13 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %13)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @resize(%String* %this, i32 %n) #4 {
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %oldSize = alloca i32
  %newEnd = alloca %"RawPtr[Char]"
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %"$tmpForRef4" = alloca %"RawPtr[Char]"
  %newEnd5 = alloca %"RawPtr[Char]"
  %"$tmpForRef6" = alloca %"RawPtr[Char]"
  %"$tmpForRef11" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @size.166(%String* %this)
  store i32 %1, i32* %oldSize
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load i32, i32* %n.addr
  %3 = load i32, i32* %oldSize
  %4 = call i1 @_Int32_opEQ(i32 %2, i32 %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %5 = load i32, i32* %n.addr
  %6 = load i32, i32* %oldSize
  %7 = call i1 @_Int32_opLT(i32 %5, i32 %6)
  br i1 %7, label %if_then2, label %if_else

if_then2:                                         ; preds = %if_block1
  %8 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %9 = load i32, i32* %n.addr
  %10 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %8, i32 %9)
  store %"RawPtr[Char]" %10, %"RawPtr[Char]"* %"$tmpForRef"
  call void @ctor.168(%"RawPtr[Char]"* %newEnd, %"RawPtr[Char]"* %"$tmpForRef")
  br label %while_block

if_else:                                          ; preds = %if_block1
  %11 = load i32, i32* %n.addr
  call void @reserve(%String* %this, i32 %11)
  %12 = getelementptr inbounds %String, %String* %this, i32 0, i32 0
  %13 = load i32, i32* %n.addr
  %14 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %12, i32 %13)
  store %"RawPtr[Char]" %14, %"RawPtr[Char]"* %"$tmpForRef6"
  call void @ctor.168(%"RawPtr[Char]"* %newEnd5, %"RawPtr[Char]"* %"$tmpForRef6")
  br label %while_block7

if_end3:                                          ; preds = %while_end10, %while_end
  ret void

while_block:                                      ; preds = %while_step, %if_then2
  %15 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %16 = call i1 @"==.246"(%"RawPtr[Char]"* %15, %"RawPtr[Char]"* %newEnd)
  %17 = xor i1 true, %16
  br i1 %17, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %18 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %19 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %20 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %19, i32 -1)
  store %"RawPtr[Char]" %20, %"RawPtr[Char]"* %"$tmpForRef4"
  call void @"=.176"(%"RawPtr[Char]"* %18, %"RawPtr[Char]"* %"$tmpForRef4")
  %21 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %22 = call i8* @value(%"RawPtr[Char]"* %21)
  %23 = load i8, i8* %22
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %if_end3

while_block7:                                     ; preds = %while_step9, %if_else
  %24 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %25 = call i1 @"==.246"(%"RawPtr[Char]"* %24, %"RawPtr[Char]"* %newEnd5)
  %26 = xor i1 true, %25
  br i1 %26, label %while_body8, label %while_end10

while_body8:                                      ; preds = %while_block7
  %27 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %28 = call i8* @value(%"RawPtr[Char]"* %27)
  store i8 0, i8* %28
  %29 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %30 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %31 = call %"RawPtr[Char]" @advance.247(%"RawPtr[Char]"* %30)
  store %"RawPtr[Char]" %31, %"RawPtr[Char]"* %"$tmpForRef11"
  call void @"=.176"(%"RawPtr[Char]"* %29, %"RawPtr[Char]"* %"$tmpForRef11")
  br label %while_step9

while_step9:                                      ; preds = %while_body8
  br label %while_block7

while_end10:                                      ; preds = %while_block7
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal void @insertAfter(%String* %this, i8 %value, %StringRef %pos) #4 {
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  %pos.addr = alloca %StringRef
  store %StringRef %pos, %StringRef* %pos.addr
  %tmp.this = alloca %StringRef
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %value.addr
  %2 = load %StringRef, %StringRef* %pos.addr
  %3 = call %"RawPtr[Char]" @_backPtr(%StringRef %2)
  store %"RawPtr[Char]" %3, %"RawPtr[Char]"* %"$tmpForRef"
  %4 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %"$tmpForRef")
  %5 = getelementptr inbounds %String, %String* %this, i32 0, i32 1
  %6 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %5)
  call void @ctor.50(%StringRef* %tmp.this, %UntypedPtr %4, %UntypedPtr %6)
  %7 = load %StringRef, %StringRef* %tmp.this
  call void @insertBefore.459(%String* %this, i8 %1, %StringRef %7)
  %8 = load %StringRef, %StringRef* %tmp.this
  call void @dtor.51(%StringRef %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"RawPtr[Char]" @_backPtr(%StringRef %s) #4 {
  %s.addr = alloca %StringRef
  store %StringRef %s, %StringRef* %s.addr
  %tmp.this = alloca %"RawPtr[Char]"
  %tmp.this1 = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %s.addr, i32 0, i32 1
  %2 = load %UntypedPtr, %UntypedPtr* %1
  call void @ctor.45(%UntypedPtr* %tmp.this1, %UntypedPtr %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this1
  call void @ctor.170(%"RawPtr[Char]"* %tmp.this, %UntypedPtr %3)
  %4 = load %"RawPtr[Char]", %"RawPtr[Char]"* %tmp.this
  ret %"RawPtr[Char]" %4
}

; Function Attrs: inlinehint nounwind
define internal void @remove.609(%String* %this, i32 %index) #4 {
  %index.addr = alloca i32
  store i32 %index, i32* %index.addr
  %r = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = call %StringRef @all.462(%String* %this)
  call void @ctor.49(%StringRef* %r, %StringRef %1)
  %2 = load i32, i32* %index.addr
  call void @popFront.54(%StringRef* %r, i32 %2)
  %3 = call i32 @size.166(%String* %this)
  %4 = load i32, i32* %index.addr
  %5 = call i32 @_Int32_opMinus(i32 %3, i32 %4)
  %6 = call i32 @_Int32_opMinus(i32 %5, i32 1)
  call void @popBack.55(%StringRef* %r, i32 %6)
  %7 = load %StringRef, %StringRef* %r
  call void @remove(%String* %this, %StringRef %7)
  %8 = load %StringRef, %StringRef* %r
  call void @dtor.51(%StringRef %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"+.610"(%String* sret %_result, %String* %x, %String* %y) #4 {
  %sz1 = alloca i32
  %sz2 = alloca i32
  %res = alloca %String
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @size.166(%String* %x)
  store i32 %1, i32* %sz1
  %2 = call i32 @size.166(%String* %y)
  store i32 %2, i32* %sz2
  %3 = load i32, i32* %sz1
  %4 = load i32, i32* %sz2
  %5 = call i32 @_Int32_opPlus(i32 %3, i32 %4)
  call void @ctor.167(%String* %res, i32 %5)
  %6 = getelementptr inbounds %String, %String* %res, i32 0, i32 0
  %7 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %6)
  %8 = getelementptr inbounds %String, %String* %x, i32 0, i32 0
  %9 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %8)
  %10 = load i32, i32* %sz1
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %7, %UntypedPtr %9, i32 %10)
  %11 = getelementptr inbounds %String, %String* %res, i32 0, i32 0
  %12 = load i32, i32* %sz1
  %13 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %11, i32 %12)
  store %"RawPtr[Char]" %13, %"RawPtr[Char]"* %"$tmpForRef"
  %14 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %"$tmpForRef")
  %15 = getelementptr inbounds %String, %String* %y, i32 0, i32 0
  %16 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %15)
  %17 = load i32, i32* %sz2
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %14, %UntypedPtr %16, i32 %17)
  call void @ctor.165(%String* %_result, %String* %res)
  call void @dtor.239(%String* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"+.611"(%String* sret %_result, %String* %x, %StringRef %y) #4 {
  %y.addr = alloca %StringRef
  store %StringRef %y, %StringRef* %y.addr
  %sz1 = alloca i32
  %sz2 = alloca i32
  %res = alloca %String
  %"$tmpForRef" = alloca %"RawPtr[Char]"
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = call i32 @size.166(%String* %x)
  store i32 %1, i32* %sz1
  %2 = load %StringRef, %StringRef* %y.addr
  %3 = call i32 @size(%StringRef %2)
  store i32 %3, i32* %sz2
  %4 = load i32, i32* %sz1
  %5 = load i32, i32* %sz2
  %6 = call i32 @_Int32_opPlus(i32 %4, i32 %5)
  call void @ctor.167(%String* %res, i32 %6)
  %7 = getelementptr inbounds %String, %String* %res, i32 0, i32 0
  %8 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %7)
  %9 = getelementptr inbounds %String, %String* %x, i32 0, i32 0
  %10 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %9)
  %11 = load i32, i32* %sz1
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %8, %UntypedPtr %10, i32 %11)
  %12 = getelementptr inbounds %String, %String* %res, i32 0, i32 0
  %13 = load i32, i32* %sz1
  %14 = call %"RawPtr[Char]" @advance(%"RawPtr[Char]"* %12, i32 %13)
  store %"RawPtr[Char]" %14, %"RawPtr[Char]"* %"$tmpForRef"
  %15 = call %UntypedPtr @untypedPtr(%"RawPtr[Char]"* %"$tmpForRef")
  %16 = getelementptr inbounds %StringRef, %StringRef* %y.addr, i32 0, i32 0
  %17 = load %UntypedPtr, %UntypedPtr* %16
  call void @ctor.45(%UntypedPtr* %tmp.this, %UntypedPtr %17)
  %18 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %19 = load i32, i32* %sz2
  call void bitcast (void (i8*, i8*, i64)* @_spr_memcpy to void (%UntypedPtr, %UntypedPtr, i32)*)(%UntypedPtr %15, %UntypedPtr %18, i32 %19)
  call void @ctor.165(%String* %_result, %String* %res)
  call void @dtor.239(%String* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ulongToString(%String* sret %_result, i64 %x) #4 {
  %x.addr = alloca i64
  store i64 %x, i64* %x.addr
  %buf = alloca [16 x i8]
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %x.addr
  %2 = bitcast [16 x i8]* %buf to i8*
  call void @_ULong_to_CString(i64 %1, i8* %2)
  %3 = bitcast [16 x i8]* %buf to i8*
  %4 = call %StringRef @_String_fromCString(i8* %3)
  call void @ctor.448(%String* %_result, %StringRef %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.612"(%StringOutputStream* %this, %StringOutputStream* %other) #3 {
  %other.addr = alloca %StringOutputStream*
  store %StringOutputStream* %other, %StringOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = load %StringOutputStream*, %StringOutputStream** %other.addr
  %3 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %2, i32 0, i32 0
  %4 = call %String* @"=.267"(%String* %1, %String* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.613"(%StringOutputStream* %this, %StringOutputStream* %other) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %other.addr = alloca %StringOutputStream*
  store %StringOutputStream* %other, %StringOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load %StringOutputStream*, %StringOutputStream** %other.addr
  %4 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %3, i32 0, i32 0
  %5 = call i1 @"==.320"(%String* %2, %String* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.614"(%StringOutputStream* %this, %String* %s) #3 {
  %"$tmpForRef" = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = call %StringRef @all.462(%String* %s)
  store %StringRef %2, %StringRef* %"$tmpForRef"
  call void @append(%String* %1, %StringRef* %"$tmpForRef")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.615"(%StringOutputStream* %this, i32 %x) #3 {
  %x.addr = alloca i32
  store i32 %x, i32* %x.addr
  %"$tmpForRef" = alloca %StringRef
  %"$tmpC" = alloca %String
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = load i32, i32* %x.addr
  %3 = zext i32 %2 to i64
  store i64 %3, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  call void @ulongToString(%String* %"$tmpC", i64 %4)
  %5 = call %StringRef @all.462(%String* %"$tmpC")
  store %StringRef %5, %StringRef* %"$tmpForRef"
  call void @append(%String* %1, %StringRef* %"$tmpForRef")
  call void @dtor.239(%String* %"$tmpC")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.616"(%StringOutputStream* %this, i64 %x) #3 {
  %x.addr = alloca i64
  store i64 %x, i64* %x.addr
  %"$tmpForRef" = alloca %StringRef
  %"$tmpC" = alloca %String
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = load i64, i64* %x.addr
  store i64 %2, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  call void @ulongToString(%String* %"$tmpC", i64 %3)
  %4 = call %StringRef @all.462(%String* %"$tmpC")
  store %StringRef %4, %StringRef* %"$tmpForRef"
  call void @append(%String* %1, %StringRef* %"$tmpForRef")
  call void @dtor.239(%String* %"$tmpC")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.617"(%StringOutputStream* %this, i64 %x) #3 {
  %x.addr = alloca i64
  store i64 %x, i64* %x.addr
  %"$tmpForRef" = alloca %StringRef
  %"$tmpC" = alloca %String
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = load i64, i64* %x.addr
  store i64 %2, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  call void @ulongToString(%String* %"$tmpC", i64 %3)
  %4 = call %StringRef @all.462(%String* %"$tmpC")
  store %StringRef %4, %StringRef* %"$tmpForRef"
  call void @append(%String* %1, %StringRef* %"$tmpForRef")
  call void @dtor.239(%String* %"$tmpC")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.618"(%StringOutputStream* %this, float %x) #3 {
  %x.addr = alloca float
  store float %x, float* %x.addr
  %"$tmpForRef" = alloca %StringRef
  %"$tmpC" = alloca %String
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = load float, float* %x.addr
  %3 = fptoui float %2 to i64
  store i64 %3, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  call void @ulongToString(%String* %"$tmpC", i64 %4)
  %5 = call %StringRef @all.462(%String* %"$tmpC")
  store %StringRef %5, %StringRef* %"$tmpForRef"
  call void @append(%String* %1, %StringRef* %"$tmpForRef")
  call void @dtor.239(%String* %"$tmpC")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.619"(%StringOutputStream* %this, double %x) #3 {
  %x.addr = alloca double
  store double %x, double* %x.addr
  %"$tmpForRef" = alloca %StringRef
  %"$tmpC" = alloca %String
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %this, i32 0, i32 0
  %2 = load double, double* %x.addr
  %3 = fptoui double %2 to i64
  store i64 %3, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  call void @ulongToString(%String* %"$tmpC", i64 %4)
  %5 = call %StringRef @all.462(%String* %"$tmpC")
  store %StringRef %5, %StringRef* %"$tmpForRef"
  call void @append(%String* %1, %StringRef* %"$tmpForRef")
  call void @dtor.239(%String* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @toString.620(%String* sret %_result) #4 {
  br label %code

code:                                             ; preds = %0
  call void @ctor.114(%String* %_result)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.621(%"ContiguousMemoryRange[LocString]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 0
  call void @ctor.536(%"RawPtr[LocString]"* %1)
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 1
  call void @ctor.536(%"RawPtr[LocString]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.622(%"ContiguousMemoryRange[LocString]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.623"(%"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"* %other) #3 {
  %other.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %other, %"ContiguousMemoryRange[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 0
  %2 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %3 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %2, i32 0, i32 0
  call void @"=.547"(%"RawPtr[LocString]"* %1, %"RawPtr[LocString]"* %3)
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this, i32 0, i32 1
  %5 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %5, i32 0, i32 1
  call void @"=.547"(%"RawPtr[LocString]"* %4, %"RawPtr[LocString]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.624"(%"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %other, %"ContiguousMemoryRange[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %3, i32 0, i32 0
  %5 = call i1 @"==.539"(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %7 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %6, i32 0, i32 1
  %8 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %9 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %8, i32 0, i32 1
  %10 = call i1 @"==.539"(%"RawPtr[LocString]"* %7, %"RawPtr[LocString]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.625(%"ContiguousMemoryRange[Char]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  call void @ctor.115(%"RawPtr[Char]"* %1)
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 1
  call void @ctor.115(%"RawPtr[Char]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.626(%"ContiguousMemoryRange[Char]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.627"(%"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"* %other) #3 {
  %other.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %other, %"ContiguousMemoryRange[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 0
  %2 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %3 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %2, i32 0, i32 0
  call void @"=.176"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %3)
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this, i32 0, i32 1
  %5 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %5, i32 0, i32 1
  call void @"=.176"(%"RawPtr[Char]"* %4, %"RawPtr[Char]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.628"(%"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %other, %"ContiguousMemoryRange[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 0
  %5 = call i1 @"==.246"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %7 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %6, i32 0, i32 1
  %8 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %9 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %8, i32 0, i32 1
  %10 = call i1 @"==.246"(%"RawPtr[Char]"* %7, %"RawPtr[Char]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.629(%"ContiguousMemoryRange[Token]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  call void @ctor.127(%"RawPtr[Token]"* %1)
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 1
  call void @ctor.127(%"RawPtr[Token]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.630(%"ContiguousMemoryRange[Token]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.631"(%"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"* %other) #3 {
  %other.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %other, %"ContiguousMemoryRange[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 0
  %2 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %3 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %2, i32 0, i32 0
  call void @"=.187"(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %3)
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this, i32 0, i32 1
  %5 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %5, i32 0, i32 1
  call void @"=.187"(%"RawPtr[Token]"* %4, %"RawPtr[Token]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.632"(%"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %other, %"ContiguousMemoryRange[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 0
  %5 = call i1 @"==.194"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %7 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %6, i32 0, i32 1
  %8 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %9 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %8, i32 0, i32 1
  %10 = call i1 @"==.194"(%"RawPtr[Token]"* %7, %"RawPtr[Token]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.633(%"ContiguousMemoryRange[Int]"* %this, %"RawPtr[Int]" %f_begin, %"RawPtr[Int]" %f_end) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Int]"*
  store %"ContiguousMemoryRange[Int]"* %this, %"ContiguousMemoryRange[Int]"** %this.addr
  %f_begin.addr = alloca %"RawPtr[Int]"
  store %"RawPtr[Int]" %f_begin, %"RawPtr[Int]"* %f_begin.addr
  %f_end.addr = alloca %"RawPtr[Int]"
  store %"RawPtr[Int]" %f_end, %"RawPtr[Int]"* %f_end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %1, i32 0, i32 0
  call void @ctor.207(%"RawPtr[Int]"* %2, %"RawPtr[Int]"* %f_begin.addr)
  %3 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %3, i32 0, i32 1
  call void @ctor.207(%"RawPtr[Int]"* %4, %"RawPtr[Int]"* %f_end.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.634(%"ContiguousMemoryRange[Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %this, i32 0, i32 0
  call void @ctor.129(%"RawPtr[Int]"* %1)
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %this, i32 0, i32 1
  call void @ctor.129(%"RawPtr[Int]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.635(%"ContiguousMemoryRange[Int]"* %this, %"ContiguousMemoryRange[Int]"* %other) #3 {
  %other.addr = alloca %"ContiguousMemoryRange[Int]"*
  store %"ContiguousMemoryRange[Int]"* %other, %"ContiguousMemoryRange[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %this, i32 0, i32 0
  %2 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %other.addr
  %3 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %2, i32 0, i32 0
  call void @ctor.207(%"RawPtr[Int]"* %1, %"RawPtr[Int]"* %3)
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %this, i32 0, i32 1
  %5 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %other.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %5, i32 0, i32 1
  call void @ctor.207(%"RawPtr[Int]"* %4, %"RawPtr[Int]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.636(%"ContiguousMemoryRange[Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.637"(%"ContiguousMemoryRange[Int]"* %this, %"ContiguousMemoryRange[Int]"* %other) #3 {
  %other.addr = alloca %"ContiguousMemoryRange[Int]"*
  store %"ContiguousMemoryRange[Int]"* %other, %"ContiguousMemoryRange[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %this, i32 0, i32 0
  %2 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %other.addr
  %3 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %2, i32 0, i32 0
  call void @"=.201"(%"RawPtr[Int]"* %1, %"RawPtr[Int]"* %3)
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %this, i32 0, i32 1
  %5 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %other.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %5, i32 0, i32 1
  call void @"=.201"(%"RawPtr[Int]"* %4, %"RawPtr[Int]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.638"(%"ContiguousMemoryRange[Int]"* %this, %"ContiguousMemoryRange[Int]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Int]"*
  store %"ContiguousMemoryRange[Int]"* %this, %"ContiguousMemoryRange[Int]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[Int]"*
  store %"ContiguousMemoryRange[Int]"* %other, %"ContiguousMemoryRange[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %3, i32 0, i32 0
  %5 = call i1 @"==.249"(%"RawPtr[Int]"* %2, %"RawPtr[Int]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %this.addr
  %7 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %6, i32 0, i32 1
  %8 = load %"ContiguousMemoryRange[Int]"*, %"ContiguousMemoryRange[Int]"** %other.addr
  %9 = getelementptr inbounds %"ContiguousMemoryRange[Int]", %"ContiguousMemoryRange[Int]"* %8, i32 0, i32 1
  %10 = call i1 @"==.249"(%"RawPtr[Int]"* %7, %"RawPtr[Int]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.639(%"RawPtr[Char]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.640(%"RawPtr[LocString]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.641(%"RawPtr[Token]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.642(%"RawPtr[Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.643(%"NumericRangeInc[Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 0
  store i32 0, i32* %1
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 1
  store i32 0, i32* %2
  %3 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 2
  store i1 false, i1* %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.644(%"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"* %other) #3 {
  %other.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %other, %"NumericRangeInc[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 0
  store i32 %3, i32* %4
  %5 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %6 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %5, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 1
  store i32 %7, i32* %8
  %9 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %10 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %9, i32 0, i32 2
  %11 = load i1, i1* %10
  %12 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 2
  store i1 %11, i1* %12
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.645"(%"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"* %other) #3 {
  %other.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %other, %"NumericRangeInc[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 0
  store i32 %3, i32* %4
  %5 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %6 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %5, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 1
  store i32 %7, i32* %8
  %9 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %10 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %9, i32 0, i32 2
  %11 = load i1, i1* %10
  %12 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this, i32 0, i32 2
  store i1 %11, i1* %12
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.646"(%"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"* %other) #3 {
  %this.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"** %this.addr
  %other.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %other, %"NumericRangeInc[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %5 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %4, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = call i1 @_Int32_opEQ(i32 %3, i32 %6)
  br i1 %7, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %8 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %9 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %8, i32 0, i32 2
  %10 = load i1, i1* %9
  %11 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %12 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %11, i32 0, i32 2
  %13 = load i1, i1* %12
  %14 = icmp eq i1 %10, %13
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %14, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %15 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %16 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %15, i32 0, i32 1
  %17 = load i32, i32* %16
  %18 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %19 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %18, i32 0, i32 1
  %20 = load i32, i32* %19
  %21 = call i1 @_Int32_opEQ(i32 %17, i32 %20)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %21, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sqrt.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sin.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.cos.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.powi.f32(float, i32) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.pow.f32(float, float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.exp.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.exp2.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.log.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.log10.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.log2.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

declare float @llvm.truc.f32(float)

; Function Attrs: nounwind readnone speculatable
declare float @llvm.rint.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sin.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.powi.f64(double, i32) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.pow.f64(double, double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp2.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log10.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log2.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #6

declare double @llvm.truc.f64(double)

; Function Attrs: nounwind readnone speculatable
declare double @llvm.rint.f64(double) #6

; Function Attrs: alwaysinline nounwind
define internal void @ctor.647(%"Vector[LocString]"* %this, %"Vector[LocString]"* %other) #3 {
  %other.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %other, %"Vector[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %2 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %3 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %2, i32 0, i32 0
  call void @ctor.561(%"RawPtr[LocString]"* %1, %"RawPtr[LocString]"* %3)
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %5 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %6 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %5, i32 0, i32 1
  call void @ctor.561(%"RawPtr[LocString]"* %4, %"RawPtr[LocString]"* %6)
  %7 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 2
  %8 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %9 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %8, i32 0, i32 2
  call void @ctor.561(%"RawPtr[LocString]"* %7, %"RawPtr[LocString]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.648(%"Vector[LocString]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.649"(%"Vector[LocString]"* %this, %"Vector[LocString]"* %other) #3 {
  %other.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %other, %"Vector[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 0
  %2 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %3 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %2, i32 0, i32 0
  call void @"=.547"(%"RawPtr[LocString]"* %1, %"RawPtr[LocString]"* %3)
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 1
  %5 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %6 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %5, i32 0, i32 1
  call void @"=.547"(%"RawPtr[LocString]"* %4, %"RawPtr[LocString]"* %6)
  %7 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %this, i32 0, i32 2
  %8 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %9 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %8, i32 0, i32 2
  call void @"=.547"(%"RawPtr[LocString]"* %7, %"RawPtr[LocString]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.650"(%"Vector[LocString]"* %this, %"Vector[LocString]"* %other) #3 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %other.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %other, %"Vector[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 0
  %3 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %3, i32 0, i32 0
  %5 = call i1 @"==.539"(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %7 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %6, i32 0, i32 2
  %8 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %9 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %8, i32 0, i32 2
  %10 = call i1 @"==.539"(%"RawPtr[LocString]"* %7, %"RawPtr[LocString]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %12 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %11, i32 0, i32 1
  %13 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %14 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %13, i32 0, i32 1
  %15 = call i1 @"==.539"(%"RawPtr[LocString]"* %12, %"RawPtr[LocString]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.651(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #3 {
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %2 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %3 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %2, i32 0, i32 0
  call void @ctor.168(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %3)
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %5 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %5, i32 0, i32 1
  call void @ctor.168(%"RawPtr[Char]"* %4, %"RawPtr[Char]"* %6)
  %7 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  %8 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %8, i32 0, i32 2
  call void @ctor.168(%"RawPtr[Char]"* %7, %"RawPtr[Char]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.652(%"Vector[Char]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.653"(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #3 {
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 0
  %2 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %3 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %2, i32 0, i32 0
  call void @"=.176"(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %3)
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 1
  %5 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %5, i32 0, i32 1
  call void @"=.176"(%"RawPtr[Char]"* %4, %"RawPtr[Char]"* %6)
  %7 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %this, i32 0, i32 2
  %8 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %8, i32 0, i32 2
  call void @"=.176"(%"RawPtr[Char]"* %7, %"RawPtr[Char]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.654"(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #3 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 0
  %5 = call i1 @"==.246"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %7 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %6, i32 0, i32 2
  %8 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %8, i32 0, i32 2
  %10 = call i1 @"==.246"(%"RawPtr[Char]"* %7, %"RawPtr[Char]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %12 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %11, i32 0, i32 1
  %13 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %14 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %13, i32 0, i32 1
  %15 = call i1 @"==.246"(%"RawPtr[Char]"* %12, %"RawPtr[Char]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.655(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #3 {
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %2 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %3 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %2, i32 0, i32 0
  call void @ctor.193(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %3)
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %5 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %5, i32 0, i32 1
  call void @ctor.193(%"RawPtr[Token]"* %4, %"RawPtr[Token]"* %6)
  %7 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  %8 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %8, i32 0, i32 2
  call void @ctor.193(%"RawPtr[Token]"* %7, %"RawPtr[Token]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.656(%"Vector[Token]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.657"(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #3 {
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 0
  %2 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %3 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %2, i32 0, i32 0
  call void @"=.187"(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %3)
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 1
  %5 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %5, i32 0, i32 1
  call void @"=.187"(%"RawPtr[Token]"* %4, %"RawPtr[Token]"* %6)
  %7 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %this, i32 0, i32 2
  %8 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %8, i32 0, i32 2
  call void @"=.187"(%"RawPtr[Token]"* %7, %"RawPtr[Token]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.658"(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #3 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 0
  %5 = call i1 @"==.194"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %7 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %6, i32 0, i32 2
  %8 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %8, i32 0, i32 2
  %10 = call i1 @"==.194"(%"RawPtr[Token]"* %7, %"RawPtr[Token]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %12 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %11, i32 0, i32 1
  %13 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %14 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %13, i32 0, i32 1
  %15 = call i1 @"==.194"(%"RawPtr[Token]"* %12, %"RawPtr[Token]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.659(%"Vector[Int]"* %this, %"Vector[Int]"* %other) #3 {
  %other.addr = alloca %"Vector[Int]"*
  store %"Vector[Int]"* %other, %"Vector[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %2 = load %"Vector[Int]"*, %"Vector[Int]"** %other.addr
  %3 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %2, i32 0, i32 0
  call void @ctor.207(%"RawPtr[Int]"* %1, %"RawPtr[Int]"* %3)
  %4 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %5 = load %"Vector[Int]"*, %"Vector[Int]"** %other.addr
  %6 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %5, i32 0, i32 1
  call void @ctor.207(%"RawPtr[Int]"* %4, %"RawPtr[Int]"* %6)
  %7 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  %8 = load %"Vector[Int]"*, %"Vector[Int]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %8, i32 0, i32 2
  call void @ctor.207(%"RawPtr[Int]"* %7, %"RawPtr[Int]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.660(%"Vector[Int]"* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.661"(%"Vector[Int]"* %this, %"Vector[Int]"* %other) #3 {
  %other.addr = alloca %"Vector[Int]"*
  store %"Vector[Int]"* %other, %"Vector[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 0
  %2 = load %"Vector[Int]"*, %"Vector[Int]"** %other.addr
  %3 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %2, i32 0, i32 0
  call void @"=.201"(%"RawPtr[Int]"* %1, %"RawPtr[Int]"* %3)
  %4 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 1
  %5 = load %"Vector[Int]"*, %"Vector[Int]"** %other.addr
  %6 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %5, i32 0, i32 1
  call void @"=.201"(%"RawPtr[Int]"* %4, %"RawPtr[Int]"* %6)
  %7 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %this, i32 0, i32 2
  %8 = load %"Vector[Int]"*, %"Vector[Int]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %8, i32 0, i32 2
  call void @"=.201"(%"RawPtr[Int]"* %7, %"RawPtr[Int]"* %9)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.662"(%"Vector[Int]"* %this, %"Vector[Int]"* %other) #3 {
  %this.addr = alloca %"Vector[Int]"*
  store %"Vector[Int]"* %this, %"Vector[Int]"** %this.addr
  %other.addr = alloca %"Vector[Int]"*
  store %"Vector[Int]"* %other, %"Vector[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Int]"*, %"Vector[Int]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %1, i32 0, i32 0
  %3 = load %"Vector[Int]"*, %"Vector[Int]"** %other.addr
  %4 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %3, i32 0, i32 0
  %5 = call i1 @"==.249"(%"RawPtr[Int]"* %2, %"RawPtr[Int]"* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %"Vector[Int]"*, %"Vector[Int]"** %this.addr
  %7 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %6, i32 0, i32 2
  %8 = load %"Vector[Int]"*, %"Vector[Int]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %8, i32 0, i32 2
  %10 = call i1 @"==.249"(%"RawPtr[Int]"* %7, %"RawPtr[Int]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %"Vector[Int]"*, %"Vector[Int]"** %this.addr
  %12 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %11, i32 0, i32 1
  %13 = load %"Vector[Int]"*, %"Vector[Int]"** %other.addr
  %14 = getelementptr inbounds %"Vector[Int]", %"Vector[Int]"* %13, i32 0, i32 1
  %15 = call i1 @"==.249"(%"RawPtr[Int]"* %12, %"RawPtr[Int]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal void @_returnsVoid() #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.663(%ErrorReporter* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reportError.664(%ErrorReporter* %obj, %Location %loc, %StringRef %msg) #4 {
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %msg.addr = alloca %StringRef
  store %StringRef %msg, %StringRef* %msg.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %obj, i32 0, i32 1
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %obj, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %StringRef, %StringRef* %msg.addr
  call void @"().427"(%"FunctionPtr3[Void, UntypedPtr, Location const, StringRef]"* %1, %UntypedPtr %3, %Location* %loc.addr, %StringRef %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.665(%AstBuilder* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isAlnum(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isalnum(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @isalnum(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isBlank(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isblank(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @isblank(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isCntrl(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @iscntrl(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @iscntrl(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isGraph(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isgraph(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @isgraph(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isLower(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @islower(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @islower(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isPrint(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isprint(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @isprint(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isPunct(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @ispunct(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @ispunct(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isSpace(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isspace(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @isspace(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isUpper(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isupper(i32 %2)
  %4 = call i1 @_Int32_opNE(i32 0, i32 %3)
  ret i1 %4
}

declare i32 @isupper(i32)

declare void @exit(i32)

; Function Attrs: inlinehint nounwind
define internal i32 @systemCall(%StringRef %cmd) #4 {
  %cmd.addr = alloca %StringRef
  store %StringRef %cmd, %StringRef* %cmd.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %cmd.addr
  %2 = call i8* @cStr(%StringRef %1)
  %3 = call i32 bitcast (void (i8*)* @system to i32 (i8*)*)(i8* %2)
  ret i32 %3
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.666(%File* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %File, %File* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.667(%File* %this, %File* %other) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %File, %File* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %1)
  %2 = getelementptr inbounds %File, %File* %this, i32 0, i32 0
  %3 = getelementptr inbounds %File, %File* %other, i32 0, i32 0
  call void @"="(%UntypedPtr* %2, %UntypedPtr* %3)
  %4 = getelementptr inbounds %File, %File* %other, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %tmp.this)
  call void @"="(%UntypedPtr* %4, %UntypedPtr* %tmp.this)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.668(%File* %this) #4 {
  br label %code

code:                                             ; preds = %0
  call void @close(%File* %this)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @close(%File* %this) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = call i1 @isOpen(%File* %this)
  br i1 %1, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %2 = load %File, %File* %this
  call void @fclose(%File %2)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %3 = getelementptr inbounds %File, %File* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %tmp.this)
  call void @"="(%UntypedPtr* %3, %UntypedPtr* %tmp.this)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isOpen(%File* %this) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %File, %File* %this, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %tmp.this)
  %2 = call i1 @"==.315"(%UntypedPtr* %1, %UntypedPtr* %tmp.this)
  %3 = xor i1 true, %2
  ret i1 %3
}

declare void @fclose(%File)

; Function Attrs: inlinehint nounwind
define internal void @"=.669"(%File* %this, %File* %other) #4 {
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %File, %File* %this, i32 0, i32 0
  %2 = getelementptr inbounds %File, %File* %other, i32 0, i32 0
  call void @"="(%UntypedPtr* %1, %UntypedPtr* %2)
  %3 = getelementptr inbounds %File, %File* %other, i32 0, i32 0
  call void @ctor.46(%UntypedPtr* %tmp.this)
  call void @"="(%UntypedPtr* %3, %UntypedPtr* %tmp.this)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %File @openFile(%StringRef %filename, %StringRef %mode) #4 {
  %filename.addr = alloca %StringRef
  store %StringRef %filename, %StringRef* %filename.addr
  %mode.addr = alloca %StringRef
  store %StringRef %mode, %StringRef* %mode.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %filename.addr
  %2 = call i8* @cStr(%StringRef %1)
  %3 = load %StringRef, %StringRef* %mode.addr
  %4 = call i8* @cStr(%StringRef %3)
  %5 = call %File @fopen(i8* %2, i8* %4)
  ret %File %5
}

; Function Attrs: inlinehint nounwind
define internal i32 @flush.670(%File* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = call i1 @isOpen(%File* %this)
  br i1 %1, label %cond_alt1, label %cond_alt2

cond_alt1:                                        ; preds = %code
  %2 = load %File, %File* %this
  %3 = call i32 bitcast (i32 (%struct._IO_FILE*)* @fflush to i32 (%File)*)(%File %2)
  br label %cond_end

cond_alt2:                                        ; preds = %code
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi i32 [ %3, %cond_alt1 ], [ -1, %cond_alt2 ]
  ret i32 %cond
}

; Function Attrs: inlinehint nounwind
define internal void @readLine(%String* sret %_result, %File* %this) #4 {
  %res = alloca %String
  %cstr = alloca i8*
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  call void @ctor.167(%String* %res, i32 256)
  %1 = call i8* @"().321"(%String* %res, i32 0)
  call void @ctor.57(%UntypedPtr* %tmp.this, i8* %1)
  %2 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %3 = load %File, %File* %this
  %4 = call i8* @fgets(%UntypedPtr %2, i32 256, %File %3)
  store i8* %4, i8** %cstr
  br label %if_block

if_block:                                         ; preds = %code
  %5 = load i8*, i8** %cstr
  %6 = call i1 @implOpRefEQ(i8* %5, i8* null)
  br i1 %6, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  call void @clear(%String* %res)
  br label %if_end

if_else:                                          ; preds = %if_block
  %7 = load i8*, i8** %cstr
  %8 = call i32 @cStringLen(i8* %7)
  call void @resize(%String* %res, i32 %8)
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  call void @ctor.165(%String* %_result, %String* %res)
  call void @dtor.239(%String* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.239(%String* %res)
  ret void
}

declare i8* @fgets(%UntypedPtr, i32, %File)

; Function Attrs: inlinehint nounwind
define internal i32 @write(%File* %this, %StringRef %data) #4 {
  %data.addr = alloca %StringRef
  store %StringRef %data, %StringRef* %data.addr
  %res = alloca i32
  %tmp.this = alloca %UntypedPtr
  %tmp.this1 = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %data.addr, i32 0, i32 0
  %2 = load %UntypedPtr, %UntypedPtr* %1
  call void @ctor.45(%UntypedPtr* %tmp.this, %UntypedPtr %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  %4 = load %StringRef, %StringRef* %data.addr
  %5 = call i32 @size(%StringRef %4)
  store i32 %5, i32* %tmp.this1
  %6 = load i32, i32* %tmp.this1
  %7 = load %File, %File* %this
  %8 = call i32 @fwrite(%UntypedPtr %3, i32 1, i32 %6, %File %7)
  store i32 %8, i32* %res
  %9 = load i32, i32* %res
  ret i32 %9
}

declare i32 @fwrite(%UntypedPtr, i32, i32, %File)

; Function Attrs: inlinehint nounwind
define internal i32 @size.671(%File* %this) #4 {
  %res = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load %File, %File* %this
  call void @fseek(%File %1, i64 0, i32 2)
  %2 = load %File, %File* %this
  %3 = call i64 @ftell(%File %2)
  %4 = trunc i64 %3 to i32
  store i32 %4, i32* %res
  %5 = load %File, %File* %this
  call void @rewind(%File %5)
  %6 = load i32, i32* %res
  ret i32 %6
}

declare void @fseek(%File, i64, i32)

declare i64 @ftell(%File)

declare void @rewind(%File)

; Function Attrs: inlinehint nounwind
define internal void @all.672(%FileRange* sret %_result, %File* %this) #4 {
  br label %code

code:                                             ; preds = %0
  call void @ctor.673(%FileRange* %_result, %File* %this)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.673(%FileRange* %this, %File* %file) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 0
  store %File* null, %File** %1
  %2 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 1
  store i1 false, i1* %2
  %3 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 0
  store %File* %file, %File** %3
  %4 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 1
  store i1 true, i1* %4
  %5 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 2
  store i8 0, i8* %5
  br label %if_block

if_block:                                         ; preds = %code
  %6 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 0
  %7 = load %File*, %File** %6
  %8 = call i1 @isEof(%File* %7)
  %9 = xor i1 true, %8
  br i1 %9, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %10 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 0
  %11 = load %File*, %File** %10
  %12 = call i8 @readChar(%File* %11)
  %13 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 2
  store i8 %12, i8* %13
  %14 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 1
  store i1 false, i1* %14
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.674(%FileRange* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 0
  store %File* null, %File** %1
  %2 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 1
  store i1 false, i1* %2
  %3 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 2
  store i8 0, i8* %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.675(%FileRange* %this, %FileRange* %other) #3 {
  %other.addr = alloca %FileRange*
  store %FileRange* %other, %FileRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %other.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 0
  %3 = load %File*, %File** %2
  %4 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 0
  store %File* %3, %File** %4
  %5 = load %FileRange*, %FileRange** %other.addr
  %6 = getelementptr inbounds %FileRange, %FileRange* %5, i32 0, i32 1
  %7 = load i1, i1* %6
  %8 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 1
  store i1 %7, i1* %8
  %9 = load %FileRange*, %FileRange** %other.addr
  %10 = getelementptr inbounds %FileRange, %FileRange* %9, i32 0, i32 2
  %11 = load i8, i8* %10
  %12 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 2
  store i8 %11, i8* %12
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.676(%FileRange* %this) #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.677"(%FileRange* %this, %FileRange* %other) #3 {
  %other.addr = alloca %FileRange*
  store %FileRange* %other, %FileRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %other.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 0
  %3 = load %File*, %File** %2
  %4 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 0
  store %File* %3, %File** %4
  %5 = load %FileRange*, %FileRange** %other.addr
  %6 = getelementptr inbounds %FileRange, %FileRange* %5, i32 0, i32 1
  %7 = load i1, i1* %6
  %8 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 1
  store i1 %7, i1* %8
  %9 = load %FileRange*, %FileRange** %other.addr
  %10 = getelementptr inbounds %FileRange, %FileRange* %9, i32 0, i32 2
  %11 = load i8, i8* %10
  %12 = getelementptr inbounds %FileRange, %FileRange* %this, i32 0, i32 2
  store i8 %11, i8* %12
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.678"(%FileRange* %this, %FileRange* %other) #3 {
  %this.addr = alloca %FileRange*
  store %FileRange* %this, %FileRange** %this.addr
  %other.addr = alloca %FileRange*
  store %FileRange* %other, %FileRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %this.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 0
  %3 = load %File*, %File** %2
  %4 = bitcast %File* %3 to i8*
  %5 = load %FileRange*, %FileRange** %other.addr
  %6 = getelementptr inbounds %FileRange, %FileRange* %5, i32 0, i32 0
  %7 = load %File*, %File** %6
  %8 = bitcast %File* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  br i1 %9, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %10 = load %FileRange*, %FileRange** %this.addr
  %11 = getelementptr inbounds %FileRange, %FileRange* %10, i32 0, i32 2
  %12 = load i8, i8* %11
  %13 = load %FileRange*, %FileRange** %other.addr
  %14 = getelementptr inbounds %FileRange, %FileRange* %13, i32 0, i32 2
  %15 = load i8, i8* %14
  %16 = icmp eq i8 %12, %15
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %16, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %17 = load %FileRange*, %FileRange** %this.addr
  %18 = getelementptr inbounds %FileRange, %FileRange* %17, i32 0, i32 1
  %19 = load i1, i1* %18
  %20 = load %FileRange*, %FileRange** %other.addr
  %21 = getelementptr inbounds %FileRange, %FileRange* %20, i32 0, i32 1
  %22 = load i1, i1* %21
  %23 = icmp eq i1 %19, %22
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %23, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.679(%FileRange* %s) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileRange, %FileRange* %s, i32 0, i32 1
  %2 = load i1, i1* %1
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal i8 @front.680(%FileRange* %s) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileRange, %FileRange* %s, i32 0, i32 2
  %2 = load i8, i8* %1
  ret i8 %2
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.681(%FileRange* %s) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileRange, %FileRange* %s, i32 0, i32 0
  %2 = load %File*, %File** %1
  %3 = call i8 @readChar(%File* %2)
  %4 = getelementptr inbounds %FileRange, %FileRange* %s, i32 0, i32 2
  store i8 %3, i8* %4
  br label %if_block

if_block:                                         ; preds = %code
  %5 = getelementptr inbounds %FileRange, %FileRange* %s, i32 0, i32 0
  %6 = load %File*, %File** %5
  %7 = call i1 @isEof(%File* %6)
  br i1 %7, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %8 = getelementptr inbounds %FileRange, %FileRange* %s, i32 0, i32 1
  store i1 true, i1* %8
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

declare i32 @fread(%UntypedPtr, i32, i32, %File)

; Function Attrs: alwaysinline nounwind
define internal void @ctor.682(%FileCharSource* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileCharSource, %FileCharSource* %this, i32 0, i32 0
  call void @ctor.666(%File* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.683(%FileCharSource* %this, %FileCharSource* %other) #3 {
  %other.addr = alloca %FileCharSource*
  store %FileCharSource* %other, %FileCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileCharSource, %FileCharSource* %this, i32 0, i32 0
  %2 = load %FileCharSource*, %FileCharSource** %other.addr
  %3 = getelementptr inbounds %FileCharSource, %FileCharSource* %2, i32 0, i32 0
  call void @ctor.667(%File* %1, %File* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.684(%FileCharSource* %this) #3 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileCharSource, %FileCharSource* %this, i32 0, i32 0
  call void @dtor.668(%File* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.685"(%FileCharSource* %this, %FileCharSource* %other) #3 {
  %other.addr = alloca %FileCharSource*
  store %FileCharSource* %other, %FileCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileCharSource, %FileCharSource* %this, i32 0, i32 0
  %2 = load %FileCharSource*, %FileCharSource** %other.addr
  %3 = getelementptr inbounds %FileCharSource, %FileCharSource* %2, i32 0, i32 0
  call void @"=.669"(%File* %1, %File* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.686"(%FileCharSource* %this, %FileCharSource* %other) #3 {
  %this.addr = alloca %FileCharSource*
  store %FileCharSource* %this, %FileCharSource** %this.addr
  %other.addr = alloca %FileCharSource*
  store %FileCharSource* %other, %FileCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileCharSource*, %FileCharSource** %this.addr
  %2 = getelementptr inbounds %FileCharSource, %FileCharSource* %1, i32 0, i32 0
  %3 = load %FileCharSource*, %FileCharSource** %other.addr
  %4 = getelementptr inbounds %FileCharSource, %FileCharSource* %3, i32 0, i32 0
  %5 = call i1 @"==.687"(%File* %2, %File* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.687"(%File* %this, %File* %other) #3 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %other.addr = alloca %File*
  store %File* %other, %File** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  %3 = load %File*, %File** %other.addr
  %4 = getelementptr inbounds %File, %File* %3, i32 0, i32 0
  %5 = call i1 @"==.315"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal i1 @isValid(%FileCharSource* %this) #4 {
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %FileCharSource, %FileCharSource* %this, i32 0, i32 0
  %2 = call i1 @isOpen(%File* %1)
  ret i1 %2
}

attributes #0 = { alwaysinline }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline nounwind }
attributes #4 = { inlinehint nounwind }
attributes #5 = { noinline nounwind }
attributes #6 = { nounwind readnone speculatable }
