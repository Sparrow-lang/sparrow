; ModuleID = 'LLVM backend module Runtime'
source_filename = "LLVM backend module Runtime"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"

%EndLineHelperClass = type {}
%FlushHelperClass = type {}
%ConsoleOutputStream = type {}
%MainParameters = type { %CStrPtr, %CStrPtr }
%CStrPtr = type { %CStr* }
%CStr = type { i8* }
%struct._IO_FILE = type opaque
%Uninitialized = type {}
%Null = type {}
%StringRef = type { i8*, i8* }
%StreamRefWrapperHelperClass = type { i8* }
%ParserContext = type { %SparrowScanner, %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]" }
%SparrowScanner = type { %Location, %BufferedCharSource, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %Token, i1, %ErrorReporter, i1 }
%Location = type { %SourceCode, %LineCol, %LineCol }
%SourceCode = type { i8* }
%LineCol = type { i32, i32 }
%BufferedCharSource = type { %CharSource, %String, i32 }
%CharSource = type { %UntypedPtr, %"FunctionPtr3[Void, UntypedPtr, @String, Int]" }
%UntypedPtr = type { i8* }
%"FunctionPtr3[Void, UntypedPtr, @String, Int]" = type { i8* }
%String = type { %"RawPtr[Char]", %"RawPtr[Char]", %"RawPtr[Char]" }
%"RawPtr[Char]" = type { i8* }
%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]" = type { %"RangeWithLookahead[BufferedCharSourceRange]", %Location* }
%"RangeWithLookahead[BufferedCharSourceRange]" = type { %BufferedCharSourceRange, %"Vector[Char]" }
%BufferedCharSourceRange = type { %BufferedCharSource* }
%"Vector[Char]" = type { %"RawPtr[Char]", %"RawPtr[Char]", %"RawPtr[Char]" }
%Token = type { %Location, %TokenType, %String, i64, double }
%TokenType = type { i32 }
%ErrorReporter = type { %UntypedPtr, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]" }
%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]" = type { i8* }
%"SparrowLayoutDecoder[SparrowScanner]" = type { %"RangeWithLookahead[SparrowScanner]", %ErrorReporter, %"Vector[UInt]", %"Vector[Char]", %TokenType, i32 }
%"RangeWithLookahead[SparrowScanner]" = type { %SparrowScanner, %"Vector[Token]" }
%"Vector[Token]" = type { %"RawPtr[Token]", %"RawPtr[Token]", %"RawPtr[Token]" }
%"RawPtr[Token]" = type { %Token* }
%"Vector[UInt]" = type { %"RawPtr[UInt]", %"RawPtr[UInt]", %"RawPtr[UInt]" }
%"RawPtr[UInt]" = type { i32* }
%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]" = type { %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %Token, i1, %AstBuilder, %ErrorReporter }
%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]" = type { %"SparrowLayoutDecoder[SparrowScanner]", %"Vector[Token]" }
%AstBuilder = type { %UntypedPtr, %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]", %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]", %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]", %"FunctionPtr3[Node, UntypedPtr, @Location, Int]", %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]", %"FunctionPtr3[Node, UntypedPtr, @Location, Long]", %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]", %"FunctionPtr3[Node, UntypedPtr, @Location, Float]", %"FunctionPtr3[Node, UntypedPtr, @Location, Double]", %"FunctionPtr3[Node, UntypedPtr, @Location, Char]", %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Node, UntypedPtr, @Location, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]", %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr3[Node, UntypedPtr, @Location, Node]" }
%"FunctionPtr3[Node, UntypedPtr, Node, Node]" = type { i8* }
%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]" = type { i8* }
%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]" = type { i8* }
%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]" = type { i8* }
%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]" = type { i8* }
%"FunctionPtr2[Node, UntypedPtr, Node]" = type { i8* }
%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]" = type { i8* }
%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]" = type { i8* }
%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]" = type { i8* }
%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]" = type { i8* }
%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, Int]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, Long]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, Float]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, Double]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, Char]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]" = type { i8* }
%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]" = type { i8* }
%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]" = type { i8* }
%"FunctionPtr2[Node, UntypedPtr, @Location]" = type { i8* }
%"FunctionPtr3[Node, UntypedPtr, @Location, Node]" = type { i8* }
%"$lambdaEnclosureData" = type {}
%"$lambdaEnclosureData.0" = type {}
%"$lambdaEnclosureData.1" = type {}
%"$lambdaEnclosureData.2" = type {}
%"ContiguousMemoryRange[Char]" = type { %"RawPtr[Char]", %"RawPtr[Char]" }
%StringOutputStream = type { %String }
%"FunctionPtr1[Bool, Char]" = type { i8* }
%"ContiguousMemoryRange[Token]" = type { %"RawPtr[Token]", %"RawPtr[Token]" }
%FileCharSource = type { %File }
%File = type { i8* }
%"FunctionPtr3[Void, @FileCharSource, @String, Int]" = type { i8* }
%"NumericRangeInc[Int]" = type { i32, i32, i1 }
%StringCharSource = type { %StringRef }
%"FunctionPtr3[Void, @StringCharSource, @String, Int]" = type { i8* }
%Node = type { %UntypedPtr }
%"Vector[LocString]" = type { %"RawPtr[LocString]", %"RawPtr[LocString]", %"RawPtr[LocString]" }
%"RawPtr[LocString]" = type { %LocString* }
%LocString = type { %"Tuple[Location, String]" }
%"Tuple[Location, String]" = type { %Location, %String }
%"ContiguousMemoryRange[LocString]" = type { %"RawPtr[LocString]", %"RawPtr[LocString]" }
%"ContiguousMemoryRange[UInt]" = type { %"RawPtr[UInt]", %"RawPtr[UInt]" }
%FileRange = type { %File*, i1, i8 }

@.fmtInt = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.fmtUInt = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@.fmtLong = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.fmtULong = private unnamed_addr constant [5 x i8] c"%llu\00", align 1
@.fmtChar = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.fmtDouble = private unnamed_addr constant [3 x i8] c"%g\00", align 1
@.fmtPointer = private unnamed_addr constant [3 x i8] c"%p\00", align 1
@endl.0 = global %EndLineHelperClass zeroinitializer
@flush.1 = global %FlushHelperClass zeroinitializer
@cout.2 = global %ConsoleOutputStream zeroinitializer
@str = private unnamed_addr constant [5 x i8] c"true\00"
@str.5 = private unnamed_addr constant [6 x i8] c"false\00"
@programArgs.3 = global %MainParameters zeroinitializer
@str.8 = private unnamed_addr constant [30 x i8] c"Tabs are not valid characters\00"
@str.9 = private unnamed_addr constant [33 x i8] c"End of file found inside comment\00"
@str.10 = private unnamed_addr constant [40 x i8] c"End of file found inside string literal\00"
@str.11 = private unnamed_addr constant [37 x i8] c"Not enough digits for character code\00"
@str.12 = private unnamed_addr constant [40 x i8] c"End of file found inside string literal\00"
@str.13 = private unnamed_addr constant [40 x i8] c"End of file found inside string literal\00"
@str.14 = private unnamed_addr constant [6 x i8] c"break\00"
@str.15 = private unnamed_addr constant [6 x i8] c"catch\00"
@str.16 = private unnamed_addr constant [8 x i8] c"concept\00"
@str.17 = private unnamed_addr constant [9 x i8] c"continue\00"
@str.18 = private unnamed_addr constant [9 x i8] c"datatype\00"
@str.19 = private unnamed_addr constant [4 x i8] c"fun\00"
@str.20 = private unnamed_addr constant [3 x i8] c"if\00"
@str.21 = private unnamed_addr constant [5 x i8] c"else\00"
@str.22 = private unnamed_addr constant [6 x i8] c"false\00"
@str.23 = private unnamed_addr constant [8 x i8] c"finally\00"
@str.24 = private unnamed_addr constant [4 x i8] c"for\00"
@str.25 = private unnamed_addr constant [7 x i8] c"import\00"
@str.26 = private unnamed_addr constant [4 x i8] c"let\00"
@str.27 = private unnamed_addr constant [7 x i8] c"module\00"
@str.28 = private unnamed_addr constant [5 x i8] c"null\00"
@str.29 = private unnamed_addr constant [8 x i8] c"package\00"
@str.30 = private unnamed_addr constant [7 x i8] c"return\00"
@str.31 = private unnamed_addr constant [6 x i8] c"throw\00"
@str.32 = private unnamed_addr constant [5 x i8] c"true\00"
@str.33 = private unnamed_addr constant [4 x i8] c"try\00"
@str.34 = private unnamed_addr constant [6 x i8] c"using\00"
@str.35 = private unnamed_addr constant [4 x i8] c"var\00"
@str.36 = private unnamed_addr constant [6 x i8] c"while\00"
@str.37 = private unnamed_addr constant [24 x i8] c"Invalid numeric literal\00"
@str.38 = private unnamed_addr constant [27 x i8] c"Invalid character found: '\00"
@str.39 = private unnamed_addr constant [4 x i8] c"' (\00"
@str.40 = private unnamed_addr constant [32 x i8] c"Invalid indentation, expecting \00"
@str.41 = private unnamed_addr constant [7 x i8] c", got \00"
@str.42 = private unnamed_addr constant [2 x i8] c"r\00"
@str.43 = private unnamed_addr constant [12 x i8] c"end-of-file\00"
@str.44 = private unnamed_addr constant [9 x i8] c"new-line\00"
@str.45 = private unnamed_addr constant [9 x i8] c"'module'\00"
@str.46 = private unnamed_addr constant [9 x i8] c"'import'\00"
@str.47 = private unnamed_addr constant [10 x i8] c"'concept'\00"
@str.48 = private unnamed_addr constant [11 x i8] c"'datatype'\00"
@str.49 = private unnamed_addr constant [6 x i8] c"'fun'\00"
@str.50 = private unnamed_addr constant [10 x i8] c"'package'\00"
@str.51 = private unnamed_addr constant [8 x i8] c"'using'\00"
@str.52 = private unnamed_addr constant [6 x i8] c"'let'\00"
@str.53 = private unnamed_addr constant [6 x i8] c"'var'\00"
@str.54 = private unnamed_addr constant [8 x i8] c"'break'\00"
@str.55 = private unnamed_addr constant [8 x i8] c"'catch'\00"
@str.56 = private unnamed_addr constant [11 x i8] c"'continue'\00"
@str.57 = private unnamed_addr constant [10 x i8] c"'finally'\00"
@str.58 = private unnamed_addr constant [6 x i8] c"'for'\00"
@str.59 = private unnamed_addr constant [5 x i8] c"'if'\00"
@str.60 = private unnamed_addr constant [9 x i8] c"'return'\00"
@str.61 = private unnamed_addr constant [8 x i8] c"'throw'\00"
@str.62 = private unnamed_addr constant [6 x i8] c"'try'\00"
@str.63 = private unnamed_addr constant [8 x i8] c"'while'\00"
@str.64 = private unnamed_addr constant [8 x i8] c"'false'\00"
@str.65 = private unnamed_addr constant [7 x i8] c"'null'\00"
@str.66 = private unnamed_addr constant [7 x i8] c"'true'\00"
@str.67 = private unnamed_addr constant [7 x i8] c"'else'\00"
@str.68 = private unnamed_addr constant [16 x i8] c"'{' (or indent)\00"
@str.69 = private unnamed_addr constant [16 x i8] c"'}' (or dedent)\00"
@str.70 = private unnamed_addr constant [4 x i8] c"'['\00"
@str.71 = private unnamed_addr constant [4 x i8] c"']'\00"
@str.72 = private unnamed_addr constant [4 x i8] c"'('\00"
@str.73 = private unnamed_addr constant [4 x i8] c"')'\00"
@str.74 = private unnamed_addr constant [4 x i8] c"':'\00"
@str.75 = private unnamed_addr constant [17 x i8] c"';' (or newline)\00"
@str.76 = private unnamed_addr constant [4 x i8] c"','\00"
@str.77 = private unnamed_addr constant [4 x i8] c"'.'\00"
@str.78 = private unnamed_addr constant [4 x i8] c"'`'\00"
@str.79 = private unnamed_addr constant [4 x i8] c"'='\00"
@str.80 = private unnamed_addr constant [11 x i8] c"identifier\00"
@str.81 = private unnamed_addr constant [9 x i8] c"operator\00"
@str.82 = private unnamed_addr constant [13 x i8] c"char literal\00"
@str.83 = private unnamed_addr constant [15 x i8] c"string literal\00"
@str.84 = private unnamed_addr constant [12 x i8] c"int literal\00"
@str.85 = private unnamed_addr constant [13 x i8] c"long literal\00"
@str.86 = private unnamed_addr constant [13 x i8] c"uint literal\00"
@str.87 = private unnamed_addr constant [14 x i8] c"ulong literal\00"
@str.88 = private unnamed_addr constant [14 x i8] c"float literal\00"
@str.89 = private unnamed_addr constant [15 x i8] c"double literal\00"
@str.90 = private unnamed_addr constant [14 x i8] c"line continue\00"
@str.91 = private unnamed_addr constant [8 x i8] c"comment\00"
@str.92 = private unnamed_addr constant [11 x i8] c"whitespace\00"
@str.93 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.94 = private unnamed_addr constant [13 x i8] c", expecting \00"
@str.95 = private unnamed_addr constant [8 x i8] c"AnyType\00"
@str.96 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.97 = private unnamed_addr constant [28 x i8] c", expecting block statement\00"
@str.98 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.99 = private unnamed_addr constant [23 x i8] c", expecting expression\00"
@str.100 = private unnamed_addr constant [3 x i8] c"()\00"
@str.101 = private unnamed_addr constant [2 x i8] c"=\00"
@str.102 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.103 = private unnamed_addr constant [35 x i8] c", expecting identifier or operator\00"
@str.104 = private unnamed_addr constant [2 x i8] c"=\00"
@str.105 = private unnamed_addr constant [2 x i8] c".\00"
@str.106 = private unnamed_addr constant [3 x i8] c"()\00"
@str.107 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.108 = private unnamed_addr constant [42 x i8] c", expecting expression or block statement\00"
@str.109 = private unnamed_addr constant [26 x i8] c"Syntax error, unexpected \00"
@str.110 = private unnamed_addr constant [22 x i8] c", expecting statement\00"
@llvm.global_ctors = appending global [4 x { i32, void ()* }] [{ i32, void ()* } { i32 0, void ()* @__global_ctor }, { i32, void ()* } { i32 1, void ()* @__global_ctor.1 }, { i32, void ()* } { i32 2, void ()* @__global_ctor.3 }, { i32, void ()* } { i32 3, void ()* @__global_ctor.6 }]
@llvm.global_dtors = appending global [4 x { i32, void ()* }] [{ i32, void ()* } { i32 0, void ()* @__global_dtor }, { i32, void ()* } { i32 1, void ()* @__global_dtor.2 }, { i32, void ()* } { i32 2, void ()* @__global_dtor.4 }, { i32, void ()* } { i32 3, void ()* @__global_dtor.7 }]

; Function Attrs: alwaysinline
define void @_zero_init_1(i1* %"$this") #0 {
  store i1 false, i1* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_8(i8* %"$this") #0 {
  store i8 0, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_16(i16* %"$this") #0 {
  store i16 0, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_32(i32* %"$this") #0 {
  store i32 0, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_64(i64* %"$this") #0 {
  store i64 0, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_f(float* %"$this") #0 {
  store float 0.000000e+00, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_zero_init_d(double* %"$this") #0 {
  store double 0.000000e+00, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_1_1(i1* %"$this", i1 %src) #0 {
  store i1 %src, i1* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_8_8(i8* %"$this", i8 %src) #0 {
  store i8 %src, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_16(i16* %"$this", i16 %src) #0 {
  store i16 %src, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_32(i32* %"$this", i32 %src) #0 {
  store i32 %src, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_64(i64* %"$this", i64 %src) #0 {
  store i64 %src, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_f(float* %"$this", float %src) #0 {
  store float %src, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_d(double* %"$this", double %src) #0 {
  store double %src, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_8_16(i8* %"$this", i16 %src) #0 {
  %1 = trunc i16 %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_8_32(i8* %"$this", i32 %src) #0 {
  %1 = trunc i32 %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_8_64(i8* %"$this", i64 %src) #0 {
  %1 = trunc i64 %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_32(i16* %"$this", i32 %src) #0 {
  %1 = trunc i32 %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_64(i16* %"$this", i64 %src) #0 {
  %1 = trunc i64 %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_64(i32* %"$this", i64 %src) #0 {
  %1 = trunc i64 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_8s(i16* %"$this", i8 %src) #0 {
  %1 = sext i8 %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_16_8z(i16* %"$this", i8 %src) #0 {
  %1 = zext i8 %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_8s(i32* %"$this", i8 %src) #0 {
  %1 = sext i8 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_8z(i32* %"$this", i8 %src) #0 {
  %1 = zext i8 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_16s(i32* %"$this", i16 %src) #0 {
  %1 = sext i16 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_32_16z(i32* %"$this", i16 %src) #0 {
  %1 = zext i16 %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_8s(i64* %"$this", i8 %src) #0 {
  %1 = sext i8 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_8z(i64* %"$this", i8 %src) #0 {
  %1 = zext i8 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_16s(i64* %"$this", i16 %src) #0 {
  %1 = sext i16 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_16z(i64* %"$this", i16 %src) #0 {
  %1 = zext i16 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_32s(i64* %"$this", i32 %src) #0 {
  %1 = sext i32 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_64_32z(i64* %"$this", i32 %src) #0 {
  %1 = zext i32 %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i8_f(i8* %"$this", float %src) #0 {
  %1 = fptosi float %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i8_d(i8* %"$this", double %src) #0 {
  %1 = fptosi double %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u8_f(i8* %"$this", float %src) #0 {
  %1 = fptoui float %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u8_d(i8* %"$this", double %src) #0 {
  %1 = fptoui double %src to i8
  store i8 %1, i8* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i16_f(i16* %"$this", float %src) #0 {
  %1 = fptosi float %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i16_d(i16* %"$this", double %src) #0 {
  %1 = fptosi double %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u16_f(i16* %"$this", float %src) #0 {
  %1 = fptoui float %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u16_d(i16* %"$this", double %src) #0 {
  %1 = fptoui double %src to i16
  store i16 %1, i16* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i32_f(i32* %"$this", float %src) #0 {
  %1 = fptosi float %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i32_d(i32* %"$this", double %src) #0 {
  %1 = fptosi double %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u32_f(i32* %"$this", float %src) #0 {
  %1 = fptoui float %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u32_d(i32* %"$this", double %src) #0 {
  %1 = fptoui double %src to i32
  store i32 %1, i32* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i64_f(i64* %"$this", float %src) #0 {
  %1 = fptosi float %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_i64_d(i64* %"$this", double %src) #0 {
  %1 = fptosi double %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u64_f(i64* %"$this", float %src) #0 {
  %1 = fptoui float %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_u64_d(i64* %"$this", double %src) #0 {
  %1 = fptoui double %src to i64
  store i64 %1, i64* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_i8(float* %"$this", i8 %src) #0 {
  %1 = sitofp i8 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_u8(float* %"$this", i8 %src) #0 {
  %1 = uitofp i8 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_i16(float* %"$this", i16 %src) #0 {
  %1 = sitofp i16 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_u16(float* %"$this", i16 %src) #0 {
  %1 = uitofp i16 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_i32(float* %"$this", i32 %src) #0 {
  %1 = sitofp i32 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_u32(float* %"$this", i32 %src) #0 {
  %1 = uitofp i32 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_i64(float* %"$this", i64 %src) #0 {
  %1 = sitofp i64 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_u64(float* %"$this", i64 %src) #0 {
  %1 = uitofp i64 %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_f_d(float* %"$this", double %src) #0 {
  %1 = fptrunc double %src to float
  store float %1, float* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_i8(double* %"$this", i8 %src) #0 {
  %1 = sitofp i8 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_u8(double* %"$this", i8 %src) #0 {
  %1 = uitofp i8 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_i16(double* %"$this", i16 %src) #0 {
  %1 = sitofp i16 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_u16(double* %"$this", i16 %src) #0 {
  %1 = uitofp i16 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_i32(double* %"$this", i32 %src) #0 {
  %1 = sitofp i32 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_u32(double* %"$this", i32 %src) #0 {
  %1 = uitofp i32 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_i64(double* %"$this", i64 %src) #0 {
  %1 = sitofp i64 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_u64(double* %"$this", i64 %src) #0 {
  %1 = uitofp i64 %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define void @_ass_d_f(double* %"$this", float %src) #0 {
  %1 = fpext float %src to double
  store double %1, double* %"$this"
  ret void
}

; Function Attrs: alwaysinline
define i1 @_Bool_opAssign(i1* %x, i1 %y) #0 {
  store i1 %y, i1* %x
  ret i1 %y
}

; Function Attrs: alwaysinline
define i1 @_Bool_opOr(i1 %x, i1 %y) #0 {
  %1 = or i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opXor(i1 %x, i1 %y) #0 {
  %1 = xor i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opAnd(i1 %x, i1 %y) #0 {
  %1 = and i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opEQ(i1 %x, i1 %y) #0 {
  %1 = icmp eq i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opNE(i1 %x, i1 %y) #0 {
  %1 = icmp ne i1 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Bool_opNeg(i1 %x) #0 {
  %1 = xor i1 %x, true
  ret i1 %1
}

; Function Attrs: alwaysinline
define i8 @_Byte_opAssign(i8* %x, i8 %y) #0 {
  store i8 %y, i8* %x
  ret i8 %y
}

; Function Attrs: alwaysinline
define i1 @_Byte_opEQ(i8 %x, i8 %y) #0 {
  %1 = icmp eq i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Byte_opNE(i8 %x, i8 %y) #0 {
  %1 = icmp ne i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Byte_opLT(i8 %x, i8 %y) #0 {
  %1 = icmp slt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Byte_opGT(i8 %x, i8 %y) #0 {
  %1 = icmp sgt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Byte_opLE(i8 %x, i8 %y) #0 {
  %1 = icmp sle i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Byte_opGE(i8 %x, i8 %y) #0 {
  %1 = icmp sge i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i8 @_Byte_opPlus(i8 %x, i8 %y) #0 {
  %1 = add i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Byte_opMinus(i8 %x, i8 %y) #0 {
  %1 = sub i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Byte_opMul(i8 %x, i8 %y) #0 {
  %1 = mul i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Byte_opDiv(i8 %x, i8 %y) #0 {
  %1 = sdiv i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Byte_opMod(i8 %x, i8 %y) #0 {
  %1 = srem i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_Byte_opPlus1(i8 %x) #0 {
  ret i8 %x
}

; Function Attrs: alwaysinline
define i8 @_Byte_opMinus1(i8 %x) #0 {
  %1 = sub i8 0, %x
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UByte_opAssign(i8* %x, i8 %y) #0 {
  store i8 %y, i8* %x
  ret i8 %y
}

; Function Attrs: alwaysinline
define i1 @_UByte_opEQ(i8 %x, i8 %y) #0 {
  %1 = icmp eq i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UByte_opNE(i8 %x, i8 %y) #0 {
  %1 = icmp ne i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UByte_opLT(i8 %x, i8 %y) #0 {
  %1 = icmp ult i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UByte_opGT(i8 %x, i8 %y) #0 {
  %1 = icmp ugt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UByte_opLE(i8 %x, i8 %y) #0 {
  %1 = icmp ule i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UByte_opGE(i8 %x, i8 %y) #0 {
  %1 = icmp uge i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i8 @_UByte_opPlus(i8 %x, i8 %y) #0 {
  %1 = add i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UByte_opMinus(i8 %x, i8 %y) #0 {
  %1 = sub i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UByte_opMul(i8 %x, i8 %y) #0 {
  %1 = mul i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UByte_opDiv(i8 %x, i8 %y) #0 {
  %1 = udiv i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UByte_opMod(i8 %x, i8 %y) #0 {
  %1 = urem i8 %x, %y
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_UByte_opPlus1(i8 %x) #0 {
  ret i8 %x
}

; Function Attrs: alwaysinline
define i16 @_Short_opAssign(i16* %x, i16 %y) #0 {
  store i16 %y, i16* %x
  ret i16 %y
}

; Function Attrs: alwaysinline
define i1 @_Short_opEQ(i16 %x, i16 %y) #0 {
  %1 = icmp eq i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Short_opNE(i16 %x, i16 %y) #0 {
  %1 = icmp ne i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Short_opLT(i16 %x, i16 %y) #0 {
  %1 = icmp slt i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Short_opGT(i16 %x, i16 %y) #0 {
  %1 = icmp sgt i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Short_opLE(i16 %x, i16 %y) #0 {
  %1 = icmp sle i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Short_opGE(i16 %x, i16 %y) #0 {
  %1 = icmp sge i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i16 @_Short_opPlus(i16 %x, i16 %y) #0 {
  %1 = add i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Short_opMinus(i16 %x, i16 %y) #0 {
  %1 = sub i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Short_opMul(i16 %x, i16 %y) #0 {
  %1 = mul i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Short_opDiv(i16 %x, i16 %y) #0 {
  %1 = sdiv i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Short_opMod(i16 %x, i16 %y) #0 {
  %1 = srem i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_Short_opPlus1(i16 %x) #0 {
  ret i16 %x
}

; Function Attrs: alwaysinline
define i16 @_Short_opMinus1(i16 %x) #0 {
  %1 = sub i16 0, %x
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UShort_opAssign(i16* %x, i16 %y) #0 {
  store i16 %y, i16* %x
  ret i16 %y
}

; Function Attrs: alwaysinline
define i1 @_UShort_opEQ(i16 %x, i16 %y) #0 {
  %1 = icmp eq i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UShort_opNE(i16 %x, i16 %y) #0 {
  %1 = icmp ne i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UShort_opLT(i16 %x, i16 %y) #0 {
  %1 = icmp ult i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UShort_opGT(i16 %x, i16 %y) #0 {
  %1 = icmp ugt i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UShort_opLE(i16 %x, i16 %y) #0 {
  %1 = icmp ule i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UShort_opGE(i16 %x, i16 %y) #0 {
  %1 = icmp uge i16 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i16 @_UShort_opPlus(i16 %x, i16 %y) #0 {
  %1 = add i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UShort_opMinus(i16 %x, i16 %y) #0 {
  %1 = sub i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UShort_opMul(i16 %x, i16 %y) #0 {
  %1 = mul i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UShort_opDiv(i16 %x, i16 %y) #0 {
  %1 = udiv i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UShort_opMod(i16 %x, i16 %y) #0 {
  %1 = urem i16 %x, %y
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_UShort_opPlus1(i16 %x) #0 {
  ret i16 %x
}

; Function Attrs: alwaysinline
define i32 @_Int_opAssign(i32* %x, i32 %y) #0 {
  store i32 %y, i32* %x
  ret i32 %y
}

; Function Attrs: alwaysinline
define i1 @_Int_opEQ(i32 %x, i32 %y) #0 {
  %1 = icmp eq i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int_opNE(i32 %x, i32 %y) #0 {
  %1 = icmp ne i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int_opLT(i32 %x, i32 %y) #0 {
  %1 = icmp slt i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int_opGT(i32 %x, i32 %y) #0 {
  %1 = icmp sgt i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int_opLE(i32 %x, i32 %y) #0 {
  %1 = icmp sle i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Int_opGE(i32 %x, i32 %y) #0 {
  %1 = icmp sge i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i32 @_Int_opPlus(i32 %x, i32 %y) #0 {
  %1 = add i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int_opMinus(i32 %x, i32 %y) #0 {
  %1 = sub i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int_opMul(i32 %x, i32 %y) #0 {
  %1 = mul i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int_opDiv(i32 %x, i32 %y) #0 {
  %1 = sdiv i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int_opMod(i32 %x, i32 %y) #0 {
  %1 = srem i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_Int_opPlus1(i32 %x) #0 {
  ret i32 %x
}

; Function Attrs: alwaysinline
define i32 @_Int_opMinus1(i32 %x) #0 {
  %1 = sub i32 0, %x
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt_opAssign(i32* %x, i32 %y) #0 {
  store i32 %y, i32* %x
  ret i32 %y
}

; Function Attrs: alwaysinline
define i1 @_UInt_opEQ(i32 %x, i32 %y) #0 {
  %1 = icmp eq i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt_opNE(i32 %x, i32 %y) #0 {
  %1 = icmp ne i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt_opLT(i32 %x, i32 %y) #0 {
  %1 = icmp ult i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt_opGT(i32 %x, i32 %y) #0 {
  %1 = icmp ugt i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt_opLE(i32 %x, i32 %y) #0 {
  %1 = icmp ule i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_UInt_opGE(i32 %x, i32 %y) #0 {
  %1 = icmp uge i32 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt_opPlus(i32 %x, i32 %y) #0 {
  %1 = add i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt_opMinus(i32 %x, i32 %y) #0 {
  %1 = sub i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt_opMul(i32 %x, i32 %y) #0 {
  %1 = mul i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt_opDiv(i32 %x, i32 %y) #0 {
  %1 = udiv i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt_opMod(i32 %x, i32 %y) #0 {
  %1 = urem i32 %x, %y
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_UInt_opPlus1(i32 %x) #0 {
  ret i32 %x
}

; Function Attrs: alwaysinline
define i64 @_Long_opAssign(i64* %x, i64 %y) #0 {
  store i64 %y, i64* %x
  ret i64 %y
}

; Function Attrs: alwaysinline
define i1 @_Long_opEQ(i64 %x, i64 %y) #0 {
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Long_opNE(i64 %x, i64 %y) #0 {
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Long_opLT(i64 %x, i64 %y) #0 {
  %1 = icmp slt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Long_opGT(i64 %x, i64 %y) #0 {
  %1 = icmp sgt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Long_opLE(i64 %x, i64 %y) #0 {
  %1 = icmp sle i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Long_opGE(i64 %x, i64 %y) #0 {
  %1 = icmp sge i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_Long_opPlus(i64 %x, i64 %y) #0 {
  %1 = add i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Long_opMinus(i64 %x, i64 %y) #0 {
  %1 = sub i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Long_opMul(i64 %x, i64 %y) #0 {
  %1 = mul i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Long_opDiv(i64 %x, i64 %y) #0 {
  %1 = sdiv i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Long_opMod(i64 %x, i64 %y) #0 {
  %1 = srem i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_Long_opPlus1(i64 %x) #0 {
  ret i64 %x
}

; Function Attrs: alwaysinline
define i64 @_Long_opMinus1(i64 %x) #0 {
  %1 = sub i64 0, %x
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_ULong_opAssign(i64* %x, i64 %y) #0 {
  store i64 %y, i64* %x
  ret i64 %y
}

; Function Attrs: alwaysinline
define i1 @_ULong_opEQ(i64 %x, i64 %y) #0 {
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_ULong_opNE(i64 %x, i64 %y) #0 {
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_ULong_opLT(i64 %x, i64 %y) #0 {
  %1 = icmp ult i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_ULong_opGT(i64 %x, i64 %y) #0 {
  %1 = icmp ugt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_ULong_opLE(i64 %x, i64 %y) #0 {
  %1 = icmp ule i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_ULong_opGE(i64 %x, i64 %y) #0 {
  %1 = icmp uge i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_ULong_opPlus(i64 %x, i64 %y) #0 {
  %1 = add i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_ULong_opMinus(i64 %x, i64 %y) #0 {
  %1 = sub i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_ULong_opMul(i64 %x, i64 %y) #0 {
  %1 = mul i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_ULong_opDiv(i64 %x, i64 %y) #0 {
  %1 = udiv i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_ULong_opMod(i64 %x, i64 %y) #0 {
  %1 = urem i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_ULong_opPlus1(i64 %x) #0 {
  ret i64 %x
}

; Function Attrs: alwaysinline
define float @_Float_opAssign(float* %x, float %y) #0 {
  store float %y, float* %x
  ret float %y
}

; Function Attrs: alwaysinline
define i1 @_Float_opEQ(float %x, float %y) #0 {
  %1 = fcmp ueq float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float_opNE(float %x, float %y) #0 {
  %1 = fcmp une float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float_opLT(float %x, float %y) #0 {
  %1 = fcmp ult float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float_opGT(float %x, float %y) #0 {
  %1 = fcmp ugt float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float_opLE(float %x, float %y) #0 {
  %1 = fcmp ule float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Float_opGE(float %x, float %y) #0 {
  %1 = fcmp uge float %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define float @_Float_opPlus(float %x, float %y) #0 {
  %1 = fadd float %x, %y
  ret float %1
}

; Function Attrs: alwaysinline
define float @_Float_opMinus(float %x, float %y) #0 {
  %1 = fsub float %x, %y
  ret float %1
}

; Function Attrs: alwaysinline
define float @_Float_opMul(float %x, float %y) #0 {
  %1 = fmul float %x, %y
  ret float %1
}

; Function Attrs: alwaysinline
define float @_Float_opDiv(float %x, float %y) #0 {
  %1 = fdiv float %x, %y
  ret float %1
}

; Function Attrs: alwaysinline
define float @_Float_opPlus1(float %x) #0 {
  ret float %x
}

; Function Attrs: alwaysinline
define float @_Float_opMinus1(float %x) #0 {
  %1 = fsub float 0.000000e+00, %x
  ret float %1
}

; Function Attrs: alwaysinline
define double @_Double_opAssign(double* %x, double %y) #0 {
  store double %y, double* %x
  ret double %y
}

; Function Attrs: alwaysinline
define i1 @_Double_opEQ(double %x, double %y) #0 {
  %1 = fcmp ueq double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Double_opNE(double %x, double %y) #0 {
  %1 = fcmp une double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Double_opLT(double %x, double %y) #0 {
  %1 = fcmp ult double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Double_opGT(double %x, double %y) #0 {
  %1 = fcmp ugt double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Double_opLE(double %x, double %y) #0 {
  %1 = fcmp ule double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Double_opGE(double %x, double %y) #0 {
  %1 = fcmp uge double %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define double @_Double_opPlus(double %x, double %y) #0 {
  %1 = fadd double %x, %y
  ret double %1
}

; Function Attrs: alwaysinline
define double @_Double_opMinus(double %x, double %y) #0 {
  %1 = fsub double %x, %y
  ret double %1
}

; Function Attrs: alwaysinline
define double @_Double_opMul(double %x, double %y) #0 {
  %1 = fmul double %x, %y
  ret double %1
}

; Function Attrs: alwaysinline
define double @_Double_opDiv(double %x, double %y) #0 {
  %1 = fdiv double %x, %y
  ret double %1
}

; Function Attrs: alwaysinline
define double @_Double_opPlus1(double %x) #0 {
  ret double %x
}

; Function Attrs: alwaysinline
define double @_Double_opMinus1(double %x) #0 {
  %1 = fsub double 0.000000e+00, %x
  ret double %1
}

; Function Attrs: alwaysinline
define i8 @_Char_opAssign(i8* %x, i8 %y) #0 {
  store i8 %y, i8* %x
  ret i8 %y
}

; Function Attrs: alwaysinline
define i1 @_Char_opEQ(i8 %x, i8 %y) #0 {
  %1 = icmp eq i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opNE(i8 %x, i8 %y) #0 {
  %1 = icmp ne i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opLT(i8 %x, i8 %y) #0 {
  %1 = icmp slt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opGT(i8 %x, i8 %y) #0 {
  %1 = icmp sgt i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opLE(i8 %x, i8 %y) #0 {
  %1 = icmp sle i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_Char_opGE(i8 %x, i8 %y) #0 {
  %1 = icmp sge i8 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opAssign(i64* %x, i64 %y) #0 {
  store i64 %y, i64* %x
  ret i64 %y
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opEQ(i64 %x, i64 %y) #0 {
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opNE(i64 %x, i64 %y) #0 {
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opLT(i64 %x, i64 %y) #0 {
  %1 = icmp ult i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opGT(i64 %x, i64 %y) #0 {
  %1 = icmp ugt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opLE(i64 %x, i64 %y) #0 {
  %1 = icmp ule i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_SizeType_opGE(i64 %x, i64 %y) #0 {
  %1 = icmp uge i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opPlus(i64 %x, i64 %y) #0 {
  %1 = add i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opPlusInt(i64 %x, i32 %y) #0 {
  %1 = sext i32 %y to i64
  %2 = add i64 %x, %1
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opPlusInt1(i32 %x, i64 %y) #0 {
  %1 = sext i32 %x to i64
  %2 = add i64 %1, %y
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMinus(i64 %x, i64 %y) #0 {
  %1 = sub i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMinusInt(i64 %x, i32 %y) #0 {
  %1 = sext i32 %y to i64
  %2 = sub i64 %x, %1
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMinusInt1(i32 %x, i64 %y) #0 {
  %1 = sext i32 %x to i64
  %2 = sub i64 %1, %y
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMul(i64 %x, i64 %y) #0 {
  %1 = mul i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opDiv(i64 %x, i64 %y) #0 {
  %1 = udiv i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opMod(i64 %x, i64 %y) #0 {
  %1 = urem i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_SizeType_opPlus1(i64 %x) #0 {
  ret i64 %x
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opAssign(i64* %x, i64 %y) #0 {
  store i64 %y, i64* %x
  ret i64 %y
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opEQ(i64 %x, i64 %y) #0 {
  %1 = icmp eq i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opNE(i64 %x, i64 %y) #0 {
  %1 = icmp ne i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opLT(i64 %x, i64 %y) #0 {
  %1 = icmp slt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opGT(i64 %x, i64 %y) #0 {
  %1 = icmp sgt i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opLE(i64 %x, i64 %y) #0 {
  %1 = icmp sle i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @_DiffType_opGE(i64 %x, i64 %y) #0 {
  %1 = icmp sge i64 %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opPlus(i64 %x, i64 %y) #0 {
  %1 = add i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opPlusInt(i64 %x, i32 %y) #0 {
  %1 = sext i32 %y to i64
  %2 = add i64 %x, %1
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opPlusInt1(i32 %x, i64 %y) #0 {
  %1 = sext i32 %x to i64
  %2 = add i64 %1, %y
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMinus(i64 %x, i64 %y) #0 {
  %1 = sub i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMinusInt(i64 %x, i32 %y) #0 {
  %1 = sext i32 %y to i64
  %2 = sub i64 %x, %1
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMinusInt1(i32 %x, i64 %y) #0 {
  %1 = sext i32 %x to i64
  %2 = sub i64 %1, %y
  ret i64 %2
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMul(i64 %x, i64 %y) #0 {
  %1 = mul i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opDiv(i64 %x, i64 %y) #0 {
  %1 = sdiv i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMod(i64 %x, i64 %y) #0 {
  %1 = srem i64 %x, %y
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opPlus1(i64 %x) #0 {
  ret i64 %x
}

; Function Attrs: alwaysinline
define i64 @_DiffType_opMinus1(i64 %x) #0 {
  %1 = sub i64 0, %x
  ret i64 %1
}

; Function Attrs: alwaysinline
define i1 @isNullRef(i8* %x) #0 {
  %1 = icmp eq i8* %x, null
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @implOpRefEQ(i8* %x, i8* %y) #0 {
  %1 = icmp eq i8* %x, %y
  ret i1 %1
}

; Function Attrs: alwaysinline
define i1 @implOpRefNE(i8* %x, i8* %y) #0 {
  %1 = icmp ne i8* %x, %y
  ret i1 %1
}

define void @_Type_ctor(i8** %"$this") {
  store i8* null, i8** %"$this"
  ret void
}

define void @_Type_copy_ctor(i8** %"$this", i8* %other) {
  store i8* %other, i8** %"$this"
  ret void
}

; Function Attrs: alwaysinline
define i8* @ptrAdd(i8* %p, i64 %n) #0 {
  %1 = getelementptr i8, i8* %p, i64 %n
  ret i8* %1
}

; Function Attrs: alwaysinline
define i8* @ptrSub(i8* %p, i64 %n) #0 {
  %1 = sub i64 0, %n
  %2 = getelementptr i8, i8* %p, i64 %1
  ret i8* %2
}

; Function Attrs: alwaysinline
define i64 @ptrDiff(i8* %p1, i8* %p2) #0 {
  %1 = ptrtoint i8* %p1 to i64
  %2 = ptrtoint i8* %p2 to i64
  %3 = sub i64 %1, %2
  ret i64 %3
}

; Function Attrs: alwaysinline
define void @_spr_memcpy(i8* %dest, i8* %src, i64 %size) #0 {
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %dest, i8* %src, i64 %size, i32 1, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: alwaysinline
define void @_spr_memmove(i8* %dest, i8* %src, i64 %size) #0 {
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %dest, i8* %src, i64 %size, i32 1, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: alwaysinline
define void @_spr_memset(i8* %dest, i8 %value, i64 %size) #0 {
  call void @llvm.memset.p0i8.i64(i8* %dest, i8 %value, i64 %size, i32 1, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: alwaysinline
define void @flushOutput() #0 {
  %1 = call i32 @fflush(%struct._IO_FILE* null)
  ret void
}

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: alwaysinline
define void @writeByte(i8 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt, i32 0, i32 0), i8 %val)
  ret void
}

declare i32 @printf(i8*, ...)

; Function Attrs: alwaysinline
define void @writeShort(i16 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt, i32 0, i32 0), i16 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeInt(i32 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt, i32 0, i32 0), i32 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeUInt(i32 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtUInt, i32 0, i32 0), i32 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeLong(i64 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.fmtLong, i32 0, i32 0), i64 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeULong(i64 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.fmtULong, i32 0, i32 0), i64 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeDouble(double %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtDouble, i32 0, i32 0), double %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writeChar(i8 %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtChar, i32 0, i32 0), i8 %val)
  ret void
}

; Function Attrs: alwaysinline
define void @writePointer(i8* %val) #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtPointer, i32 0, i32 0), i8* %val)
  ret void
}

; Function Attrs: alwaysinline
define void @_Int_to_CString(i32 %val, i8* %buffer) #0 {
  %1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buffer, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt, i32 0, i32 0), i32 %val) #2
  ret void
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: alwaysinline
define void @_ULong_to_CString(i64 %val, i8* %buffer) #0 {
  %1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buffer, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.fmtULong, i32 0, i32 0), i64 %val) #2
  ret void
}

; Function Attrs: alwaysinline
define i8 @_bit_neg_8(i8 %n) #0 {
  %1 = xor i8 %n, 0
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_shl_8(i8 %n, i8 %k) #0 {
  %1 = shl i8 %n, %k
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_lshr_8(i8 %n, i8 %k) #0 {
  %1 = lshr i8 %n, %k
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_ashr_8(i8 %n, i8 %k) #0 {
  %1 = ashr i8 %n, %k
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_xor_8(i8 %n1, i8 %n2) #0 {
  %1 = xor i8 %n1, %n2
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_or_8(i8 %n1, i8 %n2) #0 {
  %1 = or i8 %n1, %n2
  ret i8 %1
}

; Function Attrs: alwaysinline
define i8 @_bit_and_8(i8 %n1, i8 %n2) #0 {
  %1 = and i8 %n1, %n2
  ret i8 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_neg_16(i16 %n) #0 {
  %1 = xor i16 %n, 0
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_shl_16(i16 %n, i16 %k) #0 {
  %1 = shl i16 %n, %k
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_lshr_16(i16 %n, i16 %k) #0 {
  %1 = lshr i16 %n, %k
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_ashr_16(i16 %n, i16 %k) #0 {
  %1 = ashr i16 %n, %k
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_xor_16(i16 %n1, i16 %n2) #0 {
  %1 = xor i16 %n1, %n2
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_or_16(i16 %n1, i16 %n2) #0 {
  %1 = or i16 %n1, %n2
  ret i16 %1
}

; Function Attrs: alwaysinline
define i16 @_bit_and_16(i16 %n1, i16 %n2) #0 {
  %1 = and i16 %n1, %n2
  ret i16 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_neg_32(i32 %n) #0 {
  %1 = xor i32 %n, 0
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_shl_32(i32 %n, i32 %k) #0 {
  %1 = shl i32 %n, %k
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_lshr_32(i32 %n, i32 %k) #0 {
  %1 = lshr i32 %n, %k
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_ashr_32(i32 %n, i32 %k) #0 {
  %1 = ashr i32 %n, %k
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_xor_32(i32 %n1, i32 %n2) #0 {
  %1 = xor i32 %n1, %n2
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_or_32(i32 %n1, i32 %n2) #0 {
  %1 = or i32 %n1, %n2
  ret i32 %1
}

; Function Attrs: alwaysinline
define i32 @_bit_and_32(i32 %n1, i32 %n2) #0 {
  %1 = and i32 %n1, %n2
  ret i32 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_neg_64(i64 %n) #0 {
  %1 = xor i64 %n, 0
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_shl_64(i64 %n, i64 %k) #0 {
  %1 = shl i64 %n, %k
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_lshr_64(i64 %n, i64 %k) #0 {
  %1 = lshr i64 %n, %k
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_ashr_64(i64 %n, i64 %k) #0 {
  %1 = ashr i64 %n, %k
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_xor_64(i64 %n1, i64 %n2) #0 {
  %1 = xor i64 %n1, %n2
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_or_64(i64 %n1, i64 %n2) #0 {
  %1 = or i64 %n1, %n2
  ret i64 %1
}

; Function Attrs: alwaysinline
define i64 @_bit_and_64(i64 %n1, i64 %n2) #0 {
  %1 = and i64 %n1, %n2
  ret i64 %1
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor(%Uninitialized %this) #3 {
  %this.addr = alloca %Uninitialized
  store %Uninitialized %this, %Uninitialized* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.0(%Uninitialized %this, %Uninitialized %other) #3 {
  %this.addr = alloca %Uninitialized
  store %Uninitialized %this, %Uninitialized* %this.addr
  %other.addr = alloca %Uninitialized
  store %Uninitialized %other, %Uninitialized* %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor(%Uninitialized %this) #3 {
  %this.addr = alloca %Uninitialized
  store %Uninitialized %this, %Uninitialized* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.1(%Null %this) #3 {
  %this.addr = alloca %Null
  store %Null %this, %Null* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.2(%Null %this, %Null %other) #3 {
  %this.addr = alloca %Null
  store %Null %this, %Null* %this.addr
  %other.addr = alloca %Null
  store %Null %other, %Null* %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.3(%Null %this) #3 {
  %this.addr = alloca %Null
  store %Null %this, %Null* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.4(i1* %this) #3 {
  %this.addr = alloca i1*
  store i1* %this, i1** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.5(i8 %this) #3 {
  %this.addr = alloca i8
  store i8 %this, i8* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.6(i8 %this) #3 {
  %this.addr = alloca i8
  store i8 %this, i8* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.7(i16 %this) #3 {
  %this.addr = alloca i16
  store i16 %this, i16* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.8(i16 %this) #3 {
  %this.addr = alloca i16
  store i16 %this, i16* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.9(i32 %this) #3 {
  %this.addr = alloca i32
  store i32 %this, i32* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.10(i32 %this) #3 {
  %this.addr = alloca i32
  store i32 %this, i32* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.11(i64 %this) #3 {
  %this.addr = alloca i64
  store i64 %this, i64* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.12(i64* %this) #3 {
  %this.addr = alloca i64*
  store i64* %this, i64** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.13(i64 %this) #3 {
  %this.addr = alloca i64
  store i64 %this, i64* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.14(i64 %this) #3 {
  %this.addr = alloca i64
  store i64 %this, i64* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.15(float %this) #3 {
  %this.addr = alloca float
  store float %this, float* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.16(double %this) #3 {
  %this.addr = alloca double
  store double %this, double* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.17(i8 %this) #3 {
  %this.addr = alloca i8
  store i8 %this, i8* %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

declare i1 @"$logicalOr"(i1, i1)

declare i1 @"$logicalAnd"(i1, i1)

declare float @_Float_opMod(float, float)

declare double @_Double_opMod(double, double)

; Function Attrs: alwaysinline nounwind
define internal i8 @"pre_++"(i8* %n) #3 {
  %n.addr = alloca i8*
  store i8* %n, i8** %n.addr
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %n.addr
  %2 = load i8, i8* %1
  store i8 1, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  %4 = add i8 %2, %3
  %5 = load i8*, i8** %n.addr
  store i8 %4, i8* %5
  %6 = load i8*, i8** %n.addr
  %7 = load i8, i8* %6
  ret i8 %7
}

; Function Attrs: alwaysinline nounwind
define internal i8 @"pre_++.18"(i8* %n) #3 {
  %n.addr = alloca i8*
  store i8* %n, i8** %n.addr
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %n.addr
  %2 = load i8, i8* %1
  store i8 1, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  %4 = add i8 %2, %3
  %5 = load i8*, i8** %n.addr
  store i8 %4, i8* %5
  %6 = load i8*, i8** %n.addr
  %7 = load i8, i8* %6
  ret i8 %7
}

; Function Attrs: alwaysinline nounwind
define internal i16 @"pre_++.19"(i16* %n) #3 {
  %n.addr = alloca i16*
  store i16* %n, i16** %n.addr
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16*, i16** %n.addr
  %2 = load i16, i16* %1
  store i16 1, i16* %tmp.this
  %3 = load i16, i16* %tmp.this
  %4 = add i16 %2, %3
  %5 = load i16*, i16** %n.addr
  store i16 %4, i16* %5
  %6 = load i16*, i16** %n.addr
  %7 = load i16, i16* %6
  ret i16 %7
}

; Function Attrs: alwaysinline nounwind
define internal i16 @"pre_++.20"(i16* %n) #3 {
  %n.addr = alloca i16*
  store i16* %n, i16** %n.addr
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16*, i16** %n.addr
  %2 = load i16, i16* %1
  store i16 1, i16* %tmp.this
  %3 = load i16, i16* %tmp.this
  %4 = add i16 %2, %3
  %5 = load i16*, i16** %n.addr
  store i16 %4, i16* %5
  %6 = load i16*, i16** %n.addr
  %7 = load i16, i16* %6
  ret i16 %7
}

; Function Attrs: alwaysinline nounwind
define internal i32 @"pre_++.21"(i32* %n) #3 {
  %n.addr = alloca i32*
  store i32* %n, i32** %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %n.addr
  %2 = load i32, i32* %1
  %3 = add i32 %2, 1
  %4 = load i32*, i32** %n.addr
  store i32 %3, i32* %4
  %5 = load i32*, i32** %n.addr
  %6 = load i32, i32* %5
  ret i32 %6
}

; Function Attrs: alwaysinline nounwind
define internal i32 @"pre_++.22"(i32* %n) #3 {
  %n.addr = alloca i32*
  store i32* %n, i32** %n.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %n.addr
  %2 = load i32, i32* %1
  store i32 1, i32* %tmp.this
  %3 = load i32, i32* %tmp.this
  %4 = add i32 %2, %3
  %5 = load i32*, i32** %n.addr
  store i32 %4, i32* %5
  %6 = load i32*, i32** %n.addr
  %7 = load i32, i32* %6
  ret i32 %7
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"pre_++.23"(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = add i64 %2, %3
  %5 = load i64*, i64** %n.addr
  store i64 %4, i64* %5
  %6 = load i64*, i64** %n.addr
  %7 = load i64, i64* %6
  ret i64 %7
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"pre_++.24"(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = add i64 %2, %3
  %5 = load i64*, i64** %n.addr
  store i64 %4, i64* %5
  %6 = load i64*, i64** %n.addr
  %7 = load i64, i64* %6
  ret i64 %7
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"pre_++.25"(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = add i64 %2, %3
  %5 = load i64*, i64** %n.addr
  store i64 %4, i64* %5
  %6 = load i64*, i64** %n.addr
  %7 = load i64, i64* %6
  ret i64 %7
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"pre_++.26"(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = add i64 %2, %3
  %5 = load i64*, i64** %n.addr
  store i64 %4, i64* %5
  %6 = load i64*, i64** %n.addr
  %7 = load i64, i64* %6
  ret i64 %7
}

; Function Attrs: alwaysinline nounwind
define internal i8 @pre_--(i8* %n) #3 {
  %n.addr = alloca i8*
  store i8* %n, i8** %n.addr
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %n.addr
  %2 = load i8, i8* %1
  store i8 1, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  %4 = sub i8 %2, %3
  %5 = load i8*, i8** %n.addr
  store i8 %4, i8* %5
  %6 = load i8*, i8** %n.addr
  %7 = load i8, i8* %6
  ret i8 %7
}

; Function Attrs: alwaysinline nounwind
define internal i8 @pre_--.27(i8* %n) #3 {
  %n.addr = alloca i8*
  store i8* %n, i8** %n.addr
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %n.addr
  %2 = load i8, i8* %1
  store i8 1, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  %4 = sub i8 %2, %3
  %5 = load i8*, i8** %n.addr
  store i8 %4, i8* %5
  %6 = load i8*, i8** %n.addr
  %7 = load i8, i8* %6
  ret i8 %7
}

; Function Attrs: alwaysinline nounwind
define internal i16 @pre_--.28(i16* %n) #3 {
  %n.addr = alloca i16*
  store i16* %n, i16** %n.addr
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16*, i16** %n.addr
  %2 = load i16, i16* %1
  store i16 1, i16* %tmp.this
  %3 = load i16, i16* %tmp.this
  %4 = sub i16 %2, %3
  %5 = load i16*, i16** %n.addr
  store i16 %4, i16* %5
  %6 = load i16*, i16** %n.addr
  %7 = load i16, i16* %6
  ret i16 %7
}

; Function Attrs: alwaysinline nounwind
define internal i16 @pre_--.29(i16* %n) #3 {
  %n.addr = alloca i16*
  store i16* %n, i16** %n.addr
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16*, i16** %n.addr
  %2 = load i16, i16* %1
  store i16 1, i16* %tmp.this
  %3 = load i16, i16* %tmp.this
  %4 = sub i16 %2, %3
  %5 = load i16*, i16** %n.addr
  store i16 %4, i16* %5
  %6 = load i16*, i16** %n.addr
  %7 = load i16, i16* %6
  ret i16 %7
}

; Function Attrs: alwaysinline nounwind
define internal i32 @pre_--.30(i32* %n) #3 {
  %n.addr = alloca i32*
  store i32* %n, i32** %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %n.addr
  %2 = load i32, i32* %1
  %3 = sub i32 %2, 1
  %4 = load i32*, i32** %n.addr
  store i32 %3, i32* %4
  %5 = load i32*, i32** %n.addr
  %6 = load i32, i32* %5
  ret i32 %6
}

; Function Attrs: alwaysinline nounwind
define internal i32 @pre_--.31(i32* %n) #3 {
  %n.addr = alloca i32*
  store i32* %n, i32** %n.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %n.addr
  %2 = load i32, i32* %1
  store i32 1, i32* %tmp.this
  %3 = load i32, i32* %tmp.this
  %4 = sub i32 %2, %3
  %5 = load i32*, i32** %n.addr
  store i32 %4, i32* %5
  %6 = load i32*, i32** %n.addr
  %7 = load i32, i32* %6
  ret i32 %7
}

; Function Attrs: alwaysinline nounwind
define internal i64 @pre_--.32(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = sub i64 %2, %3
  %5 = load i64*, i64** %n.addr
  store i64 %4, i64* %5
  %6 = load i64*, i64** %n.addr
  %7 = load i64, i64* %6
  ret i64 %7
}

; Function Attrs: alwaysinline nounwind
define internal i64 @pre_--.33(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = sub i64 %2, %3
  %5 = load i64*, i64** %n.addr
  store i64 %4, i64* %5
  %6 = load i64*, i64** %n.addr
  %7 = load i64, i64* %6
  ret i64 %7
}

; Function Attrs: alwaysinline nounwind
define internal i64 @pre_--.34(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = call i64 @_SizeType_opMinus(i64 %2, i64 %3)
  %5 = load i64*, i64** %n.addr
  store i64 %4, i64* %5
  %6 = load i64*, i64** %n.addr
  %7 = load i64, i64* %6
  ret i64 %7
}

; Function Attrs: alwaysinline nounwind
define internal i64 @pre_--.35(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = call i64 @_DiffType_opMinus(i64 %2, i64 %3)
  %5 = load i64*, i64** %n.addr
  store i64 %4, i64* %5
  %6 = load i64*, i64** %n.addr
  %7 = load i64, i64* %6
  ret i64 %7
}

; Function Attrs: alwaysinline nounwind
define internal i8 @"post_++"(i8* %n) #3 {
  %n.addr = alloca i8*
  store i8* %n, i8** %n.addr
  %old = alloca i8
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %n.addr
  %2 = load i8, i8* %1
  store i8 %2, i8* %old
  %3 = load i8*, i8** %n.addr
  %4 = load i8, i8* %3
  store i8 1, i8* %tmp.this
  %5 = load i8, i8* %tmp.this
  %6 = add i8 %4, %5
  %7 = load i8*, i8** %n.addr
  store i8 %6, i8* %7
  %8 = load i8, i8* %old
  ret i8 %8
}

; Function Attrs: alwaysinline nounwind
define internal i8 @"post_++.36"(i8* %n) #3 {
  %n.addr = alloca i8*
  store i8* %n, i8** %n.addr
  %old = alloca i8
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %n.addr
  %2 = load i8, i8* %1
  store i8 %2, i8* %old
  %3 = load i8*, i8** %n.addr
  %4 = load i8, i8* %3
  store i8 1, i8* %tmp.this
  %5 = load i8, i8* %tmp.this
  %6 = add i8 %4, %5
  %7 = load i8*, i8** %n.addr
  store i8 %6, i8* %7
  %8 = load i8, i8* %old
  ret i8 %8
}

; Function Attrs: alwaysinline nounwind
define internal i16 @"post_++.37"(i16* %n) #3 {
  %n.addr = alloca i16*
  store i16* %n, i16** %n.addr
  %old = alloca i16
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16*, i16** %n.addr
  %2 = load i16, i16* %1
  store i16 %2, i16* %old
  %3 = load i16*, i16** %n.addr
  %4 = load i16, i16* %3
  store i16 1, i16* %tmp.this
  %5 = load i16, i16* %tmp.this
  %6 = add i16 %4, %5
  %7 = load i16*, i16** %n.addr
  store i16 %6, i16* %7
  %8 = load i16, i16* %old
  ret i16 %8
}

; Function Attrs: alwaysinline nounwind
define internal i16 @"post_++.38"(i16* %n) #3 {
  %n.addr = alloca i16*
  store i16* %n, i16** %n.addr
  %old = alloca i16
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16*, i16** %n.addr
  %2 = load i16, i16* %1
  store i16 %2, i16* %old
  %3 = load i16*, i16** %n.addr
  %4 = load i16, i16* %3
  store i16 1, i16* %tmp.this
  %5 = load i16, i16* %tmp.this
  %6 = add i16 %4, %5
  %7 = load i16*, i16** %n.addr
  store i16 %6, i16* %7
  %8 = load i16, i16* %old
  ret i16 %8
}

; Function Attrs: alwaysinline nounwind
define internal i32 @"post_++.39"(i32* %n) #3 {
  %n.addr = alloca i32*
  store i32* %n, i32** %n.addr
  %old = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %n.addr
  %2 = load i32, i32* %1
  store i32 %2, i32* %old
  %3 = load i32*, i32** %n.addr
  %4 = load i32, i32* %3
  %5 = add i32 %4, 1
  %6 = load i32*, i32** %n.addr
  store i32 %5, i32* %6
  %7 = load i32, i32* %old
  ret i32 %7
}

; Function Attrs: alwaysinline nounwind
define internal i32 @"post_++.40"(i32* %n) #3 {
  %n.addr = alloca i32*
  store i32* %n, i32** %n.addr
  %old = alloca i32
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %n.addr
  %2 = load i32, i32* %1
  store i32 %2, i32* %old
  %3 = load i32*, i32** %n.addr
  %4 = load i32, i32* %3
  store i32 1, i32* %tmp.this
  %5 = load i32, i32* %tmp.this
  %6 = add i32 %4, %5
  %7 = load i32*, i32** %n.addr
  store i32 %6, i32* %7
  %8 = load i32, i32* %old
  ret i32 %8
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"post_++.41"(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 %2, i64* %old
  %3 = load i64*, i64** %n.addr
  %4 = load i64, i64* %3
  store i64 1, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = add i64 %4, %5
  %7 = load i64*, i64** %n.addr
  store i64 %6, i64* %7
  %8 = load i64, i64* %old
  ret i64 %8
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"post_++.42"(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 %2, i64* %old
  %3 = load i64*, i64** %n.addr
  %4 = load i64, i64* %3
  store i64 1, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = add i64 %4, %5
  %7 = load i64*, i64** %n.addr
  store i64 %6, i64* %7
  %8 = load i64, i64* %old
  ret i64 %8
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"post_++.43"(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 %2, i64* %old
  %3 = load i64*, i64** %n.addr
  %4 = load i64, i64* %3
  store i64 1, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = add i64 %4, %5
  %7 = load i64*, i64** %n.addr
  store i64 %6, i64* %7
  %8 = load i64, i64* %old
  ret i64 %8
}

; Function Attrs: alwaysinline nounwind
define internal i64 @"post_++.44"(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 %2, i64* %old
  %3 = load i64*, i64** %n.addr
  %4 = load i64, i64* %3
  store i64 1, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = add i64 %4, %5
  %7 = load i64*, i64** %n.addr
  store i64 %6, i64* %7
  %8 = load i64, i64* %old
  ret i64 %8
}

; Function Attrs: alwaysinline nounwind
define internal i8 @post_--(i8* %n) #3 {
  %n.addr = alloca i8*
  store i8* %n, i8** %n.addr
  %old = alloca i8
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %n.addr
  %2 = load i8, i8* %1
  store i8 %2, i8* %old
  %3 = load i8*, i8** %n.addr
  %4 = load i8, i8* %3
  store i8 1, i8* %tmp.this
  %5 = load i8, i8* %tmp.this
  %6 = sub i8 %4, %5
  %7 = load i8*, i8** %n.addr
  store i8 %6, i8* %7
  %8 = load i8, i8* %old
  ret i8 %8
}

; Function Attrs: alwaysinline nounwind
define internal i8 @post_--.45(i8* %n) #3 {
  %n.addr = alloca i8*
  store i8* %n, i8** %n.addr
  %old = alloca i8
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %n.addr
  %2 = load i8, i8* %1
  store i8 %2, i8* %old
  %3 = load i8*, i8** %n.addr
  %4 = load i8, i8* %3
  store i8 1, i8* %tmp.this
  %5 = load i8, i8* %tmp.this
  %6 = sub i8 %4, %5
  %7 = load i8*, i8** %n.addr
  store i8 %6, i8* %7
  %8 = load i8, i8* %old
  ret i8 %8
}

; Function Attrs: alwaysinline nounwind
define internal i16 @post_--.46(i16* %n) #3 {
  %n.addr = alloca i16*
  store i16* %n, i16** %n.addr
  %old = alloca i16
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16*, i16** %n.addr
  %2 = load i16, i16* %1
  store i16 %2, i16* %old
  %3 = load i16*, i16** %n.addr
  %4 = load i16, i16* %3
  store i16 1, i16* %tmp.this
  %5 = load i16, i16* %tmp.this
  %6 = sub i16 %4, %5
  %7 = load i16*, i16** %n.addr
  store i16 %6, i16* %7
  %8 = load i16, i16* %old
  ret i16 %8
}

; Function Attrs: alwaysinline nounwind
define internal i16 @post_--.47(i16* %n) #3 {
  %n.addr = alloca i16*
  store i16* %n, i16** %n.addr
  %old = alloca i16
  %tmp.this = alloca i16
  br label %code

code:                                             ; preds = %0
  %1 = load i16*, i16** %n.addr
  %2 = load i16, i16* %1
  store i16 %2, i16* %old
  %3 = load i16*, i16** %n.addr
  %4 = load i16, i16* %3
  store i16 1, i16* %tmp.this
  %5 = load i16, i16* %tmp.this
  %6 = sub i16 %4, %5
  %7 = load i16*, i16** %n.addr
  store i16 %6, i16* %7
  %8 = load i16, i16* %old
  ret i16 %8
}

; Function Attrs: alwaysinline nounwind
define internal i32 @post_--.48(i32* %n) #3 {
  %n.addr = alloca i32*
  store i32* %n, i32** %n.addr
  %old = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %n.addr
  %2 = load i32, i32* %1
  store i32 %2, i32* %old
  %3 = load i32*, i32** %n.addr
  %4 = load i32, i32* %3
  %5 = sub i32 %4, 1
  %6 = load i32*, i32** %n.addr
  store i32 %5, i32* %6
  %7 = load i32, i32* %old
  ret i32 %7
}

; Function Attrs: alwaysinline nounwind
define internal i32 @post_--.49(i32* %n) #3 {
  %n.addr = alloca i32*
  store i32* %n, i32** %n.addr
  %old = alloca i32
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %n.addr
  %2 = load i32, i32* %1
  store i32 %2, i32* %old
  %3 = load i32*, i32** %n.addr
  %4 = load i32, i32* %3
  store i32 1, i32* %tmp.this
  %5 = load i32, i32* %tmp.this
  %6 = sub i32 %4, %5
  %7 = load i32*, i32** %n.addr
  store i32 %6, i32* %7
  %8 = load i32, i32* %old
  ret i32 %8
}

; Function Attrs: alwaysinline nounwind
define internal i64 @post_--.50(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 %2, i64* %old
  %3 = load i64*, i64** %n.addr
  %4 = load i64, i64* %3
  store i64 1, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = sub i64 %4, %5
  %7 = load i64*, i64** %n.addr
  store i64 %6, i64* %7
  %8 = load i64, i64* %old
  ret i64 %8
}

; Function Attrs: alwaysinline nounwind
define internal i64 @post_--.51(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 %2, i64* %old
  %3 = load i64*, i64** %n.addr
  %4 = load i64, i64* %3
  store i64 1, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = sub i64 %4, %5
  %7 = load i64*, i64** %n.addr
  store i64 %6, i64* %7
  %8 = load i64, i64* %old
  ret i64 %8
}

; Function Attrs: alwaysinline nounwind
define internal i64 @post_--.52(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 %2, i64* %old
  %3 = load i64*, i64** %n.addr
  %4 = load i64, i64* %3
  store i64 1, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = call i64 @_SizeType_opMinus(i64 %4, i64 %5)
  %7 = load i64*, i64** %n.addr
  store i64 %6, i64* %7
  %8 = load i64, i64* %old
  ret i64 %8
}

; Function Attrs: alwaysinline nounwind
define internal i64 @post_--.53(i64* %n) #3 {
  %n.addr = alloca i64*
  store i64* %n, i64** %n.addr
  %old = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i64*, i64** %n.addr
  %2 = load i64, i64* %1
  store i64 %2, i64* %old
  %3 = load i64*, i64** %n.addr
  %4 = load i64, i64* %3
  store i64 1, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = call i64 @_DiffType_opMinus(i64 %4, i64 %5)
  %7 = load i64*, i64** %n.addr
  store i64 %6, i64* %7
  %8 = load i64, i64* %old
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.54(%StringRef* %this) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = load %StringRef*, %StringRef** %this.addr
  %4 = getelementptr inbounds %StringRef, %StringRef* %3, i32 0, i32 1
  store i8* null, i8** %4
  %5 = load %StringRef*, %StringRef** %this.addr
  %6 = getelementptr inbounds %StringRef, %StringRef* %5, i32 0, i32 0
  store i8* null, i8** %6
  %7 = load %StringRef*, %StringRef** %this.addr
  %8 = getelementptr inbounds %StringRef, %StringRef* %7, i32 0, i32 1
  store i8* null, i8** %8
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.55(%StringRef* %this, i64 %size) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %size.addr = alloca i64
  store i64 %size, i64* %size.addr
  %tmp.this = alloca i64
  %tmp.this1 = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = load %StringRef*, %StringRef** %this.addr
  %4 = getelementptr inbounds %StringRef, %StringRef* %3, i32 0, i32 1
  store i8* null, i8** %4
  %5 = load i64, i64* %size.addr
  store i64 1, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = add i64 %5, %6
  %8 = call i8* @malloc(i64 %7)
  %9 = load %StringRef*, %StringRef** %this.addr
  %10 = getelementptr inbounds %StringRef, %StringRef* %9, i32 0, i32 0
  store i8* %8, i8** %10
  %11 = load %StringRef*, %StringRef** %this.addr
  %12 = getelementptr inbounds %StringRef, %StringRef* %11, i32 0, i32 0
  %13 = load i8*, i8** %12
  %14 = load i64, i64* %size.addr
  %15 = call i8* @ptrAdd(i8* %13, i64 %14)
  %16 = load %StringRef*, %StringRef** %this.addr
  %17 = getelementptr inbounds %StringRef, %StringRef* %16, i32 0, i32 1
  store i8* %15, i8** %17
  store i8 0, i8* %tmp.this1
  %18 = load i8, i8* %tmp.this1
  %19 = load %StringRef*, %StringRef** %this.addr
  %20 = getelementptr inbounds %StringRef, %StringRef* %19, i32 0, i32 1
  %21 = load i8*, i8** %20
  store i8 %18, i8* %21
  ret void
}

declare i8* @malloc(i64)

; Function Attrs: inlinehint nounwind
define internal void @ctor.56(%StringRef* %this, %StringRef %other) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %other.addr = alloca %StringRef
  store %StringRef %other, %StringRef* %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = load %StringRef*, %StringRef** %this.addr
  %4 = getelementptr inbounds %StringRef, %StringRef* %3, i32 0, i32 1
  store i8* null, i8** %4
  %5 = getelementptr inbounds %StringRef, %StringRef* %other.addr, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = load %StringRef*, %StringRef** %this.addr
  %8 = getelementptr inbounds %StringRef, %StringRef* %7, i32 0, i32 0
  store i8* %6, i8** %8
  %9 = getelementptr inbounds %StringRef, %StringRef* %other.addr, i32 0, i32 1
  %10 = load i8*, i8** %9
  %11 = load %StringRef*, %StringRef** %this.addr
  %12 = getelementptr inbounds %StringRef, %StringRef* %11, i32 0, i32 1
  store i8* %10, i8** %12
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.57(%StringRef* %this, i8* %begin, i8* %end) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %begin.addr = alloca i8*
  store i8* %begin, i8** %begin.addr
  %end.addr = alloca i8*
  store i8* %end, i8** %end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = load %StringRef*, %StringRef** %this.addr
  %4 = getelementptr inbounds %StringRef, %StringRef* %3, i32 0, i32 1
  store i8* null, i8** %4
  %5 = load i8*, i8** %begin.addr
  %6 = load %StringRef*, %StringRef** %this.addr
  %7 = getelementptr inbounds %StringRef, %StringRef* %6, i32 0, i32 0
  store i8* %5, i8** %7
  %8 = load i8*, i8** %end.addr
  %9 = load %StringRef*, %StringRef** %this.addr
  %10 = getelementptr inbounds %StringRef, %StringRef* %9, i32 0, i32 1
  store i8* %8, i8** %10
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.58(%StringRef* %this) #3 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty(%StringRef* %this) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 1
  %3 = load i8*, i8** %2
  %4 = load %StringRef*, %StringRef** %this.addr
  %5 = getelementptr inbounds %StringRef, %StringRef* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i64 @ptrDiff(i8* %3, i8* %6)
  store i64 0, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  %9 = icmp eq i64 %7, %8
  %10 = load i64, i64* %tmp.this
  ret i1 %9

dumy_block:                                       ; No predecessors!
  %11 = load i64, i64* %tmp.this
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal i64 @size(%StringRef* %this) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 1
  %3 = load i8*, i8** %2
  %4 = load %StringRef*, %StringRef** %this.addr
  %5 = getelementptr inbounds %StringRef, %StringRef* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i64 @ptrDiff(i8* %3, i8* %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i8* @front(%StringRef* %this) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal i8* @back(%StringRef* %this) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 1
  %3 = load i8*, i8** %2
  store i64 4294967295, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  %5 = call i8* @ptrAdd(i8* %3, i64 %4)
  ret i8* %5
}

; Function Attrs: inlinehint nounwind
define internal i8* @"()"(%StringRef* %this) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal i8* @"().59"(%StringRef* %this, i64 %index) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load i64, i64* %index.addr
  %5 = call i8* @ptrAdd(i8* %3, i64 %4)
  ret i8* %5
}

; Function Attrs: inlinehint nounwind
define internal i8* @at(%StringRef* %this, i64 %index) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load i64, i64* %index.addr
  %5 = call i8* @ptrAdd(i8* %3, i64 %4)
  ret i8* %5
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront(%StringRef* %this) #3 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  store i64 1, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  %5 = call i8* @ptrAdd(i8* %3, i64 %4)
  %6 = load %StringRef*, %StringRef** %this.addr
  %7 = getelementptr inbounds %StringRef, %StringRef* %6, i32 0, i32 0
  store i8* %5, i8** %7
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack(%StringRef* %this) #3 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 1
  %3 = load i8*, i8** %2
  store i64 4294967295, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  %5 = call i8* @ptrAdd(i8* %3, i64 %4)
  %6 = load %StringRef*, %StringRef** %this.addr
  %7 = getelementptr inbounds %StringRef, %StringRef* %6, i32 0, i32 1
  store i8* %5, i8** %7
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.60(%StringRef* %this, i64 %n) #3 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load i64, i64* %n.addr
  %5 = call i8* @ptrAdd(i8* %3, i64 %4)
  %6 = load %StringRef*, %StringRef** %this.addr
  %7 = getelementptr inbounds %StringRef, %StringRef* %6, i32 0, i32 0
  store i8* %5, i8** %7
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.61(%StringRef* %this, i64 %n) #3 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 1
  %3 = load i8*, i8** %2
  %4 = load i64, i64* %n.addr
  store i64 %4, i64* %tmp.this1
  %5 = load i64, i64* %tmp.this1
  %6 = sub i64 0, %5
  store i64 %6, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = call i8* @ptrAdd(i8* %3, i64 %7)
  %9 = load %StringRef*, %StringRef** %this.addr
  %10 = getelementptr inbounds %StringRef, %StringRef* %9, i32 0, i32 1
  store i8* %8, i8** %10
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8* @cStr(%StringRef* %this) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal %StringRef* @"="(%StringRef* %this, %StringRef %src) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %src.addr = alloca %StringRef
  store %StringRef %src, %StringRef* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %src.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = load %StringRef*, %StringRef** %this.addr
  %4 = getelementptr inbounds %StringRef, %StringRef* %3, i32 0, i32 0
  store i8* %2, i8** %4
  %5 = getelementptr inbounds %StringRef, %StringRef* %src.addr, i32 0, i32 1
  %6 = load i8*, i8** %5
  %7 = load %StringRef*, %StringRef** %this.addr
  %8 = getelementptr inbounds %StringRef, %StringRef* %7, i32 0, i32 1
  store i8* %6, i8** %8
  %9 = load %StringRef*, %StringRef** %this.addr
  ret %StringRef* %9
}

; Function Attrs: inlinehint nounwind
define internal i1 @"=="(%StringRef %this, %StringRef %other) #4 {
  %this.addr = alloca %StringRef
  store %StringRef %this, %StringRef* %this.addr
  %other.addr = alloca %StringRef
  store %StringRef %other, %StringRef* %other.addr
  %s = alloca i64
  %i = alloca i64
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = call i64 @size(%StringRef* %this.addr)
  store i64 %1, i64* %s
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load i64, i64* %s
  %3 = call i64 @size(%StringRef* %other.addr)
  %4 = icmp ne i64 %2, %3
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i64 0, i64* %i
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %5 = load i64, i64* %i
  %6 = load i64, i64* %s
  %7 = icmp slt i64 %5, %6
  br i1 %7, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %8 = load i64, i64* %i
  store i64 1, i64* %tmp.this
  %9 = load i64, i64* %tmp.this
  %10 = add i64 %8, %9
  store i64 %10, i64* %i
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %11 = load i64, i64* %i
  %12 = call i8* @at(%StringRef* %this.addr, i64 %11)
  %13 = load i8, i8* %12
  %14 = load i64, i64* %i
  %15 = call i8* @at(%StringRef* %other.addr, i64 %14)
  %16 = load i8, i8* %15
  %17 = icmp ne i8 %13, %16
  br i1 %17, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  br label %while_step

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @_String_fromCString(i8* %s) #4 {
  %s.addr = alloca i8*
  store i8* %s, i8** %s.addr
  %len = alloca i64
  %res = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %s.addr
  %2 = call i64 @cStringLen(i8* %1)
  store i64 %2, i64* %len
  call void @ctor.54(%StringRef* %res)
  %3 = load i8*, i8** %s.addr
  %4 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  store i8* %3, i8** %4
  %5 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = load i64, i64* %len
  %8 = call i8* @ptrAdd(i8* %6, i64 %7)
  %9 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 1
  store i8* %8, i8** %9
  %10 = load %StringRef, %StringRef* %res
  ret %StringRef %10
}

; Function Attrs: inlinehint nounwind
define internal i64 @cStringLen(i8* %s) #4 {
  %s.addr = alloca i8*
  store i8* %s, i8** %s.addr
  %p = alloca i8*
  %len = alloca i64
  %tmp.this = alloca i8
  %tmp.this1 = alloca i64
  %tmp.this2 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %s.addr
  store i8* %1, i8** %p
  store i64 0, i64* %len
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = load i8*, i8** %p
  %3 = load i8, i8* %2
  store i8 0, i8* %tmp.this
  %4 = load i8, i8* %tmp.this
  %5 = icmp ne i8 %3, %4
  br i1 %5, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %6 = load i64, i64* %len
  store i64 1, i64* %tmp.this1
  %7 = load i64, i64* %tmp.this1
  %8 = add i64 %6, %7
  store i64 %8, i64* %len
  br label %while_step

while_step:                                       ; preds = %while_body
  %9 = load i8*, i8** %p
  store i64 1, i64* %tmp.this2
  %10 = load i64, i64* %tmp.this2
  %11 = call i8* @ptrAdd(i8* %9, i64 %10)
  store i8* %11, i8** %p
  br label %while_block

while_end:                                        ; preds = %while_block
  %12 = load i64, i64* %len
  ret i64 %12
}

; Function Attrs: inlinehint nounwind
define internal i8 @char(%StringRef* %this) #4 {
  %this.addr = alloca %StringRef*
  store %StringRef* %this, %StringRef** %this.addr
  %tmp.this = alloca i8
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %StringRef*, %StringRef** %this.addr
  %2 = call i1 @isEmpty(%StringRef* %1)
  br i1 %2, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  store i8 0, i8* %tmp.this
  %3 = load i8, i8* %tmp.this
  ret i8 %3

if_else:                                          ; preds = %if_block
  %4 = load %StringRef*, %StringRef** %this.addr
  store i64 0, i64* %tmp.this1
  %5 = load i64, i64* %tmp.this1
  %6 = call i8* @at(%StringRef* %4, i64 %5)
  %7 = load i8, i8* %6
  ret i8 %7

if_end:                                           ; preds = %dumy_block2, %dumy_block
  unreachable

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block2:                                      ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @"+"(%StringRef %x, %StringRef %y) #4 {
  %x.addr = alloca %StringRef
  store %StringRef %x, %StringRef* %x.addr
  %y.addr = alloca %StringRef
  store %StringRef %y, %StringRef* %y.addr
  %sz1 = alloca i64
  %sz2 = alloca i64
  %res = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = call i64 @size(%StringRef* %x.addr)
  store i64 %1, i64* %sz1
  %2 = call i64 @size(%StringRef* %y.addr)
  store i64 %2, i64* %sz2
  %3 = load i64, i64* %sz1
  %4 = load i64, i64* %sz2
  %5 = add i64 %3, %4
  call void @ctor.55(%StringRef* %res, i64 %5)
  %6 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %7 = load i8*, i8** %6
  %8 = getelementptr inbounds %StringRef, %StringRef* %x.addr, i32 0, i32 0
  %9 = load i8*, i8** %8
  %10 = load i64, i64* %sz1
  call void @_spr_memcpy(i8* %7, i8* %9, i64 %10)
  %11 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %12 = load i8*, i8** %11
  %13 = load i64, i64* %sz1
  %14 = call i8* @ptrAdd(i8* %12, i64 %13)
  %15 = getelementptr inbounds %StringRef, %StringRef* %y.addr, i32 0, i32 0
  %16 = load i8*, i8** %15
  %17 = load i64, i64* %sz2
  call void @_spr_memcpy(i8* %14, i8* %16, i64 %17)
  %18 = load %StringRef, %StringRef* %res
  ret %StringRef %18
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @"+.62"(%StringRef %x, i8 %y) #4 {
  %x.addr = alloca %StringRef
  store %StringRef %x, %StringRef* %x.addr
  %y.addr = alloca i8
  store i8 %y, i8* %y.addr
  %sz1 = alloca i64
  %sz2 = alloca i32
  %res = alloca %StringRef
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = call i64 @size(%StringRef* %x.addr)
  store i64 %1, i64* %sz1
  store i32 1, i32* %sz2
  %2 = load i64, i64* %sz1
  %3 = load i32, i32* %sz2
  %4 = zext i32 %3 to i64
  store i64 %4, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = add i64 %2, %5
  call void @ctor.55(%StringRef* %res, i64 %6)
  %7 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %8 = load i8*, i8** %7
  %9 = getelementptr inbounds %StringRef, %StringRef* %x.addr, i32 0, i32 0
  %10 = load i8*, i8** %9
  %11 = load i64, i64* %sz1
  call void @_spr_memcpy(i8* %8, i8* %10, i64 %11)
  %12 = getelementptr inbounds %StringRef, %StringRef* %res, i32 0, i32 0
  %13 = load i8*, i8** %12
  %14 = load i64, i64* %sz1
  %15 = call i8* @ptrAdd(i8* %13, i64 %14)
  %16 = load i32, i32* %sz2
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %tmp.this1
  %18 = load i64, i64* %tmp.this1
  call void @_spr_memcpy(i8* %15, i8* %y.addr, i64 %18)
  %19 = load %StringRef, %StringRef* %res
  ret %StringRef %19
}

; Function Attrs: nounwind
declare void @cast() #2

; Function Attrs: nounwind
declare void @reinterpretCast() #2

; Function Attrs: nounwind
declare void @construct() #2

declare i8* @calloc(i64, i64)

declare i8* @realloc(i8*, i64)

declare void @free(i8*)

declare i32 @strcmp(i8*, i8*)

declare void @system(i8*)

declare void @sleep(i32)

define internal void @__global_ctor() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.63(%EndLineHelperClass* %this) #3 {
  %this.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %this, %EndLineHelperClass** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

define internal void @__global_dtor() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.64(%EndLineHelperClass* %this) #3 {
  %this.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %this, %EndLineHelperClass** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

define internal void @__global_ctor.1() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.65(%FlushHelperClass* %this) #3 {
  %this.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %this, %FlushHelperClass** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

define internal void @__global_dtor.2() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.66(%FlushHelperClass* %this) #3 {
  %this.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %this, %FlushHelperClass** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.67(%EndLineHelperClass* %this, %EndLineHelperClass* %other) #3 {
  %this.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %this, %EndLineHelperClass** %this.addr
  %other.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %other, %EndLineHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.68"(%EndLineHelperClass* %this, %EndLineHelperClass* %other) #3 {
  %this.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %this, %EndLineHelperClass** %this.addr
  %other.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %other, %EndLineHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.69"(%EndLineHelperClass* %this, %EndLineHelperClass* %other) #3 {
  %this.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %this, %EndLineHelperClass** %this.addr
  %other.addr = alloca %EndLineHelperClass*
  store %EndLineHelperClass* %other, %EndLineHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.70(%FlushHelperClass* %this, %FlushHelperClass* %other) #3 {
  %this.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %this, %FlushHelperClass** %this.addr
  %other.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %other, %FlushHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.71"(%FlushHelperClass* %this, %FlushHelperClass* %other) #3 {
  %this.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %this, %FlushHelperClass** %this.addr
  %other.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %other, %FlushHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.72"(%FlushHelperClass* %this, %FlushHelperClass* %other) #3 {
  %this.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %this, %FlushHelperClass** %this.addr
  %other.addr = alloca %FlushHelperClass*
  store %FlushHelperClass* %other, %FlushHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.73(%StreamRefWrapperHelperClass* %this) #3 {
  %this.addr = alloca %StreamRefWrapperHelperClass*
  store %StreamRefWrapperHelperClass* %this, %StreamRefWrapperHelperClass** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StreamRefWrapperHelperClass*, %StreamRefWrapperHelperClass** %this.addr
  %2 = getelementptr inbounds %StreamRefWrapperHelperClass, %StreamRefWrapperHelperClass* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.74(%StreamRefWrapperHelperClass* %this, %StreamRefWrapperHelperClass* %other) #3 {
  %this.addr = alloca %StreamRefWrapperHelperClass*
  store %StreamRefWrapperHelperClass* %this, %StreamRefWrapperHelperClass** %this.addr
  %other.addr = alloca %StreamRefWrapperHelperClass*
  store %StreamRefWrapperHelperClass* %other, %StreamRefWrapperHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StreamRefWrapperHelperClass*, %StreamRefWrapperHelperClass** %other.addr
  %2 = getelementptr inbounds %StreamRefWrapperHelperClass, %StreamRefWrapperHelperClass* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %StreamRefWrapperHelperClass*, %StreamRefWrapperHelperClass** %this.addr
  %5 = getelementptr inbounds %StreamRefWrapperHelperClass, %StreamRefWrapperHelperClass* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.75(%StreamRefWrapperHelperClass* %this) #3 {
  %this.addr = alloca %StreamRefWrapperHelperClass*
  store %StreamRefWrapperHelperClass* %this, %StreamRefWrapperHelperClass** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.76"(%StreamRefWrapperHelperClass* %this, %StreamRefWrapperHelperClass* %other) #3 {
  %this.addr = alloca %StreamRefWrapperHelperClass*
  store %StreamRefWrapperHelperClass* %this, %StreamRefWrapperHelperClass** %this.addr
  %other.addr = alloca %StreamRefWrapperHelperClass*
  store %StreamRefWrapperHelperClass* %other, %StreamRefWrapperHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StreamRefWrapperHelperClass*, %StreamRefWrapperHelperClass** %other.addr
  %2 = getelementptr inbounds %StreamRefWrapperHelperClass, %StreamRefWrapperHelperClass* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %StreamRefWrapperHelperClass*, %StreamRefWrapperHelperClass** %this.addr
  %5 = getelementptr inbounds %StreamRefWrapperHelperClass, %StreamRefWrapperHelperClass* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.77"(%StreamRefWrapperHelperClass* %this, %StreamRefWrapperHelperClass* %other) #3 {
  %this.addr = alloca %StreamRefWrapperHelperClass*
  store %StreamRefWrapperHelperClass* %this, %StreamRefWrapperHelperClass** %this.addr
  %other.addr = alloca %StreamRefWrapperHelperClass*
  store %StreamRefWrapperHelperClass* %other, %StreamRefWrapperHelperClass** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StreamRefWrapperHelperClass*, %StreamRefWrapperHelperClass** %this.addr
  %2 = getelementptr inbounds %StreamRefWrapperHelperClass, %StreamRefWrapperHelperClass* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %StreamRefWrapperHelperClass*, %StreamRefWrapperHelperClass** %other.addr
  %5 = getelementptr inbounds %StreamRefWrapperHelperClass, %StreamRefWrapperHelperClass* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

define internal void @__global_ctor.3() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.78(%ConsoleOutputStream* %this) #3 {
  %this.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %this, %ConsoleOutputStream** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

define internal void @__global_dtor.4() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.79(%ConsoleOutputStream* %this) #3 {
  %this.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %this, %ConsoleOutputStream** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.80(%ConsoleOutputStream* %this, %ConsoleOutputStream* %other) #3 {
  %this.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %this, %ConsoleOutputStream** %this.addr
  %other.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %other, %ConsoleOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.81"(%ConsoleOutputStream* %this, %ConsoleOutputStream* %other) #3 {
  %this.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %this, %ConsoleOutputStream** %this.addr
  %other.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %other, %ConsoleOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.82"(%ConsoleOutputStream* %this, %ConsoleOutputStream* %other) #3 {
  %this.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %this, %ConsoleOutputStream** %this.addr
  %other.addr = alloca %ConsoleOutputStream*
  store %ConsoleOutputStream* %other, %ConsoleOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<"(%ConsoleOutputStream %this, i8 %x) #3 {
  %this.addr = alloca %ConsoleOutputStream
  store %ConsoleOutputStream %this, %ConsoleOutputStream* %this.addr
  %x.addr = alloca i8
  store i8 %x, i8* %x.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %x.addr
  call void @writeChar(i8 %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.83"(%ConsoleOutputStream %this, i1 %x) #3 {
  %this.addr = alloca %ConsoleOutputStream
  store %ConsoleOutputStream %this, %ConsoleOutputStream* %this.addr
  %x.addr = alloca i1
  store i1 %x, i1* %x.addr
  %tmp.StringRef = alloca %StringRef
  %tmp.StringRef1 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load i1, i1* %x.addr
  br i1 %1, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %2 = load %ConsoleOutputStream, %ConsoleOutputStream* %this.addr
  %3 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %4 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str, i32 0, i32 0), i8** %3
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str, i32 0, i32 4), i8** %4
  %5 = load %StringRef, %StringRef* %tmp.StringRef
  call void @"<<<.84"(%ConsoleOutputStream %2, %StringRef %5)
  br label %if_end

if_else:                                          ; preds = %if_block
  %6 = load %ConsoleOutputStream, %ConsoleOutputStream* %this.addr
  %7 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef1, i32 0, i32 0
  %8 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef1, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.5, i32 0, i32 0), i8** %7
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.5, i32 0, i32 5), i8** %8
  %9 = load %StringRef, %StringRef* %tmp.StringRef1
  call void @"<<<.84"(%ConsoleOutputStream %6, %StringRef %9)
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.84"(%ConsoleOutputStream %this, %StringRef %x) #3 {
  %this.addr = alloca %ConsoleOutputStream
  store %ConsoleOutputStream %this, %ConsoleOutputStream* %this.addr
  %x.addr = alloca %StringRef
  store %StringRef %x, %StringRef* %x.addr
  %"$rangeVar" = alloca %StringRef
  %c = alloca i8*
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %x.addr
  call void @ctor.56(%StringRef* %"$rangeVar", %StringRef %1)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = call i1 @isEmpty(%StringRef* %"$rangeVar")
  %3 = xor i1 true, %2
  br i1 %3, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %4 = call i8* @front(%StringRef* %"$rangeVar")
  store i8* %4, i8** %c
  %5 = load i8*, i8** %c
  %6 = load i8, i8* %5
  call void @writeChar(i8 %6)
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront(%StringRef* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @flush(%ConsoleOutputStream %this, %FlushHelperClass %x) #3 {
  %this.addr = alloca %ConsoleOutputStream
  store %ConsoleOutputStream %this, %ConsoleOutputStream* %this.addr
  %x.addr = alloca %FlushHelperClass
  store %FlushHelperClass %x, %FlushHelperClass* %x.addr
  br label %code

code:                                             ; preds = %0
  call void @flushOutput()
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.85(%MainParameters* %this) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  call void @ctor.86(%CStrPtr* %2)
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 1
  call void @ctor.86(%CStrPtr* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.86(%CStrPtr* %this) #3 {
  %this.addr = alloca %CStrPtr*
  store %CStrPtr* %this, %CStrPtr** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %this.addr
  %2 = getelementptr inbounds %CStrPtr, %CStrPtr* %1, i32 0, i32 0
  store %CStr* null, %CStr** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.87(%MainParameters* %this, %MainParameters* %other) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %other.addr = alloca %MainParameters*
  store %MainParameters* %other, %MainParameters** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  %3 = load %MainParameters*, %MainParameters** %other.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 0
  call void @ctor.88(%CStrPtr* %2, %CStrPtr* %4)
  %5 = load %MainParameters*, %MainParameters** %this.addr
  %6 = getelementptr inbounds %MainParameters, %MainParameters* %5, i32 0, i32 1
  %7 = load %MainParameters*, %MainParameters** %other.addr
  %8 = getelementptr inbounds %MainParameters, %MainParameters* %7, i32 0, i32 1
  call void @ctor.88(%CStrPtr* %6, %CStrPtr* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.88(%CStrPtr* %this, %CStrPtr* %other) #3 {
  %this.addr = alloca %CStrPtr*
  store %CStrPtr* %this, %CStrPtr** %this.addr
  %other.addr = alloca %CStrPtr*
  store %CStrPtr* %other, %CStrPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %other.addr
  %2 = getelementptr inbounds %CStrPtr, %CStrPtr* %1, i32 0, i32 0
  %3 = load %CStr*, %CStr** %2
  %4 = load %CStrPtr*, %CStrPtr** %this.addr
  %5 = getelementptr inbounds %CStrPtr, %CStrPtr* %4, i32 0, i32 0
  store %CStr* %3, %CStr** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.89(%MainParameters* %this) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.90"(%MainParameters* %this, %MainParameters* %other) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %other.addr = alloca %MainParameters*
  store %MainParameters* %other, %MainParameters** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  %3 = load %MainParameters*, %MainParameters** %other.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 0
  call void @"=.91"(%CStrPtr* %2, %CStrPtr* %4)
  %5 = load %MainParameters*, %MainParameters** %this.addr
  %6 = getelementptr inbounds %MainParameters, %MainParameters* %5, i32 0, i32 1
  %7 = load %MainParameters*, %MainParameters** %other.addr
  %8 = getelementptr inbounds %MainParameters, %MainParameters* %7, i32 0, i32 1
  call void @"=.91"(%CStrPtr* %6, %CStrPtr* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.91"(%CStrPtr* %this, %CStrPtr* %other) #3 {
  %this.addr = alloca %CStrPtr*
  store %CStrPtr* %this, %CStrPtr** %this.addr
  %other.addr = alloca %CStrPtr*
  store %CStrPtr* %other, %CStrPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %other.addr
  %2 = getelementptr inbounds %CStrPtr, %CStrPtr* %1, i32 0, i32 0
  %3 = load %CStr*, %CStr** %2
  %4 = load %CStrPtr*, %CStrPtr** %this.addr
  %5 = getelementptr inbounds %CStrPtr, %CStrPtr* %4, i32 0, i32 0
  store %CStr* %3, %CStr** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.92"(%MainParameters* %this, %MainParameters* %other) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %other.addr = alloca %MainParameters*
  store %MainParameters* %other, %MainParameters** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  %3 = load %MainParameters*, %MainParameters** %other.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 0
  %5 = call i1 @"==.93"(%CStrPtr* %2, %CStrPtr* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %MainParameters*, %MainParameters** %this.addr
  %7 = getelementptr inbounds %MainParameters, %MainParameters* %6, i32 0, i32 1
  %8 = load %MainParameters*, %MainParameters** %other.addr
  %9 = getelementptr inbounds %MainParameters, %MainParameters* %8, i32 0, i32 1
  %10 = call i1 @"==.93"(%CStrPtr* %7, %CStrPtr* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.93"(%CStrPtr* %this, %CStrPtr* %other) #3 {
  %this.addr = alloca %CStrPtr*
  store %CStrPtr* %this, %CStrPtr** %this.addr
  %other.addr = alloca %CStrPtr*
  store %CStrPtr* %other, %CStrPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %this.addr
  %2 = getelementptr inbounds %CStrPtr, %CStrPtr* %1, i32 0, i32 0
  %3 = load %CStr*, %CStr** %2
  %4 = bitcast %CStr* %3 to i8*
  %5 = load %CStrPtr*, %CStrPtr** %other.addr
  %6 = getelementptr inbounds %CStrPtr, %CStrPtr* %5, i32 0, i32 0
  %7 = load %CStr*, %CStr** %6
  %8 = bitcast %CStr* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.94(%MainParameters* %this, i32 %argc, i8** %argv) #4 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %argc.addr = alloca i32
  store i32 %argc, i32* %argc.addr
  %argv.addr = alloca i8**
  store i8** %argv, i8*** %argv.addr
  %"$tmpC" = alloca %CStrPtr
  %"$tmpC1" = alloca %CStrPtr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  call void @ctor.86(%CStrPtr* %2)
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 1
  call void @ctor.86(%CStrPtr* %4)
  %5 = load %MainParameters*, %MainParameters** %this.addr
  %6 = getelementptr inbounds %MainParameters, %MainParameters* %5, i32 0, i32 0
  %7 = load i8**, i8*** %argv.addr
  call void @fromArgvPtr(%CStrPtr* %"$tmpC", i8** %7)
  call void @"=.91"(%CStrPtr* %6, %CStrPtr* %"$tmpC")
  %8 = load %MainParameters*, %MainParameters** %this.addr
  %9 = getelementptr inbounds %MainParameters, %MainParameters* %8, i32 0, i32 1
  %10 = load %MainParameters*, %MainParameters** %this.addr
  %11 = getelementptr inbounds %MainParameters, %MainParameters* %10, i32 0, i32 0
  %12 = load %CStrPtr, %CStrPtr* %11
  %13 = load i32, i32* %argc.addr
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %tmp.this
  %15 = load i64, i64* %tmp.this
  call void @"+.97"(%CStrPtr* %"$tmpC1", %CStrPtr %12, i64 %15)
  call void @"=.91"(%CStrPtr* %9, %CStrPtr* %"$tmpC1")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @fromArgvPtr(%CStrPtr* sret %_result, i8** %argv) #4 {
  %_result.addr = alloca %CStrPtr*
  store %CStrPtr* %_result, %CStrPtr** %_result.addr
  %argv.addr = alloca i8**
  store i8** %argv, i8*** %argv.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %_result.addr
  %2 = load i8**, i8*** %argv.addr
  %3 = bitcast i8** %2 to %CStr*
  call void @ctor.95(%CStrPtr* %1, %CStr* %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.95(%CStrPtr* %this, %CStr* %fptr) #3 {
  %this.addr = alloca %CStrPtr*
  store %CStrPtr* %this, %CStrPtr** %this.addr
  %fptr.addr = alloca %CStr*
  store %CStr* %fptr, %CStr** %fptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStr*, %CStr** %fptr.addr
  %2 = load %CStrPtr*, %CStrPtr** %this.addr
  %3 = getelementptr inbounds %CStrPtr, %CStrPtr* %2, i32 0, i32 0
  store %CStr* %1, %CStr** %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.96(%CStrPtr* %this) #3 {
  %this.addr = alloca %CStrPtr*
  store %CStrPtr* %this, %CStrPtr** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"+.97"(%CStrPtr* sret %_result, %CStrPtr %p, i64 %n) #4 {
  %_result.addr = alloca %CStrPtr*
  store %CStrPtr* %_result, %CStrPtr** %_result.addr
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %_result.addr
  %2 = load %CStrPtr, %CStrPtr* %p.addr
  %3 = call i8* @toBytePtr(%CStrPtr %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 8
  %6 = call i8* @ptrAdd(i8* %3, i64 %5)
  call void @fromBytePtr(%CStrPtr* %1, i8* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @fromBytePtr(%CStrPtr* sret %_result, i8* %p) #4 {
  %_result.addr = alloca %CStrPtr*
  store %CStrPtr* %_result, %CStrPtr** %_result.addr
  %p.addr = alloca i8*
  store i8* %p, i8** %p.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %_result.addr
  %2 = load i8*, i8** %p.addr
  %3 = bitcast i8* %2 to %CStr*
  call void @ctor.95(%CStrPtr* %1, %CStr* %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8* @toBytePtr(%CStrPtr %p) #4 {
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CStrPtr, %CStrPtr* %p.addr, i32 0, i32 0
  %2 = load %CStr*, %CStr** %1
  %3 = bitcast %CStr* %2 to i8*
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.98(%MainParameters %this) #4 {
  %this.addr = alloca %MainParameters
  store %MainParameters %this, %MainParameters* %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters, %MainParameters* %this.addr
  %2 = call i64 @size.99(%MainParameters %1)
  store i64 0, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = icmp eq i64 %2, %3
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal i64 @size.99(%MainParameters %this) #4 {
  %this.addr = alloca %MainParameters
  store %MainParameters %this, %MainParameters* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this.addr, i32 0, i32 1
  %2 = load %CStrPtr, %CStrPtr* %1
  %3 = getelementptr inbounds %MainParameters, %MainParameters* %this.addr, i32 0, i32 0
  %4 = load %CStrPtr, %CStrPtr* %3
  %5 = call i64 @-(%CStrPtr %2, %CStrPtr %4)
  ret i64 %5
}

; Function Attrs: inlinehint nounwind
define internal i64 @-(%CStrPtr %p, %CStrPtr %q) #4 {
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  %q.addr = alloca %CStrPtr
  store %CStrPtr %q, %CStrPtr* %q.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr, %CStrPtr* %p.addr
  %2 = call i8* @toBytePtr(%CStrPtr %1)
  %3 = load %CStrPtr, %CStrPtr* %q.addr
  %4 = call i8* @toBytePtr(%CStrPtr %3)
  %5 = call i64 @ptrDiff(i8* %2, i8* %4)
  store i64 %5, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = call i64 @_SizeType_opDiv(i64 %6, i64 8)
  ret i64 %7
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @front.100(%MainParameters %this) #4 {
  %this.addr = alloca %MainParameters
  store %MainParameters %this, %MainParameters* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this.addr, i32 0, i32 0
  %2 = load %CStrPtr, %CStrPtr* %1
  %3 = call %StringRef @toStringRef(%CStrPtr %2)
  ret %StringRef %3
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @toStringRef(%CStrPtr %p) #4 {
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CStrPtr, %CStrPtr* %p.addr, i32 0, i32 0
  %2 = load %CStr*, %CStr** %1
  %3 = getelementptr inbounds %CStr, %CStr* %2, i32 0, i32 0
  %4 = load i8*, i8** %3
  %5 = call %StringRef @_String_fromCString(i8* %4)
  ret %StringRef %5
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @back.101(%MainParameters %this) #4 {
  %this.addr = alloca %MainParameters
  store %MainParameters %this, %MainParameters* %this.addr
  %"$tmpC" = alloca %CStrPtr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this.addr, i32 0, i32 1
  %2 = load %CStrPtr, %CStrPtr* %1
  store i64 1, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  call void @-.102(%CStrPtr* %"$tmpC", %CStrPtr %2, i64 %3)
  %4 = load %CStrPtr, %CStrPtr* %"$tmpC"
  %5 = call %StringRef @toStringRef(%CStrPtr %4)
  ret %StringRef %5
}

; Function Attrs: inlinehint nounwind
define internal void @-.102(%CStrPtr* sret %_result, %CStrPtr %p, i64 %n) #4 {
  %_result.addr = alloca %CStrPtr*
  store %CStrPtr* %_result, %CStrPtr** %_result.addr
  %p.addr = alloca %CStrPtr
  store %CStrPtr %p, %CStrPtr* %p.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStrPtr*, %CStrPtr** %_result.addr
  %2 = load %CStrPtr, %CStrPtr* %p.addr
  %3 = call i8* @toBytePtr(%CStrPtr %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 8
  %6 = call i8* @ptrSub(i8* %3, i64 %5)
  call void @fromBytePtr(%CStrPtr* %1, i8* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @"().103"(%MainParameters %this) #4 {
  %this.addr = alloca %MainParameters
  store %MainParameters %this, %MainParameters* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this.addr, i32 0, i32 0
  %2 = load %CStrPtr, %CStrPtr* %1
  %3 = call %StringRef @toStringRef(%CStrPtr %2)
  ret %StringRef %3
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @"().104"(%MainParameters %this, i64 %n) #4 {
  %this.addr = alloca %MainParameters
  store %MainParameters %this, %MainParameters* %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %"$tmpC" = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %MainParameters, %MainParameters* %this.addr, i32 0, i32 0
  %2 = load %CStrPtr, %CStrPtr* %1
  %3 = load i64, i64* %n.addr
  call void @"+.97"(%CStrPtr* %"$tmpC", %CStrPtr %2, i64 %3)
  %4 = load %CStrPtr, %CStrPtr* %"$tmpC"
  %5 = call %StringRef @toStringRef(%CStrPtr %4)
  ret %StringRef %5
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.105(%MainParameters* %this) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %"$tmpC" = alloca %CStrPtr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 0
  %5 = load %CStrPtr, %CStrPtr* %4
  store i64 1, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  call void @"+.97"(%CStrPtr* %"$tmpC", %CStrPtr %5, i64 %6)
  call void @"=.91"(%CStrPtr* %2, %CStrPtr* %"$tmpC")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.106(%MainParameters* %this) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %"$tmpC" = alloca %CStrPtr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 1
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 1
  %5 = load %CStrPtr, %CStrPtr* %4
  store i64 1, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  call void @-.102(%CStrPtr* %"$tmpC", %CStrPtr %5, i64 %6)
  call void @"=.91"(%CStrPtr* %2, %CStrPtr* %"$tmpC")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.107(%MainParameters* %this, i64 %n) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %"$tmpC" = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 0
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 0
  %5 = load %CStrPtr, %CStrPtr* %4
  %6 = load i64, i64* %n.addr
  call void @"+.97"(%CStrPtr* %"$tmpC", %CStrPtr %5, i64 %6)
  call void @"=.91"(%CStrPtr* %2, %CStrPtr* %"$tmpC")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.108(%MainParameters* %this, i64 %n) #3 {
  %this.addr = alloca %MainParameters*
  store %MainParameters* %this, %MainParameters** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %"$tmpC" = alloca %CStrPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %MainParameters*, %MainParameters** %this.addr
  %2 = getelementptr inbounds %MainParameters, %MainParameters* %1, i32 0, i32 1
  %3 = load %MainParameters*, %MainParameters** %this.addr
  %4 = getelementptr inbounds %MainParameters, %MainParameters* %3, i32 0, i32 1
  %5 = load %CStrPtr, %CStrPtr* %4
  %6 = load i64, i64* %n.addr
  call void @-.102(%CStrPtr* %"$tmpC", %CStrPtr %5, i64 %6)
  call void @"=.91"(%CStrPtr* %2, %CStrPtr* %"$tmpC")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.109(%CStr* %this) #3 {
  %this.addr = alloca %CStr*
  store %CStr* %this, %CStr** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStr*, %CStr** %this.addr
  %2 = getelementptr inbounds %CStr, %CStr* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.110(%CStr* %this, %CStr* %other) #3 {
  %this.addr = alloca %CStr*
  store %CStr* %this, %CStr** %this.addr
  %other.addr = alloca %CStr*
  store %CStr* %other, %CStr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStr*, %CStr** %other.addr
  %2 = getelementptr inbounds %CStr, %CStr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %CStr*, %CStr** %this.addr
  %5 = getelementptr inbounds %CStr, %CStr* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.111(%CStr* %this) #3 {
  %this.addr = alloca %CStr*
  store %CStr* %this, %CStr** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.112"(%CStr* %this, %CStr* %other) #3 {
  %this.addr = alloca %CStr*
  store %CStr* %this, %CStr** %this.addr
  %other.addr = alloca %CStr*
  store %CStr* %other, %CStr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStr*, %CStr** %other.addr
  %2 = getelementptr inbounds %CStr, %CStr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %CStr*, %CStr** %this.addr
  %5 = getelementptr inbounds %CStr, %CStr* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.113"(%CStr* %this, %CStr* %other) #3 {
  %this.addr = alloca %CStr*
  store %CStr* %this, %CStr** %this.addr
  %other.addr = alloca %CStr*
  store %CStr* %other, %CStr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CStr*, %CStr** %this.addr
  %2 = getelementptr inbounds %CStr, %CStr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %CStr*, %CStr** %other.addr
  %5 = getelementptr inbounds %CStr, %CStr* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

define internal void @__global_ctor.6() {
  br label %code

code:                                             ; preds = %0
  call void @ctor.85(%MainParameters* @programArgs.3)
  ret void
}

define internal void @__global_dtor.7() {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: nounwind
declare void @sprMain() #2

; Function Attrs: inlinehint nounwind
define internal i32 @asInt(%StringRef %src) #4 {
  %src.addr = alloca %StringRef
  store %StringRef %src, %StringRef* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = call i8* @cStr(%StringRef* %src.addr)
  %2 = call i32 @atoi(i8* %1)
  ret i32 %2
}

declare i32 @atoi(i8*)

; Function Attrs: inlinehint nounwind
define internal i64 @asLong(%StringRef %src) #4 {
  %src.addr = alloca %StringRef
  store %StringRef %src, %StringRef* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = call i8* @cStr(%StringRef* %src.addr)
  %2 = call i64 @atoll(i8* %1)
  ret i64 %2
}

declare i64 @atoll(i8*)

; Function Attrs: inlinehint nounwind
define internal double @asDouble(%StringRef %src) #4 {
  %src.addr = alloca %StringRef
  store %StringRef %src, %StringRef* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = call i8* @cStr(%StringRef* %src.addr)
  %2 = call double @atof(i8* %1)
  ret double %2
}

declare double @atof(i8*)

; Function Attrs: alwaysinline nounwind
define internal void @ctor.128(%ParserContext* %this) #3 {
  %this.addr = alloca %ParserContext*
  store %ParserContext* %this, %ParserContext** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %this.addr
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %1, i32 0, i32 0
  call void @ctor.129(%SparrowScanner* %2)
  %3 = load %ParserContext*, %ParserContext** %this.addr
  %4 = getelementptr inbounds %ParserContext, %ParserContext* %3, i32 0, i32 1
  call void @ctor.147(%"SparrowLayoutDecoder[SparrowScanner]"* %4)
  %5 = load %ParserContext*, %ParserContext** %this.addr
  %6 = getelementptr inbounds %ParserContext, %ParserContext* %5, i32 0, i32 2
  call void @ctor.153(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.129(%SparrowScanner* %this) #3 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 0
  call void @ctor.130(%Location* %2)
  %3 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %3, i32 0, i32 1
  call void @ctor.133(%BufferedCharSource* %4)
  %5 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %5, i32 0, i32 2
  call void @ctor.139(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %6)
  %7 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %7, i32 0, i32 3
  call void @ctor.143(%Token* %8)
  %9 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %9, i32 0, i32 4
  store i1 false, i1* %10
  %11 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 5
  call void @ctor.145(%ErrorReporter* %12)
  %13 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %13, i32 0, i32 6
  store i1 false, i1* %14
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.130(%Location* %this) #3 {
  %this.addr = alloca %Location*
  store %Location* %this, %Location** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %this.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 0
  call void @ctor.131(%SourceCode* %2)
  %3 = load %Location*, %Location** %this.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 1
  call void @ctor.132(%LineCol* %4)
  %5 = load %Location*, %Location** %this.addr
  %6 = getelementptr inbounds %Location, %Location* %5, i32 0, i32 2
  call void @ctor.132(%LineCol* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.131(%SourceCode* %this) #3 {
  %this.addr = alloca %SourceCode*
  store %SourceCode* %this, %SourceCode** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SourceCode*, %SourceCode** %this.addr
  %2 = getelementptr inbounds %SourceCode, %SourceCode* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.132(%LineCol* %this) #3 {
  %this.addr = alloca %LineCol*
  store %LineCol* %this, %LineCol** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LineCol*, %LineCol** %this.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  store i32 0, i32* %2
  %3 = load %LineCol*, %LineCol** %this.addr
  %4 = getelementptr inbounds %LineCol, %LineCol* %3, i32 0, i32 1
  store i32 0, i32* %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.133(%BufferedCharSource* %this) #3 {
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %1, i32 0, i32 0
  call void @ctor.134(%CharSource* %2)
  %3 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %3, i32 0, i32 1
  call void @ctor.137(%String* %4)
  %5 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %6 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %5, i32 0, i32 2
  store i32 0, i32* %6
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.134(%CharSource* %this) #3 {
  %this.addr = alloca %CharSource*
  store %CharSource* %this, %CharSource** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CharSource*, %CharSource** %this.addr
  %2 = getelementptr inbounds %CharSource, %CharSource* %1, i32 0, i32 0
  call void @ctor.135(%UntypedPtr* %2)
  %3 = load %CharSource*, %CharSource** %this.addr
  %4 = getelementptr inbounds %CharSource, %CharSource* %3, i32 0, i32 1
  call void @ctor.136(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.135(%UntypedPtr* %this) #3 {
  %this.addr = alloca %UntypedPtr*
  store %UntypedPtr* %this, %UntypedPtr** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr*, %UntypedPtr** %this.addr
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.136(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @String, Int]", %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.137(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  call void @ctor.138(%"RawPtr[Char]"* %2)
  %3 = load %String*, %String** %this.addr
  %4 = getelementptr inbounds %String, %String* %3, i32 0, i32 1
  call void @ctor.138(%"RawPtr[Char]"* %4)
  %5 = load %String*, %String** %this.addr
  %6 = getelementptr inbounds %String, %String* %5, i32 0, i32 2
  call void @ctor.138(%"RawPtr[Char]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.138(%"RawPtr[Char]"* %this) #3 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.139(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #3 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  call void @ctor.140(%"RangeWithLookahead[BufferedCharSourceRange]"* %2)
  %3 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %4 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3, i32 0, i32 1
  store %Location* null, %Location** %4
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.140(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #3 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 0
  call void @ctor.141(%BufferedCharSourceRange* %2)
  %3 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %3, i32 0, i32 1
  call void @ctor.142(%"Vector[Char]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.141(%BufferedCharSourceRange* %this) #3 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  store %BufferedCharSource* null, %BufferedCharSource** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.142(%"Vector[Char]"* %this) #3 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  call void @ctor.138(%"RawPtr[Char]"* %2)
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 1
  call void @ctor.138(%"RawPtr[Char]"* %4)
  %5 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %5, i32 0, i32 2
  call void @ctor.138(%"RawPtr[Char]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.143(%Token* %this) #3 {
  %this.addr = alloca %Token*
  store %Token* %this, %Token** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %this.addr
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 0
  call void @ctor.130(%Location* %2)
  %3 = load %Token*, %Token** %this.addr
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 1
  call void @ctor.144(%TokenType* %4)
  %5 = load %Token*, %Token** %this.addr
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 2
  call void @ctor.137(%String* %6)
  %7 = load %Token*, %Token** %this.addr
  %8 = getelementptr inbounds %Token, %Token* %7, i32 0, i32 3
  store i64 0, i64* %8
  %9 = load %Token*, %Token** %this.addr
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 4
  store double 0.000000e+00, double* %10
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.144(%TokenType* %this) #3 {
  %this.addr = alloca %TokenType*
  store %TokenType* %this, %TokenType** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %TokenType*, %TokenType** %this.addr
  %2 = getelementptr inbounds %TokenType, %TokenType* %1, i32 0, i32 0
  store i32 0, i32* %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.145(%ErrorReporter* %this) #3 {
  %this.addr = alloca %ErrorReporter*
  store %ErrorReporter* %this, %ErrorReporter** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %1, i32 0, i32 0
  call void @ctor.135(%UntypedPtr* %2)
  %3 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %4 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %3, i32 0, i32 1
  call void @ctor.146(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.146(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.147(%"SparrowLayoutDecoder[SparrowScanner]"* %this) #3 {
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 0
  call void @ctor.148(%"RangeWithLookahead[SparrowScanner]"* %2)
  %3 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %3, i32 0, i32 1
  call void @ctor.145(%ErrorReporter* %4)
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %5, i32 0, i32 2
  call void @ctor.151(%"Vector[UInt]"* %6)
  %7 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %8 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %7, i32 0, i32 3
  call void @ctor.142(%"Vector[Char]"* %8)
  %9 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %10 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %9, i32 0, i32 4
  call void @ctor.144(%TokenType* %10)
  %11 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %12 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %11, i32 0, i32 5
  store i32 0, i32* %12
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.148(%"RangeWithLookahead[SparrowScanner]"* %this) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %1, i32 0, i32 0
  call void @ctor.129(%SparrowScanner* %2)
  %3 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %3, i32 0, i32 1
  call void @ctor.149(%"Vector[Token]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.149(%"Vector[Token]"* %this) #3 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  call void @ctor.150(%"RawPtr[Token]"* %2)
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 1
  call void @ctor.150(%"RawPtr[Token]"* %4)
  %5 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %5, i32 0, i32 2
  call void @ctor.150(%"RawPtr[Token]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.150(%"RawPtr[Token]"* %this) #3 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %1, i32 0, i32 0
  store %Token* null, %Token** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.151(%"Vector[UInt]"* %this) #3 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 0
  call void @ctor.152(%"RawPtr[UInt]"* %2)
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %4 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %3, i32 0, i32 1
  call void @ctor.152(%"RawPtr[UInt]"* %4)
  %5 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %6 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %5, i32 0, i32 2
  call void @ctor.152(%"RawPtr[UInt]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.152(%"RawPtr[UInt]"* %this) #3 {
  %this.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %this, %"RawPtr[UInt]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %1, i32 0, i32 0
  store i32* null, i32** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.153(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #3 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  call void @ctor.154(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 1
  call void @ctor.143(%Token* %4)
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 2
  store i1 false, i1* %6
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 3
  call void @ctor.155(%AstBuilder* %8)
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9, i32 0, i32 4
  call void @ctor.145(%ErrorReporter* %10)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.154(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  call void @ctor.147(%"SparrowLayoutDecoder[SparrowScanner]"* %2)
  %3 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 1
  call void @ctor.149(%"Vector[Token]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.155(%AstBuilder* %this) #3 {
  %this.addr = alloca %AstBuilder*
  store %AstBuilder* %this, %AstBuilder** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %this.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 0
  call void @ctor.135(%UntypedPtr* %2)
  %3 = load %AstBuilder*, %AstBuilder** %this.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 1
  call void @ctor.156(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %4)
  %5 = load %AstBuilder*, %AstBuilder** %this.addr
  %6 = getelementptr inbounds %AstBuilder, %AstBuilder* %5, i32 0, i32 2
  call void @ctor.157(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %6)
  %7 = load %AstBuilder*, %AstBuilder** %this.addr
  %8 = getelementptr inbounds %AstBuilder, %AstBuilder* %7, i32 0, i32 3
  call void @ctor.157(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %8)
  %9 = load %AstBuilder*, %AstBuilder** %this.addr
  %10 = getelementptr inbounds %AstBuilder, %AstBuilder* %9, i32 0, i32 4
  call void @ctor.158(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %10)
  %11 = load %AstBuilder*, %AstBuilder** %this.addr
  %12 = getelementptr inbounds %AstBuilder, %AstBuilder* %11, i32 0, i32 5
  call void @ctor.159(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %12)
  %13 = load %AstBuilder*, %AstBuilder** %this.addr
  %14 = getelementptr inbounds %AstBuilder, %AstBuilder* %13, i32 0, i32 6
  call void @ctor.160(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %14)
  %15 = load %AstBuilder*, %AstBuilder** %this.addr
  %16 = getelementptr inbounds %AstBuilder, %AstBuilder* %15, i32 0, i32 7
  call void @ctor.161(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %16)
  %17 = load %AstBuilder*, %AstBuilder** %this.addr
  %18 = getelementptr inbounds %AstBuilder, %AstBuilder* %17, i32 0, i32 8
  call void @ctor.158(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %18)
  %19 = load %AstBuilder*, %AstBuilder** %this.addr
  %20 = getelementptr inbounds %AstBuilder, %AstBuilder* %19, i32 0, i32 9
  call void @ctor.162(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %20)
  %21 = load %AstBuilder*, %AstBuilder** %this.addr
  %22 = getelementptr inbounds %AstBuilder, %AstBuilder* %21, i32 0, i32 10
  call void @ctor.158(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %22)
  %23 = load %AstBuilder*, %AstBuilder** %this.addr
  %24 = getelementptr inbounds %AstBuilder, %AstBuilder* %23, i32 0, i32 11
  call void @ctor.158(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %24)
  %25 = load %AstBuilder*, %AstBuilder** %this.addr
  %26 = getelementptr inbounds %AstBuilder, %AstBuilder* %25, i32 0, i32 12
  call void @ctor.158(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %26)
  %27 = load %AstBuilder*, %AstBuilder** %this.addr
  %28 = getelementptr inbounds %AstBuilder, %AstBuilder* %27, i32 0, i32 13
  call void @ctor.163(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %28)
  %29 = load %AstBuilder*, %AstBuilder** %this.addr
  %30 = getelementptr inbounds %AstBuilder, %AstBuilder* %29, i32 0, i32 14
  call void @ctor.164(%"FunctionPtr2[Node, UntypedPtr, Node]"* %30)
  %31 = load %AstBuilder*, %AstBuilder** %this.addr
  %32 = getelementptr inbounds %AstBuilder, %AstBuilder* %31, i32 0, i32 15
  call void @ctor.165(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %32)
  %33 = load %AstBuilder*, %AstBuilder** %this.addr
  %34 = getelementptr inbounds %AstBuilder, %AstBuilder* %33, i32 0, i32 16
  call void @ctor.166(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %34)
  %35 = load %AstBuilder*, %AstBuilder** %this.addr
  %36 = getelementptr inbounds %AstBuilder, %AstBuilder* %35, i32 0, i32 17
  call void @ctor.159(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %36)
  %37 = load %AstBuilder*, %AstBuilder** %this.addr
  %38 = getelementptr inbounds %AstBuilder, %AstBuilder* %37, i32 0, i32 18
  call void @ctor.167(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %38)
  %39 = load %AstBuilder*, %AstBuilder** %this.addr
  %40 = getelementptr inbounds %AstBuilder, %AstBuilder* %39, i32 0, i32 19
  call void @ctor.165(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %40)
  %41 = load %AstBuilder*, %AstBuilder** %this.addr
  %42 = getelementptr inbounds %AstBuilder, %AstBuilder* %41, i32 0, i32 20
  call void @ctor.165(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %42)
  %43 = load %AstBuilder*, %AstBuilder** %this.addr
  %44 = getelementptr inbounds %AstBuilder, %AstBuilder* %43, i32 0, i32 21
  call void @ctor.165(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %44)
  %45 = load %AstBuilder*, %AstBuilder** %this.addr
  %46 = getelementptr inbounds %AstBuilder, %AstBuilder* %45, i32 0, i32 22
  call void @ctor.157(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %46)
  %47 = load %AstBuilder*, %AstBuilder** %this.addr
  %48 = getelementptr inbounds %AstBuilder, %AstBuilder* %47, i32 0, i32 23
  call void @ctor.168(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %48)
  %49 = load %AstBuilder*, %AstBuilder** %this.addr
  %50 = getelementptr inbounds %AstBuilder, %AstBuilder* %49, i32 0, i32 24
  call void @ctor.169(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %50)
  %51 = load %AstBuilder*, %AstBuilder** %this.addr
  %52 = getelementptr inbounds %AstBuilder, %AstBuilder* %51, i32 0, i32 25
  call void @ctor.170(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %52)
  %53 = load %AstBuilder*, %AstBuilder** %this.addr
  %54 = getelementptr inbounds %AstBuilder, %AstBuilder* %53, i32 0, i32 26
  call void @ctor.171(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %54)
  %55 = load %AstBuilder*, %AstBuilder** %this.addr
  %56 = getelementptr inbounds %AstBuilder, %AstBuilder* %55, i32 0, i32 27
  call void @ctor.172(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %56)
  %57 = load %AstBuilder*, %AstBuilder** %this.addr
  %58 = getelementptr inbounds %AstBuilder, %AstBuilder* %57, i32 0, i32 28
  call void @ctor.173(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %58)
  %59 = load %AstBuilder*, %AstBuilder** %this.addr
  %60 = getelementptr inbounds %AstBuilder, %AstBuilder* %59, i32 0, i32 29
  call void @ctor.174(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %60)
  %61 = load %AstBuilder*, %AstBuilder** %this.addr
  %62 = getelementptr inbounds %AstBuilder, %AstBuilder* %61, i32 0, i32 30
  call void @ctor.175(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %62)
  %63 = load %AstBuilder*, %AstBuilder** %this.addr
  %64 = getelementptr inbounds %AstBuilder, %AstBuilder* %63, i32 0, i32 31
  call void @ctor.176(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %64)
  %65 = load %AstBuilder*, %AstBuilder** %this.addr
  %66 = getelementptr inbounds %AstBuilder, %AstBuilder* %65, i32 0, i32 32
  call void @ctor.177(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %66)
  %67 = load %AstBuilder*, %AstBuilder** %this.addr
  %68 = getelementptr inbounds %AstBuilder, %AstBuilder* %67, i32 0, i32 33
  call void @ctor.167(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %68)
  %69 = load %AstBuilder*, %AstBuilder** %this.addr
  %70 = getelementptr inbounds %AstBuilder, %AstBuilder* %69, i32 0, i32 34
  call void @ctor.178(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %70)
  %71 = load %AstBuilder*, %AstBuilder** %this.addr
  %72 = getelementptr inbounds %AstBuilder, %AstBuilder* %71, i32 0, i32 35
  call void @ctor.179(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %72)
  %73 = load %AstBuilder*, %AstBuilder** %this.addr
  %74 = getelementptr inbounds %AstBuilder, %AstBuilder* %73, i32 0, i32 36
  call void @ctor.160(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %74)
  %75 = load %AstBuilder*, %AstBuilder** %this.addr
  %76 = getelementptr inbounds %AstBuilder, %AstBuilder* %75, i32 0, i32 37
  call void @ctor.179(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %76)
  %77 = load %AstBuilder*, %AstBuilder** %this.addr
  %78 = getelementptr inbounds %AstBuilder, %AstBuilder* %77, i32 0, i32 38
  call void @ctor.169(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %78)
  %79 = load %AstBuilder*, %AstBuilder** %this.addr
  %80 = getelementptr inbounds %AstBuilder, %AstBuilder* %79, i32 0, i32 39
  call void @ctor.169(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %80)
  %81 = load %AstBuilder*, %AstBuilder** %this.addr
  %82 = getelementptr inbounds %AstBuilder, %AstBuilder* %81, i32 0, i32 40
  call void @ctor.178(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %82)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.156(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.157(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.158(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.159(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.160(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.161(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.162(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.163(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.164(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.165(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.166(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.167(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.168(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.169(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, @Location]"*
  store %"FunctionPtr2[Node, UntypedPtr, @Location]"* %this, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, @Location]"*, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr2[Node, UntypedPtr, @Location]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.170(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]", %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.171(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Int]", %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.172(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]", %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.173(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Long]", %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.174(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]", %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.175(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Float]", %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.176(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Double]", %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.177(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Char]", %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.178(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Node]", %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.179(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.180(%ParserContext* %this, %ParserContext* %other) #3 {
  %this.addr = alloca %ParserContext*
  store %ParserContext* %this, %ParserContext** %this.addr
  %other.addr = alloca %ParserContext*
  store %ParserContext* %other, %ParserContext** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %this.addr
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %1, i32 0, i32 0
  %3 = load %ParserContext*, %ParserContext** %other.addr
  %4 = getelementptr inbounds %ParserContext, %ParserContext* %3, i32 0, i32 0
  call void @ctor.181(%SparrowScanner* %2, %SparrowScanner* %4)
  %5 = load %ParserContext*, %ParserContext** %this.addr
  %6 = getelementptr inbounds %ParserContext, %ParserContext* %5, i32 0, i32 1
  %7 = load %ParserContext*, %ParserContext** %other.addr
  %8 = getelementptr inbounds %ParserContext, %ParserContext* %7, i32 0, i32 1
  call void @ctor.206(%"SparrowLayoutDecoder[SparrowScanner]"* %6, %"SparrowLayoutDecoder[SparrowScanner]"* %8)
  %9 = load %ParserContext*, %ParserContext** %this.addr
  %10 = getelementptr inbounds %ParserContext, %ParserContext* %9, i32 0, i32 2
  %11 = load %ParserContext*, %ParserContext** %other.addr
  %12 = getelementptr inbounds %ParserContext, %ParserContext* %11, i32 0, i32 2
  call void @ctor.231(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.181(%SparrowScanner* %this, %SparrowScanner* %other) #3 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %other.addr = alloca %SparrowScanner*
  store %SparrowScanner* %other, %SparrowScanner** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 0
  %3 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %3, i32 0, i32 0
  call void @ctor.182(%Location* %2, %Location* %4)
  %5 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %5, i32 0, i32 1
  %7 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %7, i32 0, i32 1
  call void @ctor.185(%BufferedCharSource* %6, %BufferedCharSource* %8)
  %9 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %9, i32 0, i32 2
  %11 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 2
  call void @ctor.195(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %12)
  %13 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %13, i32 0, i32 3
  %15 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %16 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %15, i32 0, i32 3
  call void @ctor.202(%Token* %14, %Token* %16)
  %17 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %18 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %17, i32 0, i32 4
  %19 = load i1, i1* %18
  %20 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %21 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %20, i32 0, i32 4
  store i1 %19, i1* %21
  %22 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %23 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %22, i32 0, i32 5
  %24 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %25 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %24, i32 0, i32 5
  call void @ctor.204(%ErrorReporter* %23, %ErrorReporter* %25)
  %26 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %27 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %26, i32 0, i32 6
  %28 = load i1, i1* %27
  %29 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %30 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %29, i32 0, i32 6
  store i1 %28, i1* %30
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.182(%Location* %this, %Location* %other) #3 {
  %this.addr = alloca %Location*
  store %Location* %this, %Location** %this.addr
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %this.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 0
  %3 = load %Location*, %Location** %other.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 0
  call void @ctor.183(%SourceCode* %2, %SourceCode* %4)
  %5 = load %Location*, %Location** %this.addr
  %6 = getelementptr inbounds %Location, %Location* %5, i32 0, i32 1
  %7 = load %Location*, %Location** %other.addr
  %8 = getelementptr inbounds %Location, %Location* %7, i32 0, i32 1
  call void @ctor.184(%LineCol* %6, %LineCol* %8)
  %9 = load %Location*, %Location** %this.addr
  %10 = getelementptr inbounds %Location, %Location* %9, i32 0, i32 2
  %11 = load %Location*, %Location** %other.addr
  %12 = getelementptr inbounds %Location, %Location* %11, i32 0, i32 2
  call void @ctor.184(%LineCol* %10, %LineCol* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.183(%SourceCode* %this, %SourceCode* %other) #3 {
  %this.addr = alloca %SourceCode*
  store %SourceCode* %this, %SourceCode** %this.addr
  %other.addr = alloca %SourceCode*
  store %SourceCode* %other, %SourceCode** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SourceCode*, %SourceCode** %other.addr
  %2 = getelementptr inbounds %SourceCode, %SourceCode* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %SourceCode*, %SourceCode** %this.addr
  %5 = getelementptr inbounds %SourceCode, %SourceCode* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.184(%LineCol* %this, %LineCol* %other) #3 {
  %this.addr = alloca %LineCol*
  store %LineCol* %this, %LineCol** %this.addr
  %other.addr = alloca %LineCol*
  store %LineCol* %other, %LineCol** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LineCol*, %LineCol** %other.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %LineCol*, %LineCol** %this.addr
  %5 = getelementptr inbounds %LineCol, %LineCol* %4, i32 0, i32 0
  store i32 %3, i32* %5
  %6 = load %LineCol*, %LineCol** %other.addr
  %7 = getelementptr inbounds %LineCol, %LineCol* %6, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = load %LineCol*, %LineCol** %this.addr
  %10 = getelementptr inbounds %LineCol, %LineCol* %9, i32 0, i32 1
  store i32 %8, i32* %10
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.185(%BufferedCharSource* %this, %BufferedCharSource* %other) #3 {
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  %other.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %other, %BufferedCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %3, i32 0, i32 0
  call void @ctor.186(%CharSource* %2, %CharSource* %4)
  %5 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %6 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %5, i32 0, i32 1
  %7 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %8 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %7, i32 0, i32 1
  call void @ctor.189(%String* %6, %String* %8)
  %9 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %10 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %9, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %13 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %12, i32 0, i32 2
  store i32 %11, i32* %13
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.186(%CharSource* %this, %CharSource* %other) #3 {
  %this.addr = alloca %CharSource*
  store %CharSource* %this, %CharSource** %this.addr
  %other.addr = alloca %CharSource*
  store %CharSource* %other, %CharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CharSource*, %CharSource** %this.addr
  %2 = getelementptr inbounds %CharSource, %CharSource* %1, i32 0, i32 0
  %3 = load %CharSource*, %CharSource** %other.addr
  %4 = getelementptr inbounds %CharSource, %CharSource* %3, i32 0, i32 0
  call void @ctor.187(%UntypedPtr* %2, %UntypedPtr* %4)
  %5 = load %CharSource*, %CharSource** %this.addr
  %6 = getelementptr inbounds %CharSource, %CharSource* %5, i32 0, i32 1
  %7 = load %CharSource*, %CharSource** %other.addr
  %8 = getelementptr inbounds %CharSource, %CharSource* %7, i32 0, i32 1
  call void @ctor.188(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %6, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.187(%UntypedPtr* %this, %UntypedPtr* %other) #3 {
  %this.addr = alloca %UntypedPtr*
  store %UntypedPtr* %this, %UntypedPtr** %this.addr
  %other.addr = alloca %UntypedPtr*
  store %UntypedPtr* %other, %UntypedPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr*, %UntypedPtr** %other.addr
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %UntypedPtr*, %UntypedPtr** %this.addr
  %5 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.188(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %other, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @String, Int]", %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @String, Int]", %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.189(%String* %this, %String* %other) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %other.addr = alloca %String*
  store %String* %other, %String** %other.addr
  %size = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %other.addr
  %2 = call i64 @size.190(%String* %1)
  store i64 %2, i64* %size
  %3 = load %String*, %String** %this.addr
  %4 = load i64, i64* %size
  call void @ctor.191(%String* %3, i64 %4)
  %5 = load %String*, %String** %this.addr
  %6 = getelementptr inbounds %String, %String* %5, i32 0, i32 0
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %6
  %8 = call i8* @bytePtr(%"RawPtr[Char]" %7)
  %9 = load %String*, %String** %other.addr
  %10 = getelementptr inbounds %String, %String* %9, i32 0, i32 0
  %11 = load %"RawPtr[Char]", %"RawPtr[Char]"* %10
  %12 = call i8* @bytePtr(%"RawPtr[Char]" %11)
  %13 = load i64, i64* %size
  call void @_spr_memcpy(i8* %8, i8* %12, i64 %13)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i64 @size.190(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 1
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = load %String*, %String** %this.addr
  %5 = getelementptr inbounds %String, %String* %4, i32 0, i32 0
  %6 = load %"RawPtr[Char]", %"RawPtr[Char]"* %5
  %7 = call i64 @diff(%"RawPtr[Char]" %3, %"RawPtr[Char]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i64 @diff(%"RawPtr[Char]" %this, %"RawPtr[Char]" %other) #4 {
  %this.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %this, %"RawPtr[Char]"* %this.addr
  %other.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %other, %"RawPtr[Char]"* %other.addr
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]", %"RawPtr[Char]"* %this.addr
  %2 = call i8* @bytePtr(%"RawPtr[Char]" %1)
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %other.addr
  %4 = call i8* @bytePtr(%"RawPtr[Char]" %3)
  %5 = call i64 @ptrDiff(i8* %2, i8* %4)
  store i64 1, i64* %tmp.this1
  %6 = load i64, i64* %tmp.this1
  %7 = sdiv i64 %5, %6
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i8* @bytePtr(%"RawPtr[Char]" %this) #4 {
  %this.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %this, %"RawPtr[Char]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  ret i8* %2
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.191(%String* %this, i64 %size) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %size.addr = alloca i64
  store i64 %size, i64* %size.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  %"$tmpC1" = alloca %"RawPtr[Char]"
  %tmp.this2 = alloca i64
  %tmp.this3 = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load i64, i64* %size.addr
  store i64 1, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  %5 = add i64 %3, %4
  call void @allocRawPtr(%"RawPtr[Char]"* %"$tmpC", i64 %5)
  call void @ctor.192(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %"$tmpC")
  %6 = load %String*, %String** %this.addr
  %7 = getelementptr inbounds %String, %String* %6, i32 0, i32 1
  %8 = load %String*, %String** %this.addr
  %9 = getelementptr inbounds %String, %String* %8, i32 0, i32 0
  %10 = load %"RawPtr[Char]", %"RawPtr[Char]"* %9
  %11 = load i64, i64* %size.addr
  store i64 %11, i64* %tmp.this2
  %12 = load i64, i64* %tmp.this2
  call void @advance(%"RawPtr[Char]"* %"$tmpC1", %"RawPtr[Char]" %10, i64 %12)
  call void @ctor.192(%"RawPtr[Char]"* %7, %"RawPtr[Char]"* %"$tmpC1")
  %13 = load %String*, %String** %this.addr
  %14 = getelementptr inbounds %String, %String* %13, i32 0, i32 2
  %15 = load %String*, %String** %this.addr
  %16 = getelementptr inbounds %String, %String* %15, i32 0, i32 1
  call void @ctor.192(%"RawPtr[Char]"* %14, %"RawPtr[Char]"* %16)
  store i8 0, i8* %tmp.this3
  %17 = load i8, i8* %tmp.this3
  %18 = load %String*, %String** %this.addr
  %19 = getelementptr inbounds %String, %String* %18, i32 0, i32 1
  %20 = load %"RawPtr[Char]", %"RawPtr[Char]"* %19
  %21 = call i8* @value(%"RawPtr[Char]" %20)
  store i8 %17, i8* %21
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.192(%"RawPtr[Char]"* %this, %"RawPtr[Char]"* %other) #3 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  %other.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %other, %"RawPtr[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %5 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @allocRawPtr(%"RawPtr[Char]"* sret %_result, i64 %num) #4 {
  %_result.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %_result, %"RawPtr[Char]"** %_result.addr
  %num.addr = alloca i64
  store i64 %num, i64* %num.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %_result.addr
  %2 = load i64, i64* %num.addr
  %3 = mul i64 %2, 1
  %4 = call i8* @malloc(i64 %3)
  call void @ctor.193(%"RawPtr[Char]"* %1, i8* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.193(%"RawPtr[Char]"* %this, i8* %f_ptr) #3 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  %f_ptr.addr = alloca i8*
  store i8* %f_ptr, i8** %f_ptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %f_ptr.addr
  %2 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %3 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %2, i32 0, i32 0
  store i8* %1, i8** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advance(%"RawPtr[Char]"* sret %_result, %"RawPtr[Char]" %this, i64 %n) #4 {
  %_result.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %_result, %"RawPtr[Char]"** %_result.addr
  %this.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %this, %"RawPtr[Char]"* %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %_result.addr
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %this.addr
  %3 = call i8* @bytePtr(%"RawPtr[Char]" %2)
  %4 = load i64, i64* %n.addr
  store i64 1, i64* %tmp.this1
  %5 = load i64, i64* %tmp.this1
  %6 = mul i64 %4, %5
  store i64 %6, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = call i8* @ptrAdd(i8* %3, i64 %7)
  call void @ctor.194(%"RawPtr[Char]"* %1, i8* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.194(%"RawPtr[Char]"* %this, i8* %byteRef) #4 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  %byteRef.addr = alloca i8*
  store i8* %byteRef, i8** %byteRef.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = load i8*, i8** %byteRef.addr
  %4 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %5 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8* @value(%"RawPtr[Char]" %this) #4 {
  %this.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %this, %"RawPtr[Char]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  ret i8* %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.195(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other) #3 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %other.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %4 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3, i32 0, i32 0
  call void @ctor.196(%"RangeWithLookahead[BufferedCharSourceRange]"* %2, %"RangeWithLookahead[BufferedCharSourceRange]"* %4)
  %5 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %6 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5, i32 0, i32 1
  %7 = load %Location*, %Location** %6
  %8 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %9 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %8, i32 0, i32 1
  store %Location* %7, %Location** %9
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.196(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %other, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %3, i32 0, i32 0
  call void @ctor.197(%BufferedCharSourceRange* %2, %BufferedCharSourceRange* %4)
  %5 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %5, i32 0, i32 1
  %7 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %7, i32 0, i32 1
  call void @ctor.198(%"Vector[Char]"* %6, %"Vector[Char]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.197(%BufferedCharSourceRange* %this, %BufferedCharSourceRange* %other) #3 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  %other.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %other, %BufferedCharSourceRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %other.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %2
  %4 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %5 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %4, i32 0, i32 0
  store %BufferedCharSource* %3, %BufferedCharSource** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.198(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  %size = alloca i64
  %"$tmpC" = alloca %"RawPtr[Char]"
  %"$tmpC1" = alloca %"RawPtr[Char]"
  %dst = alloca %"RawPtr[Char]"
  %src = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  call void @ctor.138(%"RawPtr[Char]"* %2)
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 1
  call void @ctor.138(%"RawPtr[Char]"* %4)
  %5 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %5, i32 0, i32 2
  call void @ctor.138(%"RawPtr[Char]"* %6)
  %7 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %8 = call i64 @size.199(%"Vector[Char]"* %7)
  store i64 %8, i64* %size
  %9 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %10 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %9, i32 0, i32 0
  %11 = load i64, i64* %size
  call void @allocRawPtr(%"RawPtr[Char]"* %"$tmpC", i64 %11)
  call void @"=.200"(%"RawPtr[Char]"* %10, %"RawPtr[Char]"* %"$tmpC")
  %12 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %13 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %12, i32 0, i32 1
  %14 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %15 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %14, i32 0, i32 0
  %16 = load %"RawPtr[Char]", %"RawPtr[Char]"* %15
  %17 = load i64, i64* %size
  call void @advance.201(%"RawPtr[Char]"* %"$tmpC1", %"RawPtr[Char]" %16, i64 %17)
  call void @"=.200"(%"RawPtr[Char]"* %13, %"RawPtr[Char]"* %"$tmpC1")
  %18 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %19 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %18, i32 0, i32 2
  %20 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %21 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %20, i32 0, i32 1
  call void @"=.200"(%"RawPtr[Char]"* %19, %"RawPtr[Char]"* %21)
  %22 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %23 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %22, i32 0, i32 0
  call void @ctor.192(%"RawPtr[Char]"* %dst, %"RawPtr[Char]"* %23)
  %24 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %25 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %24, i32 0, i32 0
  call void @ctor.192(%"RawPtr[Char]"* %src, %"RawPtr[Char]"* %25)
  %26 = load %"RawPtr[Char]", %"RawPtr[Char]"* %dst
  %27 = call i8* @bytePtr(%"RawPtr[Char]" %26)
  %28 = load %"RawPtr[Char]", %"RawPtr[Char]"* %src
  %29 = call i8* @bytePtr(%"RawPtr[Char]" %28)
  %30 = load i64, i64* %size
  %31 = mul i64 %30, 1
  call void @_spr_memcpy(i8* %27, i8* %29, i64 %31)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i64 @size.199(%"Vector[Char]"* %this) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 1
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %5 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %4, i32 0, i32 0
  %6 = load %"RawPtr[Char]", %"RawPtr[Char]"* %5
  %7 = call i64 @diff(%"RawPtr[Char]" %3, %"RawPtr[Char]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.200"(%"RawPtr[Char]"* %this, %"RawPtr[Char]"* %other) #3 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  %other.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %other, %"RawPtr[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %5 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advance.201(%"RawPtr[Char]"* sret %_result, %"RawPtr[Char]" %this, i64 %n) #4 {
  %_result.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %_result, %"RawPtr[Char]"** %_result.addr
  %this.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %this, %"RawPtr[Char]"* %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %_result.addr
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %this.addr
  %3 = call i8* @bytePtr(%"RawPtr[Char]" %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 1
  %6 = call i8* @ptrAdd(i8* %3, i64 %5)
  call void @ctor.194(%"RawPtr[Char]"* %1, i8* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.202(%Token* %this, %Token* %other) #3 {
  %this.addr = alloca %Token*
  store %Token* %this, %Token** %this.addr
  %other.addr = alloca %Token*
  store %Token* %other, %Token** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %this.addr
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %other.addr
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  call void @ctor.182(%Location* %2, %Location* %4)
  %5 = load %Token*, %Token** %this.addr
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 1
  %7 = load %Token*, %Token** %other.addr
  %8 = getelementptr inbounds %Token, %Token* %7, i32 0, i32 1
  call void @ctor.203(%TokenType* %6, %TokenType* %8)
  %9 = load %Token*, %Token** %this.addr
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 2
  %11 = load %Token*, %Token** %other.addr
  %12 = getelementptr inbounds %Token, %Token* %11, i32 0, i32 2
  call void @ctor.189(%String* %10, %String* %12)
  %13 = load %Token*, %Token** %other.addr
  %14 = getelementptr inbounds %Token, %Token* %13, i32 0, i32 3
  %15 = load i64, i64* %14
  %16 = load %Token*, %Token** %this.addr
  %17 = getelementptr inbounds %Token, %Token* %16, i32 0, i32 3
  store i64 %15, i64* %17
  %18 = load %Token*, %Token** %other.addr
  %19 = getelementptr inbounds %Token, %Token* %18, i32 0, i32 4
  %20 = load double, double* %19
  %21 = load %Token*, %Token** %this.addr
  %22 = getelementptr inbounds %Token, %Token* %21, i32 0, i32 4
  store double %20, double* %22
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.203(%TokenType* %this, %TokenType* %other) #3 {
  %this.addr = alloca %TokenType*
  store %TokenType* %this, %TokenType** %this.addr
  %other.addr = alloca %TokenType*
  store %TokenType* %other, %TokenType** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %TokenType*, %TokenType** %other.addr
  %2 = getelementptr inbounds %TokenType, %TokenType* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %TokenType*, %TokenType** %this.addr
  %5 = getelementptr inbounds %TokenType, %TokenType* %4, i32 0, i32 0
  store i32 %3, i32* %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.204(%ErrorReporter* %this, %ErrorReporter* %other) #3 {
  %this.addr = alloca %ErrorReporter*
  store %ErrorReporter* %this, %ErrorReporter** %this.addr
  %other.addr = alloca %ErrorReporter*
  store %ErrorReporter* %other, %ErrorReporter** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %1, i32 0, i32 0
  %3 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %4 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %3, i32 0, i32 0
  call void @ctor.187(%UntypedPtr* %2, %UntypedPtr* %4)
  %5 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %6 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %5, i32 0, i32 1
  %7 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %8 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %7, i32 0, i32 1
  call void @ctor.205(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %6, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.205(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %other, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.206(%"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"* %other) #3 {
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %other.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %other, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 0
  %3 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %3, i32 0, i32 0
  call void @ctor.207(%"RangeWithLookahead[SparrowScanner]"* %2, %"RangeWithLookahead[SparrowScanner]"* %4)
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %5, i32 0, i32 1
  %7 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %8 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %7, i32 0, i32 1
  call void @ctor.204(%ErrorReporter* %6, %ErrorReporter* %8)
  %9 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %10 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %9, i32 0, i32 2
  %11 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %12 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %11, i32 0, i32 2
  call void @ctor.221(%"Vector[UInt]"* %10, %"Vector[UInt]"* %12)
  %13 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %14 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %13, i32 0, i32 3
  %15 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %16 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %15, i32 0, i32 3
  call void @ctor.198(%"Vector[Char]"* %14, %"Vector[Char]"* %16)
  %17 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %18 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %17, i32 0, i32 4
  %19 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %20 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %19, i32 0, i32 4
  call void @ctor.203(%TokenType* %18, %TokenType* %20)
  %21 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %22 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %21, i32 0, i32 5
  %23 = load i32, i32* %22
  %24 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %25 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %24, i32 0, i32 5
  store i32 %23, i32* %25
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.207(%"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %other, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %3, i32 0, i32 0
  call void @ctor.181(%SparrowScanner* %2, %SparrowScanner* %4)
  %5 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %5, i32 0, i32 1
  %7 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %7, i32 0, i32 1
  call void @ctor.208(%"Vector[Token]"* %6, %"Vector[Token]"* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.208(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  %size = alloca i64
  %"$tmpC" = alloca %"RawPtr[Token]"
  %"$tmpC1" = alloca %"RawPtr[Token]"
  %dst = alloca %"RawPtr[Token]"
  %src = alloca %"RawPtr[Token]"
  %"$tmpC2" = alloca %"RawPtr[Token]"
  %"$tmpC3" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  call void @ctor.150(%"RawPtr[Token]"* %2)
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 1
  call void @ctor.150(%"RawPtr[Token]"* %4)
  %5 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %5, i32 0, i32 2
  call void @ctor.150(%"RawPtr[Token]"* %6)
  %7 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %8 = call i64 @size.209(%"Vector[Token]"* %7)
  store i64 %8, i64* %size
  %9 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %10 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %9, i32 0, i32 0
  %11 = load i64, i64* %size
  call void @allocRawPtr.213(%"RawPtr[Token]"* %"$tmpC", i64 %11)
  call void @"=.212"(%"RawPtr[Token]"* %10, %"RawPtr[Token]"* %"$tmpC")
  %12 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %13 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %12, i32 0, i32 1
  %14 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %15 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %14, i32 0, i32 0
  %16 = load %"RawPtr[Token]", %"RawPtr[Token]"* %15
  %17 = load i64, i64* %size
  call void @advance.215(%"RawPtr[Token]"* %"$tmpC1", %"RawPtr[Token]" %16, i64 %17)
  call void @"=.212"(%"RawPtr[Token]"* %13, %"RawPtr[Token]"* %"$tmpC1")
  %18 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %19 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %18, i32 0, i32 2
  %20 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %21 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %20, i32 0, i32 1
  call void @"=.212"(%"RawPtr[Token]"* %19, %"RawPtr[Token]"* %21)
  %22 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %23 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %22, i32 0, i32 0
  call void @ctor.217(%"RawPtr[Token]"* %dst, %"RawPtr[Token]"* %23)
  %24 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %25 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %24, i32 0, i32 0
  call void @ctor.217(%"RawPtr[Token]"* %src, %"RawPtr[Token]"* %25)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %26 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %27 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %26, i32 0, i32 1
  %28 = call i1 @"==.218"(%"RawPtr[Token]"* %dst, %"RawPtr[Token]"* %27)
  %29 = xor i1 true, %28
  br i1 %29, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %30 = load %"RawPtr[Token]", %"RawPtr[Token]"* %dst
  %31 = call %Token* @value.219(%"RawPtr[Token]" %30)
  %32 = load %"RawPtr[Token]", %"RawPtr[Token]"* %src
  %33 = call %Token* @value.219(%"RawPtr[Token]" %32)
  call void @ctor.202(%Token* %31, %Token* %33)
  %34 = load %"RawPtr[Token]", %"RawPtr[Token]"* %dst
  call void @advance.220(%"RawPtr[Token]"* %"$tmpC2", %"RawPtr[Token]" %34)
  call void @"=.212"(%"RawPtr[Token]"* %dst, %"RawPtr[Token]"* %"$tmpC2")
  %35 = load %"RawPtr[Token]", %"RawPtr[Token]"* %src
  call void @advance.220(%"RawPtr[Token]"* %"$tmpC3", %"RawPtr[Token]" %35)
  call void @"=.212"(%"RawPtr[Token]"* %src, %"RawPtr[Token]"* %"$tmpC3")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i64 @size.209(%"Vector[Token]"* %this) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 1
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %2
  %4 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %5 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %4, i32 0, i32 0
  %6 = load %"RawPtr[Token]", %"RawPtr[Token]"* %5
  %7 = call i64 @diff.210(%"RawPtr[Token]" %3, %"RawPtr[Token]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i64 @diff.210(%"RawPtr[Token]" %this, %"RawPtr[Token]" %other) #4 {
  %this.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %this, %"RawPtr[Token]"* %this.addr
  %other.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %other, %"RawPtr[Token]"* %other.addr
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]", %"RawPtr[Token]"* %this.addr
  %2 = call i8* @bytePtr.211(%"RawPtr[Token]" %1)
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %other.addr
  %4 = call i8* @bytePtr.211(%"RawPtr[Token]" %3)
  %5 = call i64 @ptrDiff(i8* %2, i8* %4)
  store i64 72, i64* %tmp.this1
  %6 = load i64, i64* %tmp.this1
  %7 = sdiv i64 %5, %6
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i8* @bytePtr.211(%"RawPtr[Token]" %this) #4 {
  %this.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %this, %"RawPtr[Token]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this.addr, i32 0, i32 0
  %2 = load %Token*, %Token** %1
  %3 = bitcast %Token* %2 to i8*
  ret i8* %3
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.212"(%"RawPtr[Token]"* %this, %"RawPtr[Token]"* %other) #3 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  %other.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %other, %"RawPtr[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %2
  %4 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %5 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %4, i32 0, i32 0
  store %Token* %3, %Token** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @allocRawPtr.213(%"RawPtr[Token]"* sret %_result, i64 %num) #4 {
  %_result.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %_result, %"RawPtr[Token]"** %_result.addr
  %num.addr = alloca i64
  store i64 %num, i64* %num.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %_result.addr
  %2 = load i64, i64* %num.addr
  %3 = mul i64 %2, 72
  %4 = call i8* @malloc(i64 %3)
  %5 = bitcast i8* %4 to %Token*
  call void @ctor.214(%"RawPtr[Token]"* %1, %Token* %5)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.214(%"RawPtr[Token]"* %this, %Token* %f_ptr) #3 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  %f_ptr.addr = alloca %Token*
  store %Token* %f_ptr, %Token** %f_ptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %f_ptr.addr
  %2 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %3 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %2, i32 0, i32 0
  store %Token* %1, %Token** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advance.215(%"RawPtr[Token]"* sret %_result, %"RawPtr[Token]" %this, i64 %n) #4 {
  %_result.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %_result, %"RawPtr[Token]"** %_result.addr
  %this.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %this, %"RawPtr[Token]"* %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %_result.addr
  %2 = load %"RawPtr[Token]", %"RawPtr[Token]"* %this.addr
  %3 = call i8* @bytePtr.211(%"RawPtr[Token]" %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 72
  %6 = call i8* @ptrAdd(i8* %3, i64 %5)
  call void @ctor.216(%"RawPtr[Token]"* %1, i8* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.216(%"RawPtr[Token]"* %this, i8* %byteRef) #4 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  %byteRef.addr = alloca i8*
  store i8* %byteRef, i8** %byteRef.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %1, i32 0, i32 0
  store %Token* null, %Token** %2
  %3 = load i8*, i8** %byteRef.addr
  %4 = bitcast i8* %3 to %Token*
  %5 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %6 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %5, i32 0, i32 0
  store %Token* %4, %Token** %6
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.217(%"RawPtr[Token]"* %this, %"RawPtr[Token]"* %other) #3 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  %other.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %other, %"RawPtr[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %2
  %4 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %5 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %4, i32 0, i32 0
  store %Token* %3, %Token** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.218"(%"RawPtr[Token]"* %this, %"RawPtr[Token]"* %other) #3 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  %other.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %other, %"RawPtr[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %2
  %4 = bitcast %Token* %3 to i8*
  %5 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %other.addr
  %6 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %5, i32 0, i32 0
  %7 = load %Token*, %Token** %6
  %8 = bitcast %Token* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal %Token* @value.219(%"RawPtr[Token]" %this) #4 {
  %this.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %this, %"RawPtr[Token]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this.addr, i32 0, i32 0
  %2 = load %Token*, %Token** %1
  ret %Token* %2
}

; Function Attrs: inlinehint nounwind
define internal void @advance.220(%"RawPtr[Token]"* sret %_result, %"RawPtr[Token]" %this) #4 {
  %_result.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %_result, %"RawPtr[Token]"** %_result.addr
  %this.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %this, %"RawPtr[Token]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %_result.addr
  %2 = load %"RawPtr[Token]", %"RawPtr[Token]"* %this.addr
  %3 = call i8* @bytePtr.211(%"RawPtr[Token]" %2)
  %4 = call i8* @ptrAdd(i8* %3, i64 72)
  call void @ctor.216(%"RawPtr[Token]"* %1, i8* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.221(%"Vector[UInt]"* %this, %"Vector[UInt]"* %other) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %other.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %other, %"Vector[UInt]"** %other.addr
  %size = alloca i64
  %"$tmpC" = alloca %"RawPtr[UInt]"
  %"$tmpC1" = alloca %"RawPtr[UInt]"
  %dst = alloca %"RawPtr[UInt]"
  %src = alloca %"RawPtr[UInt]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 0
  call void @ctor.152(%"RawPtr[UInt]"* %2)
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %4 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %3, i32 0, i32 1
  call void @ctor.152(%"RawPtr[UInt]"* %4)
  %5 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %6 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %5, i32 0, i32 2
  call void @ctor.152(%"RawPtr[UInt]"* %6)
  %7 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %8 = call i64 @size.222(%"Vector[UInt]"* %7)
  store i64 %8, i64* %size
  %9 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %10 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %9, i32 0, i32 0
  %11 = load i64, i64* %size
  call void @allocRawPtr.226(%"RawPtr[UInt]"* %"$tmpC", i64 %11)
  call void @"=.225"(%"RawPtr[UInt]"* %10, %"RawPtr[UInt]"* %"$tmpC")
  %12 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %13 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %12, i32 0, i32 1
  %14 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %15 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %14, i32 0, i32 0
  %16 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %15
  %17 = load i64, i64* %size
  call void @advance.228(%"RawPtr[UInt]"* %"$tmpC1", %"RawPtr[UInt]" %16, i64 %17)
  call void @"=.225"(%"RawPtr[UInt]"* %13, %"RawPtr[UInt]"* %"$tmpC1")
  %18 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %19 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %18, i32 0, i32 2
  %20 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %21 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %20, i32 0, i32 1
  call void @"=.225"(%"RawPtr[UInt]"* %19, %"RawPtr[UInt]"* %21)
  %22 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %23 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %22, i32 0, i32 0
  call void @ctor.230(%"RawPtr[UInt]"* %dst, %"RawPtr[UInt]"* %23)
  %24 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %25 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %24, i32 0, i32 0
  call void @ctor.230(%"RawPtr[UInt]"* %src, %"RawPtr[UInt]"* %25)
  %26 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %dst
  %27 = call i8* @bytePtr.224(%"RawPtr[UInt]" %26)
  %28 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %src
  %29 = call i8* @bytePtr.224(%"RawPtr[UInt]" %28)
  %30 = load i64, i64* %size
  %31 = mul i64 %30, 4
  call void @_spr_memcpy(i8* %27, i8* %29, i64 %31)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i64 @size.222(%"Vector[UInt]"* %this) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 1
  %3 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %2
  %4 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %5 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %4, i32 0, i32 0
  %6 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %5
  %7 = call i64 @diff.223(%"RawPtr[UInt]" %3, %"RawPtr[UInt]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i64 @diff.223(%"RawPtr[UInt]" %this, %"RawPtr[UInt]" %other) #4 {
  %this.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %this, %"RawPtr[UInt]"* %this.addr
  %other.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %other, %"RawPtr[UInt]"* %other.addr
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %this.addr
  %2 = call i8* @bytePtr.224(%"RawPtr[UInt]" %1)
  %3 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %other.addr
  %4 = call i8* @bytePtr.224(%"RawPtr[UInt]" %3)
  %5 = call i64 @ptrDiff(i8* %2, i8* %4)
  store i64 4, i64* %tmp.this1
  %6 = load i64, i64* %tmp.this1
  %7 = sdiv i64 %5, %6
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i8* @bytePtr.224(%"RawPtr[UInt]" %this) #4 {
  %this.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %this, %"RawPtr[UInt]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %this.addr, i32 0, i32 0
  %2 = load i32*, i32** %1
  %3 = bitcast i32* %2 to i8*
  ret i8* %3
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.225"(%"RawPtr[UInt]"* %this, %"RawPtr[UInt]"* %other) #3 {
  %this.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %this, %"RawPtr[UInt]"** %this.addr
  %other.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %other, %"RawPtr[UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %1, i32 0, i32 0
  %3 = load i32*, i32** %2
  %4 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %this.addr
  %5 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %4, i32 0, i32 0
  store i32* %3, i32** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @allocRawPtr.226(%"RawPtr[UInt]"* sret %_result, i64 %num) #4 {
  %_result.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %_result, %"RawPtr[UInt]"** %_result.addr
  %num.addr = alloca i64
  store i64 %num, i64* %num.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %_result.addr
  %2 = load i64, i64* %num.addr
  %3 = mul i64 %2, 4
  %4 = call i8* @malloc(i64 %3)
  %5 = bitcast i8* %4 to i32*
  call void @ctor.227(%"RawPtr[UInt]"* %1, i32* %5)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.227(%"RawPtr[UInt]"* %this, i32* %f_ptr) #3 {
  %this.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %this, %"RawPtr[UInt]"** %this.addr
  %f_ptr.addr = alloca i32*
  store i32* %f_ptr, i32** %f_ptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32*, i32** %f_ptr.addr
  %2 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %this.addr
  %3 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %2, i32 0, i32 0
  store i32* %1, i32** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advance.228(%"RawPtr[UInt]"* sret %_result, %"RawPtr[UInt]" %this, i64 %n) #4 {
  %_result.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %_result, %"RawPtr[UInt]"** %_result.addr
  %this.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %this, %"RawPtr[UInt]"* %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %_result.addr
  %2 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %this.addr
  %3 = call i8* @bytePtr.224(%"RawPtr[UInt]" %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 4
  %6 = call i8* @ptrAdd(i8* %3, i64 %5)
  call void @ctor.229(%"RawPtr[UInt]"* %1, i8* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.229(%"RawPtr[UInt]"* %this, i8* %byteRef) #4 {
  %this.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %this, %"RawPtr[UInt]"** %this.addr
  %byteRef.addr = alloca i8*
  store i8* %byteRef, i8** %byteRef.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %1, i32 0, i32 0
  store i32* null, i32** %2
  %3 = load i8*, i8** %byteRef.addr
  %4 = bitcast i8* %3 to i32*
  %5 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %this.addr
  %6 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %5, i32 0, i32 0
  store i32* %4, i32** %6
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.230(%"RawPtr[UInt]"* %this, %"RawPtr[UInt]"* %other) #3 {
  %this.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %this, %"RawPtr[UInt]"** %this.addr
  %other.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %other, %"RawPtr[UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %1, i32 0, i32 0
  %3 = load i32*, i32** %2
  %4 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %this.addr
  %5 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %4, i32 0, i32 0
  store i32* %3, i32** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.231(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %other.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  call void @ctor.232(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %4)
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  call void @ctor.202(%Token* %6, %Token* %8)
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9, i32 0, i32 2
  %11 = load i1, i1* %10
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 2
  store i1 %11, i1* %13
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %15 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, i32 0, i32 3
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %17 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i32 0, i32 3
  call void @ctor.233(%AstBuilder* %15, %AstBuilder* %17)
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %19 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18, i32 0, i32 4
  %20 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %21 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %20, i32 0, i32 4
  call void @ctor.204(%ErrorReporter* %19, %ErrorReporter* %21)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.232(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  call void @ctor.206(%"SparrowLayoutDecoder[SparrowScanner]"* %2, %"SparrowLayoutDecoder[SparrowScanner]"* %4)
  %5 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  call void @ctor.208(%"Vector[Token]"* %6, %"Vector[Token]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.233(%AstBuilder* %this, %AstBuilder* %other) #3 {
  %this.addr = alloca %AstBuilder*
  store %AstBuilder* %this, %AstBuilder** %this.addr
  %other.addr = alloca %AstBuilder*
  store %AstBuilder* %other, %AstBuilder** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %this.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 0
  %3 = load %AstBuilder*, %AstBuilder** %other.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  call void @ctor.187(%UntypedPtr* %2, %UntypedPtr* %4)
  %5 = load %AstBuilder*, %AstBuilder** %this.addr
  %6 = getelementptr inbounds %AstBuilder, %AstBuilder* %5, i32 0, i32 1
  %7 = load %AstBuilder*, %AstBuilder** %other.addr
  %8 = getelementptr inbounds %AstBuilder, %AstBuilder* %7, i32 0, i32 1
  call void @ctor.234(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %6, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %8)
  %9 = load %AstBuilder*, %AstBuilder** %this.addr
  %10 = getelementptr inbounds %AstBuilder, %AstBuilder* %9, i32 0, i32 2
  %11 = load %AstBuilder*, %AstBuilder** %other.addr
  %12 = getelementptr inbounds %AstBuilder, %AstBuilder* %11, i32 0, i32 2
  call void @ctor.235(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %10, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %12)
  %13 = load %AstBuilder*, %AstBuilder** %this.addr
  %14 = getelementptr inbounds %AstBuilder, %AstBuilder* %13, i32 0, i32 3
  %15 = load %AstBuilder*, %AstBuilder** %other.addr
  %16 = getelementptr inbounds %AstBuilder, %AstBuilder* %15, i32 0, i32 3
  call void @ctor.235(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %14, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %16)
  %17 = load %AstBuilder*, %AstBuilder** %this.addr
  %18 = getelementptr inbounds %AstBuilder, %AstBuilder* %17, i32 0, i32 4
  %19 = load %AstBuilder*, %AstBuilder** %other.addr
  %20 = getelementptr inbounds %AstBuilder, %AstBuilder* %19, i32 0, i32 4
  call void @ctor.236(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %18, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %20)
  %21 = load %AstBuilder*, %AstBuilder** %this.addr
  %22 = getelementptr inbounds %AstBuilder, %AstBuilder* %21, i32 0, i32 5
  %23 = load %AstBuilder*, %AstBuilder** %other.addr
  %24 = getelementptr inbounds %AstBuilder, %AstBuilder* %23, i32 0, i32 5
  call void @ctor.237(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %22, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %24)
  %25 = load %AstBuilder*, %AstBuilder** %this.addr
  %26 = getelementptr inbounds %AstBuilder, %AstBuilder* %25, i32 0, i32 6
  %27 = load %AstBuilder*, %AstBuilder** %other.addr
  %28 = getelementptr inbounds %AstBuilder, %AstBuilder* %27, i32 0, i32 6
  call void @ctor.238(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %26, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %28)
  %29 = load %AstBuilder*, %AstBuilder** %this.addr
  %30 = getelementptr inbounds %AstBuilder, %AstBuilder* %29, i32 0, i32 7
  %31 = load %AstBuilder*, %AstBuilder** %other.addr
  %32 = getelementptr inbounds %AstBuilder, %AstBuilder* %31, i32 0, i32 7
  call void @ctor.239(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %30, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %32)
  %33 = load %AstBuilder*, %AstBuilder** %this.addr
  %34 = getelementptr inbounds %AstBuilder, %AstBuilder* %33, i32 0, i32 8
  %35 = load %AstBuilder*, %AstBuilder** %other.addr
  %36 = getelementptr inbounds %AstBuilder, %AstBuilder* %35, i32 0, i32 8
  call void @ctor.236(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %34, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %36)
  %37 = load %AstBuilder*, %AstBuilder** %this.addr
  %38 = getelementptr inbounds %AstBuilder, %AstBuilder* %37, i32 0, i32 9
  %39 = load %AstBuilder*, %AstBuilder** %other.addr
  %40 = getelementptr inbounds %AstBuilder, %AstBuilder* %39, i32 0, i32 9
  call void @ctor.240(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %38, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %40)
  %41 = load %AstBuilder*, %AstBuilder** %this.addr
  %42 = getelementptr inbounds %AstBuilder, %AstBuilder* %41, i32 0, i32 10
  %43 = load %AstBuilder*, %AstBuilder** %other.addr
  %44 = getelementptr inbounds %AstBuilder, %AstBuilder* %43, i32 0, i32 10
  call void @ctor.236(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %42, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %44)
  %45 = load %AstBuilder*, %AstBuilder** %this.addr
  %46 = getelementptr inbounds %AstBuilder, %AstBuilder* %45, i32 0, i32 11
  %47 = load %AstBuilder*, %AstBuilder** %other.addr
  %48 = getelementptr inbounds %AstBuilder, %AstBuilder* %47, i32 0, i32 11
  call void @ctor.236(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %46, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %48)
  %49 = load %AstBuilder*, %AstBuilder** %this.addr
  %50 = getelementptr inbounds %AstBuilder, %AstBuilder* %49, i32 0, i32 12
  %51 = load %AstBuilder*, %AstBuilder** %other.addr
  %52 = getelementptr inbounds %AstBuilder, %AstBuilder* %51, i32 0, i32 12
  call void @ctor.236(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %50, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %52)
  %53 = load %AstBuilder*, %AstBuilder** %this.addr
  %54 = getelementptr inbounds %AstBuilder, %AstBuilder* %53, i32 0, i32 13
  %55 = load %AstBuilder*, %AstBuilder** %other.addr
  %56 = getelementptr inbounds %AstBuilder, %AstBuilder* %55, i32 0, i32 13
  call void @ctor.241(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %54, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %56)
  %57 = load %AstBuilder*, %AstBuilder** %this.addr
  %58 = getelementptr inbounds %AstBuilder, %AstBuilder* %57, i32 0, i32 14
  %59 = load %AstBuilder*, %AstBuilder** %other.addr
  %60 = getelementptr inbounds %AstBuilder, %AstBuilder* %59, i32 0, i32 14
  call void @ctor.242(%"FunctionPtr2[Node, UntypedPtr, Node]"* %58, %"FunctionPtr2[Node, UntypedPtr, Node]"* %60)
  %61 = load %AstBuilder*, %AstBuilder** %this.addr
  %62 = getelementptr inbounds %AstBuilder, %AstBuilder* %61, i32 0, i32 15
  %63 = load %AstBuilder*, %AstBuilder** %other.addr
  %64 = getelementptr inbounds %AstBuilder, %AstBuilder* %63, i32 0, i32 15
  call void @ctor.243(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %62, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %64)
  %65 = load %AstBuilder*, %AstBuilder** %this.addr
  %66 = getelementptr inbounds %AstBuilder, %AstBuilder* %65, i32 0, i32 16
  %67 = load %AstBuilder*, %AstBuilder** %other.addr
  %68 = getelementptr inbounds %AstBuilder, %AstBuilder* %67, i32 0, i32 16
  call void @ctor.244(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %66, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %68)
  %69 = load %AstBuilder*, %AstBuilder** %this.addr
  %70 = getelementptr inbounds %AstBuilder, %AstBuilder* %69, i32 0, i32 17
  %71 = load %AstBuilder*, %AstBuilder** %other.addr
  %72 = getelementptr inbounds %AstBuilder, %AstBuilder* %71, i32 0, i32 17
  call void @ctor.237(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %70, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %72)
  %73 = load %AstBuilder*, %AstBuilder** %this.addr
  %74 = getelementptr inbounds %AstBuilder, %AstBuilder* %73, i32 0, i32 18
  %75 = load %AstBuilder*, %AstBuilder** %other.addr
  %76 = getelementptr inbounds %AstBuilder, %AstBuilder* %75, i32 0, i32 18
  call void @ctor.245(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %74, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %76)
  %77 = load %AstBuilder*, %AstBuilder** %this.addr
  %78 = getelementptr inbounds %AstBuilder, %AstBuilder* %77, i32 0, i32 19
  %79 = load %AstBuilder*, %AstBuilder** %other.addr
  %80 = getelementptr inbounds %AstBuilder, %AstBuilder* %79, i32 0, i32 19
  call void @ctor.243(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %78, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %80)
  %81 = load %AstBuilder*, %AstBuilder** %this.addr
  %82 = getelementptr inbounds %AstBuilder, %AstBuilder* %81, i32 0, i32 20
  %83 = load %AstBuilder*, %AstBuilder** %other.addr
  %84 = getelementptr inbounds %AstBuilder, %AstBuilder* %83, i32 0, i32 20
  call void @ctor.243(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %82, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %84)
  %85 = load %AstBuilder*, %AstBuilder** %this.addr
  %86 = getelementptr inbounds %AstBuilder, %AstBuilder* %85, i32 0, i32 21
  %87 = load %AstBuilder*, %AstBuilder** %other.addr
  %88 = getelementptr inbounds %AstBuilder, %AstBuilder* %87, i32 0, i32 21
  call void @ctor.243(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %86, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %88)
  %89 = load %AstBuilder*, %AstBuilder** %this.addr
  %90 = getelementptr inbounds %AstBuilder, %AstBuilder* %89, i32 0, i32 22
  %91 = load %AstBuilder*, %AstBuilder** %other.addr
  %92 = getelementptr inbounds %AstBuilder, %AstBuilder* %91, i32 0, i32 22
  call void @ctor.235(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %90, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %92)
  %93 = load %AstBuilder*, %AstBuilder** %this.addr
  %94 = getelementptr inbounds %AstBuilder, %AstBuilder* %93, i32 0, i32 23
  %95 = load %AstBuilder*, %AstBuilder** %other.addr
  %96 = getelementptr inbounds %AstBuilder, %AstBuilder* %95, i32 0, i32 23
  call void @ctor.246(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %94, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %96)
  %97 = load %AstBuilder*, %AstBuilder** %this.addr
  %98 = getelementptr inbounds %AstBuilder, %AstBuilder* %97, i32 0, i32 24
  %99 = load %AstBuilder*, %AstBuilder** %other.addr
  %100 = getelementptr inbounds %AstBuilder, %AstBuilder* %99, i32 0, i32 24
  call void @ctor.247(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %98, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %100)
  %101 = load %AstBuilder*, %AstBuilder** %this.addr
  %102 = getelementptr inbounds %AstBuilder, %AstBuilder* %101, i32 0, i32 25
  %103 = load %AstBuilder*, %AstBuilder** %other.addr
  %104 = getelementptr inbounds %AstBuilder, %AstBuilder* %103, i32 0, i32 25
  call void @ctor.248(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %102, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %104)
  %105 = load %AstBuilder*, %AstBuilder** %this.addr
  %106 = getelementptr inbounds %AstBuilder, %AstBuilder* %105, i32 0, i32 26
  %107 = load %AstBuilder*, %AstBuilder** %other.addr
  %108 = getelementptr inbounds %AstBuilder, %AstBuilder* %107, i32 0, i32 26
  call void @ctor.249(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %106, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %108)
  %109 = load %AstBuilder*, %AstBuilder** %this.addr
  %110 = getelementptr inbounds %AstBuilder, %AstBuilder* %109, i32 0, i32 27
  %111 = load %AstBuilder*, %AstBuilder** %other.addr
  %112 = getelementptr inbounds %AstBuilder, %AstBuilder* %111, i32 0, i32 27
  call void @ctor.250(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %110, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %112)
  %113 = load %AstBuilder*, %AstBuilder** %this.addr
  %114 = getelementptr inbounds %AstBuilder, %AstBuilder* %113, i32 0, i32 28
  %115 = load %AstBuilder*, %AstBuilder** %other.addr
  %116 = getelementptr inbounds %AstBuilder, %AstBuilder* %115, i32 0, i32 28
  call void @ctor.251(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %114, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %116)
  %117 = load %AstBuilder*, %AstBuilder** %this.addr
  %118 = getelementptr inbounds %AstBuilder, %AstBuilder* %117, i32 0, i32 29
  %119 = load %AstBuilder*, %AstBuilder** %other.addr
  %120 = getelementptr inbounds %AstBuilder, %AstBuilder* %119, i32 0, i32 29
  call void @ctor.252(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %118, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %120)
  %121 = load %AstBuilder*, %AstBuilder** %this.addr
  %122 = getelementptr inbounds %AstBuilder, %AstBuilder* %121, i32 0, i32 30
  %123 = load %AstBuilder*, %AstBuilder** %other.addr
  %124 = getelementptr inbounds %AstBuilder, %AstBuilder* %123, i32 0, i32 30
  call void @ctor.253(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %122, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %124)
  %125 = load %AstBuilder*, %AstBuilder** %this.addr
  %126 = getelementptr inbounds %AstBuilder, %AstBuilder* %125, i32 0, i32 31
  %127 = load %AstBuilder*, %AstBuilder** %other.addr
  %128 = getelementptr inbounds %AstBuilder, %AstBuilder* %127, i32 0, i32 31
  call void @ctor.254(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %126, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %128)
  %129 = load %AstBuilder*, %AstBuilder** %this.addr
  %130 = getelementptr inbounds %AstBuilder, %AstBuilder* %129, i32 0, i32 32
  %131 = load %AstBuilder*, %AstBuilder** %other.addr
  %132 = getelementptr inbounds %AstBuilder, %AstBuilder* %131, i32 0, i32 32
  call void @ctor.255(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %130, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %132)
  %133 = load %AstBuilder*, %AstBuilder** %this.addr
  %134 = getelementptr inbounds %AstBuilder, %AstBuilder* %133, i32 0, i32 33
  %135 = load %AstBuilder*, %AstBuilder** %other.addr
  %136 = getelementptr inbounds %AstBuilder, %AstBuilder* %135, i32 0, i32 33
  call void @ctor.245(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %134, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %136)
  %137 = load %AstBuilder*, %AstBuilder** %this.addr
  %138 = getelementptr inbounds %AstBuilder, %AstBuilder* %137, i32 0, i32 34
  %139 = load %AstBuilder*, %AstBuilder** %other.addr
  %140 = getelementptr inbounds %AstBuilder, %AstBuilder* %139, i32 0, i32 34
  call void @ctor.256(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %138, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %140)
  %141 = load %AstBuilder*, %AstBuilder** %this.addr
  %142 = getelementptr inbounds %AstBuilder, %AstBuilder* %141, i32 0, i32 35
  %143 = load %AstBuilder*, %AstBuilder** %other.addr
  %144 = getelementptr inbounds %AstBuilder, %AstBuilder* %143, i32 0, i32 35
  call void @ctor.257(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %142, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %144)
  %145 = load %AstBuilder*, %AstBuilder** %this.addr
  %146 = getelementptr inbounds %AstBuilder, %AstBuilder* %145, i32 0, i32 36
  %147 = load %AstBuilder*, %AstBuilder** %other.addr
  %148 = getelementptr inbounds %AstBuilder, %AstBuilder* %147, i32 0, i32 36
  call void @ctor.238(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %146, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %148)
  %149 = load %AstBuilder*, %AstBuilder** %this.addr
  %150 = getelementptr inbounds %AstBuilder, %AstBuilder* %149, i32 0, i32 37
  %151 = load %AstBuilder*, %AstBuilder** %other.addr
  %152 = getelementptr inbounds %AstBuilder, %AstBuilder* %151, i32 0, i32 37
  call void @ctor.257(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %150, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %152)
  %153 = load %AstBuilder*, %AstBuilder** %this.addr
  %154 = getelementptr inbounds %AstBuilder, %AstBuilder* %153, i32 0, i32 38
  %155 = load %AstBuilder*, %AstBuilder** %other.addr
  %156 = getelementptr inbounds %AstBuilder, %AstBuilder* %155, i32 0, i32 38
  call void @ctor.247(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %154, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %156)
  %157 = load %AstBuilder*, %AstBuilder** %this.addr
  %158 = getelementptr inbounds %AstBuilder, %AstBuilder* %157, i32 0, i32 39
  %159 = load %AstBuilder*, %AstBuilder** %other.addr
  %160 = getelementptr inbounds %AstBuilder, %AstBuilder* %159, i32 0, i32 39
  call void @ctor.247(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %158, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %160)
  %161 = load %AstBuilder*, %AstBuilder** %this.addr
  %162 = getelementptr inbounds %AstBuilder, %AstBuilder* %161, i32 0, i32 40
  %163 = load %AstBuilder*, %AstBuilder** %other.addr
  %164 = getelementptr inbounds %AstBuilder, %AstBuilder* %163, i32 0, i32 40
  call void @ctor.256(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %162, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %164)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.234(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.235(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.236(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.237(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.238(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.239(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.240(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.241(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.242(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %other, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.243(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %other, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.244(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.245(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.246(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.247(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %this, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, @Location]"*
  store %"FunctionPtr2[Node, UntypedPtr, @Location]"* %this, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, @Location]"*
  store %"FunctionPtr2[Node, UntypedPtr, @Location]"* %other, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, @Location]"*, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr2[Node, UntypedPtr, @Location]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr2[Node, UntypedPtr, @Location]"*, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr2[Node, UntypedPtr, @Location]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.248(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]", %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]", %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.249(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Int]", %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Int]", %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.250(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]", %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]", %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.251(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Long]", %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Long]", %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.252(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]", %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]", %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.253(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Float]", %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Float]", %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.254(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Double]", %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Double]", %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.255(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Char]", %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Char]", %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.256(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Node]", %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Node]", %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.257(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.258(%ParserContext* %this) #3 {
  %this.addr = alloca %ParserContext*
  store %ParserContext* %this, %ParserContext** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %this.addr
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %1, i32 0, i32 2
  call void @dtor.259(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  %3 = load %ParserContext*, %ParserContext** %this.addr
  %4 = getelementptr inbounds %ParserContext, %ParserContext* %3, i32 0, i32 1
  call void @dtor.266(%"SparrowLayoutDecoder[SparrowScanner]"* %4)
  %5 = load %ParserContext*, %ParserContext** %this.addr
  %6 = getelementptr inbounds %ParserContext, %ParserContext* %5, i32 0, i32 0
  call void @dtor.277(%SparrowScanner* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.259(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #3 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 1
  call void @dtor.260(%Token* %2)
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  call void @dtor.262(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.260(%Token* %this) #3 {
  %this.addr = alloca %Token*
  store %Token* %this, %Token** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %this.addr
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 2
  call void @dtor.261(%String* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.261(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  call void @freePtr(%"RawPtr[Char]" %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @freePtr(%"RawPtr[Char]" %this) #4 {
  %this.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %this, %"RawPtr[Char]"* %this.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"RawPtr[Char]", %"RawPtr[Char]"* %this.addr
  %2 = call i1 @isSet(%"RawPtr[Char]" %1)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %this.addr
  %4 = call i8* @bytePtr(%"RawPtr[Char]" %3)
  call void @free(i8* %4)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet(%"RawPtr[Char]" %this) #4 {
  %this.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %this, %"RawPtr[Char]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %this.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = call i1 @implOpRefNE(i8* %2, i8* null)
  ret i1 %3
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.262(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 1
  call void @dtor.263(%"Vector[Token]"* %2)
  %3 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  call void @dtor.266(%"SparrowLayoutDecoder[SparrowScanner]"* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.263(%"Vector[Token]"* %this) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %p = alloca %"RawPtr[Token]"
  %"$tmpC" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  call void @ctor.217(%"RawPtr[Token]"* %p, %"RawPtr[Token]"* %2)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 1
  %5 = call i1 @"==.218"(%"RawPtr[Token]"* %p, %"RawPtr[Token]"* %4)
  %6 = xor i1 true, %5
  br i1 %6, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %7 = load %"RawPtr[Token]", %"RawPtr[Token]"* %p
  %8 = call %Token* @value.219(%"RawPtr[Token]" %7)
  call void @dtor.260(%Token* %8)
  br label %while_step

while_step:                                       ; preds = %while_body
  %9 = load %"RawPtr[Token]", %"RawPtr[Token]"* %p
  call void @advance.220(%"RawPtr[Token]"* %"$tmpC", %"RawPtr[Token]" %9)
  call void @"=.212"(%"RawPtr[Token]"* %p, %"RawPtr[Token]"* %"$tmpC")
  br label %while_block

while_end:                                        ; preds = %while_block
  %10 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %11 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %10, i32 0, i32 0
  %12 = load %"RawPtr[Token]", %"RawPtr[Token]"* %11
  call void @freePtr.264(%"RawPtr[Token]" %12)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @freePtr.264(%"RawPtr[Token]" %this) #4 {
  %this.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %this, %"RawPtr[Token]"* %this.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"RawPtr[Token]", %"RawPtr[Token]"* %this.addr
  %2 = call i1 @isSet.265(%"RawPtr[Token]" %1)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %this.addr
  %4 = call i8* @bytePtr.211(%"RawPtr[Token]" %3)
  call void @free(i8* %4)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet.265(%"RawPtr[Token]" %this) #4 {
  %this.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %this, %"RawPtr[Token]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %this.addr, i32 0, i32 0
  %2 = load %Token*, %Token** %1
  %3 = bitcast %Token* %2 to i8*
  %4 = call i1 @implOpRefNE(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.266(%"SparrowLayoutDecoder[SparrowScanner]"* %this) #3 {
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 3
  call void @dtor.267(%"Vector[Char]"* %2)
  %3 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %3, i32 0, i32 2
  call void @dtor.270(%"Vector[UInt]"* %4)
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %5, i32 0, i32 0
  call void @dtor.276(%"RangeWithLookahead[SparrowScanner]"* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.267(%"Vector[Char]"* %this) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %p = alloca %"RawPtr[Char]"
  %"$tmpC" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  call void @ctor.192(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %2)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 1
  %5 = call i1 @"==.268"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %4)
  %6 = xor i1 true, %5
  br i1 %6, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  %8 = call i8* @value(%"RawPtr[Char]" %7)
  %9 = load i8, i8* %8
  br label %while_step

while_step:                                       ; preds = %while_body
  %10 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %10)
  call void @"=.200"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpC")
  br label %while_block

while_end:                                        ; preds = %while_block
  %11 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %12 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %11, i32 0, i32 0
  %13 = load %"RawPtr[Char]", %"RawPtr[Char]"* %12
  call void @freePtr(%"RawPtr[Char]" %13)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.268"(%"RawPtr[Char]"* %this, %"RawPtr[Char]"* %other) #3 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  %other.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %other, %"RawPtr[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %other.addr
  %5 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: inlinehint nounwind
define internal void @advance.269(%"RawPtr[Char]"* sret %_result, %"RawPtr[Char]" %this) #4 {
  %_result.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %_result, %"RawPtr[Char]"** %_result.addr
  %this.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %this, %"RawPtr[Char]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %_result.addr
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %this.addr
  %3 = call i8* @bytePtr(%"RawPtr[Char]" %2)
  %4 = call i8* @ptrAdd(i8* %3, i64 1)
  call void @ctor.194(%"RawPtr[Char]"* %1, i8* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.270(%"Vector[UInt]"* %this) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %p = alloca %"RawPtr[UInt]"
  %"$tmpC" = alloca %"RawPtr[UInt]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 0
  call void @ctor.230(%"RawPtr[UInt]"* %p, %"RawPtr[UInt]"* %2)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %4 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %3, i32 0, i32 1
  %5 = call i1 @"==.271"(%"RawPtr[UInt]"* %p, %"RawPtr[UInt]"* %4)
  %6 = xor i1 true, %5
  br i1 %6, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %7 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %p
  %8 = call i32* @value.272(%"RawPtr[UInt]" %7)
  %9 = load i32, i32* %8
  br label %while_step

while_step:                                       ; preds = %while_body
  %10 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %p
  call void @advance.273(%"RawPtr[UInt]"* %"$tmpC", %"RawPtr[UInt]" %10)
  call void @"=.225"(%"RawPtr[UInt]"* %p, %"RawPtr[UInt]"* %"$tmpC")
  br label %while_block

while_end:                                        ; preds = %while_block
  %11 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %12 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %11, i32 0, i32 0
  %13 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %12
  call void @freePtr.274(%"RawPtr[UInt]" %13)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.271"(%"RawPtr[UInt]"* %this, %"RawPtr[UInt]"* %other) #3 {
  %this.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %this, %"RawPtr[UInt]"** %this.addr
  %other.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %other, %"RawPtr[UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %1, i32 0, i32 0
  %3 = load i32*, i32** %2
  %4 = bitcast i32* %3 to i8*
  %5 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %other.addr
  %6 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %5, i32 0, i32 0
  %7 = load i32*, i32** %6
  %8 = bitcast i32* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal i32* @value.272(%"RawPtr[UInt]" %this) #4 {
  %this.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %this, %"RawPtr[UInt]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %this.addr, i32 0, i32 0
  %2 = load i32*, i32** %1
  ret i32* %2
}

; Function Attrs: inlinehint nounwind
define internal void @advance.273(%"RawPtr[UInt]"* sret %_result, %"RawPtr[UInt]" %this) #4 {
  %_result.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %_result, %"RawPtr[UInt]"** %_result.addr
  %this.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %this, %"RawPtr[UInt]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %_result.addr
  %2 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %this.addr
  %3 = call i8* @bytePtr.224(%"RawPtr[UInt]" %2)
  %4 = call i8* @ptrAdd(i8* %3, i64 4)
  call void @ctor.229(%"RawPtr[UInt]"* %1, i8* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @freePtr.274(%"RawPtr[UInt]" %this) #4 {
  %this.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %this, %"RawPtr[UInt]"* %this.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %this.addr
  %2 = call i1 @isSet.275(%"RawPtr[UInt]" %1)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %this.addr
  %4 = call i8* @bytePtr.224(%"RawPtr[UInt]" %3)
  call void @free(i8* %4)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet.275(%"RawPtr[UInt]" %this) #4 {
  %this.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %this, %"RawPtr[UInt]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %this.addr, i32 0, i32 0
  %2 = load i32*, i32** %1
  %3 = bitcast i32* %2 to i8*
  %4 = call i1 @implOpRefNE(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.276(%"RangeWithLookahead[SparrowScanner]"* %this) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %1, i32 0, i32 1
  call void @dtor.263(%"Vector[Token]"* %2)
  %3 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %3, i32 0, i32 0
  call void @dtor.277(%SparrowScanner* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.277(%SparrowScanner* %this) #3 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 3
  call void @dtor.260(%Token* %2)
  %3 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %3, i32 0, i32 2
  call void @dtor.278(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4)
  %5 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %5, i32 0, i32 1
  call void @dtor.280(%BufferedCharSource* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.278(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #3 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  call void @dtor.279(%"RangeWithLookahead[BufferedCharSourceRange]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.279(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #3 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 1
  call void @dtor.267(%"Vector[Char]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.280(%BufferedCharSource* %this) #3 {
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %1, i32 0, i32 1
  call void @dtor.261(%String* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.281"(%ParserContext* %this, %ParserContext* %other) #3 {
  %this.addr = alloca %ParserContext*
  store %ParserContext* %this, %ParserContext** %this.addr
  %other.addr = alloca %ParserContext*
  store %ParserContext* %other, %ParserContext** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %this.addr
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %1, i32 0, i32 0
  %3 = load %ParserContext*, %ParserContext** %other.addr
  %4 = getelementptr inbounds %ParserContext, %ParserContext* %3, i32 0, i32 0
  call void @"=.282"(%SparrowScanner* %2, %SparrowScanner* %4)
  %5 = load %ParserContext*, %ParserContext** %this.addr
  %6 = getelementptr inbounds %ParserContext, %ParserContext* %5, i32 0, i32 1
  %7 = load %ParserContext*, %ParserContext** %other.addr
  %8 = getelementptr inbounds %ParserContext, %ParserContext* %7, i32 0, i32 1
  call void @"=.301"(%"SparrowLayoutDecoder[SparrowScanner]"* %6, %"SparrowLayoutDecoder[SparrowScanner]"* %8)
  %9 = load %ParserContext*, %ParserContext** %this.addr
  %10 = getelementptr inbounds %ParserContext, %ParserContext* %9, i32 0, i32 2
  %11 = load %ParserContext*, %ParserContext** %other.addr
  %12 = getelementptr inbounds %ParserContext, %ParserContext* %11, i32 0, i32 2
  call void @"=.307"(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.282"(%SparrowScanner* %this, %SparrowScanner* %other) #3 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %other.addr = alloca %SparrowScanner*
  store %SparrowScanner* %other, %SparrowScanner** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 0
  %3 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %3, i32 0, i32 0
  call void @"=.283"(%Location* %2, %Location* %4)
  %5 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %5, i32 0, i32 1
  %7 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %7, i32 0, i32 1
  call void @"=.286"(%BufferedCharSource* %6, %BufferedCharSource* %8)
  %9 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %9, i32 0, i32 2
  %11 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 2
  call void @"=.292"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %12)
  %13 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %13, i32 0, i32 3
  %15 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %16 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %15, i32 0, i32 3
  call void @"=.297"(%Token* %14, %Token* %16)
  %17 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %18 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %17, i32 0, i32 4
  %19 = load i1, i1* %18
  %20 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %21 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %20, i32 0, i32 4
  store i1 %19, i1* %21
  %22 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %23 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %22, i32 0, i32 5
  %24 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %25 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %24, i32 0, i32 5
  call void @"=.299"(%ErrorReporter* %23, %ErrorReporter* %25)
  %26 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %27 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %26, i32 0, i32 6
  %28 = load i1, i1* %27
  %29 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %30 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %29, i32 0, i32 6
  store i1 %28, i1* %30
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.283"(%Location* %this, %Location* %other) #3 {
  %this.addr = alloca %Location*
  store %Location* %this, %Location** %this.addr
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %this.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 0
  %3 = load %Location*, %Location** %other.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 0
  call void @"=.284"(%SourceCode* %2, %SourceCode* %4)
  %5 = load %Location*, %Location** %this.addr
  %6 = getelementptr inbounds %Location, %Location* %5, i32 0, i32 1
  %7 = load %Location*, %Location** %other.addr
  %8 = getelementptr inbounds %Location, %Location* %7, i32 0, i32 1
  call void @"=.285"(%LineCol* %6, %LineCol* %8)
  %9 = load %Location*, %Location** %this.addr
  %10 = getelementptr inbounds %Location, %Location* %9, i32 0, i32 2
  %11 = load %Location*, %Location** %other.addr
  %12 = getelementptr inbounds %Location, %Location* %11, i32 0, i32 2
  call void @"=.285"(%LineCol* %10, %LineCol* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.284"(%SourceCode* %this, %SourceCode* %other) #3 {
  %this.addr = alloca %SourceCode*
  store %SourceCode* %this, %SourceCode** %this.addr
  %other.addr = alloca %SourceCode*
  store %SourceCode* %other, %SourceCode** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SourceCode*, %SourceCode** %other.addr
  %2 = getelementptr inbounds %SourceCode, %SourceCode* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %SourceCode*, %SourceCode** %this.addr
  %5 = getelementptr inbounds %SourceCode, %SourceCode* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.285"(%LineCol* %this, %LineCol* %other) #3 {
  %this.addr = alloca %LineCol*
  store %LineCol* %this, %LineCol** %this.addr
  %other.addr = alloca %LineCol*
  store %LineCol* %other, %LineCol** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LineCol*, %LineCol** %other.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %LineCol*, %LineCol** %this.addr
  %5 = getelementptr inbounds %LineCol, %LineCol* %4, i32 0, i32 0
  store i32 %3, i32* %5
  %6 = load %LineCol*, %LineCol** %other.addr
  %7 = getelementptr inbounds %LineCol, %LineCol* %6, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = load %LineCol*, %LineCol** %this.addr
  %10 = getelementptr inbounds %LineCol, %LineCol* %9, i32 0, i32 1
  store i32 %8, i32* %10
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.286"(%BufferedCharSource* %this, %BufferedCharSource* %other) #3 {
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  %other.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %other, %BufferedCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %3, i32 0, i32 0
  call void @"=.287"(%CharSource* %2, %CharSource* %4)
  %5 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %6 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %5, i32 0, i32 1
  %7 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %8 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %7, i32 0, i32 1
  %9 = call %String* @"=.290"(%String* %6, %String* %8)
  %10 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %11 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %10, i32 0, i32 2
  %12 = load i32, i32* %11
  %13 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %14 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %13, i32 0, i32 2
  store i32 %12, i32* %14
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.287"(%CharSource* %this, %CharSource* %other) #3 {
  %this.addr = alloca %CharSource*
  store %CharSource* %this, %CharSource** %this.addr
  %other.addr = alloca %CharSource*
  store %CharSource* %other, %CharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CharSource*, %CharSource** %this.addr
  %2 = getelementptr inbounds %CharSource, %CharSource* %1, i32 0, i32 0
  %3 = load %CharSource*, %CharSource** %other.addr
  %4 = getelementptr inbounds %CharSource, %CharSource* %3, i32 0, i32 0
  call void @"=.288"(%UntypedPtr* %2, %UntypedPtr* %4)
  %5 = load %CharSource*, %CharSource** %this.addr
  %6 = getelementptr inbounds %CharSource, %CharSource* %5, i32 0, i32 1
  %7 = load %CharSource*, %CharSource** %other.addr
  %8 = getelementptr inbounds %CharSource, %CharSource* %7, i32 0, i32 1
  call void @"=.289"(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %6, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.288"(%UntypedPtr* %this, %UntypedPtr* %other) #3 {
  %this.addr = alloca %UntypedPtr*
  store %UntypedPtr* %this, %UntypedPtr** %this.addr
  %other.addr = alloca %UntypedPtr*
  store %UntypedPtr* %other, %UntypedPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr*, %UntypedPtr** %other.addr
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %UntypedPtr*, %UntypedPtr** %this.addr
  %5 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.289"(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %other, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @String, Int]", %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @String, Int]", %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %String* @"=.290"(%String* %this, %String* %other) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %other.addr = alloca %String*
  store %String* %other, %String** %other.addr
  %tmp = alloca %String
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %other.addr
  call void @ctor.189(%String* %tmp, %String* %1)
  %2 = load %String*, %String** %this.addr
  call void @swap(%String* %tmp, %String* %2)
  %3 = load %String*, %String** %this.addr
  call void @dtor.261(%String* %tmp)
  ret %String* %3

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %tmp)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @swap(%String* %this, %String* %other) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %other.addr = alloca %String*
  store %String* %other, %String** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load %String*, %String** %other.addr
  %4 = getelementptr inbounds %String, %String* %3, i32 0, i32 0
  call void @swap.291(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  %5 = load %String*, %String** %this.addr
  %6 = getelementptr inbounds %String, %String* %5, i32 0, i32 1
  %7 = load %String*, %String** %other.addr
  %8 = getelementptr inbounds %String, %String* %7, i32 0, i32 1
  call void @swap.291(%"RawPtr[Char]"* %6, %"RawPtr[Char]"* %8)
  %9 = load %String*, %String** %this.addr
  %10 = getelementptr inbounds %String, %String* %9, i32 0, i32 2
  %11 = load %String*, %String** %other.addr
  %12 = getelementptr inbounds %String, %String* %11, i32 0, i32 2
  call void @swap.291(%"RawPtr[Char]"* %10, %"RawPtr[Char]"* %12)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @swap.291(%"RawPtr[Char]"* %this, %"RawPtr[Char]"* %other) #4 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  %other.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %other, %"RawPtr[Char]"** %other.addr
  %t = alloca i8*
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  store i8* %3, i8** %t
  %4 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %other.addr
  %5 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %8 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %7, i32 0, i32 0
  store i8* %6, i8** %8
  %9 = load i8*, i8** %t
  %10 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %other.addr
  %11 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %10, i32 0, i32 0
  store i8* %9, i8** %11
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.292"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other) #3 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %other.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %4 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3, i32 0, i32 0
  call void @"=.293"(%"RangeWithLookahead[BufferedCharSourceRange]"* %2, %"RangeWithLookahead[BufferedCharSourceRange]"* %4)
  %5 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %6 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5, i32 0, i32 1
  %7 = load %Location*, %Location** %6
  %8 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %9 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %8, i32 0, i32 1
  store %Location* %7, %Location** %9
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.293"(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %other, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %3, i32 0, i32 0
  call void @"=.294"(%BufferedCharSourceRange* %2, %BufferedCharSourceRange* %4)
  %5 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %5, i32 0, i32 1
  %7 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %7, i32 0, i32 1
  %9 = call %"Vector[Char]"** @"=.295"(%"Vector[Char]"* %6, %"Vector[Char]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.294"(%BufferedCharSourceRange* %this, %BufferedCharSourceRange* %other) #3 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  %other.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %other, %BufferedCharSourceRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %other.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %2
  %4 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %5 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %4, i32 0, i32 0
  store %BufferedCharSource* %3, %BufferedCharSource** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"Vector[Char]"** @"=.295"(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  %tmp = alloca %"Vector[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  call void @ctor.198(%"Vector[Char]"* %tmp, %"Vector[Char]"* %1)
  %2 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  call void @swap.296(%"Vector[Char]"* %tmp, %"Vector[Char]"* %2)
  call void @dtor.267(%"Vector[Char]"* %tmp)
  ret %"Vector[Char]"** %this.addr

dumy_block:                                       ; No predecessors!
  call void @dtor.267(%"Vector[Char]"* %tmp)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @swap.296(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  %tmp = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  call void @ctor.192(%"RawPtr[Char]"* %tmp, %"RawPtr[Char]"* %2)
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 0
  %5 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %5, i32 0, i32 0
  call void @"=.200"(%"RawPtr[Char]"* %4, %"RawPtr[Char]"* %6)
  %7 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %8 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %7, i32 0, i32 0
  call void @"=.200"(%"RawPtr[Char]"* %8, %"RawPtr[Char]"* %tmp)
  %9 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %10 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %9, i32 0, i32 1
  call void @"=.200"(%"RawPtr[Char]"* %tmp, %"RawPtr[Char]"* %10)
  %11 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %12 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %11, i32 0, i32 1
  %13 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %14 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %13, i32 0, i32 1
  call void @"=.200"(%"RawPtr[Char]"* %12, %"RawPtr[Char]"* %14)
  %15 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %16 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %15, i32 0, i32 1
  call void @"=.200"(%"RawPtr[Char]"* %16, %"RawPtr[Char]"* %tmp)
  %17 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %18 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %17, i32 0, i32 2
  call void @"=.200"(%"RawPtr[Char]"* %tmp, %"RawPtr[Char]"* %18)
  %19 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %20 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %19, i32 0, i32 2
  %21 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %22 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %21, i32 0, i32 2
  call void @"=.200"(%"RawPtr[Char]"* %20, %"RawPtr[Char]"* %22)
  %23 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %24 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %23, i32 0, i32 2
  call void @"=.200"(%"RawPtr[Char]"* %24, %"RawPtr[Char]"* %tmp)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.297"(%Token* %this, %Token* %other) #3 {
  %this.addr = alloca %Token*
  store %Token* %this, %Token** %this.addr
  %other.addr = alloca %Token*
  store %Token* %other, %Token** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %this.addr
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %other.addr
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  call void @"=.283"(%Location* %2, %Location* %4)
  %5 = load %Token*, %Token** %this.addr
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 1
  %7 = load %Token*, %Token** %other.addr
  %8 = getelementptr inbounds %Token, %Token* %7, i32 0, i32 1
  call void @"=.298"(%TokenType* %6, %TokenType* %8)
  %9 = load %Token*, %Token** %this.addr
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 2
  %11 = load %Token*, %Token** %other.addr
  %12 = getelementptr inbounds %Token, %Token* %11, i32 0, i32 2
  %13 = call %String* @"=.290"(%String* %10, %String* %12)
  %14 = load %Token*, %Token** %other.addr
  %15 = getelementptr inbounds %Token, %Token* %14, i32 0, i32 3
  %16 = load i64, i64* %15
  %17 = load %Token*, %Token** %this.addr
  %18 = getelementptr inbounds %Token, %Token* %17, i32 0, i32 3
  store i64 %16, i64* %18
  %19 = load %Token*, %Token** %other.addr
  %20 = getelementptr inbounds %Token, %Token* %19, i32 0, i32 4
  %21 = load double, double* %20
  %22 = load %Token*, %Token** %this.addr
  %23 = getelementptr inbounds %Token, %Token* %22, i32 0, i32 4
  store double %21, double* %23
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.298"(%TokenType* %this, %TokenType* %other) #3 {
  %this.addr = alloca %TokenType*
  store %TokenType* %this, %TokenType** %this.addr
  %other.addr = alloca %TokenType*
  store %TokenType* %other, %TokenType** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %TokenType*, %TokenType** %other.addr
  %2 = getelementptr inbounds %TokenType, %TokenType* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %TokenType*, %TokenType** %this.addr
  %5 = getelementptr inbounds %TokenType, %TokenType* %4, i32 0, i32 0
  store i32 %3, i32* %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.299"(%ErrorReporter* %this, %ErrorReporter* %other) #3 {
  %this.addr = alloca %ErrorReporter*
  store %ErrorReporter* %this, %ErrorReporter** %this.addr
  %other.addr = alloca %ErrorReporter*
  store %ErrorReporter* %other, %ErrorReporter** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %1, i32 0, i32 0
  %3 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %4 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %3, i32 0, i32 0
  call void @"=.288"(%UntypedPtr* %2, %UntypedPtr* %4)
  %5 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %6 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %5, i32 0, i32 1
  %7 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %8 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %7, i32 0, i32 1
  call void @"=.300"(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %6, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.300"(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %other, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.301"(%"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"* %other) #3 {
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %other.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %other, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 0
  %3 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %3, i32 0, i32 0
  call void @"=.302"(%"RangeWithLookahead[SparrowScanner]"* %2, %"RangeWithLookahead[SparrowScanner]"* %4)
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %5, i32 0, i32 1
  %7 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %8 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %7, i32 0, i32 1
  call void @"=.299"(%ErrorReporter* %6, %ErrorReporter* %8)
  %9 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %10 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %9, i32 0, i32 2
  %11 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %12 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %11, i32 0, i32 2
  %13 = call %"Vector[UInt]"** @"=.305"(%"Vector[UInt]"* %10, %"Vector[UInt]"* %12)
  %14 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %15 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %14, i32 0, i32 3
  %16 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %17 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %16, i32 0, i32 3
  %18 = call %"Vector[Char]"** @"=.295"(%"Vector[Char]"* %15, %"Vector[Char]"* %17)
  %19 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %20 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %19, i32 0, i32 4
  %21 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %22 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %21, i32 0, i32 4
  call void @"=.298"(%TokenType* %20, %TokenType* %22)
  %23 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %24 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %23, i32 0, i32 5
  %25 = load i32, i32* %24
  %26 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %27 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %26, i32 0, i32 5
  store i32 %25, i32* %27
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.302"(%"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %other, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %3, i32 0, i32 0
  call void @"=.282"(%SparrowScanner* %2, %SparrowScanner* %4)
  %5 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %5, i32 0, i32 1
  %7 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %7, i32 0, i32 1
  %9 = call %"Vector[Token]"** @"=.303"(%"Vector[Token]"* %6, %"Vector[Token]"* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"Vector[Token]"** @"=.303"(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  %tmp = alloca %"Vector[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  call void @ctor.208(%"Vector[Token]"* %tmp, %"Vector[Token]"* %1)
  %2 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  call void @swap.304(%"Vector[Token]"* %tmp, %"Vector[Token]"* %2)
  call void @dtor.263(%"Vector[Token]"* %tmp)
  ret %"Vector[Token]"** %this.addr

dumy_block:                                       ; No predecessors!
  call void @dtor.263(%"Vector[Token]"* %tmp)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @swap.304(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  %tmp = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  call void @ctor.217(%"RawPtr[Token]"* %tmp, %"RawPtr[Token]"* %2)
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 0
  %5 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %5, i32 0, i32 0
  call void @"=.212"(%"RawPtr[Token]"* %4, %"RawPtr[Token]"* %6)
  %7 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %8 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %7, i32 0, i32 0
  call void @"=.212"(%"RawPtr[Token]"* %8, %"RawPtr[Token]"* %tmp)
  %9 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %10 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %9, i32 0, i32 1
  call void @"=.212"(%"RawPtr[Token]"* %tmp, %"RawPtr[Token]"* %10)
  %11 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %12 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %11, i32 0, i32 1
  %13 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %14 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %13, i32 0, i32 1
  call void @"=.212"(%"RawPtr[Token]"* %12, %"RawPtr[Token]"* %14)
  %15 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %16 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %15, i32 0, i32 1
  call void @"=.212"(%"RawPtr[Token]"* %16, %"RawPtr[Token]"* %tmp)
  %17 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %18 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %17, i32 0, i32 2
  call void @"=.212"(%"RawPtr[Token]"* %tmp, %"RawPtr[Token]"* %18)
  %19 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %20 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %19, i32 0, i32 2
  %21 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %22 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %21, i32 0, i32 2
  call void @"=.212"(%"RawPtr[Token]"* %20, %"RawPtr[Token]"* %22)
  %23 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %24 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %23, i32 0, i32 2
  call void @"=.212"(%"RawPtr[Token]"* %24, %"RawPtr[Token]"* %tmp)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %"Vector[UInt]"** @"=.305"(%"Vector[UInt]"* %this, %"Vector[UInt]"* %other) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %other.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %other, %"Vector[UInt]"** %other.addr
  %tmp = alloca %"Vector[UInt]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  call void @ctor.221(%"Vector[UInt]"* %tmp, %"Vector[UInt]"* %1)
  %2 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  call void @swap.306(%"Vector[UInt]"* %tmp, %"Vector[UInt]"* %2)
  call void @dtor.270(%"Vector[UInt]"* %tmp)
  ret %"Vector[UInt]"** %this.addr

dumy_block:                                       ; No predecessors!
  call void @dtor.270(%"Vector[UInt]"* %tmp)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @swap.306(%"Vector[UInt]"* %this, %"Vector[UInt]"* %other) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %other.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %other, %"Vector[UInt]"** %other.addr
  %tmp = alloca %"RawPtr[UInt]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 0
  call void @ctor.230(%"RawPtr[UInt]"* %tmp, %"RawPtr[UInt]"* %2)
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %4 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %3, i32 0, i32 0
  %5 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %6 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %5, i32 0, i32 0
  call void @"=.225"(%"RawPtr[UInt]"* %4, %"RawPtr[UInt]"* %6)
  %7 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %8 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %7, i32 0, i32 0
  call void @"=.225"(%"RawPtr[UInt]"* %8, %"RawPtr[UInt]"* %tmp)
  %9 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %10 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %9, i32 0, i32 1
  call void @"=.225"(%"RawPtr[UInt]"* %tmp, %"RawPtr[UInt]"* %10)
  %11 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %12 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %11, i32 0, i32 1
  %13 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %14 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %13, i32 0, i32 1
  call void @"=.225"(%"RawPtr[UInt]"* %12, %"RawPtr[UInt]"* %14)
  %15 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %16 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %15, i32 0, i32 1
  call void @"=.225"(%"RawPtr[UInt]"* %16, %"RawPtr[UInt]"* %tmp)
  %17 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %18 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %17, i32 0, i32 2
  call void @"=.225"(%"RawPtr[UInt]"* %tmp, %"RawPtr[UInt]"* %18)
  %19 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %20 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %19, i32 0, i32 2
  %21 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %22 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %21, i32 0, i32 2
  call void @"=.225"(%"RawPtr[UInt]"* %20, %"RawPtr[UInt]"* %22)
  %23 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %24 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %23, i32 0, i32 2
  call void @"=.225"(%"RawPtr[UInt]"* %24, %"RawPtr[UInt]"* %tmp)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.307"(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %other.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  call void @"=.308"(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %4)
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  call void @"=.297"(%Token* %6, %Token* %8)
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9, i32 0, i32 2
  %11 = load i1, i1* %10
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 2
  store i1 %11, i1* %13
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %15 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, i32 0, i32 3
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %17 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i32 0, i32 3
  call void @"=.309"(%AstBuilder* %15, %AstBuilder* %17)
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %19 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18, i32 0, i32 4
  %20 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %21 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %20, i32 0, i32 4
  call void @"=.299"(%ErrorReporter* %19, %ErrorReporter* %21)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.308"(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  call void @"=.301"(%"SparrowLayoutDecoder[SparrowScanner]"* %2, %"SparrowLayoutDecoder[SparrowScanner]"* %4)
  %5 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  %9 = call %"Vector[Token]"** @"=.303"(%"Vector[Token]"* %6, %"Vector[Token]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.309"(%AstBuilder* %this, %AstBuilder* %other) #3 {
  %this.addr = alloca %AstBuilder*
  store %AstBuilder* %this, %AstBuilder** %this.addr
  %other.addr = alloca %AstBuilder*
  store %AstBuilder* %other, %AstBuilder** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %this.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 0
  %3 = load %AstBuilder*, %AstBuilder** %other.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  call void @"=.288"(%UntypedPtr* %2, %UntypedPtr* %4)
  %5 = load %AstBuilder*, %AstBuilder** %this.addr
  %6 = getelementptr inbounds %AstBuilder, %AstBuilder* %5, i32 0, i32 1
  %7 = load %AstBuilder*, %AstBuilder** %other.addr
  %8 = getelementptr inbounds %AstBuilder, %AstBuilder* %7, i32 0, i32 1
  call void @"=.310"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %6, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %8)
  %9 = load %AstBuilder*, %AstBuilder** %this.addr
  %10 = getelementptr inbounds %AstBuilder, %AstBuilder* %9, i32 0, i32 2
  %11 = load %AstBuilder*, %AstBuilder** %other.addr
  %12 = getelementptr inbounds %AstBuilder, %AstBuilder* %11, i32 0, i32 2
  call void @"=.311"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %10, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %12)
  %13 = load %AstBuilder*, %AstBuilder** %this.addr
  %14 = getelementptr inbounds %AstBuilder, %AstBuilder* %13, i32 0, i32 3
  %15 = load %AstBuilder*, %AstBuilder** %other.addr
  %16 = getelementptr inbounds %AstBuilder, %AstBuilder* %15, i32 0, i32 3
  call void @"=.311"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %14, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %16)
  %17 = load %AstBuilder*, %AstBuilder** %this.addr
  %18 = getelementptr inbounds %AstBuilder, %AstBuilder* %17, i32 0, i32 4
  %19 = load %AstBuilder*, %AstBuilder** %other.addr
  %20 = getelementptr inbounds %AstBuilder, %AstBuilder* %19, i32 0, i32 4
  call void @"=.312"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %18, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %20)
  %21 = load %AstBuilder*, %AstBuilder** %this.addr
  %22 = getelementptr inbounds %AstBuilder, %AstBuilder* %21, i32 0, i32 5
  %23 = load %AstBuilder*, %AstBuilder** %other.addr
  %24 = getelementptr inbounds %AstBuilder, %AstBuilder* %23, i32 0, i32 5
  call void @"=.313"(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %22, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %24)
  %25 = load %AstBuilder*, %AstBuilder** %this.addr
  %26 = getelementptr inbounds %AstBuilder, %AstBuilder* %25, i32 0, i32 6
  %27 = load %AstBuilder*, %AstBuilder** %other.addr
  %28 = getelementptr inbounds %AstBuilder, %AstBuilder* %27, i32 0, i32 6
  call void @"=.314"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %26, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %28)
  %29 = load %AstBuilder*, %AstBuilder** %this.addr
  %30 = getelementptr inbounds %AstBuilder, %AstBuilder* %29, i32 0, i32 7
  %31 = load %AstBuilder*, %AstBuilder** %other.addr
  %32 = getelementptr inbounds %AstBuilder, %AstBuilder* %31, i32 0, i32 7
  call void @"=.315"(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %30, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %32)
  %33 = load %AstBuilder*, %AstBuilder** %this.addr
  %34 = getelementptr inbounds %AstBuilder, %AstBuilder* %33, i32 0, i32 8
  %35 = load %AstBuilder*, %AstBuilder** %other.addr
  %36 = getelementptr inbounds %AstBuilder, %AstBuilder* %35, i32 0, i32 8
  call void @"=.312"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %34, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %36)
  %37 = load %AstBuilder*, %AstBuilder** %this.addr
  %38 = getelementptr inbounds %AstBuilder, %AstBuilder* %37, i32 0, i32 9
  %39 = load %AstBuilder*, %AstBuilder** %other.addr
  %40 = getelementptr inbounds %AstBuilder, %AstBuilder* %39, i32 0, i32 9
  call void @"=.316"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %38, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %40)
  %41 = load %AstBuilder*, %AstBuilder** %this.addr
  %42 = getelementptr inbounds %AstBuilder, %AstBuilder* %41, i32 0, i32 10
  %43 = load %AstBuilder*, %AstBuilder** %other.addr
  %44 = getelementptr inbounds %AstBuilder, %AstBuilder* %43, i32 0, i32 10
  call void @"=.312"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %42, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %44)
  %45 = load %AstBuilder*, %AstBuilder** %this.addr
  %46 = getelementptr inbounds %AstBuilder, %AstBuilder* %45, i32 0, i32 11
  %47 = load %AstBuilder*, %AstBuilder** %other.addr
  %48 = getelementptr inbounds %AstBuilder, %AstBuilder* %47, i32 0, i32 11
  call void @"=.312"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %46, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %48)
  %49 = load %AstBuilder*, %AstBuilder** %this.addr
  %50 = getelementptr inbounds %AstBuilder, %AstBuilder* %49, i32 0, i32 12
  %51 = load %AstBuilder*, %AstBuilder** %other.addr
  %52 = getelementptr inbounds %AstBuilder, %AstBuilder* %51, i32 0, i32 12
  call void @"=.312"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %50, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %52)
  %53 = load %AstBuilder*, %AstBuilder** %this.addr
  %54 = getelementptr inbounds %AstBuilder, %AstBuilder* %53, i32 0, i32 13
  %55 = load %AstBuilder*, %AstBuilder** %other.addr
  %56 = getelementptr inbounds %AstBuilder, %AstBuilder* %55, i32 0, i32 13
  call void @"=.317"(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %54, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %56)
  %57 = load %AstBuilder*, %AstBuilder** %this.addr
  %58 = getelementptr inbounds %AstBuilder, %AstBuilder* %57, i32 0, i32 14
  %59 = load %AstBuilder*, %AstBuilder** %other.addr
  %60 = getelementptr inbounds %AstBuilder, %AstBuilder* %59, i32 0, i32 14
  call void @"=.318"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %58, %"FunctionPtr2[Node, UntypedPtr, Node]"* %60)
  %61 = load %AstBuilder*, %AstBuilder** %this.addr
  %62 = getelementptr inbounds %AstBuilder, %AstBuilder* %61, i32 0, i32 15
  %63 = load %AstBuilder*, %AstBuilder** %other.addr
  %64 = getelementptr inbounds %AstBuilder, %AstBuilder* %63, i32 0, i32 15
  call void @"=.319"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %62, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %64)
  %65 = load %AstBuilder*, %AstBuilder** %this.addr
  %66 = getelementptr inbounds %AstBuilder, %AstBuilder* %65, i32 0, i32 16
  %67 = load %AstBuilder*, %AstBuilder** %other.addr
  %68 = getelementptr inbounds %AstBuilder, %AstBuilder* %67, i32 0, i32 16
  call void @"=.320"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %66, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %68)
  %69 = load %AstBuilder*, %AstBuilder** %this.addr
  %70 = getelementptr inbounds %AstBuilder, %AstBuilder* %69, i32 0, i32 17
  %71 = load %AstBuilder*, %AstBuilder** %other.addr
  %72 = getelementptr inbounds %AstBuilder, %AstBuilder* %71, i32 0, i32 17
  call void @"=.313"(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %70, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %72)
  %73 = load %AstBuilder*, %AstBuilder** %this.addr
  %74 = getelementptr inbounds %AstBuilder, %AstBuilder* %73, i32 0, i32 18
  %75 = load %AstBuilder*, %AstBuilder** %other.addr
  %76 = getelementptr inbounds %AstBuilder, %AstBuilder* %75, i32 0, i32 18
  call void @"=.321"(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %74, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %76)
  %77 = load %AstBuilder*, %AstBuilder** %this.addr
  %78 = getelementptr inbounds %AstBuilder, %AstBuilder* %77, i32 0, i32 19
  %79 = load %AstBuilder*, %AstBuilder** %other.addr
  %80 = getelementptr inbounds %AstBuilder, %AstBuilder* %79, i32 0, i32 19
  call void @"=.319"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %78, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %80)
  %81 = load %AstBuilder*, %AstBuilder** %this.addr
  %82 = getelementptr inbounds %AstBuilder, %AstBuilder* %81, i32 0, i32 20
  %83 = load %AstBuilder*, %AstBuilder** %other.addr
  %84 = getelementptr inbounds %AstBuilder, %AstBuilder* %83, i32 0, i32 20
  call void @"=.319"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %82, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %84)
  %85 = load %AstBuilder*, %AstBuilder** %this.addr
  %86 = getelementptr inbounds %AstBuilder, %AstBuilder* %85, i32 0, i32 21
  %87 = load %AstBuilder*, %AstBuilder** %other.addr
  %88 = getelementptr inbounds %AstBuilder, %AstBuilder* %87, i32 0, i32 21
  call void @"=.319"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %86, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %88)
  %89 = load %AstBuilder*, %AstBuilder** %this.addr
  %90 = getelementptr inbounds %AstBuilder, %AstBuilder* %89, i32 0, i32 22
  %91 = load %AstBuilder*, %AstBuilder** %other.addr
  %92 = getelementptr inbounds %AstBuilder, %AstBuilder* %91, i32 0, i32 22
  call void @"=.311"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %90, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %92)
  %93 = load %AstBuilder*, %AstBuilder** %this.addr
  %94 = getelementptr inbounds %AstBuilder, %AstBuilder* %93, i32 0, i32 23
  %95 = load %AstBuilder*, %AstBuilder** %other.addr
  %96 = getelementptr inbounds %AstBuilder, %AstBuilder* %95, i32 0, i32 23
  call void @"=.322"(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %94, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %96)
  %97 = load %AstBuilder*, %AstBuilder** %this.addr
  %98 = getelementptr inbounds %AstBuilder, %AstBuilder* %97, i32 0, i32 24
  %99 = load %AstBuilder*, %AstBuilder** %other.addr
  %100 = getelementptr inbounds %AstBuilder, %AstBuilder* %99, i32 0, i32 24
  call void @"=.323"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %98, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %100)
  %101 = load %AstBuilder*, %AstBuilder** %this.addr
  %102 = getelementptr inbounds %AstBuilder, %AstBuilder* %101, i32 0, i32 25
  %103 = load %AstBuilder*, %AstBuilder** %other.addr
  %104 = getelementptr inbounds %AstBuilder, %AstBuilder* %103, i32 0, i32 25
  call void @"=.324"(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %102, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %104)
  %105 = load %AstBuilder*, %AstBuilder** %this.addr
  %106 = getelementptr inbounds %AstBuilder, %AstBuilder* %105, i32 0, i32 26
  %107 = load %AstBuilder*, %AstBuilder** %other.addr
  %108 = getelementptr inbounds %AstBuilder, %AstBuilder* %107, i32 0, i32 26
  call void @"=.325"(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %106, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %108)
  %109 = load %AstBuilder*, %AstBuilder** %this.addr
  %110 = getelementptr inbounds %AstBuilder, %AstBuilder* %109, i32 0, i32 27
  %111 = load %AstBuilder*, %AstBuilder** %other.addr
  %112 = getelementptr inbounds %AstBuilder, %AstBuilder* %111, i32 0, i32 27
  call void @"=.326"(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %110, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %112)
  %113 = load %AstBuilder*, %AstBuilder** %this.addr
  %114 = getelementptr inbounds %AstBuilder, %AstBuilder* %113, i32 0, i32 28
  %115 = load %AstBuilder*, %AstBuilder** %other.addr
  %116 = getelementptr inbounds %AstBuilder, %AstBuilder* %115, i32 0, i32 28
  call void @"=.327"(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %114, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %116)
  %117 = load %AstBuilder*, %AstBuilder** %this.addr
  %118 = getelementptr inbounds %AstBuilder, %AstBuilder* %117, i32 0, i32 29
  %119 = load %AstBuilder*, %AstBuilder** %other.addr
  %120 = getelementptr inbounds %AstBuilder, %AstBuilder* %119, i32 0, i32 29
  call void @"=.328"(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %118, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %120)
  %121 = load %AstBuilder*, %AstBuilder** %this.addr
  %122 = getelementptr inbounds %AstBuilder, %AstBuilder* %121, i32 0, i32 30
  %123 = load %AstBuilder*, %AstBuilder** %other.addr
  %124 = getelementptr inbounds %AstBuilder, %AstBuilder* %123, i32 0, i32 30
  call void @"=.329"(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %122, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %124)
  %125 = load %AstBuilder*, %AstBuilder** %this.addr
  %126 = getelementptr inbounds %AstBuilder, %AstBuilder* %125, i32 0, i32 31
  %127 = load %AstBuilder*, %AstBuilder** %other.addr
  %128 = getelementptr inbounds %AstBuilder, %AstBuilder* %127, i32 0, i32 31
  call void @"=.330"(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %126, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %128)
  %129 = load %AstBuilder*, %AstBuilder** %this.addr
  %130 = getelementptr inbounds %AstBuilder, %AstBuilder* %129, i32 0, i32 32
  %131 = load %AstBuilder*, %AstBuilder** %other.addr
  %132 = getelementptr inbounds %AstBuilder, %AstBuilder* %131, i32 0, i32 32
  call void @"=.331"(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %130, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %132)
  %133 = load %AstBuilder*, %AstBuilder** %this.addr
  %134 = getelementptr inbounds %AstBuilder, %AstBuilder* %133, i32 0, i32 33
  %135 = load %AstBuilder*, %AstBuilder** %other.addr
  %136 = getelementptr inbounds %AstBuilder, %AstBuilder* %135, i32 0, i32 33
  call void @"=.321"(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %134, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %136)
  %137 = load %AstBuilder*, %AstBuilder** %this.addr
  %138 = getelementptr inbounds %AstBuilder, %AstBuilder* %137, i32 0, i32 34
  %139 = load %AstBuilder*, %AstBuilder** %other.addr
  %140 = getelementptr inbounds %AstBuilder, %AstBuilder* %139, i32 0, i32 34
  call void @"=.332"(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %138, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %140)
  %141 = load %AstBuilder*, %AstBuilder** %this.addr
  %142 = getelementptr inbounds %AstBuilder, %AstBuilder* %141, i32 0, i32 35
  %143 = load %AstBuilder*, %AstBuilder** %other.addr
  %144 = getelementptr inbounds %AstBuilder, %AstBuilder* %143, i32 0, i32 35
  call void @"=.333"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %142, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %144)
  %145 = load %AstBuilder*, %AstBuilder** %this.addr
  %146 = getelementptr inbounds %AstBuilder, %AstBuilder* %145, i32 0, i32 36
  %147 = load %AstBuilder*, %AstBuilder** %other.addr
  %148 = getelementptr inbounds %AstBuilder, %AstBuilder* %147, i32 0, i32 36
  call void @"=.314"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %146, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %148)
  %149 = load %AstBuilder*, %AstBuilder** %this.addr
  %150 = getelementptr inbounds %AstBuilder, %AstBuilder* %149, i32 0, i32 37
  %151 = load %AstBuilder*, %AstBuilder** %other.addr
  %152 = getelementptr inbounds %AstBuilder, %AstBuilder* %151, i32 0, i32 37
  call void @"=.333"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %150, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %152)
  %153 = load %AstBuilder*, %AstBuilder** %this.addr
  %154 = getelementptr inbounds %AstBuilder, %AstBuilder* %153, i32 0, i32 38
  %155 = load %AstBuilder*, %AstBuilder** %other.addr
  %156 = getelementptr inbounds %AstBuilder, %AstBuilder* %155, i32 0, i32 38
  call void @"=.323"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %154, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %156)
  %157 = load %AstBuilder*, %AstBuilder** %this.addr
  %158 = getelementptr inbounds %AstBuilder, %AstBuilder* %157, i32 0, i32 39
  %159 = load %AstBuilder*, %AstBuilder** %other.addr
  %160 = getelementptr inbounds %AstBuilder, %AstBuilder* %159, i32 0, i32 39
  call void @"=.323"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %158, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %160)
  %161 = load %AstBuilder*, %AstBuilder** %this.addr
  %162 = getelementptr inbounds %AstBuilder, %AstBuilder* %161, i32 0, i32 40
  %163 = load %AstBuilder*, %AstBuilder** %other.addr
  %164 = getelementptr inbounds %AstBuilder, %AstBuilder* %163, i32 0, i32 40
  call void @"=.332"(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %162, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %164)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.310"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.311"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.312"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.313"(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.314"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.315"(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.316"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.317"(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.318"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %other, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.319"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %other, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.320"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.321"(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.322"(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.323"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %this, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, @Location]"*
  store %"FunctionPtr2[Node, UntypedPtr, @Location]"* %this, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, @Location]"*
  store %"FunctionPtr2[Node, UntypedPtr, @Location]"* %other, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, @Location]"*, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr2[Node, UntypedPtr, @Location]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr2[Node, UntypedPtr, @Location]"*, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr2[Node, UntypedPtr, @Location]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.324"(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]", %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]", %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.325"(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Int]", %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Int]", %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.326"(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]", %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]", %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.327"(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Long]", %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Long]", %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.328"(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]", %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]", %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.329"(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Float]", %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Float]", %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.330"(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Double]", %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Double]", %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.331"(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Char]", %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Char]", %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.332"(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Node]", %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Node]", %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.333"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.334"(%ParserContext* %this, %ParserContext* %other) #3 {
  %this.addr = alloca %ParserContext*
  store %ParserContext* %this, %ParserContext** %this.addr
  %other.addr = alloca %ParserContext*
  store %ParserContext* %other, %ParserContext** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %this.addr
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %1, i32 0, i32 0
  %3 = load %ParserContext*, %ParserContext** %other.addr
  %4 = getelementptr inbounds %ParserContext, %ParserContext* %3, i32 0, i32 0
  %5 = call i1 @"==.335"(%SparrowScanner* %2, %SparrowScanner* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %ParserContext*, %ParserContext** %this.addr
  %7 = getelementptr inbounds %ParserContext, %ParserContext* %6, i32 0, i32 2
  %8 = load %ParserContext*, %ParserContext** %other.addr
  %9 = getelementptr inbounds %ParserContext, %ParserContext* %8, i32 0, i32 2
  %10 = call i1 @"==.361"(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %ParserContext*, %ParserContext** %this.addr
  %12 = getelementptr inbounds %ParserContext, %ParserContext* %11, i32 0, i32 1
  %13 = load %ParserContext*, %ParserContext** %other.addr
  %14 = getelementptr inbounds %ParserContext, %ParserContext* %13, i32 0, i32 1
  %15 = call i1 @"==.355"(%"SparrowLayoutDecoder[SparrowScanner]"* %12, %"SparrowLayoutDecoder[SparrowScanner]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.335"(%SparrowScanner* %this, %SparrowScanner* %other) #3 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %other.addr = alloca %SparrowScanner*
  store %SparrowScanner* %other, %SparrowScanner** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 0
  %3 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %3, i32 0, i32 0
  %5 = call i1 @"==.336"(%Location* %2, %Location* %4)
  br i1 %5, label %cond.true13, label %cond.false14

cond.true:                                        ; preds = %cond.end3
  %6 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %6, i32 0, i32 6
  %8 = load i1, i1* %7
  %9 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %9, i32 0, i32 6
  %11 = load i1, i1* %10
  %12 = icmp eq i1 %8, %11
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res20 = phi i1 [ %12, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res20

cond.true1:                                       ; preds = %cond.end6
  %13 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %13, i32 0, i32 5
  %15 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %16 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %15, i32 0, i32 5
  %17 = call i1 @"==.353"(%ErrorReporter* %14, %ErrorReporter* %16)
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res19 = phi i1 [ %17, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res19, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %18 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %19 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %18, i32 0, i32 4
  %20 = load i1, i1* %19
  %21 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %22 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %21, i32 0, i32 4
  %23 = load i1, i1* %22
  %24 = icmp eq i1 %20, %23
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res18 = phi i1 [ %24, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res18, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  %25 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %26 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %25, i32 0, i32 3
  %27 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %28 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %27, i32 0, i32 3
  %29 = call i1 @"==.351"(%Token* %26, %Token* %28)
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res17 = phi i1 [ %29, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res17, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %cond.end15
  %30 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %31 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %30, i32 0, i32 2
  %32 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %33 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %32, i32 0, i32 2
  %34 = call i1 @"==.346"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %31, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %33)
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end15
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res16 = phi i1 [ %34, %cond.true10 ], [ false, %cond.false11 ]
  br i1 %cond.res16, label %cond.true7, label %cond.false8

cond.true13:                                      ; preds = %code
  %35 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %36 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %35, i32 0, i32 1
  %37 = load %SparrowScanner*, %SparrowScanner** %other.addr
  %38 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %37, i32 0, i32 1
  %39 = call i1 @"==.339"(%BufferedCharSource* %36, %BufferedCharSource* %38)
  br label %cond.end15

cond.false14:                                     ; preds = %code
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res = phi i1 [ %39, %cond.true13 ], [ false, %cond.false14 ]
  br i1 %cond.res, label %cond.true10, label %cond.false11
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.336"(%Location* %this, %Location* %other) #3 {
  %this.addr = alloca %Location*
  store %Location* %this, %Location** %this.addr
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %this.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 0
  %3 = load %Location*, %Location** %other.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 0
  %5 = call i1 @"==.337"(%SourceCode* %2, %SourceCode* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %Location*, %Location** %this.addr
  %7 = getelementptr inbounds %Location, %Location* %6, i32 0, i32 2
  %8 = load %Location*, %Location** %other.addr
  %9 = getelementptr inbounds %Location, %Location* %8, i32 0, i32 2
  %10 = call i1 @"==.338"(%LineCol* %7, %LineCol* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %Location*, %Location** %this.addr
  %12 = getelementptr inbounds %Location, %Location* %11, i32 0, i32 1
  %13 = load %Location*, %Location** %other.addr
  %14 = getelementptr inbounds %Location, %Location* %13, i32 0, i32 1
  %15 = call i1 @"==.338"(%LineCol* %12, %LineCol* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.337"(%SourceCode* %this, %SourceCode* %other) #3 {
  %this.addr = alloca %SourceCode*
  store %SourceCode* %this, %SourceCode** %this.addr
  %other.addr = alloca %SourceCode*
  store %SourceCode* %other, %SourceCode** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SourceCode*, %SourceCode** %this.addr
  %2 = getelementptr inbounds %SourceCode, %SourceCode* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %SourceCode*, %SourceCode** %other.addr
  %5 = getelementptr inbounds %SourceCode, %SourceCode* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.338"(%LineCol* %this, %LineCol* %other) #3 {
  %this.addr = alloca %LineCol*
  store %LineCol* %this, %LineCol** %this.addr
  %other.addr = alloca %LineCol*
  store %LineCol* %other, %LineCol** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LineCol*, %LineCol** %this.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %LineCol*, %LineCol** %other.addr
  %5 = getelementptr inbounds %LineCol, %LineCol* %4, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = icmp eq i32 %3, %6
  br i1 %7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %8 = load %LineCol*, %LineCol** %this.addr
  %9 = getelementptr inbounds %LineCol, %LineCol* %8, i32 0, i32 1
  %10 = load i32, i32* %9
  %11 = load %LineCol*, %LineCol** %other.addr
  %12 = getelementptr inbounds %LineCol, %LineCol* %11, i32 0, i32 1
  %13 = load i32, i32* %12
  %14 = icmp eq i32 %10, %13
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %14, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.339"(%BufferedCharSource* %this, %BufferedCharSource* %other) #3 {
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  %other.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %other, %BufferedCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %3, i32 0, i32 0
  %5 = call i1 @"==.340"(%CharSource* %2, %CharSource* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %7 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %6, i32 0, i32 2
  %8 = load i32, i32* %7
  %9 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %10 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %9, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = icmp eq i32 %8, %11
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %12, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %13 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %14 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %13, i32 0, i32 1
  %15 = load %BufferedCharSource*, %BufferedCharSource** %other.addr
  %16 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %15, i32 0, i32 1
  %17 = call i1 @"==.343"(%String* %14, %String* %16)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %17, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.340"(%CharSource* %this, %CharSource* %other) #3 {
  %this.addr = alloca %CharSource*
  store %CharSource* %this, %CharSource** %this.addr
  %other.addr = alloca %CharSource*
  store %CharSource* %other, %CharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %CharSource*, %CharSource** %this.addr
  %2 = getelementptr inbounds %CharSource, %CharSource* %1, i32 0, i32 0
  %3 = load %CharSource*, %CharSource** %other.addr
  %4 = getelementptr inbounds %CharSource, %CharSource* %3, i32 0, i32 0
  %5 = call i1 @"==.341"(%UntypedPtr* %2, %UntypedPtr* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %CharSource*, %CharSource** %this.addr
  %7 = getelementptr inbounds %CharSource, %CharSource* %6, i32 0, i32 1
  %8 = load %CharSource*, %CharSource** %other.addr
  %9 = getelementptr inbounds %CharSource, %CharSource* %8, i32 0, i32 1
  %10 = call i1 @"==.342"(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %7, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.341"(%UntypedPtr* %this, %UntypedPtr* %other) #3 {
  %this.addr = alloca %UntypedPtr*
  store %UntypedPtr* %this, %UntypedPtr** %this.addr
  %other.addr = alloca %UntypedPtr*
  store %UntypedPtr* %other, %UntypedPtr** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %UntypedPtr*, %UntypedPtr** %this.addr
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %UntypedPtr*, %UntypedPtr** %other.addr
  %5 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.342"(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %other, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @String, Int]", %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @String, Int]", %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: inlinehint nounwind
define internal i1 @"==.343"(%String* %this, %String* %other) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %other.addr = alloca %String*
  store %String* %other, %String** %other.addr
  %i = alloca i64
  %s = alloca i64
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %String*, %String** %this.addr
  %2 = call i64 @size.190(%String* %1)
  %3 = load %String*, %String** %other.addr
  %4 = call i64 @size.190(%String* %3)
  %5 = icmp ne i64 %2, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i64 0, i64* %i
  %6 = load %String*, %String** %this.addr
  %7 = call i64 @size.190(%String* %6)
  store i64 %7, i64* %s
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %8 = load i64, i64* %i
  %9 = load i64, i64* %s
  %10 = icmp slt i64 %8, %9
  br i1 %10, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %11 = call i64 @"post_++.43"(i64* %i)
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %12 = load %String*, %String** %this.addr
  %13 = load i64, i64* %i
  %14 = call i8* @"().344"(%String* %12, i64 %13)
  %15 = load i8, i8* %14
  %16 = load %String*, %String** %other.addr
  %17 = load i64, i64* %i
  %18 = call i8* @"().344"(%String* %16, i64 %17)
  %19 = load i8, i8* %18
  %20 = icmp ne i8 %15, %19
  br i1 %20, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  br label %while_step

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal i8* @"().344"(%String* %this, i64 %index) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = load i64, i64* %index.addr
  store i64 %4, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %3, i64 %5)
  %6 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %7 = call i8* @value(%"RawPtr[Char]" %6)
  ret i8* %7
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.345(%"RawPtr[Char]"* %this) #3 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.346"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other) #3 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %other.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %other, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %4 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %3, i32 0, i32 0
  %5 = call i1 @"==.347"(%"RangeWithLookahead[BufferedCharSourceRange]"* %2, %"RangeWithLookahead[BufferedCharSourceRange]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %7 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %6, i32 0, i32 1
  %8 = load %Location*, %Location** %7
  %9 = bitcast %Location* %8 to i8*
  %10 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %other.addr
  %11 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10, i32 0, i32 1
  %12 = load %Location*, %Location** %11
  %13 = bitcast %Location* %12 to i8*
  %14 = call i1 @implOpRefEQ(i8* %9, i8* %13)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %14, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.347"(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %other, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %3, i32 0, i32 0
  %5 = call i1 @"==.348"(%BufferedCharSourceRange* %2, %BufferedCharSourceRange* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %7 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %6, i32 0, i32 1
  %8 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %other.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %8, i32 0, i32 1
  %10 = call i1 @"==.349"(%"Vector[Char]"* %7, %"Vector[Char]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.348"(%BufferedCharSourceRange* %this, %BufferedCharSourceRange* %other) #3 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  %other.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %other, %BufferedCharSourceRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %2
  %4 = bitcast %BufferedCharSource* %3 to i8*
  %5 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %other.addr
  %6 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %5, i32 0, i32 0
  %7 = load %BufferedCharSource*, %BufferedCharSource** %6
  %8 = bitcast %BufferedCharSource* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal i1 @"==.349"(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  %i = alloca i32
  %s = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this5 = alloca i64
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = call i64 @size.199(%"Vector[Char]"* %1)
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %4 = call i64 @size.199(%"Vector[Char]"* %3)
  %5 = icmp ne i64 %2, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i32 0, i32* %i
  %6 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %7 = call i64 @size.199(%"Vector[Char]"* %6)
  store i64 %7, i64* %s
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %8 = load i32, i32* %i
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %tmp.this
  %10 = load i64, i64* %tmp.this
  %11 = load i64, i64* %s
  %12 = icmp slt i64 %10, %11
  br i1 %12, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %13 = call i32 @"post_++.39"(i32* %i)
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %14 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %15 = load i32, i32* %i
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %tmp.this4
  %17 = load i64, i64* %tmp.this4
  %18 = call i8* @at.350(%"Vector[Char]"* %14, i64 %17)
  %19 = load i8, i8* %18
  %20 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %21 = load i32, i32* %i
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %tmp.this5
  %23 = load i64, i64* %tmp.this5
  %24 = call i8* @at.350(%"Vector[Char]"* %20, i64 %23)
  %25 = load i8, i8* %24
  %26 = icmp eq i8 %19, %25
  %27 = xor i1 true, %26
  br i1 %27, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block6, %if_block1
  br label %while_step

dumy_block6:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal i8* @at.350(%"Vector[Char]"* %this, i64 %index) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = load i64, i64* %index.addr
  call void @advance.201(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %3, i64 %4)
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %6 = call i8* @value(%"RawPtr[Char]" %5)
  ret i8* %6
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.351"(%Token* %this, %Token* %other) #3 {
  %this.addr = alloca %Token*
  store %Token* %this, %Token** %this.addr
  %other.addr = alloca %Token*
  store %Token* %other, %Token** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %this.addr
  %2 = getelementptr inbounds %Token, %Token* %1, i32 0, i32 0
  %3 = load %Token*, %Token** %other.addr
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  %5 = call i1 @"==.336"(%Location* %2, %Location* %4)
  br i1 %5, label %cond.true7, label %cond.false8

cond.true:                                        ; preds = %cond.end3
  %6 = load %Token*, %Token** %this.addr
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 4
  %8 = load double, double* %7
  %9 = load %Token*, %Token** %other.addr
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 4
  %11 = load double, double* %10
  %12 = call i1 @_Double_opEQ(double %8, double %11)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res12 = phi i1 [ %12, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res12

cond.true1:                                       ; preds = %cond.end6
  %13 = load %Token*, %Token** %this.addr
  %14 = getelementptr inbounds %Token, %Token* %13, i32 0, i32 3
  %15 = load i64, i64* %14
  %16 = load %Token*, %Token** %other.addr
  %17 = getelementptr inbounds %Token, %Token* %16, i32 0, i32 3
  %18 = load i64, i64* %17
  %19 = icmp eq i64 %15, %18
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res11 = phi i1 [ %19, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res11, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %20 = load %Token*, %Token** %this.addr
  %21 = getelementptr inbounds %Token, %Token* %20, i32 0, i32 2
  %22 = load %Token*, %Token** %other.addr
  %23 = getelementptr inbounds %Token, %Token* %22, i32 0, i32 2
  %24 = call i1 @"==.343"(%String* %21, %String* %23)
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res10 = phi i1 [ %24, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res10, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %code
  %25 = load %Token*, %Token** %this.addr
  %26 = getelementptr inbounds %Token, %Token* %25, i32 0, i32 1
  %27 = load %Token*, %Token** %other.addr
  %28 = getelementptr inbounds %Token, %Token* %27, i32 0, i32 1
  %29 = call i1 @"==.352"(%TokenType* %26, %TokenType* %28)
  br label %cond.end9

cond.false8:                                      ; preds = %code
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res = phi i1 [ %29, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res, label %cond.true4, label %cond.false5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.352"(%TokenType* %this, %TokenType* %other) #3 {
  %this.addr = alloca %TokenType*
  store %TokenType* %this, %TokenType** %this.addr
  %other.addr = alloca %TokenType*
  store %TokenType* %other, %TokenType** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %TokenType*, %TokenType** %this.addr
  %2 = getelementptr inbounds %TokenType, %TokenType* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %TokenType*, %TokenType** %other.addr
  %5 = getelementptr inbounds %TokenType, %TokenType* %4, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = icmp eq i32 %3, %6
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.353"(%ErrorReporter* %this, %ErrorReporter* %other) #3 {
  %this.addr = alloca %ErrorReporter*
  store %ErrorReporter* %this, %ErrorReporter** %this.addr
  %other.addr = alloca %ErrorReporter*
  store %ErrorReporter* %other, %ErrorReporter** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %1, i32 0, i32 0
  %3 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %4 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %3, i32 0, i32 0
  %5 = call i1 @"==.341"(%UntypedPtr* %2, %UntypedPtr* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %ErrorReporter*, %ErrorReporter** %this.addr
  %7 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %6, i32 0, i32 1
  %8 = load %ErrorReporter*, %ErrorReporter** %other.addr
  %9 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %8, i32 0, i32 1
  %10 = call i1 @"==.354"(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %7, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.354"(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %other, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.355"(%"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"* %other) #3 {
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %other.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %other, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 0
  %3 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %3, i32 0, i32 0
  %5 = call i1 @"==.356"(%"RangeWithLookahead[SparrowScanner]"* %2, %"RangeWithLookahead[SparrowScanner]"* %4)
  br i1 %5, label %cond.true10, label %cond.false11

cond.true:                                        ; preds = %cond.end3
  %6 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %7 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %6, i32 0, i32 5
  %8 = load i32, i32* %7
  %9 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %10 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %9, i32 0, i32 5
  %11 = load i32, i32* %10
  %12 = icmp eq i32 %8, %11
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res16 = phi i1 [ %12, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res16

cond.true1:                                       ; preds = %cond.end6
  %13 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %14 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %13, i32 0, i32 4
  %15 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %16 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %15, i32 0, i32 4
  %17 = call i1 @"==.352"(%TokenType* %14, %TokenType* %16)
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res15 = phi i1 [ %17, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res15, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %18 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %19 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %18, i32 0, i32 3
  %20 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %21 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %20, i32 0, i32 3
  %22 = call i1 @"==.349"(%"Vector[Char]"* %19, %"Vector[Char]"* %21)
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res14 = phi i1 [ %22, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res14, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  %23 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %24 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %23, i32 0, i32 2
  %25 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %26 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %25, i32 0, i32 2
  %27 = call i1 @"==.359"(%"Vector[UInt]"* %24, %"Vector[UInt]"* %26)
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res13 = phi i1 [ %27, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res13, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %code
  %28 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %29 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %28, i32 0, i32 1
  %30 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %other.addr
  %31 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %30, i32 0, i32 1
  %32 = call i1 @"==.353"(%ErrorReporter* %29, %ErrorReporter* %31)
  br label %cond.end12

cond.false11:                                     ; preds = %code
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res = phi i1 [ %32, %cond.true10 ], [ false, %cond.false11 ]
  br i1 %cond.res, label %cond.true7, label %cond.false8
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.356"(%"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %other, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %3, i32 0, i32 0
  %5 = call i1 @"==.335"(%SparrowScanner* %2, %SparrowScanner* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %7 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %6, i32 0, i32 1
  %8 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %other.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %8, i32 0, i32 1
  %10 = call i1 @"==.357"(%"Vector[Token]"* %7, %"Vector[Token]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: inlinehint nounwind
define internal i1 @"==.357"(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  %i = alloca i32
  %s = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this5 = alloca i64
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = call i64 @size.209(%"Vector[Token]"* %1)
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %4 = call i64 @size.209(%"Vector[Token]"* %3)
  %5 = icmp ne i64 %2, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i32 0, i32* %i
  %6 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %7 = call i64 @size.209(%"Vector[Token]"* %6)
  store i64 %7, i64* %s
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %8 = load i32, i32* %i
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %tmp.this
  %10 = load i64, i64* %tmp.this
  %11 = load i64, i64* %s
  %12 = icmp slt i64 %10, %11
  br i1 %12, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %13 = call i32 @"post_++.39"(i32* %i)
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %14 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %15 = load i32, i32* %i
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %tmp.this4
  %17 = load i64, i64* %tmp.this4
  %18 = call %Token* @at.358(%"Vector[Token]"* %14, i64 %17)
  %19 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %20 = load i32, i32* %i
  %21 = zext i32 %20 to i64
  store i64 %21, i64* %tmp.this5
  %22 = load i64, i64* %tmp.this5
  %23 = call %Token* @at.358(%"Vector[Token]"* %19, i64 %22)
  %24 = call i1 @"==.351"(%Token* %18, %Token* %23)
  %25 = xor i1 true, %24
  br i1 %25, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block6, %if_block1
  br label %while_step

dumy_block6:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal %Token* @at.358(%"Vector[Token]"* %this, i64 %index) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %"$tmpC" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %2
  %4 = load i64, i64* %index.addr
  call void @advance.215(%"RawPtr[Token]"* %"$tmpC", %"RawPtr[Token]" %3, i64 %4)
  %5 = load %"RawPtr[Token]", %"RawPtr[Token]"* %"$tmpC"
  %6 = call %Token* @value.219(%"RawPtr[Token]" %5)
  ret %Token* %6
}

; Function Attrs: inlinehint nounwind
define internal i1 @"==.359"(%"Vector[UInt]"* %this, %"Vector[UInt]"* %other) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %other.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %other, %"Vector[UInt]"** %other.addr
  %i = alloca i32
  %s = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this5 = alloca i64
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = call i64 @size.222(%"Vector[UInt]"* %1)
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %4 = call i64 @size.222(%"Vector[UInt]"* %3)
  %5 = icmp ne i64 %2, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  store i32 0, i32* %i
  %6 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %7 = call i64 @size.222(%"Vector[UInt]"* %6)
  store i64 %7, i64* %s
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %8 = load i32, i32* %i
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %tmp.this
  %10 = load i64, i64* %tmp.this
  %11 = load i64, i64* %s
  %12 = icmp slt i64 %10, %11
  br i1 %12, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block1

while_step:                                       ; preds = %if_end3
  %13 = call i32 @"post_++.39"(i32* %i)
  br label %while_block

while_end:                                        ; preds = %while_block
  ret i1 true

if_block1:                                        ; preds = %while_body
  %14 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %15 = load i32, i32* %i
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %tmp.this4
  %17 = load i64, i64* %tmp.this4
  %18 = call i32* @at.360(%"Vector[UInt]"* %14, i64 %17)
  %19 = load i32, i32* %18
  %20 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %21 = load i32, i32* %i
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %tmp.this5
  %23 = load i64, i64* %tmp.this5
  %24 = call i32* @at.360(%"Vector[UInt]"* %20, i64 %23)
  %25 = load i32, i32* %24
  %26 = icmp eq i32 %19, %25
  %27 = xor i1 true, %26
  br i1 %27, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block6, %if_block1
  br label %while_step

dumy_block6:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal i32* @at.360(%"Vector[UInt]"* %this, i64 %index) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %"$tmpC" = alloca %"RawPtr[UInt]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 0
  %3 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %2
  %4 = load i64, i64* %index.addr
  call void @advance.228(%"RawPtr[UInt]"* %"$tmpC", %"RawPtr[UInt]" %3, i64 %4)
  %5 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %"$tmpC"
  %6 = call i32* @value.272(%"RawPtr[UInt]" %5)
  ret i32* %6
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.361"(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %other.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  %5 = call i1 @"==.362"(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %4)
  br i1 %5, label %cond.true7, label %cond.false8

cond.true:                                        ; preds = %cond.end3
  %6 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %7 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6, i32 0, i32 4
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, i32 0, i32 4
  %10 = call i1 @"==.353"(%ErrorReporter* %7, %ErrorReporter* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res12 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res12

cond.true1:                                       ; preds = %cond.end6
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, i32 0, i32 3
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i32 0, i32 3
  %15 = call i1 @"==.363"(%AstBuilder* %12, %AstBuilder* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res11 = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res11, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i32 0, i32 2
  %18 = load i1, i1* %17
  %19 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %20 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %19, i32 0, i32 2
  %21 = load i1, i1* %20
  %22 = icmp eq i1 %18, %21
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res10 = phi i1 [ %22, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res10, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %code
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 1
  %25 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %26 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %25, i32 0, i32 1
  %27 = call i1 @"==.351"(%Token* %24, %Token* %26)
  br label %cond.end9

cond.false8:                                      ; preds = %code
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res = phi i1 [ %27, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res, label %cond.true4, label %cond.false5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.362"(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other) #3 {
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %other.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %other, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  %3 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  %5 = call i1 @"==.355"(%"SparrowLayoutDecoder[SparrowScanner]"* %2, %"SparrowLayoutDecoder[SparrowScanner]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %7 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %6, i32 0, i32 1
  %8 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %other.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %8, i32 0, i32 1
  %10 = call i1 @"==.357"(%"Vector[Token]"* %7, %"Vector[Token]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.363"(%AstBuilder* %this, %AstBuilder* %other) #3 {
  %this.addr = alloca %AstBuilder*
  store %AstBuilder* %this, %AstBuilder** %this.addr
  %other.addr = alloca %AstBuilder*
  store %AstBuilder* %other, %AstBuilder** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %this.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 0
  %3 = load %AstBuilder*, %AstBuilder** %other.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = call i1 @"==.341"(%UntypedPtr* %2, %UntypedPtr* %4)
  br i1 %5, label %cond.true115, label %cond.false116

cond.true:                                        ; preds = %cond.end3
  %6 = load %AstBuilder*, %AstBuilder** %this.addr
  %7 = getelementptr inbounds %AstBuilder, %AstBuilder* %6, i32 0, i32 40
  %8 = load %AstBuilder*, %AstBuilder** %other.addr
  %9 = getelementptr inbounds %AstBuilder, %AstBuilder* %8, i32 0, i32 40
  %10 = call i1 @"==.386"(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %7, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res156 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res156

cond.true1:                                       ; preds = %cond.end6
  %11 = load %AstBuilder*, %AstBuilder** %this.addr
  %12 = getelementptr inbounds %AstBuilder, %AstBuilder* %11, i32 0, i32 39
  %13 = load %AstBuilder*, %AstBuilder** %other.addr
  %14 = getelementptr inbounds %AstBuilder, %AstBuilder* %13, i32 0, i32 39
  %15 = call i1 @"==.377"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %12, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res155 = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res155, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  %16 = load %AstBuilder*, %AstBuilder** %this.addr
  %17 = getelementptr inbounds %AstBuilder, %AstBuilder* %16, i32 0, i32 38
  %18 = load %AstBuilder*, %AstBuilder** %other.addr
  %19 = getelementptr inbounds %AstBuilder, %AstBuilder* %18, i32 0, i32 38
  %20 = call i1 @"==.377"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %17, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %19)
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res154 = phi i1 [ %20, %cond.true4 ], [ false, %cond.false5 ]
  br i1 %cond.res154, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  %21 = load %AstBuilder*, %AstBuilder** %this.addr
  %22 = getelementptr inbounds %AstBuilder, %AstBuilder* %21, i32 0, i32 37
  %23 = load %AstBuilder*, %AstBuilder** %other.addr
  %24 = getelementptr inbounds %AstBuilder, %AstBuilder* %23, i32 0, i32 37
  %25 = call i1 @"==.387"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %22, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %24)
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res153 = phi i1 [ %25, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res153, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %cond.end15
  %26 = load %AstBuilder*, %AstBuilder** %this.addr
  %27 = getelementptr inbounds %AstBuilder, %AstBuilder* %26, i32 0, i32 36
  %28 = load %AstBuilder*, %AstBuilder** %other.addr
  %29 = getelementptr inbounds %AstBuilder, %AstBuilder* %28, i32 0, i32 36
  %30 = call i1 @"==.368"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %27, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %29)
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end15
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res152 = phi i1 [ %30, %cond.true10 ], [ false, %cond.false11 ]
  br i1 %cond.res152, label %cond.true7, label %cond.false8

cond.true13:                                      ; preds = %cond.end18
  %31 = load %AstBuilder*, %AstBuilder** %this.addr
  %32 = getelementptr inbounds %AstBuilder, %AstBuilder* %31, i32 0, i32 35
  %33 = load %AstBuilder*, %AstBuilder** %other.addr
  %34 = getelementptr inbounds %AstBuilder, %AstBuilder* %33, i32 0, i32 35
  %35 = call i1 @"==.387"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %32, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %34)
  br label %cond.end15

cond.false14:                                     ; preds = %cond.end18
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res151 = phi i1 [ %35, %cond.true13 ], [ false, %cond.false14 ]
  br i1 %cond.res151, label %cond.true10, label %cond.false11

cond.true16:                                      ; preds = %cond.end21
  %36 = load %AstBuilder*, %AstBuilder** %this.addr
  %37 = getelementptr inbounds %AstBuilder, %AstBuilder* %36, i32 0, i32 34
  %38 = load %AstBuilder*, %AstBuilder** %other.addr
  %39 = getelementptr inbounds %AstBuilder, %AstBuilder* %38, i32 0, i32 34
  %40 = call i1 @"==.386"(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %37, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %39)
  br label %cond.end18

cond.false17:                                     ; preds = %cond.end21
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond.res150 = phi i1 [ %40, %cond.true16 ], [ false, %cond.false17 ]
  br i1 %cond.res150, label %cond.true13, label %cond.false14

cond.true19:                                      ; preds = %cond.end24
  %41 = load %AstBuilder*, %AstBuilder** %this.addr
  %42 = getelementptr inbounds %AstBuilder, %AstBuilder* %41, i32 0, i32 33
  %43 = load %AstBuilder*, %AstBuilder** %other.addr
  %44 = getelementptr inbounds %AstBuilder, %AstBuilder* %43, i32 0, i32 33
  %45 = call i1 @"==.375"(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %42, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %44)
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end24
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond.res149 = phi i1 [ %45, %cond.true19 ], [ false, %cond.false20 ]
  br i1 %cond.res149, label %cond.true16, label %cond.false17

cond.true22:                                      ; preds = %cond.end27
  %46 = load %AstBuilder*, %AstBuilder** %this.addr
  %47 = getelementptr inbounds %AstBuilder, %AstBuilder* %46, i32 0, i32 32
  %48 = load %AstBuilder*, %AstBuilder** %other.addr
  %49 = getelementptr inbounds %AstBuilder, %AstBuilder* %48, i32 0, i32 32
  %50 = call i1 @"==.385"(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %47, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %49)
  br label %cond.end24

cond.false23:                                     ; preds = %cond.end27
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond.res148 = phi i1 [ %50, %cond.true22 ], [ false, %cond.false23 ]
  br i1 %cond.res148, label %cond.true19, label %cond.false20

cond.true25:                                      ; preds = %cond.end30
  %51 = load %AstBuilder*, %AstBuilder** %this.addr
  %52 = getelementptr inbounds %AstBuilder, %AstBuilder* %51, i32 0, i32 31
  %53 = load %AstBuilder*, %AstBuilder** %other.addr
  %54 = getelementptr inbounds %AstBuilder, %AstBuilder* %53, i32 0, i32 31
  %55 = call i1 @"==.384"(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %52, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %54)
  br label %cond.end27

cond.false26:                                     ; preds = %cond.end30
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond.res147 = phi i1 [ %55, %cond.true25 ], [ false, %cond.false26 ]
  br i1 %cond.res147, label %cond.true22, label %cond.false23

cond.true28:                                      ; preds = %cond.end33
  %56 = load %AstBuilder*, %AstBuilder** %this.addr
  %57 = getelementptr inbounds %AstBuilder, %AstBuilder* %56, i32 0, i32 30
  %58 = load %AstBuilder*, %AstBuilder** %other.addr
  %59 = getelementptr inbounds %AstBuilder, %AstBuilder* %58, i32 0, i32 30
  %60 = call i1 @"==.383"(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %57, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %59)
  br label %cond.end30

cond.false29:                                     ; preds = %cond.end33
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond.res146 = phi i1 [ %60, %cond.true28 ], [ false, %cond.false29 ]
  br i1 %cond.res146, label %cond.true25, label %cond.false26

cond.true31:                                      ; preds = %cond.end36
  %61 = load %AstBuilder*, %AstBuilder** %this.addr
  %62 = getelementptr inbounds %AstBuilder, %AstBuilder* %61, i32 0, i32 29
  %63 = load %AstBuilder*, %AstBuilder** %other.addr
  %64 = getelementptr inbounds %AstBuilder, %AstBuilder* %63, i32 0, i32 29
  %65 = call i1 @"==.382"(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %62, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %64)
  br label %cond.end33

cond.false32:                                     ; preds = %cond.end36
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond.res145 = phi i1 [ %65, %cond.true31 ], [ false, %cond.false32 ]
  br i1 %cond.res145, label %cond.true28, label %cond.false29

cond.true34:                                      ; preds = %cond.end39
  %66 = load %AstBuilder*, %AstBuilder** %this.addr
  %67 = getelementptr inbounds %AstBuilder, %AstBuilder* %66, i32 0, i32 28
  %68 = load %AstBuilder*, %AstBuilder** %other.addr
  %69 = getelementptr inbounds %AstBuilder, %AstBuilder* %68, i32 0, i32 28
  %70 = call i1 @"==.381"(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %67, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %69)
  br label %cond.end36

cond.false35:                                     ; preds = %cond.end39
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond.res144 = phi i1 [ %70, %cond.true34 ], [ false, %cond.false35 ]
  br i1 %cond.res144, label %cond.true31, label %cond.false32

cond.true37:                                      ; preds = %cond.end42
  %71 = load %AstBuilder*, %AstBuilder** %this.addr
  %72 = getelementptr inbounds %AstBuilder, %AstBuilder* %71, i32 0, i32 27
  %73 = load %AstBuilder*, %AstBuilder** %other.addr
  %74 = getelementptr inbounds %AstBuilder, %AstBuilder* %73, i32 0, i32 27
  %75 = call i1 @"==.380"(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %72, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %74)
  br label %cond.end39

cond.false38:                                     ; preds = %cond.end42
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond.res143 = phi i1 [ %75, %cond.true37 ], [ false, %cond.false38 ]
  br i1 %cond.res143, label %cond.true34, label %cond.false35

cond.true40:                                      ; preds = %cond.end45
  %76 = load %AstBuilder*, %AstBuilder** %this.addr
  %77 = getelementptr inbounds %AstBuilder, %AstBuilder* %76, i32 0, i32 26
  %78 = load %AstBuilder*, %AstBuilder** %other.addr
  %79 = getelementptr inbounds %AstBuilder, %AstBuilder* %78, i32 0, i32 26
  %80 = call i1 @"==.379"(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %77, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %79)
  br label %cond.end42

cond.false41:                                     ; preds = %cond.end45
  br label %cond.end42

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond.res142 = phi i1 [ %80, %cond.true40 ], [ false, %cond.false41 ]
  br i1 %cond.res142, label %cond.true37, label %cond.false38

cond.true43:                                      ; preds = %cond.end48
  %81 = load %AstBuilder*, %AstBuilder** %this.addr
  %82 = getelementptr inbounds %AstBuilder, %AstBuilder* %81, i32 0, i32 25
  %83 = load %AstBuilder*, %AstBuilder** %other.addr
  %84 = getelementptr inbounds %AstBuilder, %AstBuilder* %83, i32 0, i32 25
  %85 = call i1 @"==.378"(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %82, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %84)
  br label %cond.end45

cond.false44:                                     ; preds = %cond.end48
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond.res141 = phi i1 [ %85, %cond.true43 ], [ false, %cond.false44 ]
  br i1 %cond.res141, label %cond.true40, label %cond.false41

cond.true46:                                      ; preds = %cond.end51
  %86 = load %AstBuilder*, %AstBuilder** %this.addr
  %87 = getelementptr inbounds %AstBuilder, %AstBuilder* %86, i32 0, i32 24
  %88 = load %AstBuilder*, %AstBuilder** %other.addr
  %89 = getelementptr inbounds %AstBuilder, %AstBuilder* %88, i32 0, i32 24
  %90 = call i1 @"==.377"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %87, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %89)
  br label %cond.end48

cond.false47:                                     ; preds = %cond.end51
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond.res140 = phi i1 [ %90, %cond.true46 ], [ false, %cond.false47 ]
  br i1 %cond.res140, label %cond.true43, label %cond.false44

cond.true49:                                      ; preds = %cond.end54
  %91 = load %AstBuilder*, %AstBuilder** %this.addr
  %92 = getelementptr inbounds %AstBuilder, %AstBuilder* %91, i32 0, i32 23
  %93 = load %AstBuilder*, %AstBuilder** %other.addr
  %94 = getelementptr inbounds %AstBuilder, %AstBuilder* %93, i32 0, i32 23
  %95 = call i1 @"==.376"(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %92, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %94)
  br label %cond.end51

cond.false50:                                     ; preds = %cond.end54
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond.res139 = phi i1 [ %95, %cond.true49 ], [ false, %cond.false50 ]
  br i1 %cond.res139, label %cond.true46, label %cond.false47

cond.true52:                                      ; preds = %cond.end57
  %96 = load %AstBuilder*, %AstBuilder** %this.addr
  %97 = getelementptr inbounds %AstBuilder, %AstBuilder* %96, i32 0, i32 22
  %98 = load %AstBuilder*, %AstBuilder** %other.addr
  %99 = getelementptr inbounds %AstBuilder, %AstBuilder* %98, i32 0, i32 22
  %100 = call i1 @"==.365"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %97, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %99)
  br label %cond.end54

cond.false53:                                     ; preds = %cond.end57
  br label %cond.end54

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond.res138 = phi i1 [ %100, %cond.true52 ], [ false, %cond.false53 ]
  br i1 %cond.res138, label %cond.true49, label %cond.false50

cond.true55:                                      ; preds = %cond.end60
  %101 = load %AstBuilder*, %AstBuilder** %this.addr
  %102 = getelementptr inbounds %AstBuilder, %AstBuilder* %101, i32 0, i32 21
  %103 = load %AstBuilder*, %AstBuilder** %other.addr
  %104 = getelementptr inbounds %AstBuilder, %AstBuilder* %103, i32 0, i32 21
  %105 = call i1 @"==.373"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %102, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %104)
  br label %cond.end57

cond.false56:                                     ; preds = %cond.end60
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond.res137 = phi i1 [ %105, %cond.true55 ], [ false, %cond.false56 ]
  br i1 %cond.res137, label %cond.true52, label %cond.false53

cond.true58:                                      ; preds = %cond.end63
  %106 = load %AstBuilder*, %AstBuilder** %this.addr
  %107 = getelementptr inbounds %AstBuilder, %AstBuilder* %106, i32 0, i32 20
  %108 = load %AstBuilder*, %AstBuilder** %other.addr
  %109 = getelementptr inbounds %AstBuilder, %AstBuilder* %108, i32 0, i32 20
  %110 = call i1 @"==.373"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %107, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %109)
  br label %cond.end60

cond.false59:                                     ; preds = %cond.end63
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false59, %cond.true58
  %cond.res136 = phi i1 [ %110, %cond.true58 ], [ false, %cond.false59 ]
  br i1 %cond.res136, label %cond.true55, label %cond.false56

cond.true61:                                      ; preds = %cond.end66
  %111 = load %AstBuilder*, %AstBuilder** %this.addr
  %112 = getelementptr inbounds %AstBuilder, %AstBuilder* %111, i32 0, i32 19
  %113 = load %AstBuilder*, %AstBuilder** %other.addr
  %114 = getelementptr inbounds %AstBuilder, %AstBuilder* %113, i32 0, i32 19
  %115 = call i1 @"==.373"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %112, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %114)
  br label %cond.end63

cond.false62:                                     ; preds = %cond.end66
  br label %cond.end63

cond.end63:                                       ; preds = %cond.false62, %cond.true61
  %cond.res135 = phi i1 [ %115, %cond.true61 ], [ false, %cond.false62 ]
  br i1 %cond.res135, label %cond.true58, label %cond.false59

cond.true64:                                      ; preds = %cond.end69
  %116 = load %AstBuilder*, %AstBuilder** %this.addr
  %117 = getelementptr inbounds %AstBuilder, %AstBuilder* %116, i32 0, i32 18
  %118 = load %AstBuilder*, %AstBuilder** %other.addr
  %119 = getelementptr inbounds %AstBuilder, %AstBuilder* %118, i32 0, i32 18
  %120 = call i1 @"==.375"(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %117, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %119)
  br label %cond.end66

cond.false65:                                     ; preds = %cond.end69
  br label %cond.end66

cond.end66:                                       ; preds = %cond.false65, %cond.true64
  %cond.res134 = phi i1 [ %120, %cond.true64 ], [ false, %cond.false65 ]
  br i1 %cond.res134, label %cond.true61, label %cond.false62

cond.true67:                                      ; preds = %cond.end72
  %121 = load %AstBuilder*, %AstBuilder** %this.addr
  %122 = getelementptr inbounds %AstBuilder, %AstBuilder* %121, i32 0, i32 17
  %123 = load %AstBuilder*, %AstBuilder** %other.addr
  %124 = getelementptr inbounds %AstBuilder, %AstBuilder* %123, i32 0, i32 17
  %125 = call i1 @"==.367"(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %122, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %124)
  br label %cond.end69

cond.false68:                                     ; preds = %cond.end72
  br label %cond.end69

cond.end69:                                       ; preds = %cond.false68, %cond.true67
  %cond.res133 = phi i1 [ %125, %cond.true67 ], [ false, %cond.false68 ]
  br i1 %cond.res133, label %cond.true64, label %cond.false65

cond.true70:                                      ; preds = %cond.end75
  %126 = load %AstBuilder*, %AstBuilder** %this.addr
  %127 = getelementptr inbounds %AstBuilder, %AstBuilder* %126, i32 0, i32 16
  %128 = load %AstBuilder*, %AstBuilder** %other.addr
  %129 = getelementptr inbounds %AstBuilder, %AstBuilder* %128, i32 0, i32 16
  %130 = call i1 @"==.374"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %127, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %129)
  br label %cond.end72

cond.false71:                                     ; preds = %cond.end75
  br label %cond.end72

cond.end72:                                       ; preds = %cond.false71, %cond.true70
  %cond.res132 = phi i1 [ %130, %cond.true70 ], [ false, %cond.false71 ]
  br i1 %cond.res132, label %cond.true67, label %cond.false68

cond.true73:                                      ; preds = %cond.end78
  %131 = load %AstBuilder*, %AstBuilder** %this.addr
  %132 = getelementptr inbounds %AstBuilder, %AstBuilder* %131, i32 0, i32 15
  %133 = load %AstBuilder*, %AstBuilder** %other.addr
  %134 = getelementptr inbounds %AstBuilder, %AstBuilder* %133, i32 0, i32 15
  %135 = call i1 @"==.373"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %132, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %134)
  br label %cond.end75

cond.false74:                                     ; preds = %cond.end78
  br label %cond.end75

cond.end75:                                       ; preds = %cond.false74, %cond.true73
  %cond.res131 = phi i1 [ %135, %cond.true73 ], [ false, %cond.false74 ]
  br i1 %cond.res131, label %cond.true70, label %cond.false71

cond.true76:                                      ; preds = %cond.end81
  %136 = load %AstBuilder*, %AstBuilder** %this.addr
  %137 = getelementptr inbounds %AstBuilder, %AstBuilder* %136, i32 0, i32 14
  %138 = load %AstBuilder*, %AstBuilder** %other.addr
  %139 = getelementptr inbounds %AstBuilder, %AstBuilder* %138, i32 0, i32 14
  %140 = call i1 @"==.372"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %137, %"FunctionPtr2[Node, UntypedPtr, Node]"* %139)
  br label %cond.end78

cond.false77:                                     ; preds = %cond.end81
  br label %cond.end78

cond.end78:                                       ; preds = %cond.false77, %cond.true76
  %cond.res130 = phi i1 [ %140, %cond.true76 ], [ false, %cond.false77 ]
  br i1 %cond.res130, label %cond.true73, label %cond.false74

cond.true79:                                      ; preds = %cond.end84
  %141 = load %AstBuilder*, %AstBuilder** %this.addr
  %142 = getelementptr inbounds %AstBuilder, %AstBuilder* %141, i32 0, i32 13
  %143 = load %AstBuilder*, %AstBuilder** %other.addr
  %144 = getelementptr inbounds %AstBuilder, %AstBuilder* %143, i32 0, i32 13
  %145 = call i1 @"==.371"(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %142, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %144)
  br label %cond.end81

cond.false80:                                     ; preds = %cond.end84
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false80, %cond.true79
  %cond.res129 = phi i1 [ %145, %cond.true79 ], [ false, %cond.false80 ]
  br i1 %cond.res129, label %cond.true76, label %cond.false77

cond.true82:                                      ; preds = %cond.end87
  %146 = load %AstBuilder*, %AstBuilder** %this.addr
  %147 = getelementptr inbounds %AstBuilder, %AstBuilder* %146, i32 0, i32 12
  %148 = load %AstBuilder*, %AstBuilder** %other.addr
  %149 = getelementptr inbounds %AstBuilder, %AstBuilder* %148, i32 0, i32 12
  %150 = call i1 @"==.366"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %147, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %149)
  br label %cond.end84

cond.false83:                                     ; preds = %cond.end87
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false83, %cond.true82
  %cond.res128 = phi i1 [ %150, %cond.true82 ], [ false, %cond.false83 ]
  br i1 %cond.res128, label %cond.true79, label %cond.false80

cond.true85:                                      ; preds = %cond.end90
  %151 = load %AstBuilder*, %AstBuilder** %this.addr
  %152 = getelementptr inbounds %AstBuilder, %AstBuilder* %151, i32 0, i32 11
  %153 = load %AstBuilder*, %AstBuilder** %other.addr
  %154 = getelementptr inbounds %AstBuilder, %AstBuilder* %153, i32 0, i32 11
  %155 = call i1 @"==.366"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %152, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %154)
  br label %cond.end87

cond.false86:                                     ; preds = %cond.end90
  br label %cond.end87

cond.end87:                                       ; preds = %cond.false86, %cond.true85
  %cond.res127 = phi i1 [ %155, %cond.true85 ], [ false, %cond.false86 ]
  br i1 %cond.res127, label %cond.true82, label %cond.false83

cond.true88:                                      ; preds = %cond.end93
  %156 = load %AstBuilder*, %AstBuilder** %this.addr
  %157 = getelementptr inbounds %AstBuilder, %AstBuilder* %156, i32 0, i32 10
  %158 = load %AstBuilder*, %AstBuilder** %other.addr
  %159 = getelementptr inbounds %AstBuilder, %AstBuilder* %158, i32 0, i32 10
  %160 = call i1 @"==.366"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %157, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %159)
  br label %cond.end90

cond.false89:                                     ; preds = %cond.end93
  br label %cond.end90

cond.end90:                                       ; preds = %cond.false89, %cond.true88
  %cond.res126 = phi i1 [ %160, %cond.true88 ], [ false, %cond.false89 ]
  br i1 %cond.res126, label %cond.true85, label %cond.false86

cond.true91:                                      ; preds = %cond.end96
  %161 = load %AstBuilder*, %AstBuilder** %this.addr
  %162 = getelementptr inbounds %AstBuilder, %AstBuilder* %161, i32 0, i32 9
  %163 = load %AstBuilder*, %AstBuilder** %other.addr
  %164 = getelementptr inbounds %AstBuilder, %AstBuilder* %163, i32 0, i32 9
  %165 = call i1 @"==.370"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %162, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %164)
  br label %cond.end93

cond.false92:                                     ; preds = %cond.end96
  br label %cond.end93

cond.end93:                                       ; preds = %cond.false92, %cond.true91
  %cond.res125 = phi i1 [ %165, %cond.true91 ], [ false, %cond.false92 ]
  br i1 %cond.res125, label %cond.true88, label %cond.false89

cond.true94:                                      ; preds = %cond.end99
  %166 = load %AstBuilder*, %AstBuilder** %this.addr
  %167 = getelementptr inbounds %AstBuilder, %AstBuilder* %166, i32 0, i32 8
  %168 = load %AstBuilder*, %AstBuilder** %other.addr
  %169 = getelementptr inbounds %AstBuilder, %AstBuilder* %168, i32 0, i32 8
  %170 = call i1 @"==.366"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %167, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %169)
  br label %cond.end96

cond.false95:                                     ; preds = %cond.end99
  br label %cond.end96

cond.end96:                                       ; preds = %cond.false95, %cond.true94
  %cond.res124 = phi i1 [ %170, %cond.true94 ], [ false, %cond.false95 ]
  br i1 %cond.res124, label %cond.true91, label %cond.false92

cond.true97:                                      ; preds = %cond.end102
  %171 = load %AstBuilder*, %AstBuilder** %this.addr
  %172 = getelementptr inbounds %AstBuilder, %AstBuilder* %171, i32 0, i32 7
  %173 = load %AstBuilder*, %AstBuilder** %other.addr
  %174 = getelementptr inbounds %AstBuilder, %AstBuilder* %173, i32 0, i32 7
  %175 = call i1 @"==.369"(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %172, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %174)
  br label %cond.end99

cond.false98:                                     ; preds = %cond.end102
  br label %cond.end99

cond.end99:                                       ; preds = %cond.false98, %cond.true97
  %cond.res123 = phi i1 [ %175, %cond.true97 ], [ false, %cond.false98 ]
  br i1 %cond.res123, label %cond.true94, label %cond.false95

cond.true100:                                     ; preds = %cond.end105
  %176 = load %AstBuilder*, %AstBuilder** %this.addr
  %177 = getelementptr inbounds %AstBuilder, %AstBuilder* %176, i32 0, i32 6
  %178 = load %AstBuilder*, %AstBuilder** %other.addr
  %179 = getelementptr inbounds %AstBuilder, %AstBuilder* %178, i32 0, i32 6
  %180 = call i1 @"==.368"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %177, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %179)
  br label %cond.end102

cond.false101:                                    ; preds = %cond.end105
  br label %cond.end102

cond.end102:                                      ; preds = %cond.false101, %cond.true100
  %cond.res122 = phi i1 [ %180, %cond.true100 ], [ false, %cond.false101 ]
  br i1 %cond.res122, label %cond.true97, label %cond.false98

cond.true103:                                     ; preds = %cond.end108
  %181 = load %AstBuilder*, %AstBuilder** %this.addr
  %182 = getelementptr inbounds %AstBuilder, %AstBuilder* %181, i32 0, i32 5
  %183 = load %AstBuilder*, %AstBuilder** %other.addr
  %184 = getelementptr inbounds %AstBuilder, %AstBuilder* %183, i32 0, i32 5
  %185 = call i1 @"==.367"(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %182, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %184)
  br label %cond.end105

cond.false104:                                    ; preds = %cond.end108
  br label %cond.end105

cond.end105:                                      ; preds = %cond.false104, %cond.true103
  %cond.res121 = phi i1 [ %185, %cond.true103 ], [ false, %cond.false104 ]
  br i1 %cond.res121, label %cond.true100, label %cond.false101

cond.true106:                                     ; preds = %cond.end111
  %186 = load %AstBuilder*, %AstBuilder** %this.addr
  %187 = getelementptr inbounds %AstBuilder, %AstBuilder* %186, i32 0, i32 4
  %188 = load %AstBuilder*, %AstBuilder** %other.addr
  %189 = getelementptr inbounds %AstBuilder, %AstBuilder* %188, i32 0, i32 4
  %190 = call i1 @"==.366"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %187, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %189)
  br label %cond.end108

cond.false107:                                    ; preds = %cond.end111
  br label %cond.end108

cond.end108:                                      ; preds = %cond.false107, %cond.true106
  %cond.res120 = phi i1 [ %190, %cond.true106 ], [ false, %cond.false107 ]
  br i1 %cond.res120, label %cond.true103, label %cond.false104

cond.true109:                                     ; preds = %cond.end114
  %191 = load %AstBuilder*, %AstBuilder** %this.addr
  %192 = getelementptr inbounds %AstBuilder, %AstBuilder* %191, i32 0, i32 3
  %193 = load %AstBuilder*, %AstBuilder** %other.addr
  %194 = getelementptr inbounds %AstBuilder, %AstBuilder* %193, i32 0, i32 3
  %195 = call i1 @"==.365"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %192, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %194)
  br label %cond.end111

cond.false110:                                    ; preds = %cond.end114
  br label %cond.end111

cond.end111:                                      ; preds = %cond.false110, %cond.true109
  %cond.res119 = phi i1 [ %195, %cond.true109 ], [ false, %cond.false110 ]
  br i1 %cond.res119, label %cond.true106, label %cond.false107

cond.true112:                                     ; preds = %cond.end117
  %196 = load %AstBuilder*, %AstBuilder** %this.addr
  %197 = getelementptr inbounds %AstBuilder, %AstBuilder* %196, i32 0, i32 2
  %198 = load %AstBuilder*, %AstBuilder** %other.addr
  %199 = getelementptr inbounds %AstBuilder, %AstBuilder* %198, i32 0, i32 2
  %200 = call i1 @"==.365"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %197, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %199)
  br label %cond.end114

cond.false113:                                    ; preds = %cond.end117
  br label %cond.end114

cond.end114:                                      ; preds = %cond.false113, %cond.true112
  %cond.res118 = phi i1 [ %200, %cond.true112 ], [ false, %cond.false113 ]
  br i1 %cond.res118, label %cond.true109, label %cond.false110

cond.true115:                                     ; preds = %code
  %201 = load %AstBuilder*, %AstBuilder** %this.addr
  %202 = getelementptr inbounds %AstBuilder, %AstBuilder* %201, i32 0, i32 1
  %203 = load %AstBuilder*, %AstBuilder** %other.addr
  %204 = getelementptr inbounds %AstBuilder, %AstBuilder* %203, i32 0, i32 1
  %205 = call i1 @"==.364"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %202, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %204)
  br label %cond.end117

cond.false116:                                    ; preds = %code
  br label %cond.end117

cond.end117:                                      ; preds = %cond.false116, %cond.true115
  %cond.res = phi i1 [ %205, %cond.true115 ], [ false, %cond.false116 ]
  br i1 %cond.res, label %cond.true112, label %cond.false113
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.364"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, Node, Node]", %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.365"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.366"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.367"(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %other, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]", %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.368"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.369"(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.370"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %other, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]", %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.371"(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]", %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.372"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %other, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, Node]", %"FunctionPtr2[Node, UntypedPtr, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.373"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %other, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]", %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.374"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.375"(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]", %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.376"(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %other, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]", %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.377"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %this, %"FunctionPtr2[Node, UntypedPtr, @Location]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, @Location]"*
  store %"FunctionPtr2[Node, UntypedPtr, @Location]"* %this, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  %other.addr = alloca %"FunctionPtr2[Node, UntypedPtr, @Location]"*
  store %"FunctionPtr2[Node, UntypedPtr, @Location]"* %other, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, @Location]"*, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr2[Node, UntypedPtr, @Location]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr2[Node, UntypedPtr, @Location]"*, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr2[Node, UntypedPtr, @Location]", %"FunctionPtr2[Node, UntypedPtr, @Location]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.378"(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]", %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]", %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.379"(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Int]", %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Int]", %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.380"(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]", %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]", %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.381"(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Long]", %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Long]", %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.382"(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]", %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]", %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.383"(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Float]", %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Float]", %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.384"(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Double]", %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Double]", %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.385"(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Char]", %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Char]", %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.386"(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %other, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Node]", %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Node, UntypedPtr, @Location, Node]", %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.387"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  %other.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %other, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  %2 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %other.addr
  %5 = getelementptr inbounds %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]", %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.388(%ParserContext* %this, %CharSource %chars, %Location %loc, %AstBuilder* %astBuilder, %ErrorReporter %reporter) #4 {
  %this.addr = alloca %ParserContext*
  store %ParserContext* %this, %ParserContext** %this.addr
  %chars.addr = alloca %CharSource
  store %CharSource %chars, %CharSource* %chars.addr
  %loc.addr = alloca %Location
  store %Location %loc, %Location* %loc.addr
  %astBuilder.addr = alloca %AstBuilder*
  store %AstBuilder* %astBuilder, %AstBuilder** %astBuilder.addr
  %reporter.addr = alloca %ErrorReporter
  store %ErrorReporter %reporter, %ErrorReporter* %reporter.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %this.addr
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %1, i32 0, i32 0
  %3 = load %CharSource, %CharSource* %chars.addr
  %4 = load %ErrorReporter, %ErrorReporter* %reporter.addr
  call void @ctor.389(%SparrowScanner* %2, %CharSource %3, %ErrorReporter %4, %Location* %loc.addr, i1 false)
  %5 = load %ParserContext*, %ParserContext** %this.addr
  %6 = getelementptr inbounds %ParserContext, %ParserContext* %5, i32 0, i32 1
  %7 = load %ParserContext*, %ParserContext** %this.addr
  %8 = getelementptr inbounds %ParserContext, %ParserContext* %7, i32 0, i32 0
  %9 = load %SparrowScanner, %SparrowScanner* %8
  %10 = load %ErrorReporter, %ErrorReporter* %reporter.addr
  call void @ctor.402(%"SparrowLayoutDecoder[SparrowScanner]"* %6, %SparrowScanner %9, %ErrorReporter %10)
  %11 = load %ParserContext*, %ParserContext** %this.addr
  %12 = getelementptr inbounds %ParserContext, %ParserContext* %11, i32 0, i32 2
  %13 = load %ParserContext*, %ParserContext** %this.addr
  %14 = getelementptr inbounds %ParserContext, %ParserContext* %13, i32 0, i32 1
  %15 = load %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %14
  %16 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %17 = load %ErrorReporter, %ErrorReporter* %reporter.addr
  call void @ctor.519(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, %"SparrowLayoutDecoder[SparrowScanner]" %15, %AstBuilder* %16, %ErrorReporter %17)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.389(%SparrowScanner* %this, %CharSource %chars, %ErrorReporter %errorReporter, %Location* %iniLocation, i1 %emitWitespace) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %chars.addr = alloca %CharSource
  store %CharSource %chars, %CharSource* %chars.addr
  %errorReporter.addr = alloca %ErrorReporter
  store %ErrorReporter %errorReporter, %ErrorReporter* %errorReporter.addr
  %iniLocation.addr = alloca %Location*
  store %Location* %iniLocation, %Location** %iniLocation.addr
  %emitWitespace.addr = alloca i1
  store i1 %emitWitespace, i1* %emitWitespace.addr
  %tmp.this = alloca %"RangeWithLookahead[BufferedCharSourceRange]"
  %"$tmpC" = alloca %BufferedCharSourceRange
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 6
  store i1 false, i1* %2
  %3 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %4 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %3, i32 0, i32 0
  %5 = load %Location*, %Location** %iniLocation.addr
  call void @ctor.182(%Location* %4, %Location* %5)
  %6 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %6, i32 0, i32 1
  %8 = load %CharSource, %CharSource* %chars.addr
  call void @ctor.390(%BufferedCharSource* %7, %CharSource %8)
  %9 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %9, i32 0, i32 2
  %11 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 1
  call void @all(%BufferedCharSourceRange* %"$tmpC", %BufferedCharSource* %12)
  %13 = load %BufferedCharSourceRange, %BufferedCharSourceRange* %"$tmpC"
  call void @ctor.393(%"RangeWithLookahead[BufferedCharSourceRange]"* %tmp.this, %BufferedCharSourceRange %13)
  %14 = load %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %tmp.this
  %15 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %16 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %15, i32 0, i32 0
  call void @ctor.392(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10, %"RangeWithLookahead[BufferedCharSourceRange]" %14, %Location* %16)
  call void @dtor.279(%"RangeWithLookahead[BufferedCharSourceRange]"* %tmp.this)
  %17 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %18 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %17, i32 0, i32 3
  call void @ctor.143(%Token* %18)
  %19 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %20 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %19, i32 0, i32 4
  store i1 false, i1* %20
  %21 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %22 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %21, i32 0, i32 5
  call void @ctor.204(%ErrorReporter* %22, %ErrorReporter* %errorReporter.addr)
  %23 = load i1, i1* %emitWitespace.addr
  %24 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %25 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %24, i32 0, i32 6
  store i1 %23, i1* %25
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.390(%BufferedCharSource* %this, %CharSource %src) #4 {
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  %src.addr = alloca %CharSource
  store %CharSource %src, %CharSource* %src.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %1, i32 0, i32 0
  call void @ctor.186(%CharSource* %2, %CharSource* %src.addr)
  %3 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %3, i32 0, i32 1
  call void @ctor.137(%String* %4)
  %5 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %6 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %5, i32 0, i32 1
  store i64 4096, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  call void @reserve(%String* %6, i64 %7)
  %8 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %9 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %8, i32 0, i32 2
  store i32 0, i32* %9
  %10 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  call void @_ensureBufferHasData(%BufferedCharSource* %10)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reserve(%String* %this, i64 %n) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %curCapacity = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this8 = alloca double
  %tmp.this9 = alloca double
  %tmp.this10 = alloca i64
  %tmp.this11 = alloca double
  %curSize = alloca i64
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this12 = alloca i64
  %"$tmpC13" = alloca %"RawPtr[Char]"
  %tmp.this14 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = call i64 @capacity(%String* %1)
  store i64 %2, i64* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load i64, i64* %n.addr
  %4 = load i64, i64* %curCapacity
  %5 = icmp sle i64 %3, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %6 = load i64, i64* %n.addr
  store i64 16, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 16, i64* %tmp.this4
  %9 = load i64, i64* %tmp.this4
  store i64 %9, i64* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block5

if_block5:                                        ; preds = %if_end3
  %10 = load i64, i64* %n.addr
  %11 = sitofp i64 %10 to double
  store double %11, double* %tmp.this8
  %12 = load double, double* %tmp.this8
  %13 = load i64, i64* %curCapacity
  %14 = sitofp i64 %13 to double
  store double %14, double* %tmp.this9
  %15 = load double, double* %tmp.this9
  %16 = call double @_Double_opMul(double 1.500000e+00, double %15)
  %17 = call i1 @_Double_opLT(double %12, double %16)
  br i1 %17, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  %18 = load i64, i64* %curCapacity
  %19 = sitofp i64 %18 to double
  store double %19, double* %tmp.this11
  %20 = load double, double* %tmp.this11
  %21 = call double @_Double_opMul(double 1.500000e+00, double %20)
  %22 = fptoui double %21 to i64
  store i64 %22, i64* %tmp.this10
  %23 = load i64, i64* %tmp.this10
  store i64 %23, i64* %n.addr
  br label %if_end7

if_end7:                                          ; preds = %if_then6, %if_block5
  %24 = load %String*, %String** %this.addr
  %25 = call i64 @size.190(%String* %24)
  store i64 %25, i64* %curSize
  %26 = load %String*, %String** %this.addr
  %27 = getelementptr inbounds %String, %String* %26, i32 0, i32 0
  %28 = load i64, i64* %n.addr
  call void @reallocPtr(%"RawPtr[Char]"* %27, i64 %28)
  %29 = load %String*, %String** %this.addr
  %30 = getelementptr inbounds %String, %String* %29, i32 0, i32 1
  %31 = load %String*, %String** %this.addr
  %32 = getelementptr inbounds %String, %String* %31, i32 0, i32 0
  %33 = load %"RawPtr[Char]", %"RawPtr[Char]"* %32
  %34 = load i64, i64* %curSize
  store i64 %34, i64* %tmp.this12
  %35 = load i64, i64* %tmp.this12
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %33, i64 %35)
  call void @"=.200"(%"RawPtr[Char]"* %30, %"RawPtr[Char]"* %"$tmpC")
  %36 = load %String*, %String** %this.addr
  %37 = getelementptr inbounds %String, %String* %36, i32 0, i32 2
  %38 = load %String*, %String** %this.addr
  %39 = getelementptr inbounds %String, %String* %38, i32 0, i32 0
  %40 = load %"RawPtr[Char]", %"RawPtr[Char]"* %39
  %41 = load i64, i64* %n.addr
  store i64 %41, i64* %tmp.this14
  %42 = load i64, i64* %tmp.this14
  call void @advance(%"RawPtr[Char]"* %"$tmpC13", %"RawPtr[Char]" %40, i64 %42)
  call void @"=.200"(%"RawPtr[Char]"* %37, %"RawPtr[Char]"* %"$tmpC13")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i64 @capacity(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 2
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = load %String*, %String** %this.addr
  %5 = getelementptr inbounds %String, %String* %4, i32 0, i32 0
  %6 = load %"RawPtr[Char]", %"RawPtr[Char]"* %5
  %7 = call i64 @diff(%"RawPtr[Char]" %3, %"RawPtr[Char]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal void @reallocPtr(%"RawPtr[Char]"* %this, i64 %n) #4 {
  %this.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %this, %"RawPtr[Char]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %1
  %3 = call i8* @bytePtr(%"RawPtr[Char]" %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 1
  %6 = call i8* @realloc(i8* %3, i64 %5)
  %7 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %this.addr
  %8 = getelementptr inbounds %"RawPtr[Char]", %"RawPtr[Char]"* %7, i32 0, i32 0
  store i8* %6, i8** %8
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @_ensureBufferHasData(%BufferedCharSource* %this) #4 {
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %2 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %1, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = zext i32 %3 to i64
  store i64 %4, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  %6 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %7 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %6, i32 0, i32 1
  %8 = call i64 @size.190(%String* %7)
  %9 = icmp sge i64 %5, %8
  br i1 %9, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %10 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %11 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %10, i32 0, i32 1
  call void @clear(%String* %11)
  %12 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %13 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %12, i32 0, i32 2
  store i32 0, i32* %13
  %14 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %15 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %14, i32 0, i32 0
  %16 = load %CharSource, %CharSource* %15
  %17 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  %18 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %17, i32 0, i32 1
  call void @readChars(%CharSource %16, %String* %18, i32 4096)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @clear(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = load %String*, %String** %this.addr
  %3 = getelementptr inbounds %String, %String* %2, i32 0, i32 0
  %4 = load %"RawPtr[Char]", %"RawPtr[Char]"* %3
  %5 = call i8* @bytePtr(%"RawPtr[Char]" %4)
  %6 = load %String*, %String** %this.addr
  %7 = getelementptr inbounds %String, %String* %6, i32 0, i32 1
  %8 = load %"RawPtr[Char]", %"RawPtr[Char]"* %7
  %9 = call i8* @bytePtr(%"RawPtr[Char]" %8)
  call void @ctor.57(%StringRef* %tmp.this, i8* %5, i8* %9)
  %10 = load %StringRef, %StringRef* %tmp.this
  call void @remove(%String* %1, %StringRef %10)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @remove(%String* %this, %StringRef %range) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %range.addr = alloca %StringRef
  store %StringRef %range, %StringRef* %range.addr
  %rSize = alloca i64
  %rBegin = alloca %"RawPtr[Char]"
  %rEnd = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  %"$tmpC" = alloca %"RawPtr[Char]"
  %"$tmpC1" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = call i64 @size(%StringRef* %range.addr)
  store i64 %1, i64* %rSize
  %2 = load %StringRef, %StringRef* %range.addr
  call void @_frontPtr(%"RawPtr[Char]"* %rBegin, %StringRef %2)
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rBegin
  %4 = load i64, i64* %rSize
  store i64 %4, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]" %3, i64 %5)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %6 = load %String*, %String** %this.addr
  %7 = getelementptr inbounds %String, %String* %6, i32 0, i32 1
  %8 = call i1 @"==.268"(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %7)
  %9 = xor i1 true, %8
  br i1 %9, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %10 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rBegin
  %11 = call i8* @value(%"RawPtr[Char]" %10)
  %12 = load i8, i8* %11
  %13 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rEnd
  %14 = call i8* @value(%"RawPtr[Char]" %13)
  %15 = load i8, i8* %14
  %16 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rBegin
  %17 = call i8* @value(%"RawPtr[Char]" %16)
  store i8 %15, i8* %17
  %18 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rBegin
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %18)
  call void @"=.200"(%"RawPtr[Char]"* %rBegin, %"RawPtr[Char]"* %"$tmpC")
  %19 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rEnd
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC1", %"RawPtr[Char]" %19)
  call void @"=.200"(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %"$tmpC1")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %20 = load %String*, %String** %this.addr
  %21 = getelementptr inbounds %String, %String* %20, i32 0, i32 1
  call void @"=.200"(%"RawPtr[Char]"* %21, %"RawPtr[Char]"* %rBegin)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @_frontPtr(%"RawPtr[Char]"* sret %_result, %StringRef %s) #4 {
  %_result.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %_result, %"RawPtr[Char]"** %_result.addr
  %s.addr = alloca %StringRef
  store %StringRef %s, %StringRef* %s.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %_result.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %s.addr, i32 0, i32 0
  %3 = load i8*, i8** %2
  call void @ctor.194(%"RawPtr[Char]"* %1, i8* %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @readChars(%CharSource %obj, %String* %dest, i32 %numChars) #4 {
  %obj.addr = alloca %CharSource
  store %CharSource %obj, %CharSource* %obj.addr
  %dest.addr = alloca %String*
  store %String* %dest, %String** %dest.addr
  %numChars.addr = alloca i32
  store i32 %numChars, i32* %numChars.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %CharSource, %CharSource* %obj.addr, i32 0, i32 1
  %2 = getelementptr inbounds %CharSource, %CharSource* %obj.addr, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %String*, %String** %dest.addr
  %5 = load i32, i32* %numChars.addr
  call void @"().391"(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %1, %UntypedPtr %3, %String* %4, i32 %5)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"().391"(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this, %UntypedPtr %p1, %String* %p2, i32 %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %this, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %String*
  store %String* %p2, %String** %p2.addr
  %p3.addr = alloca i32
  store i32 %p3, i32* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %String*, %String** %p2.addr
  %4 = load i32, i32* %p3.addr
  %5 = bitcast %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %1 to void (%UntypedPtr, %String*, i32)**
  %6 = load void (%UntypedPtr, %String*, i32)*, void (%UntypedPtr, %String*, i32)** %5
  call void %6(%UntypedPtr %2, %String* %3, i32 %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.392(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]" %fsource, %Location* %flocation) #3 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %fsource.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"
  store %"RangeWithLookahead[BufferedCharSourceRange]" %fsource, %"RangeWithLookahead[BufferedCharSourceRange]"* %fsource.addr
  %flocation.addr = alloca %Location*
  store %Location* %flocation, %Location** %flocation.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  call void @ctor.196(%"RangeWithLookahead[BufferedCharSourceRange]"* %2, %"RangeWithLookahead[BufferedCharSourceRange]"* %fsource.addr)
  %3 = load %Location*, %Location** %flocation.addr
  %4 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %5 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4, i32 0, i32 1
  store %Location* %3, %Location** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.393(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, %BufferedCharSourceRange %src) #4 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %src.addr = alloca %BufferedCharSourceRange
  store %BufferedCharSourceRange %src, %BufferedCharSourceRange* %src.addr
  %tmp.this = alloca i64
  %"$tmpForRef" = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 0
  call void @ctor.141(%BufferedCharSourceRange* %2)
  %3 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %3, i32 0, i32 0
  call void @"=.294"(%BufferedCharSourceRange* %4, %BufferedCharSourceRange* %src.addr)
  %5 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %5, i32 0, i32 1
  call void @ctor.142(%"Vector[Char]"* %6)
  %7 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %7, i32 0, i32 1
  store i64 10, i64* %tmp.this
  %9 = load i64, i64* %tmp.this
  call void @reserve.394(%"Vector[Char]"* %8, i64 %9)
  br label %if_block

if_block:                                         ; preds = %code
  %10 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %11 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %10, i32 0, i32 0
  %12 = call i1 @"pre_!!"(%BufferedCharSourceRange* %11)
  br i1 %12, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %13 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %14 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %13, i32 0, i32 1
  %15 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %16 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %15, i32 0, i32 0
  %17 = call i8 @"post_++.398"(%BufferedCharSourceRange* %16)
  store i8 %17, i8* %"$tmpForRef"
  call void @"+="(%"Vector[Char]"* %14, i8* %"$tmpForRef")
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reserve.394(%"Vector[Char]"* %this, i64 %n) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %curCapacity = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this8 = alloca double
  %tmp.this9 = alloca double
  %tmp.this10 = alloca i64
  %tmp.this11 = alloca double
  %curSize = alloca i64
  %"$tmpC" = alloca %"RawPtr[Char]"
  %"$tmpC12" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = call i64 @capacity.395(%"Vector[Char]"* %1)
  store i64 %2, i64* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load i64, i64* %n.addr
  %4 = load i64, i64* %curCapacity
  %5 = icmp sle i64 %3, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %6 = load i64, i64* %n.addr
  store i64 8, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 8, i64* %tmp.this4
  %9 = load i64, i64* %tmp.this4
  store i64 %9, i64* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block5

if_block5:                                        ; preds = %if_end3
  %10 = load i64, i64* %n.addr
  %11 = sitofp i64 %10 to double
  store double %11, double* %tmp.this8
  %12 = load double, double* %tmp.this8
  %13 = load i64, i64* %curCapacity
  %14 = sitofp i64 %13 to double
  store double %14, double* %tmp.this9
  %15 = load double, double* %tmp.this9
  %16 = call double @_Double_opMul(double 2.000000e+00, double %15)
  %17 = call i1 @_Double_opLT(double %12, double %16)
  br i1 %17, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  %18 = load i64, i64* %curCapacity
  %19 = sitofp i64 %18 to double
  store double %19, double* %tmp.this11
  %20 = load double, double* %tmp.this11
  %21 = call double @_Double_opMul(double 2.000000e+00, double %20)
  %22 = fptoui double %21 to i64
  store i64 %22, i64* %tmp.this10
  %23 = load i64, i64* %tmp.this10
  store i64 %23, i64* %n.addr
  br label %if_end7

if_end7:                                          ; preds = %if_then6, %if_block5
  %24 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %25 = call i64 @size.199(%"Vector[Char]"* %24)
  store i64 %25, i64* %curSize
  %26 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %27 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %26, i32 0, i32 0
  %28 = load i64, i64* %n.addr
  call void @reallocPtr(%"RawPtr[Char]"* %27, i64 %28)
  %29 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %30 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %29, i32 0, i32 1
  %31 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %32 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %31, i32 0, i32 0
  %33 = load %"RawPtr[Char]", %"RawPtr[Char]"* %32
  %34 = load i64, i64* %curSize
  call void @advance.201(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %33, i64 %34)
  call void @"=.200"(%"RawPtr[Char]"* %30, %"RawPtr[Char]"* %"$tmpC")
  %35 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %36 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %35, i32 0, i32 2
  %37 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %38 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %37, i32 0, i32 0
  %39 = load %"RawPtr[Char]", %"RawPtr[Char]"* %38
  %40 = load i64, i64* %n.addr
  call void @advance.201(%"RawPtr[Char]"* %"$tmpC12", %"RawPtr[Char]" %39, i64 %40)
  call void @"=.200"(%"RawPtr[Char]"* %36, %"RawPtr[Char]"* %"$tmpC12")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i64 @capacity.395(%"Vector[Char]"* %this) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 2
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %5 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %4, i32 0, i32 0
  %6 = load %"RawPtr[Char]", %"RawPtr[Char]"* %5
  %7 = call i64 @diff(%"RawPtr[Char]" %3, %"RawPtr[Char]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!!"(%BufferedCharSourceRange* %r) #4 {
  %r.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %r, %BufferedCharSourceRange** %r.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %r.addr
  %2 = call i1 @isEmpty.396(%BufferedCharSourceRange* %1)
  %3 = xor i1 true, %2
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.396(%BufferedCharSourceRange* %this) #4 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %2
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %3, i32 0, i32 1
  %5 = call i1 @isEmpty.397(%String* %4)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.397(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load %String*, %String** %this.addr
  %4 = getelementptr inbounds %String, %String* %3, i32 0, i32 1
  %5 = call i1 @"==.268"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal void @"+="(%"Vector[Char]"* %this, i8* %value) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %value.addr = alloca i8*
  store i8* %value, i8** %value.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = load i8*, i8** %value.addr
  call void @pushBack(%"Vector[Char]"* %1, i8* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack(%"Vector[Char]"* %this, i8* %value) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %value.addr = alloca i8*
  store i8* %value, i8** %value.addr
  %t = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this5 = alloca i64
  %"$tmpC" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 1
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 2
  %5 = call i1 @"==.268"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  store i64 2, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %8 = call i64 @capacity.395(%"Vector[Char]"* %7)
  %9 = mul i64 %6, %8
  store i64 %9, i64* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %10 = load i8*, i8** %value.addr
  %11 = load i8, i8* %10
  %12 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %13 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %12, i32 0, i32 1
  %14 = load %"RawPtr[Char]", %"RawPtr[Char]"* %13
  %15 = call i8* @value(%"RawPtr[Char]" %14)
  store i8 %11, i8* %15
  %16 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %17 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %16, i32 0, i32 1
  %18 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %19 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %18, i32 0, i32 1
  %20 = load %"RawPtr[Char]", %"RawPtr[Char]"* %19
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %20)
  call void @"=.200"(%"RawPtr[Char]"* %17, %"RawPtr[Char]"* %"$tmpC")
  ret void

if_block1:                                        ; preds = %if_then
  %21 = load i64, i64* %t
  store i64 2, i64* %tmp.this4
  %22 = load i64, i64* %tmp.this4
  %23 = icmp slt i64 %21, %22
  br i1 %23, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 2, i64* %tmp.this5
  %24 = load i64, i64* %tmp.this5
  store i64 %24, i64* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %25 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %26 = load i64, i64* %t
  call void @reserve.394(%"Vector[Char]"* %25, i64 %26)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i8 @"post_++.398"(%BufferedCharSourceRange* %r) #4 {
  %r.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %r, %BufferedCharSourceRange** %r.addr
  %res = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %r.addr
  %2 = call i8 @front.399(%BufferedCharSourceRange* %1)
  store i8 %2, i8* %res
  %3 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %r.addr
  call void @popFront.400(%BufferedCharSourceRange* %3)
  %4 = load i8, i8* %res
  ret i8 %4
}

; Function Attrs: inlinehint nounwind
define internal i8 @front.399(%BufferedCharSourceRange* %this) #4 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %2
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %3, i32 0, i32 1
  %5 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %6 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %5, i32 0, i32 0
  %7 = load %BufferedCharSource*, %BufferedCharSource** %6
  %8 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %7, i32 0, i32 2
  %9 = load i32, i32* %8
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %tmp.this
  %11 = load i64, i64* %tmp.this
  %12 = call i8* @"().344"(%String* %4, i64 %11)
  %13 = load i8, i8* %12
  ret i8 %13
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.400(%BufferedCharSourceRange* %this) #4 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %2 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %1, i32 0, i32 0
  %3 = load %BufferedCharSource*, %BufferedCharSource** %2
  %4 = getelementptr inbounds %BufferedCharSource, %BufferedCharSource* %3, i32 0, i32 2
  %5 = call i32 @"post_++.39"(i32* %4)
  %6 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %7 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %6, i32 0, i32 0
  %8 = load %BufferedCharSource*, %BufferedCharSource** %7
  call void @_ensureBufferHasData(%BufferedCharSource* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @all(%BufferedCharSourceRange* sret %_result, %BufferedCharSource* %this) #4 {
  %_result.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %_result, %BufferedCharSourceRange** %_result.addr
  %this.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %this, %BufferedCharSource** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %_result.addr
  %2 = load %BufferedCharSource*, %BufferedCharSource** %this.addr
  call void @ctor.401(%BufferedCharSourceRange* %1, %BufferedCharSource* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.401(%BufferedCharSourceRange* %this, %BufferedCharSource* %f_data) #3 {
  %this.addr = alloca %BufferedCharSourceRange*
  store %BufferedCharSourceRange* %this, %BufferedCharSourceRange** %this.addr
  %f_data.addr = alloca %BufferedCharSource*
  store %BufferedCharSource* %f_data, %BufferedCharSource** %f_data.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %BufferedCharSource*, %BufferedCharSource** %f_data.addr
  %2 = load %BufferedCharSourceRange*, %BufferedCharSourceRange** %this.addr
  %3 = getelementptr inbounds %BufferedCharSourceRange, %BufferedCharSourceRange* %2, i32 0, i32 0
  store %BufferedCharSource* %1, %BufferedCharSource** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.402(%"SparrowLayoutDecoder[SparrowScanner]"* %this, %SparrowScanner %tokens, %ErrorReporter %errorReporter) #4 {
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %tokens.addr = alloca %SparrowScanner
  store %SparrowScanner %tokens, %SparrowScanner* %tokens.addr
  %errorReporter.addr = alloca %ErrorReporter
  store %ErrorReporter %errorReporter, %ErrorReporter* %errorReporter.addr
  %tmp.this = alloca i32
  %tmp.this1 = alloca %TokenType
  %"$tmpC" = alloca %Token
  %tmp.this2 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 2
  call void @ctor.151(%"Vector[UInt]"* %2)
  %3 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %3, i32 0, i32 3
  call void @ctor.142(%"Vector[Char]"* %4)
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %5, i32 0, i32 4
  call void @ctor.144(%TokenType* %6)
  %7 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %8 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %7, i32 0, i32 5
  store i32 0, i32* %8
  %9 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %10 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %9, i32 0, i32 0
  %11 = load %SparrowScanner, %SparrowScanner* %tokens.addr
  call void @ctor.403(%"RangeWithLookahead[SparrowScanner]"* %10, %SparrowScanner %11)
  %12 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %13 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %12, i32 0, i32 1
  call void @ctor.204(%ErrorReporter* %13, %ErrorReporter* %errorReporter.addr)
  %14 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %15 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %14, i32 0, i32 2
  store i32 1, i32* %tmp.this
  call void @"+=.486"(%"Vector[UInt]"* %15, i32* %tmp.this)
  %16 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %17 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %16, i32 0, i32 4
  call void @ctor.417(%TokenType* %tmp.this1, i32 32)
  call void @"=.298"(%TokenType* %17, %TokenType* %tmp.this1)
  %18 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %19 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %18, i32 0, i32 5
  store i32 0, i32* %19
  br label %if_block

if_block:                                         ; preds = %code
  %20 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %21 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %20, i32 0, i32 0
  %22 = call i1 @isEmpty.491(%"RangeWithLookahead[SparrowScanner]"* %21)
  %23 = xor i1 true, %22
  br i1 %23, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %24 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  call void @popFront.495(%"SparrowLayoutDecoder[SparrowScanner]"* %24)
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  br i1 %23, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true:                                        ; preds = %if_block
  %25 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %26 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %25, i32 0, i32 0
  call void @front.493(%Token* %"$tmpC", %"RangeWithLookahead[SparrowScanner]"* %26)
  %27 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this2, i32 1)
  %28 = call i1 @"==.352"(%TokenType* %27, %TokenType* %tmp.this2)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %28, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end

cond_destruct_alt1:                               ; preds = %if_end
  call void @dtor.260(%Token* %"$tmpC")
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.403(%"RangeWithLookahead[SparrowScanner]"* %this, %SparrowScanner %src) #4 {
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %src.addr = alloca %SparrowScanner
  store %SparrowScanner %src, %SparrowScanner* %src.addr
  %tmp.this = alloca i64
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %1, i32 0, i32 0
  call void @ctor.129(%SparrowScanner* %2)
  %3 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %3, i32 0, i32 0
  call void @"=.282"(%SparrowScanner* %4, %SparrowScanner* %src.addr)
  %5 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %5, i32 0, i32 1
  call void @ctor.149(%"Vector[Token]"* %6)
  %7 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %7, i32 0, i32 1
  store i64 10, i64* %tmp.this
  %9 = load i64, i64* %tmp.this
  call void @reserve.404(%"Vector[Token]"* %8, i64 %9)
  br label %if_block

if_block:                                         ; preds = %code
  %10 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %11 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %10, i32 0, i32 0
  %12 = call i1 @"pre_!!.407"(%SparrowScanner* %11)
  br i1 %12, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %13 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %14 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %13, i32 0, i32 1
  %15 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %16 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %15, i32 0, i32 0
  call void @"post_++.411"(%Token* %"$tmpC", %SparrowScanner* %16)
  call void @"+=.409"(%"Vector[Token]"* %14, %Token* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC")
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reserve.404(%"Vector[Token]"* %this, i64 %n) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %curCapacity = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this8 = alloca double
  %tmp.this9 = alloca double
  %tmp.this10 = alloca i64
  %tmp.this11 = alloca double
  %curSize = alloca i64
  %"$tmpC" = alloca %"RawPtr[Token]"
  %"$tmpC12" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = call i64 @capacity.405(%"Vector[Token]"* %1)
  store i64 %2, i64* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load i64, i64* %n.addr
  %4 = load i64, i64* %curCapacity
  %5 = icmp sle i64 %3, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %6 = load i64, i64* %n.addr
  store i64 8, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 8, i64* %tmp.this4
  %9 = load i64, i64* %tmp.this4
  store i64 %9, i64* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block5

if_block5:                                        ; preds = %if_end3
  %10 = load i64, i64* %n.addr
  %11 = sitofp i64 %10 to double
  store double %11, double* %tmp.this8
  %12 = load double, double* %tmp.this8
  %13 = load i64, i64* %curCapacity
  %14 = sitofp i64 %13 to double
  store double %14, double* %tmp.this9
  %15 = load double, double* %tmp.this9
  %16 = call double @_Double_opMul(double 2.000000e+00, double %15)
  %17 = call i1 @_Double_opLT(double %12, double %16)
  br i1 %17, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  %18 = load i64, i64* %curCapacity
  %19 = sitofp i64 %18 to double
  store double %19, double* %tmp.this11
  %20 = load double, double* %tmp.this11
  %21 = call double @_Double_opMul(double 2.000000e+00, double %20)
  %22 = fptoui double %21 to i64
  store i64 %22, i64* %tmp.this10
  %23 = load i64, i64* %tmp.this10
  store i64 %23, i64* %n.addr
  br label %if_end7

if_end7:                                          ; preds = %if_then6, %if_block5
  %24 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %25 = call i64 @size.209(%"Vector[Token]"* %24)
  store i64 %25, i64* %curSize
  %26 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %27 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %26, i32 0, i32 0
  %28 = load i64, i64* %n.addr
  call void @reallocPtr.406(%"RawPtr[Token]"* %27, i64 %28)
  %29 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %30 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %29, i32 0, i32 1
  %31 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %32 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %31, i32 0, i32 0
  %33 = load %"RawPtr[Token]", %"RawPtr[Token]"* %32
  %34 = load i64, i64* %curSize
  call void @advance.215(%"RawPtr[Token]"* %"$tmpC", %"RawPtr[Token]" %33, i64 %34)
  call void @"=.212"(%"RawPtr[Token]"* %30, %"RawPtr[Token]"* %"$tmpC")
  %35 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %36 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %35, i32 0, i32 2
  %37 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %38 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %37, i32 0, i32 0
  %39 = load %"RawPtr[Token]", %"RawPtr[Token]"* %38
  %40 = load i64, i64* %n.addr
  call void @advance.215(%"RawPtr[Token]"* %"$tmpC12", %"RawPtr[Token]" %39, i64 %40)
  call void @"=.212"(%"RawPtr[Token]"* %36, %"RawPtr[Token]"* %"$tmpC12")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i64 @capacity.405(%"Vector[Token]"* %this) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 2
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %2
  %4 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %5 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %4, i32 0, i32 0
  %6 = load %"RawPtr[Token]", %"RawPtr[Token]"* %5
  %7 = call i64 @diff.210(%"RawPtr[Token]" %3, %"RawPtr[Token]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal void @reallocPtr.406(%"RawPtr[Token]"* %this, i64 %n) #4 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %2 = load %"RawPtr[Token]", %"RawPtr[Token]"* %1
  %3 = call i8* @bytePtr.211(%"RawPtr[Token]" %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 72
  %6 = call i8* @realloc(i8* %3, i64 %5)
  %7 = bitcast i8* %6 to %Token*
  %8 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %this.addr
  %9 = getelementptr inbounds %"RawPtr[Token]", %"RawPtr[Token]"* %8, i32 0, i32 0
  store %Token* %7, %Token** %9
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!!.407"(%SparrowScanner* %r) #4 {
  %r.addr = alloca %SparrowScanner*
  store %SparrowScanner* %r, %SparrowScanner** %r.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %r.addr
  %2 = call i1 @isEmpty.408(%SparrowScanner* %1)
  %3 = xor i1 true, %2
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.408(%SparrowScanner* %this) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  br label %code

code:                                             ; preds = %0
  ret i1 false
}

; Function Attrs: inlinehint nounwind
define internal void @"+=.409"(%"Vector[Token]"* %this, %Token* %value) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %value.addr = alloca %Token*
  store %Token* %value, %Token** %value.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = load %Token*, %Token** %value.addr
  call void @pushBack.410(%"Vector[Token]"* %1, %Token* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack.410(%"Vector[Token]"* %this, %Token* %value) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %value.addr = alloca %Token*
  store %Token* %value, %Token** %value.addr
  %t = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this5 = alloca i64
  %"$tmpC" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 1
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 2
  %5 = call i1 @"==.218"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  store i64 2, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %8 = call i64 @capacity.405(%"Vector[Token]"* %7)
  %9 = mul i64 %6, %8
  store i64 %9, i64* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %10 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %11 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %10, i32 0, i32 1
  %12 = load %"RawPtr[Token]", %"RawPtr[Token]"* %11
  %13 = call %Token* @value.219(%"RawPtr[Token]" %12)
  %14 = load %Token*, %Token** %value.addr
  call void @ctor.202(%Token* %13, %Token* %14)
  %15 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %16 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %15, i32 0, i32 1
  %17 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %18 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %17, i32 0, i32 1
  %19 = load %"RawPtr[Token]", %"RawPtr[Token]"* %18
  call void @advance.220(%"RawPtr[Token]"* %"$tmpC", %"RawPtr[Token]" %19)
  call void @"=.212"(%"RawPtr[Token]"* %16, %"RawPtr[Token]"* %"$tmpC")
  ret void

if_block1:                                        ; preds = %if_then
  %20 = load i64, i64* %t
  store i64 2, i64* %tmp.this4
  %21 = load i64, i64* %tmp.this4
  %22 = icmp slt i64 %20, %21
  br i1 %22, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 2, i64* %tmp.this5
  %23 = load i64, i64* %tmp.this5
  store i64 %23, i64* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %24 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %25 = load i64, i64* %t
  call void @reserve.404(%"Vector[Token]"* %24, i64 %25)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @"post_++.411"(%Token* sret %_result, %SparrowScanner* %r) #4 {
  %_result.addr = alloca %Token*
  store %Token* %_result, %Token** %_result.addr
  %r.addr = alloca %SparrowScanner*
  store %SparrowScanner* %r, %SparrowScanner** %r.addr
  %res = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %r.addr
  call void @front.412(%Token* %res, %SparrowScanner* %1)
  %2 = load %SparrowScanner*, %SparrowScanner** %r.addr
  call void @popFront.413(%SparrowScanner* %2)
  %3 = load %Token*, %Token** %_result.addr
  call void @ctor.202(%Token* %3, %Token* %res)
  call void @dtor.260(%Token* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.260(%Token* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @front.412(%Token* sret %_result, %SparrowScanner* %this) #4 {
  %_result.addr = alloca %Token*
  store %Token* %_result, %Token** %_result.addr
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 4
  %3 = load i1, i1* %2
  %4 = xor i1 true, %3
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %6 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %5, i32 0, i32 4
  store i1 true, i1* %6
  %7 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @popFront.413(%SparrowScanner* %7)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %8 = load %Token*, %Token** %_result.addr
  %9 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %9, i32 0, i32 3
  call void @ctor.202(%Token* %8, %Token* %10)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.413(%SparrowScanner* %this) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = call i1 @isEmpty.414(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  br i1 %3, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %4 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %4, i32 0, i32 2
  %6 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5, i32 0, i32 1
  %7 = load %Location*, %Location** %6
  call void @stepOver(%Location* %7)
  %8 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %9 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %8, i32 0, i32 3
  %10 = getelementptr inbounds %Token, %Token* %9, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this, i32 0)
  call void @"=.298"(%TokenType* %10, %TokenType* %tmp.this)
  %11 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 3
  %13 = getelementptr inbounds %Token, %Token* %12, i32 0, i32 2
  call void @clear(%String* %13)
  %14 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %15 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %14, i32 0, i32 3
  %16 = getelementptr inbounds %Token, %Token* %15, i32 0, i32 0
  %17 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %18 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %17, i32 0, i32 2
  %19 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %18, i32 0, i32 1
  %20 = load %Location*, %Location** %19
  call void @"=.283"(%Location* %16, %Location* %20)
  br label %if_end

if_else:                                          ; preds = %if_block
  %21 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %22 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %21, i32 0, i32 3
  %23 = getelementptr inbounds %Token, %Token* %22, i32 0, i32 1
  %24 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @nextToken(%TokenType* %"$tmpC", %SparrowScanner* %24)
  call void @"=.298"(%TokenType* %23, %TokenType* %"$tmpC")
  %25 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %26 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %25, i32 0, i32 3
  %27 = getelementptr inbounds %Token, %Token* %26, i32 0, i32 0
  %28 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %29 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %28, i32 0, i32 2
  %30 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %29, i32 0, i32 1
  %31 = load %Location*, %Location** %30
  call void @"=.283"(%Location* %27, %Location* %31)
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.414(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #4 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = call i1 @isEmpty.415(%"RangeWithLookahead[BufferedCharSourceRange]"* %2)
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.415(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #4 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 1
  %3 = call i1 @isEmpty.416(%"Vector[Char]"* %2)
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.416(%"Vector[Char]"* %this) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 1
  %5 = call i1 @"==.268"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal void @stepOver(%Location* %l) #4 {
  %l.addr = alloca %Location*
  store %Location* %l, %Location** %l.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %l.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 1
  %3 = load %Location*, %Location** %l.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 2
  call void @"=.285"(%LineCol* %2, %LineCol* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.417(%TokenType* %this, i32 %fdata) #3 {
  %this.addr = alloca %TokenType*
  store %TokenType* %this, %TokenType** %this.addr
  %fdata.addr = alloca i32
  store i32 %fdata, i32* %fdata.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %fdata.addr
  %2 = load %TokenType*, %TokenType** %this.addr
  %3 = getelementptr inbounds %TokenType, %TokenType* %2, i32 0, i32 0
  store i32 %1, i32* %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.418(%TokenType* %this) #3 {
  %this.addr = alloca %TokenType*
  store %TokenType* %this, %TokenType** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: noinline nounwind
define void @nextToken(%TokenType* sret %_result, %SparrowScanner* %this) #5 {
  %_result.addr = alloca %TokenType*
  store %TokenType* %_result, %TokenType** %_result.addr
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %loc = alloca %Location*
  %tmp.this = alloca i32
  %tmp.this1 = alloca i32
  %ch = alloca i8
  %ch2 = alloca i8
  %tmp.this9 = alloca %"$lambdaEnclosureData"
  %ch16 = alloca i8
  %ch217 = alloca i8
  %tmp.this21 = alloca %"$lambdaEnclosureData.0"
  %"$tmpC" = alloca %String
  %tmp.StringRef = alloca %StringRef
  %tmp.this30 = alloca %"$lambdaEnclosureData.1"
  %tmp.this47 = alloca %"$lambdaEnclosureData.2"
  %tmp.this60 = alloca i64
  %c1 = alloca i8
  %c2 = alloca i8
  %tmp.this76 = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef77 = alloca %StringRef
  %tmp.this91 = alloca i64
  %"$tmpC200" = alloca %String
  %tmp.StringRef201 = alloca %StringRef
  %tmp.StringRef202 = alloca %StringRef
  %tmp.this203 = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2, i32 0, i32 1
  %4 = load %Location*, %Location** %3
  store %Location* %4, %Location** %loc
  br label %if_block

if_block:                                         ; preds = %code
  %5 = load %Location*, %Location** %loc
  %6 = getelementptr inbounds %Location, %Location* %5, i32 0, i32 1
  %7 = getelementptr inbounds %LineCol, %LineCol* %6, i32 0, i32 0
  %8 = load i32, i32* %7
  store i32 1, i32* %tmp.this
  %9 = load i32, i32* %tmp.this
  %10 = icmp eq i32 %8, %9
  br i1 %10, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %11 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 2
  %13 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %12)
  store i8 %13, i8* %ch
  %14 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %15 = call i8 @peekChar(%SparrowScanner* %14)
  store i8 %15, i8* %ch2
  br label %if_block2

if_end:                                           ; preds = %if_end4, %cond.end
  br i1 %10, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true:                                        ; preds = %if_block
  %16 = load %Location*, %Location** %loc
  %17 = getelementptr inbounds %Location, %Location* %16, i32 0, i32 1
  %18 = getelementptr inbounds %LineCol, %LineCol* %17, i32 0, i32 1
  %19 = load i32, i32* %18
  store i32 1, i32* %tmp.this1
  %20 = load i32, i32* %tmp.this1
  %21 = icmp eq i32 %19, %20
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %21, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end

if_block2:                                        ; preds = %if_then
  %22 = load i8, i8* %ch
  %23 = icmp eq i8 %22, 35
  br i1 %23, label %cond.true5, label %cond.false6

if_then3:                                         ; preds = %cond.end7
  %24 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %25 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %24, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %25)
  %26 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %27 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %26, i32 0, i32 2
  %28 = load %"$lambdaEnclosureData", %"$lambdaEnclosureData"* %tmp.this9
  call void @advanceIf(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %27, %"$lambdaEnclosureData" %28)
  br label %if_block10

if_end4:                                          ; preds = %if_end12, %cond.end7
  br label %if_end

cond.true5:                                       ; preds = %if_block2
  %29 = load i8, i8* %ch2
  %30 = icmp eq i8 %29, 33
  br label %cond.end7

cond.false6:                                      ; preds = %if_block2
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond.res8 = phi i1 [ %30, %cond.true5 ], [ false, %cond.false6 ]
  br i1 %cond.res8, label %if_then3, label %if_end4

if_block10:                                       ; preds = %if_then3
  %31 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %32 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %31, i32 0, i32 2
  %33 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %32)
  br i1 %33, label %if_then11, label %if_end12

if_then11:                                        ; preds = %if_block10
  %34 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %35 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %34, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %35)
  br label %if_end12

if_end12:                                         ; preds = %if_then11, %if_block10
  br label %if_end4

cond_destruct_alt1:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  br label %while_block

while_block:                                      ; preds = %while_step, %cond_destruct_end
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %36 = load %Location*, %Location** %loc
  call void @stepOver(%Location* %36)
  %37 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %38 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %37, i32 0, i32 3
  %39 = getelementptr inbounds %Token, %Token* %38, i32 0, i32 2
  call void @clear(%String* %39)
  br label %if_block13

while_step:                                       ; preds = %dumy_block204, %if_end94, %if_end81, %if_end50, %if_end33, %if_end24
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void

if_block13:                                       ; preds = %while_body
  %40 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %41 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %40, i32 0, i32 2
  %42 = call i1 @isEmpty.414(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %41)
  br i1 %42, label %if_then14, label %if_end15

if_then14:                                        ; preds = %if_block13
  %43 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %43, i32 0)
  ret void

if_end15:                                         ; preds = %dumy_block, %if_block13
  %44 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %45 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %44, i32 0, i32 2
  %46 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %45)
  store i8 %46, i8* %ch16
  %47 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %48 = call i8 @peekChar(%SparrowScanner* %47)
  store i8 %48, i8* %ch217
  br label %if_block18

dumy_block:                                       ; No predecessors!
  br label %if_end15

if_block18:                                       ; preds = %if_end15
  %49 = load i8, i8* %ch16
  %50 = icmp eq i8 %49, 32
  br i1 %50, label %if_then19, label %if_end20

if_then19:                                        ; preds = %if_block18
  %51 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %52 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %51, i32 0, i32 2
  %53 = load %"$lambdaEnclosureData.0", %"$lambdaEnclosureData.0"* %tmp.this21
  call void @advanceIf.443(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %52, %"$lambdaEnclosureData.0" %53)
  br label %if_block22

if_end20:                                         ; preds = %dumy_block26, %if_block18
  br label %if_block27

if_block22:                                       ; preds = %if_then19
  %54 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %55 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %54, i32 0, i32 6
  %56 = load i1, i1* %55
  br i1 %56, label %if_then23, label %if_end24

if_then23:                                        ; preds = %if_block22
  %57 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %57, i32 255)
  ret void

if_end24:                                         ; preds = %dumy_block25, %if_block22
  br label %while_step

dumy_block25:                                     ; No predecessors!
  br label %if_end24

dumy_block26:                                     ; No predecessors!
  br label %if_end20

if_block27:                                       ; preds = %if_end20
  %58 = load i8, i8* %ch16
  %59 = icmp eq i8 %58, 9
  br i1 %59, label %if_then28, label %if_end29

if_then28:                                        ; preds = %if_block27
  %60 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %61 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %62 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str.8, i32 0, i32 0), i8** %61
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str.8, i32 0, i32 29), i8** %62
  %63 = load %StringRef, %StringRef* %tmp.StringRef
  call void @toString(%String* %"$tmpC", %StringRef %63)
  call void @reportError(%SparrowScanner* %60, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  %64 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %65 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %64, i32 0, i32 2
  %66 = load %"$lambdaEnclosureData.1", %"$lambdaEnclosureData.1"* %tmp.this30
  call void @advanceIf.455(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %65, %"$lambdaEnclosureData.1" %66)
  br label %if_block31

if_end29:                                         ; preds = %dumy_block35, %if_block27
  br label %if_block36

if_block31:                                       ; preds = %if_then28
  %67 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %68 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %67, i32 0, i32 6
  %69 = load i1, i1* %68
  br i1 %69, label %if_then32, label %if_end33

if_then32:                                        ; preds = %if_block31
  %70 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %70, i32 255)
  ret void

if_end33:                                         ; preds = %dumy_block34, %if_block31
  br label %while_step

dumy_block34:                                     ; No predecessors!
  br label %if_end33

dumy_block35:                                     ; No predecessors!
  br label %if_end29

if_block36:                                       ; preds = %if_end29
  %71 = load i8, i8* %ch16
  %72 = icmp eq i8 %71, 10
  br i1 %72, label %if_then37, label %if_end38

if_then37:                                        ; preds = %if_block36
  %73 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %74 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %73, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %74)
  %75 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %75, i32 1)
  ret void

if_end38:                                         ; preds = %dumy_block39, %if_block36
  br label %if_block40

dumy_block39:                                     ; No predecessors!
  br label %if_end38

if_block40:                                       ; preds = %if_end38
  %76 = load i8, i8* %ch16
  %77 = icmp eq i8 %76, 47
  br i1 %77, label %cond.true43, label %cond.false44

if_then41:                                        ; preds = %cond.end45
  %78 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %79 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %78, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %79)
  %80 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %81 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %80, i32 0, i32 2
  %82 = load %"$lambdaEnclosureData.2", %"$lambdaEnclosureData.2"* %tmp.this47
  call void @advanceIf.462(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %81, %"$lambdaEnclosureData.2" %82)
  br label %if_block48

if_end42:                                         ; preds = %dumy_block52, %cond.end45
  br label %if_block53

cond.true43:                                      ; preds = %if_block40
  %83 = load i8, i8* %ch217
  %84 = icmp eq i8 %83, 47
  br label %cond.end45

cond.false44:                                     ; preds = %if_block40
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond.res46 = phi i1 [ %84, %cond.true43 ], [ false, %cond.false44 ]
  br i1 %cond.res46, label %if_then41, label %if_end42

if_block48:                                       ; preds = %if_then41
  %85 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %86 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %85, i32 0, i32 6
  %87 = load i1, i1* %86
  br i1 %87, label %if_then49, label %if_end50

if_then49:                                        ; preds = %if_block48
  %88 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %88, i32 254)
  ret void

if_end50:                                         ; preds = %dumy_block51, %if_block48
  br label %while_step

dumy_block51:                                     ; No predecessors!
  br label %if_end50

dumy_block52:                                     ; No predecessors!
  br label %if_end42

if_block53:                                       ; preds = %if_end42
  %89 = load i8, i8* %ch16
  %90 = icmp eq i8 %89, 47
  br i1 %90, label %cond.true56, label %cond.false57

if_then54:                                        ; preds = %cond.end58
  %91 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %92 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %91, i32 0, i32 2
  store i64 2, i64* %tmp.this60
  %93 = load i64, i64* %tmp.this60
  call void @advance.469(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %92, i64 %93)
  store i8 97, i8* %c1
  store i8 97, i8* %c2
  br label %while_block61

if_end55:                                         ; preds = %dumy_block83, %cond.end58
  br label %if_block84

cond.true56:                                      ; preds = %if_block53
  %94 = load i8, i8* %ch217
  %95 = icmp eq i8 %94, 42
  br label %cond.end58

cond.false57:                                     ; preds = %if_block53
  br label %cond.end58

cond.end58:                                       ; preds = %cond.false57, %cond.true56
  %cond.res59 = phi i1 [ %95, %cond.true56 ], [ false, %cond.false57 ]
  br i1 %cond.res59, label %if_then54, label %if_end55

while_block61:                                    ; preds = %while_step63, %if_then54
  %96 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %97 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %96, i32 0, i32 2
  %98 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %97)
  br i1 %98, label %cond.true65, label %cond.false66

while_body62:                                     ; preds = %cond.end67
  %99 = load i8, i8* %c2
  store i8 %99, i8* %c1
  %100 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %101 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %100, i32 0, i32 2
  %102 = call i8 @"pre_++.470"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %101)
  store i8 %102, i8* %c2
  br label %while_step63

while_step63:                                     ; preds = %while_body62
  br label %while_block61

while_end64:                                      ; preds = %cond.end67
  br label %if_block73

cond.true65:                                      ; preds = %while_block61
  %103 = load i8, i8* %c1
  %104 = icmp ne i8 %103, 42
  br i1 %104, label %cond.true68, label %cond.false69

cond.false66:                                     ; preds = %while_block61
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false66, %cond.end70
  %cond.res72 = phi i1 [ %cond.res71, %cond.end70 ], [ false, %cond.false66 ]
  br i1 %cond.res72, label %while_body62, label %while_end64

cond.true68:                                      ; preds = %cond.true65
  br label %cond.end70

cond.false69:                                     ; preds = %cond.true65
  %105 = load i8, i8* %c2
  %106 = icmp ne i8 %105, 47
  br label %cond.end70

cond.end70:                                       ; preds = %cond.false69, %cond.true68
  %cond.res71 = phi i1 [ true, %cond.true68 ], [ %106, %cond.false69 ]
  br label %cond.end67

if_block73:                                       ; preds = %while_end64
  %107 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %108 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %107, i32 0, i32 2
  %109 = call i1 @"pre_!"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %108)
  br i1 %109, label %if_then74, label %if_end75

if_then74:                                        ; preds = %if_block73
  %110 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %111 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef77, i32 0, i32 0
  %112 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef77, i32 0, i32 1
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str.9, i32 0, i32 0), i8** %111
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str.9, i32 0, i32 32), i8** %112
  %113 = load %StringRef, %StringRef* %tmp.StringRef77
  store %StringRef %113, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %tmp.this76, %StringRef* %"$tmpForRef")
  call void @reportError(%SparrowScanner* %110, %String* %tmp.this76)
  call void @dtor.261(%String* %tmp.this76)
  %114 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %114, i32 0)
  ret void

if_end75:                                         ; preds = %dumy_block78, %if_block73
  %115 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %116 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %115, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %116)
  br label %if_block79

dumy_block78:                                     ; No predecessors!
  br label %if_end75

if_block79:                                       ; preds = %if_end75
  %117 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %118 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %117, i32 0, i32 6
  %119 = load i1, i1* %118
  br i1 %119, label %if_then80, label %if_end81

if_then80:                                        ; preds = %if_block79
  %120 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %120, i32 254)
  ret void

if_end81:                                         ; preds = %dumy_block82, %if_block79
  br label %while_step

dumy_block82:                                     ; No predecessors!
  br label %if_end81

dumy_block83:                                     ; No predecessors!
  br label %if_end55

if_block84:                                       ; preds = %if_end55
  %121 = load i8, i8* %ch16
  %122 = icmp eq i8 %121, 92
  br i1 %122, label %cond.true87, label %cond.false88

if_then85:                                        ; preds = %cond.end89
  %123 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %124 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %123, i32 0, i32 2
  store i64 2, i64* %tmp.this91
  %125 = load i64, i64* %tmp.this91
  call void @advance.469(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %124, i64 %125)
  br label %if_block92

if_end86:                                         ; preds = %dumy_block96, %cond.end89
  br label %if_block97

cond.true87:                                      ; preds = %if_block84
  %126 = load i8, i8* %ch217
  %127 = icmp eq i8 %126, 10
  br label %cond.end89

cond.false88:                                     ; preds = %if_block84
  br label %cond.end89

cond.end89:                                       ; preds = %cond.false88, %cond.true87
  %cond.res90 = phi i1 [ %127, %cond.true87 ], [ false, %cond.false88 ]
  br i1 %cond.res90, label %if_then85, label %if_end86

if_block92:                                       ; preds = %if_then85
  %128 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %129 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %128, i32 0, i32 6
  %130 = load i1, i1* %129
  br i1 %130, label %if_then93, label %if_end94

if_then93:                                        ; preds = %if_block92
  %131 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %131, i32 253)
  ret void

if_end94:                                         ; preds = %dumy_block95, %if_block92
  br label %while_step

dumy_block95:                                     ; No predecessors!
  br label %if_end94

dumy_block96:                                     ; No predecessors!
  br label %if_end86

if_block97:                                       ; preds = %if_end86
  %132 = load i8, i8* %ch16
  %133 = icmp eq i8 %132, 39
  br i1 %133, label %if_then98, label %if_end99

if_then98:                                        ; preds = %if_block97
  %134 = load %TokenType*, %TokenType** %_result.addr
  %135 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @parseString(%TokenType* %134, %SparrowScanner* %135, i8 39)
  ret void

if_end99:                                         ; preds = %dumy_block100, %if_block97
  br label %if_block101

dumy_block100:                                    ; No predecessors!
  br label %if_end99

if_block101:                                      ; preds = %if_end99
  %136 = load i8, i8* %ch16
  %137 = icmp eq i8 %136, 34
  br i1 %137, label %if_then102, label %if_end103

if_then102:                                       ; preds = %if_block101
  %138 = load %TokenType*, %TokenType** %_result.addr
  %139 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @parseString(%TokenType* %138, %SparrowScanner* %139, i8 34)
  ret void

if_end103:                                        ; preds = %dumy_block104, %if_block101
  br label %if_block105

dumy_block104:                                    ; No predecessors!
  br label %if_end103

if_block105:                                      ; preds = %if_end103
  %140 = load i8, i8* %ch16
  %141 = icmp eq i8 %140, 60
  br i1 %141, label %cond.true108, label %cond.false109

if_then106:                                       ; preds = %cond.end110
  %142 = load %TokenType*, %TokenType** %_result.addr
  %143 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @parseStringNE(%TokenType* %142, %SparrowScanner* %143)
  ret void

if_end107:                                        ; preds = %dumy_block112, %cond.end110
  br label %if_block113

cond.true108:                                     ; preds = %if_block105
  %144 = load i8, i8* %ch217
  %145 = icmp eq i8 %144, 123
  br label %cond.end110

cond.false109:                                    ; preds = %if_block105
  br label %cond.end110

cond.end110:                                      ; preds = %cond.false109, %cond.true108
  %cond.res111 = phi i1 [ %145, %cond.true108 ], [ false, %cond.false109 ]
  br i1 %cond.res111, label %if_then106, label %if_end107

dumy_block112:                                    ; No predecessors!
  br label %if_end107

if_block113:                                      ; preds = %if_end107
  %146 = load i8, i8* %ch16
  %147 = icmp eq i8 %146, 123
  br i1 %147, label %if_then114, label %if_end115

if_then114:                                       ; preds = %if_block113
  %148 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %149 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %148, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %149)
  %150 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %150, i32 25)
  ret void

if_end115:                                        ; preds = %dumy_block116, %if_block113
  br label %if_block117

dumy_block116:                                    ; No predecessors!
  br label %if_end115

if_block117:                                      ; preds = %if_end115
  %151 = load i8, i8* %ch16
  %152 = icmp eq i8 %151, 123
  br i1 %152, label %if_then118, label %if_end119

if_then118:                                       ; preds = %if_block117
  %153 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %154 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %153, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %154)
  %155 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %155, i32 25)
  ret void

if_end119:                                        ; preds = %dumy_block120, %if_block117
  br label %if_block121

dumy_block120:                                    ; No predecessors!
  br label %if_end119

if_block121:                                      ; preds = %if_end119
  %156 = load i8, i8* %ch16
  %157 = icmp eq i8 %156, 125
  br i1 %157, label %if_then122, label %if_end123

if_then122:                                       ; preds = %if_block121
  %158 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %159 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %158, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %159)
  %160 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %160, i32 26)
  ret void

if_end123:                                        ; preds = %dumy_block124, %if_block121
  br label %if_block125

dumy_block124:                                    ; No predecessors!
  br label %if_end123

if_block125:                                      ; preds = %if_end123
  %161 = load i8, i8* %ch16
  %162 = icmp eq i8 %161, 91
  br i1 %162, label %if_then126, label %if_end127

if_then126:                                       ; preds = %if_block125
  %163 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %164 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %163, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %164)
  %165 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %165, i32 27)
  ret void

if_end127:                                        ; preds = %dumy_block128, %if_block125
  br label %if_block129

dumy_block128:                                    ; No predecessors!
  br label %if_end127

if_block129:                                      ; preds = %if_end127
  %166 = load i8, i8* %ch16
  %167 = icmp eq i8 %166, 93
  br i1 %167, label %if_then130, label %if_end131

if_then130:                                       ; preds = %if_block129
  %168 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %169 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %168, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %169)
  %170 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %170, i32 28)
  ret void

if_end131:                                        ; preds = %dumy_block132, %if_block129
  br label %if_block133

dumy_block132:                                    ; No predecessors!
  br label %if_end131

if_block133:                                      ; preds = %if_end131
  %171 = load i8, i8* %ch16
  %172 = icmp eq i8 %171, 40
  br i1 %172, label %if_then134, label %if_end135

if_then134:                                       ; preds = %if_block133
  %173 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %174 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %173, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %174)
  %175 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %175, i32 29)
  ret void

if_end135:                                        ; preds = %dumy_block136, %if_block133
  br label %if_block137

dumy_block136:                                    ; No predecessors!
  br label %if_end135

if_block137:                                      ; preds = %if_end135
  %176 = load i8, i8* %ch16
  %177 = icmp eq i8 %176, 41
  br i1 %177, label %if_then138, label %if_end139

if_then138:                                       ; preds = %if_block137
  %178 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %179 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %178, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %179)
  %180 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %180, i32 30)
  ret void

if_end139:                                        ; preds = %dumy_block140, %if_block137
  br label %if_block141

dumy_block140:                                    ; No predecessors!
  br label %if_end139

if_block141:                                      ; preds = %if_end139
  %181 = load i8, i8* %ch16
  %182 = icmp eq i8 %181, 59
  br i1 %182, label %if_then142, label %if_end143

if_then142:                                       ; preds = %if_block141
  %183 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %184 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %183, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %184)
  %185 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %185, i32 32)
  ret void

if_end143:                                        ; preds = %dumy_block144, %if_block141
  br label %if_block145

dumy_block144:                                    ; No predecessors!
  br label %if_end143

if_block145:                                      ; preds = %if_end143
  %186 = load i8, i8* %ch16
  %187 = icmp eq i8 %186, 44
  br i1 %187, label %if_then146, label %if_end147

if_then146:                                       ; preds = %if_block145
  %188 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %189 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %188, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %189)
  %190 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %190, i32 33)
  ret void

if_end147:                                        ; preds = %dumy_block148, %if_block145
  br label %if_block149

dumy_block148:                                    ; No predecessors!
  br label %if_end147

if_block149:                                      ; preds = %if_end147
  %191 = load i8, i8* %ch16
  %192 = icmp eq i8 %191, 96
  br i1 %192, label %if_then150, label %if_end151

if_then150:                                       ; preds = %if_block149
  %193 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %194 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %193, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %194)
  %195 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %195, i32 35)
  ret void

if_end151:                                        ; preds = %dumy_block152, %if_block149
  br label %if_block153

dumy_block152:                                    ; No predecessors!
  br label %if_end151

if_block153:                                      ; preds = %if_end151
  %196 = load i8, i8* %ch16
  %197 = icmp eq i8 %196, 58
  br i1 %197, label %cond.true156, label %cond.false157

if_then154:                                       ; preds = %cond.end158
  %198 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %199 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %198, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %199)
  %200 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %200, i32 31)
  ret void

if_end155:                                        ; preds = %dumy_block160, %cond.end158
  br label %if_block161

cond.true156:                                     ; preds = %if_block153
  %201 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %202 = call i8 @peekChar(%SparrowScanner* %201)
  %203 = call i1 @isOpChar(i8 %202)
  %204 = xor i1 true, %203
  br label %cond.end158

cond.false157:                                    ; preds = %if_block153
  br label %cond.end158

cond.end158:                                      ; preds = %cond.false157, %cond.true156
  %cond.res159 = phi i1 [ %204, %cond.true156 ], [ false, %cond.false157 ]
  br i1 %cond.res159, label %if_then154, label %if_end155

dumy_block160:                                    ; No predecessors!
  br label %if_end155

if_block161:                                      ; preds = %if_end155
  %205 = load i8, i8* %ch16
  %206 = icmp eq i8 %205, 61
  br i1 %206, label %cond.true164, label %cond.false165

if_then162:                                       ; preds = %cond.end166
  %207 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %208 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %207, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %208)
  %209 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %209, i32 36)
  ret void

if_end163:                                        ; preds = %dumy_block168, %cond.end166
  br label %if_block169

cond.true164:                                     ; preds = %if_block161
  %210 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %211 = call i8 @peekChar(%SparrowScanner* %210)
  %212 = call i1 @isOpChar(i8 %211)
  %213 = xor i1 true, %212
  br label %cond.end166

cond.false165:                                    ; preds = %if_block161
  br label %cond.end166

cond.end166:                                      ; preds = %cond.false165, %cond.true164
  %cond.res167 = phi i1 [ %213, %cond.true164 ], [ false, %cond.false165 ]
  br i1 %cond.res167, label %if_then162, label %if_end163

dumy_block168:                                    ; No predecessors!
  br label %if_end163

if_block169:                                      ; preds = %if_end163
  %214 = load i8, i8* %ch16
  %215 = call i1 @isOpCharDot(i8 %214)
  br i1 %215, label %if_then170, label %if_end171

if_then170:                                       ; preds = %if_block169
  br label %if_block172

if_end171:                                        ; preds = %if_end174, %if_block169
  br label %if_block176

if_block172:                                      ; preds = %if_then170
  %216 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %217 = call i1 @parseOperator(%SparrowScanner* %216)
  br i1 %217, label %if_then173, label %if_end174

if_then173:                                       ; preds = %if_block172
  %218 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %218, i32 38)
  ret void

if_end174:                                        ; preds = %dumy_block175, %if_block172
  br label %if_end171

dumy_block175:                                    ; No predecessors!
  br label %if_end174

if_block176:                                      ; preds = %if_end171
  %219 = load i8, i8* %ch16
  %220 = icmp eq i8 %219, 46
  br i1 %220, label %cond.true179, label %cond.false180

if_then177:                                       ; preds = %cond.end181
  %221 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %222 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %221, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %222)
  %223 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %223, i32 34)
  ret void

if_end178:                                        ; preds = %dumy_block183, %cond.end181
  br label %if_block184

cond.true179:                                     ; preds = %if_block176
  %224 = load i8, i8* %ch217
  %225 = call i1 @isDigit(i8 %224)
  %226 = xor i1 true, %225
  br label %cond.end181

cond.false180:                                    ; preds = %if_block176
  br label %cond.end181

cond.end181:                                      ; preds = %cond.false180, %cond.true179
  %cond.res182 = phi i1 [ %226, %cond.true179 ], [ false, %cond.false180 ]
  br i1 %cond.res182, label %if_then177, label %if_end178

dumy_block183:                                    ; No predecessors!
  br label %if_end178

if_block184:                                      ; preds = %if_end178
  %227 = load i8, i8* %ch16
  %228 = call i1 @isAlpha(i8 %227)
  br i1 %228, label %cond.true187, label %cond.false188

if_then185:                                       ; preds = %cond.end189
  %229 = load %TokenType*, %TokenType** %_result.addr
  %230 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @parseIdentifer(%TokenType* %229, %SparrowScanner* %230)
  ret void

if_end186:                                        ; preds = %dumy_block191, %cond.end189
  br label %if_block192

cond.true187:                                     ; preds = %if_block184
  br label %cond.end189

cond.false188:                                    ; preds = %if_block184
  %231 = load i8, i8* %ch16
  %232 = icmp eq i8 %231, 95
  br label %cond.end189

cond.end189:                                      ; preds = %cond.false188, %cond.true187
  %cond.res190 = phi i1 [ true, %cond.true187 ], [ %232, %cond.false188 ]
  br i1 %cond.res190, label %if_then185, label %if_end186

dumy_block191:                                    ; No predecessors!
  br label %if_end186

if_block192:                                      ; preds = %if_end186
  %233 = load i8, i8* %ch16
  %234 = call i1 @isDigit(i8 %233)
  br i1 %234, label %cond.true195, label %cond.false196

if_then193:                                       ; preds = %cond.end197
  %235 = load %TokenType*, %TokenType** %_result.addr
  %236 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @parseNumeric(%TokenType* %235, %SparrowScanner* %236)
  ret void

if_end194:                                        ; preds = %dumy_block199, %cond.end197
  %237 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %238 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef201, i32 0, i32 0
  %239 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef201, i32 0, i32 1
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str.38, i32 0, i32 0), i8** %238
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str.38, i32 0, i32 26), i8** %239
  %240 = load %StringRef, %StringRef* %tmp.StringRef201
  %241 = load i8, i8* %ch16
  %242 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef202, i32 0, i32 0
  %243 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef202, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.39, i32 0, i32 0), i8** %242
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.39, i32 0, i32 3), i8** %243
  %244 = load %StringRef, %StringRef* %tmp.StringRef202
  %245 = load i8, i8* %ch16
  call void @_ass_32_8z(i32* %tmp.this203, i8 %245)
  %246 = load i32, i32* %tmp.this203
  call void @toString.478(%String* %"$tmpC200", %StringRef %240, i8 %241, %StringRef %244, i32 %246, i8 41)
  call void @reportError(%SparrowScanner* %237, %String* %"$tmpC200")
  call void @dtor.261(%String* %"$tmpC200")
  %247 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %248 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %247, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %248)
  %249 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %249, i32 0)
  ret void

cond.true195:                                     ; preds = %if_block192
  br label %cond.end197

cond.false196:                                    ; preds = %if_block192
  %250 = load i8, i8* %ch16
  %251 = icmp eq i8 %250, 46
  br label %cond.end197

cond.end197:                                      ; preds = %cond.false196, %cond.true195
  %cond.res198 = phi i1 [ true, %cond.true195 ], [ %251, %cond.false196 ]
  br i1 %cond.res198, label %if_then193, label %if_end194

dumy_block199:                                    ; No predecessors!
  br label %if_end194

dumy_block204:                                    ; No predecessors!
  br label %while_step
}

; Function Attrs: inlinehint nounwind
define internal i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r) #4 {
  %r.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %2 = call i8 @front.419(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  ret i8 %2
}

; Function Attrs: inlinehint nounwind
define internal i8 @front.419(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #4 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = call i8 @front.420(%"RangeWithLookahead[BufferedCharSourceRange]"* %2)
  ret i8 %3
}

; Function Attrs: inlinehint nounwind
define internal i8 @front.420(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #4 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 1
  %3 = call i8* @front.421(%"Vector[Char]"* %2)
  %4 = load i8, i8* %3
  ret i8 %4
}

; Function Attrs: inlinehint nounwind
define internal i8* @front.421(%"Vector[Char]"* %this) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = call i8* @value(%"RawPtr[Char]" %3)
  ret i8* %4
}

; Function Attrs: inlinehint nounwind
define internal i8 @peekChar(%SparrowScanner* %this) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2, i32 0, i32 0
  store i32 1, i32* %tmp.this
  %4 = load i32, i32* %tmp.this
  %5 = call i8 @peek(%"RangeWithLookahead[BufferedCharSourceRange]"* %3, i32 %4)
  ret i8 %5
}

; Function Attrs: inlinehint nounwind
define internal i8 @peek(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 %n) #4 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca i64
  %"$tmpForRef" = alloca i8
  %tmp.this1 = alloca i64
  %tmp.this2 = alloca i64
  %tmp.this3 = alloca i8
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load i32, i32* %n.addr
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %5 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %4, i32 0, i32 1
  %6 = call i64 @size.199(%"Vector[Char]"* %5)
  %7 = icmp sge i64 %3, %6
  br i1 %7, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %8 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %8, i32 0, i32 1
  %10 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %11 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %10, i32 0, i32 0
  %12 = call i8 @"post_++.398"(%BufferedCharSourceRange* %11)
  store i8 %12, i8* %"$tmpForRef"
  call void @"+="(%"Vector[Char]"* %9, i8* %"$tmpForRef")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_block

cond.true:                                        ; preds = %while_block
  %13 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %14 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %13, i32 0, i32 0
  %15 = call i1 @"pre_!!"(%BufferedCharSourceRange* %14)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %15, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

if_block:                                         ; preds = %while_end
  %16 = load i32, i32* %n.addr
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %tmp.this1
  %18 = load i64, i64* %tmp.this1
  %19 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %20 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %19, i32 0, i32 1
  %21 = call i64 @size.199(%"Vector[Char]"* %20)
  %22 = icmp slt i64 %18, %21
  br i1 %22, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %23 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %24 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %23, i32 0, i32 1
  %25 = load i32, i32* %n.addr
  %26 = zext i32 %25 to i64
  store i64 %26, i64* %tmp.this2
  %27 = load i64, i64* %tmp.this2
  %28 = call i8* @"().422"(%"Vector[Char]"* %24, i64 %27)
  %29 = load i8, i8* %28
  ret i8 %29

if_else:                                          ; preds = %if_block
  store i8 0, i8* %tmp.this3
  %30 = load i8, i8* %tmp.this3
  ret i8 %30

if_end:                                           ; preds = %dumy_block4, %dumy_block
  unreachable

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block4:                                      ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i8* @"().422"(%"Vector[Char]"* %this, i64 %index) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = load i64, i64* %index.addr
  call void @advance.201(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %3, i64 %4)
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %6 = call i8* @value(%"RawPtr[Char]" %5)
  ret i8* %6
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this) #4 {
  %this.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %this, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %tmp.this = alloca i32
  %tmp.this1 = alloca i32
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %2 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1, i32 0, i32 0
  %3 = call i8 @"pre_*.424"(%"RangeWithLookahead[BufferedCharSourceRange]"* %2)
  %4 = icmp eq i8 %3, 10
  br i1 %4, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %5 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %6 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5, i32 0, i32 1
  %7 = load %Location*, %Location** %6
  store i32 1, i32* %tmp.this
  %8 = load i32, i32* %tmp.this
  call void @addLines(%Location* %7, i32 %8)
  br label %if_end

if_else:                                          ; preds = %if_block
  %9 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %10 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %9, i32 0, i32 1
  %11 = load %Location*, %Location** %10
  store i32 1, i32* %tmp.this1
  %12 = load i32, i32* %tmp.this1
  call void @addColumns(%Location* %11, i32 %12)
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  %13 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %this.addr
  %14 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %13, i32 0, i32 0
  call void @popFront.425(%"RangeWithLookahead[BufferedCharSourceRange]"* %14)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8 @"pre_*.424"(%"RangeWithLookahead[BufferedCharSourceRange]"* %r) #4 {
  %r.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %r, %"RangeWithLookahead[BufferedCharSourceRange]"** %r.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %r.addr
  %2 = call i8 @front.420(%"RangeWithLookahead[BufferedCharSourceRange]"* %1)
  ret i8 %2
}

; Function Attrs: inlinehint nounwind
define internal void @addLines(%Location* %l, i32 %count) #4 {
  %l.addr = alloca %Location*
  store %Location* %l, %Location** %l.addr
  %count.addr = alloca i32
  store i32 %count, i32* %count.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %l.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 2
  %3 = getelementptr inbounds %LineCol, %LineCol* %2, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = load i32, i32* %count.addr
  %6 = add i32 %4, %5
  %7 = load %Location*, %Location** %l.addr
  %8 = getelementptr inbounds %Location, %Location* %7, i32 0, i32 2
  %9 = getelementptr inbounds %LineCol, %LineCol* %8, i32 0, i32 0
  store i32 %6, i32* %9
  store i32 1, i32* %tmp.this
  %10 = load i32, i32* %tmp.this
  %11 = load %Location*, %Location** %l.addr
  %12 = getelementptr inbounds %Location, %Location* %11, i32 0, i32 2
  %13 = getelementptr inbounds %LineCol, %LineCol* %12, i32 0, i32 1
  store i32 %10, i32* %13
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @addColumns(%Location* %l, i32 %count) #4 {
  %l.addr = alloca %Location*
  store %Location* %l, %Location** %l.addr
  %count.addr = alloca i32
  store i32 %count, i32* %count.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %l.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 2
  %3 = getelementptr inbounds %LineCol, %LineCol* %2, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = load i32, i32* %count.addr
  %6 = add i32 %4, %5
  %7 = load %Location*, %Location** %l.addr
  %8 = getelementptr inbounds %Location, %Location* %7, i32 0, i32 2
  %9 = getelementptr inbounds %LineCol, %LineCol* %8, i32 0, i32 1
  store i32 %6, i32* %9
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.425(%"RangeWithLookahead[BufferedCharSourceRange]"* %this) #4 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %tmp.this = alloca i64
  %"$tmpForRef" = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %1, i32 0, i32 1
  store i64 0, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  call void @remove.426(%"Vector[Char]"* %2, i64 %3)
  br label %if_block

if_block:                                         ; preds = %code
  %4 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %5 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %4, i32 0, i32 1
  %6 = call i1 @isEmpty.416(%"Vector[Char]"* %5)
  br i1 %6, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %7 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %7, i32 0, i32 1
  %9 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %10 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %9, i32 0, i32 0
  %11 = call i8 @"post_++.398"(%BufferedCharSourceRange* %10)
  store i8 %11, i8* %"$tmpForRef"
  call void @"+="(%"Vector[Char]"* %8, i8* %"$tmpForRef")
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  ret void

cond.true:                                        ; preds = %if_block
  %12 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %13 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %12, i32 0, i32 0
  %14 = call i1 @"pre_!!"(%BufferedCharSourceRange* %13)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %14, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @remove.426(%"Vector[Char]"* %this, i64 %index) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %r = alloca %"ContiguousMemoryRange[Char]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  call void @all.427(%"ContiguousMemoryRange[Char]"* %r, %"Vector[Char]"* %1)
  %2 = load i64, i64* %index.addr
  call void @popFront.429(%"ContiguousMemoryRange[Char]"* %r, i64 %2)
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %4 = call i64 @size.199(%"Vector[Char]"* %3)
  %5 = load i64, i64* %index.addr
  %6 = call i64 @_SizeType_opMinus(i64 %4, i64 %5)
  store i64 1, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = call i64 @_SizeType_opMinus(i64 %6, i64 %7)
  call void @popBack.430(%"ContiguousMemoryRange[Char]"* %r, i64 %8)
  %9 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %10 = load %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %r
  call void @remove.431(%"Vector[Char]"* %9, %"ContiguousMemoryRange[Char]" %10)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @all.427(%"ContiguousMemoryRange[Char]"* sret %_result, %"Vector[Char]"* %this) #4 {
  %_result.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %_result, %"ContiguousMemoryRange[Char]"** %_result.addr
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %_result.addr
  %2 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %3 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %2, i32 0, i32 0
  %4 = load %"RawPtr[Char]", %"RawPtr[Char]"* %3
  %5 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %5, i32 0, i32 1
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %6
  call void @ctor.428(%"ContiguousMemoryRange[Char]"* %1, %"RawPtr[Char]" %4, %"RawPtr[Char]" %7)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.428(%"ContiguousMemoryRange[Char]"* %this, %"RawPtr[Char]" %f_begin, %"RawPtr[Char]" %f_end) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  %f_begin.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %f_begin, %"RawPtr[Char]"* %f_begin.addr
  %f_end.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %f_end, %"RawPtr[Char]"* %f_end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 0
  call void @ctor.192(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %f_begin.addr)
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 1
  call void @ctor.192(%"RawPtr[Char]"* %4, %"RawPtr[Char]"* %f_end.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.429(%"ContiguousMemoryRange[Char]"* %this, i64 %n) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 0
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %4
  %6 = load i64, i64* %n.addr
  store i64 %6, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %5, i64 %7)
  call void @"=.200"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %"$tmpC")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.430(%"ContiguousMemoryRange[Char]"* %this, i64 %n) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 1
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 1
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %4
  %6 = load i64, i64* %n.addr
  store i64 %6, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = sub i64 0, %7
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %5, i64 %8)
  call void @"=.200"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @remove.431(%"Vector[Char]"* %this, %"ContiguousMemoryRange[Char]" %range) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %range.addr = alloca %"ContiguousMemoryRange[Char]"
  store %"ContiguousMemoryRange[Char]" %range, %"ContiguousMemoryRange[Char]"* %range.addr
  %rBegin = alloca %"RawPtr[Char]"
  %rEnd = alloca %"RawPtr[Char]"
  %"$rangeVar" = alloca %"ContiguousMemoryRange[Char]"
  %el = alloca i8*
  %"$tmpC" = alloca %"RawPtr[Char]"
  %"$tmpC5" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %range.addr
  call void @frontPtr(%"RawPtr[Char]"* %rBegin, %"ContiguousMemoryRange[Char]" %1)
  %2 = load %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %range.addr
  call void @backPtr(%"RawPtr[Char]"* %rEnd, %"ContiguousMemoryRange[Char]" %2)
  call void @ctor.432(%"ContiguousMemoryRange[Char]"* %"$rangeVar", %"ContiguousMemoryRange[Char]"* %range.addr)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %3 = load %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %"$rangeVar"
  %4 = call i1 @isEmpty.433(%"ContiguousMemoryRange[Char]" %3)
  %5 = xor i1 true, %4
  br i1 %5, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %6 = load %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %"$rangeVar"
  %7 = call i8* @front.434(%"ContiguousMemoryRange[Char]" %6)
  store i8* %7, i8** %el
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.435(%"ContiguousMemoryRange[Char]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %while_block1

while_block1:                                     ; preds = %while_step3, %while_end
  %8 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %9 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %8, i32 0, i32 1
  %10 = call i1 @"==.268"(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %9)
  %11 = xor i1 true, %10
  br i1 %11, label %while_body2, label %while_end4

while_body2:                                      ; preds = %while_block1
  %12 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rEnd
  %13 = call i8* @value(%"RawPtr[Char]" %12)
  %14 = load i8, i8* %13
  %15 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rBegin
  %16 = call i8* @value(%"RawPtr[Char]" %15)
  store i8 %14, i8* %16
  %17 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rEnd
  %18 = call i8* @value(%"RawPtr[Char]" %17)
  %19 = load i8, i8* %18
  %20 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rBegin
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %20)
  call void @"=.200"(%"RawPtr[Char]"* %rBegin, %"RawPtr[Char]"* %"$tmpC")
  %21 = load %"RawPtr[Char]", %"RawPtr[Char]"* %rEnd
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC5", %"RawPtr[Char]" %21)
  call void @"=.200"(%"RawPtr[Char]"* %rEnd, %"RawPtr[Char]"* %"$tmpC5")
  br label %while_step3

while_step3:                                      ; preds = %while_body2
  br label %while_block1

while_end4:                                       ; preds = %while_block1
  %22 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %23 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %22, i32 0, i32 1
  call void @"=.200"(%"RawPtr[Char]"* %23, %"RawPtr[Char]"* %rBegin)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @frontPtr(%"RawPtr[Char]"* sret %_result, %"ContiguousMemoryRange[Char]" %this) #4 {
  %_result.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %_result, %"RawPtr[Char]"** %_result.addr
  %this.addr = alloca %"ContiguousMemoryRange[Char]"
  store %"ContiguousMemoryRange[Char]" %this, %"ContiguousMemoryRange[Char]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %_result.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this.addr, i32 0, i32 0
  call void @ctor.192(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @backPtr(%"RawPtr[Char]"* sret %_result, %"ContiguousMemoryRange[Char]" %this) #4 {
  %_result.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %_result, %"RawPtr[Char]"** %_result.addr
  %this.addr = alloca %"ContiguousMemoryRange[Char]"
  store %"ContiguousMemoryRange[Char]" %this, %"ContiguousMemoryRange[Char]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %_result.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this.addr, i32 0, i32 1
  call void @ctor.192(%"RawPtr[Char]"* %1, %"RawPtr[Char]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.432(%"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %other, %"ContiguousMemoryRange[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 0
  call void @ctor.192(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  %5 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %5, i32 0, i32 1
  %7 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %8 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %7, i32 0, i32 1
  call void @ctor.192(%"RawPtr[Char]"* %6, %"RawPtr[Char]"* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.433(%"ContiguousMemoryRange[Char]" %this) #4 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"
  store %"ContiguousMemoryRange[Char]" %this, %"ContiguousMemoryRange[Char]"* %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this.addr, i32 0, i32 1
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %1
  %3 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this.addr, i32 0, i32 0
  %4 = load %"RawPtr[Char]", %"RawPtr[Char]"* %3
  %5 = call i64 @diff(%"RawPtr[Char]" %2, %"RawPtr[Char]" %4)
  store i64 0, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = icmp sle i64 %5, %6
  ret i1 %7
}

; Function Attrs: inlinehint nounwind
define internal i8* @front.434(%"ContiguousMemoryRange[Char]" %this) #4 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"
  store %"ContiguousMemoryRange[Char]" %this, %"ContiguousMemoryRange[Char]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %this.addr, i32 0, i32 0
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %1
  %3 = call i8* @value(%"RawPtr[Char]" %2)
  ret i8* %3
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.435(%"ContiguousMemoryRange[Char]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 0
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %4
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %5)
  call void @"=.200"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advanceIf(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"$lambdaEnclosureData" %pred) #4 {
  %range.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %pred.addr = alloca %"$lambdaEnclosureData"
  store %"$lambdaEnclosureData" %pred, %"$lambdaEnclosureData"* %pred.addr
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %2 = call i1 @isEmpty.414(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  %3 = xor i1 true, %2
  br i1 %3, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %4 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %5 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %6 = call i8 @front.419(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  %7 = call i1 @"().436"(%"$lambdaEnclosureData"* %pred.addr, i8 %6)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %7, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"().436"(%"$lambdaEnclosureData"* %this, i8 %c) #3 {
  %this.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"** %this.addr
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp ne i8 %1, 10
  ret i1 %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.437(%"$lambdaEnclosureData"* %this) #3 {
  %this.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.438(%"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %other, %"$lambdaEnclosureData"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.439(%"$lambdaEnclosureData"* %this) #3 {
  %this.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.440"(%"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %other, %"$lambdaEnclosureData"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.441"(%"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %this, %"$lambdaEnclosureData"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData"*
  store %"$lambdaEnclosureData"* %other, %"$lambdaEnclosureData"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r) #4 {
  %r.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %2 = call i1 @isEmpty.414(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  %3 = xor i1 true, %2
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal void @advanceIf.443(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"$lambdaEnclosureData.0" %pred) #4 {
  %range.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %pred.addr = alloca %"$lambdaEnclosureData.0"
  store %"$lambdaEnclosureData.0" %pred, %"$lambdaEnclosureData.0"* %pred.addr
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %2 = call i1 @isEmpty.414(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  %3 = xor i1 true, %2
  br i1 %3, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %4 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %5 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %6 = call i8 @front.419(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  %7 = call i1 @"().444"(%"$lambdaEnclosureData.0"* %pred.addr, i8 %6)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %7, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"().444"(%"$lambdaEnclosureData.0"* %this, i8 %c) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"** %this.addr
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp eq i8 %1, 32
  ret i1 %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.445(%"$lambdaEnclosureData.0"* %this) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.446(%"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %other, %"$lambdaEnclosureData.0"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.447(%"$lambdaEnclosureData.0"* %this) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.448"(%"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %other, %"$lambdaEnclosureData.0"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.449"(%"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %this, %"$lambdaEnclosureData.0"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.0"*
  store %"$lambdaEnclosureData.0"* %other, %"$lambdaEnclosureData.0"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: inlinehint nounwind
define internal void @reportError(%SparrowScanner* %this, %String* %msg) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %msg.addr = alloca %String*
  store %String* %msg, %String** %msg.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 5
  %3 = load %ErrorReporter, %ErrorReporter* %2
  %4 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %4, i32 0, i32 2
  %6 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5, i32 0, i32 1
  %7 = load %Location*, %Location** %6
  %8 = load %String*, %String** %msg.addr
  call void @reportError.450(%ErrorReporter %3, %Location* %7, %String* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reportError.450(%ErrorReporter %obj, %Location* %loc, %String* %msg) #4 {
  %obj.addr = alloca %ErrorReporter
  store %ErrorReporter %obj, %ErrorReporter* %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %msg.addr = alloca %String*
  store %String* %msg, %String** %msg.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %obj.addr, i32 0, i32 1
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %obj.addr, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Location*, %Location** %loc.addr
  %5 = load %String*, %String** %msg.addr
  %6 = call %StringRef @asStringRef(%String* %5)
  call void @"().451"(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %1, %UntypedPtr %3, %Location* %4, %StringRef %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"().451"(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %StringRef, %StringRef* %p3.addr
  %5 = bitcast %"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %1 to void (%UntypedPtr, %Location*, %StringRef)**
  %6 = load void (%UntypedPtr, %Location*, %StringRef)*, void (%UntypedPtr, %Location*, %StringRef)** %5
  call void %6(%UntypedPtr %2, %Location* %3, %StringRef %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @asStringRef(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = call i8* @bytePtr(%"RawPtr[Char]" %3)
  %5 = load %String*, %String** %this.addr
  %6 = getelementptr inbounds %String, %String* %5, i32 0, i32 1
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %6
  %8 = call i8* @bytePtr(%"RawPtr[Char]" %7)
  call void @ctor.57(%StringRef* %tmp.this, i8* %4, i8* %8)
  %9 = load %StringRef, %StringRef* %tmp.this
  ret %StringRef %9
}

; Function Attrs: inlinehint nounwind
define internal void @toString(%String* sret %_result, %StringRef %a1) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %a1.addr = alloca %StringRef
  store %StringRef %a1, %StringRef* %a1.addr
  %s = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.452(%StringOutputStream* %s)
  %1 = call %StringOutputStream* @"<<"(%StringOutputStream* %s, %StringRef* %a1.addr)
  %2 = load %String*, %String** %_result.addr
  %3 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.189(%String* %2, %String* %3)
  call void @dtor.454(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.454(%StringOutputStream* %s)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.452(%StringOutputStream* %this) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  call void @ctor.137(%String* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringOutputStream* @"<<"(%StringOutputStream* %s, %StringRef* %x) #4 {
  %s.addr = alloca %StringOutputStream*
  store %StringOutputStream* %s, %StringOutputStream** %s.addr
  %x.addr = alloca %StringRef*
  store %StringRef* %x, %StringRef** %x.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %s.addr
  %2 = load %StringRef*, %StringRef** %x.addr
  %3 = load %StringRef, %StringRef* %2
  call void @"<<<.453"(%StringOutputStream* %1, %StringRef %3)
  %4 = load %StringOutputStream*, %StringOutputStream** %s.addr
  ret %StringOutputStream* %4
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.453"(%StringOutputStream* %this, %StringRef %s) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %s.addr = alloca %StringRef
  store %StringRef %s, %StringRef* %s.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load %StringRef, %StringRef* %s.addr
  call void @append(%String* %2, %StringRef %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @append(%String* %this, %StringRef %range) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %range.addr = alloca %StringRef
  store %StringRef %range, %StringRef* %range.addr
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = load %StringRef, %StringRef* %range.addr
  %3 = load %String*, %String** %this.addr
  %4 = getelementptr inbounds %String, %String* %3, i32 0, i32 1
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %4
  %6 = call i8* @bytePtr(%"RawPtr[Char]" %5)
  %7 = load %String*, %String** %this.addr
  %8 = getelementptr inbounds %String, %String* %7, i32 0, i32 1
  %9 = load %"RawPtr[Char]", %"RawPtr[Char]"* %8
  %10 = call i8* @bytePtr(%"RawPtr[Char]" %9)
  call void @ctor.57(%StringRef* %tmp.this, i8* %6, i8* %10)
  %11 = load %StringRef, %StringRef* %tmp.this
  call void @insertBefore(%String* %1, %StringRef %2, %StringRef %11)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @insertBefore(%String* %this, %StringRef %range, %StringRef %pos) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %range.addr = alloca %StringRef
  store %StringRef %range, %StringRef* %range.addr
  %pos.addr = alloca %StringRef
  store %StringRef %pos, %StringRef* %pos.addr
  %n = alloca i64
  %index = alloca i64
  %"$tmpC" = alloca %"RawPtr[Char]"
  %p = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  %q = alloca %"RawPtr[Char]"
  %tmp.this1 = alloca i64
  %"$tmpC2" = alloca %"RawPtr[Char]"
  %tmp.this3 = alloca i64
  %"$tmpC4" = alloca %"RawPtr[Char]"
  %tmp.this5 = alloca i64
  %"$tmpC6" = alloca %"RawPtr[Char]"
  %"$tmpC11" = alloca %"RawPtr[Char]"
  %"$tmpC12" = alloca %"RawPtr[Char]"
  %tmp.this13 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = call i64 @size(%StringRef* %range.addr)
  store i64 %1, i64* %n
  %2 = load %StringRef, %StringRef* %pos.addr
  call void @_frontPtr(%"RawPtr[Char]"* %"$tmpC", %StringRef %2)
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %4 = load %String*, %String** %this.addr
  %5 = getelementptr inbounds %String, %String* %4, i32 0, i32 0
  %6 = load %"RawPtr[Char]", %"RawPtr[Char]"* %5
  %7 = call i64 @diff(%"RawPtr[Char]" %3, %"RawPtr[Char]" %6)
  store i64 %7, i64* %index
  %8 = load %String*, %String** %this.addr
  %9 = load %String*, %String** %this.addr
  %10 = call i64 @size.190(%String* %9)
  %11 = load i64, i64* %n
  %12 = add i64 %10, %11
  call void @reserve(%String* %8, i64 %12)
  %13 = load %String*, %String** %this.addr
  %14 = getelementptr inbounds %String, %String* %13, i32 0, i32 1
  %15 = load %"RawPtr[Char]", %"RawPtr[Char]"* %14
  store i64 -1, i64* %tmp.this
  %16 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %p, %"RawPtr[Char]" %15, i64 %16)
  %17 = load %String*, %String** %this.addr
  %18 = getelementptr inbounds %String, %String* %17, i32 0, i32 0
  %19 = load %"RawPtr[Char]", %"RawPtr[Char]"* %18
  %20 = load i64, i64* %index
  store i64 1, i64* %tmp.this1
  %21 = load i64, i64* %tmp.this1
  %22 = call i64 @_DiffType_opMinus(i64 %20, i64 %21)
  call void @advance(%"RawPtr[Char]"* %q, %"RawPtr[Char]" %19, i64 %22)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %23 = call i1 @"==.268"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %q)
  %24 = xor i1 true, %23
  br i1 %24, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %25 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  %26 = call i8* @value(%"RawPtr[Char]" %25)
  %27 = load i8, i8* %26
  %28 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  %29 = load i64, i64* %n
  store i64 %29, i64* %tmp.this3
  %30 = load i64, i64* %tmp.this3
  call void @advance(%"RawPtr[Char]"* %"$tmpC2", %"RawPtr[Char]" %28, i64 %30)
  %31 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC2"
  %32 = call i8* @value(%"RawPtr[Char]" %31)
  store i8 %27, i8* %32
  %33 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  %34 = call i8* @value(%"RawPtr[Char]" %33)
  %35 = load i8, i8* %34
  br label %while_step

while_step:                                       ; preds = %while_body
  %36 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  store i64 -1, i64* %tmp.this5
  %37 = load i64, i64* %tmp.this5
  call void @advance(%"RawPtr[Char]"* %"$tmpC4", %"RawPtr[Char]" %36, i64 %37)
  call void @"=.200"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpC4")
  br label %while_block

while_end:                                        ; preds = %while_block
  %38 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC6", %"RawPtr[Char]" %38)
  call void @"=.200"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpC6")
  br label %while_block7

while_block7:                                     ; preds = %while_step9, %while_end
  %39 = call i1 @isEmpty(%StringRef* %range.addr)
  %40 = xor i1 true, %39
  br i1 %40, label %while_body8, label %while_end10

while_body8:                                      ; preds = %while_block7
  %41 = call i8* @front(%StringRef* %range.addr)
  %42 = load i8, i8* %41
  %43 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  %44 = call i8* @value(%"RawPtr[Char]" %43)
  store i8 %42, i8* %44
  %45 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC11", %"RawPtr[Char]" %45)
  call void @"=.200"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpC11")
  call void @popFront(%StringRef* %range.addr)
  br label %while_step9

while_step9:                                      ; preds = %while_body8
  br label %while_block7

while_end10:                                      ; preds = %while_block7
  %46 = load %String*, %String** %this.addr
  %47 = getelementptr inbounds %String, %String* %46, i32 0, i32 1
  %48 = load %String*, %String** %this.addr
  %49 = getelementptr inbounds %String, %String* %48, i32 0, i32 1
  %50 = load %"RawPtr[Char]", %"RawPtr[Char]"* %49
  %51 = load i64, i64* %n
  store i64 %51, i64* %tmp.this13
  %52 = load i64, i64* %tmp.this13
  call void @advance(%"RawPtr[Char]"* %"$tmpC12", %"RawPtr[Char]" %50, i64 %52)
  call void @"=.200"(%"RawPtr[Char]"* %47, %"RawPtr[Char]"* %"$tmpC12")
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.454(%StringOutputStream* %this) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  call void @dtor.261(%String* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advanceIf.455(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"$lambdaEnclosureData.1" %pred) #4 {
  %range.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %pred.addr = alloca %"$lambdaEnclosureData.1"
  store %"$lambdaEnclosureData.1" %pred, %"$lambdaEnclosureData.1"* %pred.addr
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %2 = call i1 @isEmpty.414(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  %3 = xor i1 true, %2
  br i1 %3, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %4 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %5 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %6 = call i8 @front.419(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  %7 = call i1 @"().456"(%"$lambdaEnclosureData.1"* %pred.addr, i8 %6)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %7, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"().456"(%"$lambdaEnclosureData.1"* %this, i8 %c) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"** %this.addr
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp eq i8 %1, 9
  ret i1 %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.457(%"$lambdaEnclosureData.1"* %this) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.458(%"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %other, %"$lambdaEnclosureData.1"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.459(%"$lambdaEnclosureData.1"* %this) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.460"(%"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %other, %"$lambdaEnclosureData.1"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.461"(%"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %this, %"$lambdaEnclosureData.1"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.1"*
  store %"$lambdaEnclosureData.1"* %other, %"$lambdaEnclosureData.1"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: inlinehint nounwind
define internal void @advanceIf.462(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"$lambdaEnclosureData.2" %pred) #4 {
  %range.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %pred.addr = alloca %"$lambdaEnclosureData.2"
  store %"$lambdaEnclosureData.2" %pred, %"$lambdaEnclosureData.2"* %pred.addr
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %2 = call i1 @isEmpty.414(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  %3 = xor i1 true, %2
  br i1 %3, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %4 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %5 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %6 = call i8 @front.419(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  %7 = call i1 @"().463"(%"$lambdaEnclosureData.2"* %pred.addr, i8 %6)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %7, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"().463"(%"$lambdaEnclosureData.2"* %this, i8 %c) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"** %this.addr
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp ne i8 %1, 10
  ret i1 %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.464(%"$lambdaEnclosureData.2"* %this) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.465(%"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %other, %"$lambdaEnclosureData.2"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.466(%"$lambdaEnclosureData.2"* %this) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.467"(%"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %other, %"$lambdaEnclosureData.2"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.468"(%"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"* %other) #3 {
  %this.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %this, %"$lambdaEnclosureData.2"** %this.addr
  %other.addr = alloca %"$lambdaEnclosureData.2"*
  store %"$lambdaEnclosureData.2"* %other, %"$lambdaEnclosureData.2"** %other.addr
  br label %code

code:                                             ; preds = %0
  ret i1 true
}

; Function Attrs: inlinehint nounwind
define internal void @advance.469(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, i64 %n) #4 {
  %range.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %range, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = call i64 @post_--.52(i64* %n.addr)
  store i64 0, i64* %tmp.this
  %2 = load i64, i64* %tmp.this
  %3 = icmp sgt i64 %1, %2
  br i1 %3, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %4 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %range.addr
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %4)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8 @"pre_++.470"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r) #4 {
  %r.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  %2 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %3 = call i8 @front.419(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  ret i8 %3
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r) #4 {
  %r.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %2 = call i1 @isEmpty.414(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %1)
  ret i1 %2
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.471(%String* %this, %StringRef* %other) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %other.addr = alloca %StringRef*
  store %StringRef* %other, %StringRef** %other.addr
  %size = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef*, %StringRef** %other.addr
  %2 = call i64 @size(%StringRef* %1)
  store i64 %2, i64* %size
  %3 = load %String*, %String** %this.addr
  %4 = load i64, i64* %size
  call void @ctor.191(%String* %3, i64 %4)
  %5 = load %String*, %String** %this.addr
  %6 = getelementptr inbounds %String, %String* %5, i32 0, i32 0
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %6
  %8 = call i8* @bytePtr(%"RawPtr[Char]" %7)
  %9 = load %StringRef*, %StringRef** %other.addr
  %10 = getelementptr inbounds %StringRef, %StringRef* %9, i32 0, i32 0
  %11 = load i8*, i8** %10
  %12 = load i64, i64* %size
  call void @_spr_memcpy(i8* %8, i8* %11, i64 %12)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseString(%TokenType* sret %_result, %SparrowScanner* %this, i8 %endChar) #4 {
  %_result.addr = alloca %TokenType*
  store %TokenType* %_result, %TokenType** %_result.addr
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %endChar.addr = alloca i8
  store i8 %endChar, i8* %endChar.addr
  %tmp.this = alloca i32
  %tmp.this1 = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %tmp.this8 = alloca %String
  %"$tmpForRef9" = alloca %StringRef
  %tmp.StringRef10 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load %SparrowScanner*, %SparrowScanner** %this.addr
  store i32 1, i32* %tmp.this
  %4 = load i32, i32* %tmp.this
  %5 = call i1 @hasLessThan(%SparrowScanner* %3, i32 %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %6 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %7 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %8 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.10, i32 0, i32 0), i8** %7
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.10, i32 0, i32 39), i8** %8
  %9 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %9, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %tmp.this1, %StringRef* %"$tmpForRef")
  call void @reportError(%SparrowScanner* %6, %String* %tmp.this1)
  call void @dtor.261(%String* %tmp.this1)
  %10 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %10, i32 0)
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %11 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 2
  %13 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %12)
  br i1 %13, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  br label %if_block2

while_step:                                       ; preds = %if_end4
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_block5

cond.true:                                        ; preds = %while_block
  %14 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %15 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %14, i32 0, i32 2
  %16 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %15)
  %17 = load i8, i8* %endChar.addr
  %18 = icmp ne i8 %16, %17
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %18, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

if_block2:                                        ; preds = %while_body
  %19 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %20 = call i1 @checkEscapeChar(%SparrowScanner* %19)
  %21 = xor i1 true, %20
  br i1 %21, label %if_then3, label %if_end4

if_then3:                                         ; preds = %if_block2
  %22 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @advanceAndCapture1(%SparrowScanner* %22)
  br label %if_end4

if_end4:                                          ; preds = %if_then3, %if_block2
  br label %while_step

if_block5:                                        ; preds = %while_end
  %23 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %24 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %23, i32 0, i32 2
  %25 = call i1 @"pre_!"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %24)
  br i1 %25, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  %26 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %27 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef10, i32 0, i32 0
  %28 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef10, i32 0, i32 1
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.12, i32 0, i32 0), i8** %27
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.12, i32 0, i32 39), i8** %28
  %29 = load %StringRef, %StringRef* %tmp.StringRef10
  store %StringRef %29, %StringRef* %"$tmpForRef9"
  call void @ctor.471(%String* %tmp.this8, %StringRef* %"$tmpForRef9")
  call void @reportError(%SparrowScanner* %26, %String* %tmp.this8)
  call void @dtor.261(%String* %tmp.this8)
  %30 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %30, i32 0)
  ret void

if_end7:                                          ; preds = %dumy_block11, %if_block5
  %31 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %32 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %31, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %32)
  %33 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %33, i32 40)
  ret void

dumy_block11:                                     ; No predecessors!
  br label %if_end7
}

; Function Attrs: inlinehint nounwind
define internal i1 @hasLessThan(%SparrowScanner* %this, i32 %n) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2, i32 0, i32 0
  %4 = load i32, i32* %n.addr
  %5 = call i1 @hasLessThan.472(%"RangeWithLookahead[BufferedCharSourceRange]"* %3, i32 %4)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal i1 @hasLessThan.472(%"RangeWithLookahead[BufferedCharSourceRange]"* %this, i32 %n) #4 {
  %this.addr = alloca %"RangeWithLookahead[BufferedCharSourceRange]"*
  store %"RangeWithLookahead[BufferedCharSourceRange]"* %this, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca i64
  %"$tmpForRef" = alloca i8
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load i32, i32* %n.addr
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %5 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %4, i32 0, i32 1
  %6 = call i64 @size.199(%"Vector[Char]"* %5)
  %7 = icmp sge i64 %3, %6
  br i1 %7, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %8 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %8, i32 0, i32 1
  %10 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %11 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %10, i32 0, i32 0
  %12 = call i8 @"post_++.398"(%BufferedCharSourceRange* %11)
  store i8 %12, i8* %"$tmpForRef"
  call void @"+="(%"Vector[Char]"* %9, i8* %"$tmpForRef")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  %13 = load i32, i32* %n.addr
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %tmp.this1
  %15 = load i64, i64* %tmp.this1
  %16 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %17 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %16, i32 0, i32 1
  %18 = call i64 @size.199(%"Vector[Char]"* %17)
  %19 = icmp sge i64 %15, %18
  ret i1 %19

cond.true:                                        ; preds = %while_block
  %20 = load %"RangeWithLookahead[BufferedCharSourceRange]"*, %"RangeWithLookahead[BufferedCharSourceRange]"** %this.addr
  %21 = getelementptr inbounds %"RangeWithLookahead[BufferedCharSourceRange]", %"RangeWithLookahead[BufferedCharSourceRange]"* %20, i32 0, i32 0
  %22 = call i1 @"pre_!!"(%BufferedCharSourceRange* %21)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %22, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: noinline nounwind
define i1 @checkEscapeChar(%SparrowScanner* %this) #5 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %ch = alloca i8
  %tmp.this = alloca i32
  %tmp.this39 = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %charVal = alloca i32
  %tmp.this40 = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  store i8 %3, i8* %ch
  br label %if_block

if_block:                                         ; preds = %code
  %4 = load i8, i8* %ch
  %5 = icmp eq i8 %4, 92
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %6 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %6, i32 0, i32 2
  %8 = call i8 @"pre_++.470"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %7)
  store i8 %8, i8* %ch
  br label %if_block1

if_end:                                           ; preds = %dumy_block41, %if_block
  ret i1 false

if_block1:                                        ; preds = %if_then
  %9 = load i8, i8* %ch
  %10 = icmp eq i8 %9, 114
  br i1 %10, label %if_then2, label %if_else

if_then2:                                         ; preds = %if_block1
  %11 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %12 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %11, i32 0, i32 3
  %13 = getelementptr inbounds %Token, %Token* %12, i32 0, i32 2
  call void @"+=.473"(%String* %13, i8 13)
  br label %if_end3

if_else:                                          ; preds = %if_block1
  br label %if_block4

if_end3:                                          ; preds = %if_end7, %if_then2
  %14 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %15 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %14, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %15)
  ret i1 true

if_block4:                                        ; preds = %if_else
  %16 = load i8, i8* %ch
  %17 = icmp eq i8 %16, 110
  br i1 %17, label %if_then5, label %if_else6

if_then5:                                         ; preds = %if_block4
  %18 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %19 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %18, i32 0, i32 3
  %20 = getelementptr inbounds %Token, %Token* %19, i32 0, i32 2
  call void @"+=.473"(%String* %20, i8 10)
  br label %if_end7

if_else6:                                         ; preds = %if_block4
  br label %if_block8

if_end7:                                          ; preds = %if_end11, %if_then5
  br label %if_end3

if_block8:                                        ; preds = %if_else6
  %21 = load i8, i8* %ch
  %22 = icmp eq i8 %21, 98
  br i1 %22, label %if_then9, label %if_else10

if_then9:                                         ; preds = %if_block8
  %23 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %24 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %23, i32 0, i32 3
  %25 = getelementptr inbounds %Token, %Token* %24, i32 0, i32 2
  call void @"+=.473"(%String* %25, i8 8)
  br label %if_end11

if_else10:                                        ; preds = %if_block8
  br label %if_block12

if_end11:                                         ; preds = %if_end15, %if_then9
  br label %if_end7

if_block12:                                       ; preds = %if_else10
  %26 = load i8, i8* %ch
  %27 = icmp eq i8 %26, 102
  br i1 %27, label %if_then13, label %if_else14

if_then13:                                        ; preds = %if_block12
  %28 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %29 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %28, i32 0, i32 3
  %30 = getelementptr inbounds %Token, %Token* %29, i32 0, i32 2
  call void @"+=.473"(%String* %30, i8 12)
  br label %if_end15

if_else14:                                        ; preds = %if_block12
  br label %if_block16

if_end15:                                         ; preds = %if_end19, %if_then13
  br label %if_end11

if_block16:                                       ; preds = %if_else14
  %31 = load i8, i8* %ch
  %32 = icmp eq i8 %31, 116
  br i1 %32, label %if_then17, label %if_else18

if_then17:                                        ; preds = %if_block16
  %33 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %34 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %33, i32 0, i32 3
  %35 = getelementptr inbounds %Token, %Token* %34, i32 0, i32 2
  call void @"+=.473"(%String* %35, i8 9)
  br label %if_end19

if_else18:                                        ; preds = %if_block16
  br label %if_block20

if_end19:                                         ; preds = %if_end23, %if_then17
  br label %if_end15

if_block20:                                       ; preds = %if_else18
  %36 = load i8, i8* %ch
  %37 = icmp eq i8 %36, 92
  br i1 %37, label %if_then21, label %if_else22

if_then21:                                        ; preds = %if_block20
  %38 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %39 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %38, i32 0, i32 3
  %40 = getelementptr inbounds %Token, %Token* %39, i32 0, i32 2
  call void @"+=.473"(%String* %40, i8 92)
  br label %if_end23

if_else22:                                        ; preds = %if_block20
  br label %if_block24

if_end23:                                         ; preds = %if_end27, %if_then21
  br label %if_end19

if_block24:                                       ; preds = %if_else22
  %41 = load i8, i8* %ch
  %42 = icmp eq i8 %41, 39
  br i1 %42, label %if_then25, label %if_else26

if_then25:                                        ; preds = %if_block24
  %43 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %44 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %43, i32 0, i32 3
  %45 = getelementptr inbounds %Token, %Token* %44, i32 0, i32 2
  call void @"+=.473"(%String* %45, i8 39)
  br label %if_end27

if_else26:                                        ; preds = %if_block24
  br label %if_block28

if_end27:                                         ; preds = %if_end31, %if_then25
  br label %if_end23

if_block28:                                       ; preds = %if_else26
  %46 = load i8, i8* %ch
  %47 = icmp eq i8 %46, 34
  br i1 %47, label %if_then29, label %if_else30

if_then29:                                        ; preds = %if_block28
  %48 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %49 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %48, i32 0, i32 3
  %50 = getelementptr inbounds %Token, %Token* %49, i32 0, i32 2
  call void @"+=.473"(%String* %50, i8 34)
  br label %if_end31

if_else30:                                        ; preds = %if_block28
  br label %if_block32

if_end31:                                         ; preds = %if_end35, %if_then29
  br label %if_end27

if_block32:                                       ; preds = %if_else30
  %51 = load i8, i8* %ch
  %52 = icmp eq i8 %51, 120
  br i1 %52, label %cond.true, label %cond.false

if_then33:                                        ; preds = %cond.end
  br label %if_block36

if_else34:                                        ; preds = %cond.end
  %53 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %54 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %53, i32 0, i32 3
  %55 = getelementptr inbounds %Token, %Token* %54, i32 0, i32 2
  %56 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %57 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %56, i32 0, i32 2
  %58 = call i8 @"pre_++.470"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %57)
  call void @"+=.473"(%String* %55, i8 %58)
  br label %if_end35

if_end35:                                         ; preds = %if_else34, %if_end38
  br label %if_end31

cond.true:                                        ; preds = %if_block32
  br label %cond.end

cond.false:                                       ; preds = %if_block32
  %59 = load i8, i8* %ch
  %60 = icmp eq i8 %59, 88
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ true, %cond.true ], [ %60, %cond.false ]
  br i1 %cond.res, label %if_then33, label %if_else34

if_block36:                                       ; preds = %if_then33
  %61 = load %SparrowScanner*, %SparrowScanner** %this.addr
  store i32 2, i32* %tmp.this
  %62 = load i32, i32* %tmp.this
  %63 = call i1 @hasLessThan(%SparrowScanner* %61, i32 %62)
  br i1 %63, label %if_then37, label %if_end38

if_then37:                                        ; preds = %if_block36
  %64 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %65 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %66 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @str.11, i32 0, i32 0), i8** %65
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @str.11, i32 0, i32 36), i8** %66
  %67 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %67, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %tmp.this39, %StringRef* %"$tmpForRef")
  call void @reportError(%SparrowScanner* %64, %String* %tmp.this39)
  call void @dtor.261(%String* %tmp.this39)
  ret i1 true

if_end38:                                         ; preds = %dumy_block, %if_block36
  %68 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %69 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %68, i32 0, i32 2
  %70 = call i8 @"pre_++.470"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %69)
  %71 = call i32 @getXdigitVal(i8 %70)
  %72 = mul i32 16, %71
  store i32 %72, i32* %charVal
  %73 = load i32, i32* %charVal
  %74 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %75 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %74, i32 0, i32 2
  %76 = call i8 @"pre_++.470"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %75)
  %77 = call i32 @getXdigitVal(i8 %76)
  %78 = add i32 %73, %77
  store i32 %78, i32* %charVal
  %79 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %80 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %79, i32 0, i32 3
  %81 = getelementptr inbounds %Token, %Token* %80, i32 0, i32 2
  %82 = load i32, i32* %charVal
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %tmp.this40
  %84 = load i8, i8* %tmp.this40
  call void @"+=.473"(%String* %81, i8 %84)
  br label %if_end35

dumy_block:                                       ; No predecessors!
  br label %if_end38

dumy_block41:                                     ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @"+=.473"(%String* %this, i8 %value) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = load i8, i8* %value.addr
  call void @pushBack.474(%String* %1, i8 %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack.474(%String* %this, i8 %value) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  %t = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this5 = alloca i64
  %"$tmpC" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 1
  %3 = load %String*, %String** %this.addr
  %4 = getelementptr inbounds %String, %String* %3, i32 0, i32 2
  %5 = call i1 @"==.268"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  store i64 2, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = load %String*, %String** %this.addr
  %8 = call i64 @capacity(%String* %7)
  %9 = mul i64 %6, %8
  store i64 %9, i64* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %10 = load i8, i8* %value.addr
  %11 = load %String*, %String** %this.addr
  %12 = getelementptr inbounds %String, %String* %11, i32 0, i32 1
  %13 = load %"RawPtr[Char]", %"RawPtr[Char]"* %12
  %14 = call i8* @value(%"RawPtr[Char]" %13)
  store i8 %10, i8* %14
  %15 = load %String*, %String** %this.addr
  %16 = getelementptr inbounds %String, %String* %15, i32 0, i32 1
  %17 = load %String*, %String** %this.addr
  %18 = getelementptr inbounds %String, %String* %17, i32 0, i32 1
  %19 = load %"RawPtr[Char]", %"RawPtr[Char]"* %18
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %19)
  call void @"=.200"(%"RawPtr[Char]"* %16, %"RawPtr[Char]"* %"$tmpC")
  ret void

if_block1:                                        ; preds = %if_then
  %20 = load i64, i64* %t
  store i64 2, i64* %tmp.this4
  %21 = load i64, i64* %tmp.this4
  %22 = icmp slt i64 %20, %21
  br i1 %22, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 2, i64* %tmp.this5
  %23 = load i64, i64* %tmp.this5
  store i64 %23, i64* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %24 = load %String*, %String** %this.addr
  %25 = load i64, i64* %t
  call void @reserve(%String* %24, i64 %25)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i32 @getXdigitVal(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  %tmp.this1 = alloca i32
  %tmp.this2 = alloca i32
  %tmp.this3 = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = call i1 @isDigit(i8 %1)
  br i1 %2, label %cond_alt1, label %cond_alt2

cond_alt1:                                        ; preds = %code
  %3 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %3)
  %4 = load i32, i32* %tmp.this
  call void @_ass_32_8z(i32* %tmp.this1, i8 48)
  %5 = load i32, i32* %tmp.this1
  %6 = sub i32 %4, %5
  br label %cond_end

cond_alt2:                                        ; preds = %code
  %7 = load i8, i8* %c.addr
  %8 = call i8 @toLower(i8 %7)
  call void @_ass_32_8z(i32* %tmp.this2, i8 %8)
  %9 = load i32, i32* %tmp.this2
  %10 = add i32 10, %9
  call void @_ass_32_8z(i32* %tmp.this3, i8 97)
  %11 = load i32, i32* %tmp.this3
  %12 = sub i32 %10, %11
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi i32 [ %6, %cond_alt1 ], [ %12, %cond_alt2 ]
  br i1 %2, label %cond_destruct_alt1, label %cond_destruct_alt2

cond_destruct_alt1:                               ; preds = %cond_end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %cond_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret i32 %cond

cond_destruct_alt14:                              ; preds = %dumy_block
  br label %cond_destruct_end6

cond_destruct_alt25:                              ; preds = %dumy_block
  br label %cond_destruct_end6

cond_destruct_end6:                               ; preds = %cond_destruct_alt25, %cond_destruct_alt14
  unreachable

dumy_block:                                       ; No predecessors!
  br i1 %2, label %cond_destruct_alt14, label %cond_destruct_alt25
}

; Function Attrs: inlinehint nounwind
define internal i1 @isDigit(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isdigit(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @isdigit(i32)

; Function Attrs: inlinehint nounwind
define internal i8 @toLower(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i8
  %tmp.this1 = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this1, i8 %1)
  %2 = load i32, i32* %tmp.this1
  %3 = call i32 @tolower(i32 %2)
  %4 = trunc i32 %3 to i8
  store i8 %4, i8* %tmp.this
  %5 = load i8, i8* %tmp.this
  ret i8 %5
}

declare i32 @tolower(i32)

; Function Attrs: inlinehint nounwind
define internal void @advanceAndCapture1(%SparrowScanner* %this) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 3
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 2
  %4 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %4, i32 0, i32 2
  %6 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  call void @"+=.473"(%String* %3, i8 %6)
  %7 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %7, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseStringNE(%TokenType* sret %_result, %SparrowScanner* %this) #4 {
  %_result.addr = alloca %TokenType*
  store %TokenType* %_result, %TokenType** %_result.addr
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %tmp.this = alloca i64
  %tmp.this5 = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %tmp.this6 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  store i64 2, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  call void @advance.469(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2, i64 %3)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %4 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %4, i32 0, i32 2
  %6 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  br i1 %6, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %7 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @advanceAndCapture1(%SparrowScanner* %7)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_block

cond.true:                                        ; preds = %while_block
  %8 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %9 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %8, i32 0, i32 2
  %10 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %9)
  %11 = icmp eq i8 %10, 125
  br i1 %11, label %cond.true1, label %cond.false2

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.end3
  %cond.res4 = phi i1 [ %15, %cond.end3 ], [ false, %cond.false ]
  br i1 %cond.res4, label %while_body, label %while_end

cond.true1:                                       ; preds = %cond.true
  %12 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %13 = call i8 @peekChar(%SparrowScanner* %12)
  %14 = icmp eq i8 %13, 62
  br label %cond.end3

cond.false2:                                      ; preds = %cond.true
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %14, %cond.true1 ], [ false, %cond.false2 ]
  %15 = xor i1 true, %cond.res
  br label %cond.end

if_block:                                         ; preds = %while_end
  %16 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %17 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %16, i32 0, i32 2
  %18 = call i1 @"pre_!"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %17)
  br i1 %18, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %19 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %20 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %21 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.13, i32 0, i32 0), i8** %20
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str.13, i32 0, i32 39), i8** %21
  %22 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %22, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %tmp.this5, %StringRef* %"$tmpForRef")
  call void @reportError(%SparrowScanner* %19, %String* %tmp.this5)
  call void @dtor.261(%String* %tmp.this5)
  %23 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %23, i32 0)
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  %24 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %25 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %24, i32 0, i32 2
  store i64 2, i64* %tmp.this6
  %26 = load i64, i64* %tmp.this6
  call void @advance.469(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %25, i64 %26)
  %27 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %27, i32 40)
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @isOpChar(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp eq i8 %1, 126
  br i1 %2, label %cond.true49, label %cond.false50

cond.true:                                        ; preds = %cond.end3
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  %3 = load i8, i8* %c.addr
  %4 = icmp eq i8 %3, 42
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res68 = phi i1 [ true, %cond.true ], [ %4, %cond.false ]
  ret i1 %cond.res68

cond.true1:                                       ; preds = %cond.end6
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  %5 = load i8, i8* %c.addr
  %6 = icmp eq i8 %5, 47
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res67 = phi i1 [ true, %cond.true1 ], [ %6, %cond.false2 ]
  br i1 %cond.res67, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  %7 = load i8, i8* %c.addr
  %8 = icmp eq i8 %7, 63
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res66 = phi i1 [ true, %cond.true4 ], [ %8, %cond.false5 ]
  br i1 %cond.res66, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  %9 = load i8, i8* %c.addr
  %10 = icmp eq i8 %9, 62
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res65 = phi i1 [ true, %cond.true7 ], [ %10, %cond.false8 ]
  br i1 %cond.res65, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %cond.end15
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end15
  %11 = load i8, i8* %c.addr
  %12 = icmp eq i8 %11, 60
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res64 = phi i1 [ true, %cond.true10 ], [ %12, %cond.false11 ]
  br i1 %cond.res64, label %cond.true7, label %cond.false8

cond.true13:                                      ; preds = %cond.end18
  br label %cond.end15

cond.false14:                                     ; preds = %cond.end18
  %13 = load i8, i8* %c.addr
  %14 = icmp eq i8 %13, 58
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res63 = phi i1 [ true, %cond.true13 ], [ %14, %cond.false14 ]
  br i1 %cond.res63, label %cond.true10, label %cond.false11

cond.true16:                                      ; preds = %cond.end21
  br label %cond.end18

cond.false17:                                     ; preds = %cond.end21
  %15 = load i8, i8* %c.addr
  %16 = icmp eq i8 %15, 92
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond.res62 = phi i1 [ true, %cond.true16 ], [ %16, %cond.false17 ]
  br i1 %cond.res62, label %cond.true13, label %cond.false14

cond.true19:                                      ; preds = %cond.end24
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end24
  %17 = load i8, i8* %c.addr
  %18 = icmp eq i8 %17, 124
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond.res61 = phi i1 [ true, %cond.true19 ], [ %18, %cond.false20 ]
  br i1 %cond.res61, label %cond.true16, label %cond.false17

cond.true22:                                      ; preds = %cond.end27
  br label %cond.end24

cond.false23:                                     ; preds = %cond.end27
  %19 = load i8, i8* %c.addr
  %20 = icmp eq i8 %19, 61
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond.res60 = phi i1 [ true, %cond.true22 ], [ %20, %cond.false23 ]
  br i1 %cond.res60, label %cond.true19, label %cond.false20

cond.true25:                                      ; preds = %cond.end30
  br label %cond.end27

cond.false26:                                     ; preds = %cond.end30
  %21 = load i8, i8* %c.addr
  %22 = icmp eq i8 %21, 43
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond.res59 = phi i1 [ true, %cond.true25 ], [ %22, %cond.false26 ]
  br i1 %cond.res59, label %cond.true22, label %cond.false23

cond.true28:                                      ; preds = %cond.end33
  br label %cond.end30

cond.false29:                                     ; preds = %cond.end33
  %23 = load i8, i8* %c.addr
  %24 = icmp eq i8 %23, 45
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond.res58 = phi i1 [ true, %cond.true28 ], [ %24, %cond.false29 ]
  br i1 %cond.res58, label %cond.true25, label %cond.false26

cond.true31:                                      ; preds = %cond.end36
  br label %cond.end33

cond.false32:                                     ; preds = %cond.end36
  %25 = load i8, i8* %c.addr
  %26 = icmp eq i8 %25, 38
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond.res57 = phi i1 [ true, %cond.true31 ], [ %26, %cond.false32 ]
  br i1 %cond.res57, label %cond.true28, label %cond.false29

cond.true34:                                      ; preds = %cond.end39
  br label %cond.end36

cond.false35:                                     ; preds = %cond.end39
  %27 = load i8, i8* %c.addr
  %28 = icmp eq i8 %27, 94
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond.res56 = phi i1 [ true, %cond.true34 ], [ %28, %cond.false35 ]
  br i1 %cond.res56, label %cond.true31, label %cond.false32

cond.true37:                                      ; preds = %cond.end42
  br label %cond.end39

cond.false38:                                     ; preds = %cond.end42
  %29 = load i8, i8* %c.addr
  %30 = icmp eq i8 %29, 37
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond.res55 = phi i1 [ true, %cond.true37 ], [ %30, %cond.false38 ]
  br i1 %cond.res55, label %cond.true34, label %cond.false35

cond.true40:                                      ; preds = %cond.end45
  br label %cond.end42

cond.false41:                                     ; preds = %cond.end45
  %31 = load i8, i8* %c.addr
  %32 = icmp eq i8 %31, 36
  br label %cond.end42

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond.res54 = phi i1 [ true, %cond.true40 ], [ %32, %cond.false41 ]
  br i1 %cond.res54, label %cond.true37, label %cond.false38

cond.true43:                                      ; preds = %cond.end48
  br label %cond.end45

cond.false44:                                     ; preds = %cond.end48
  %33 = load i8, i8* %c.addr
  %34 = icmp eq i8 %33, 35
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond.res53 = phi i1 [ true, %cond.true43 ], [ %34, %cond.false44 ]
  br i1 %cond.res53, label %cond.true40, label %cond.false41

cond.true46:                                      ; preds = %cond.end51
  br label %cond.end48

cond.false47:                                     ; preds = %cond.end51
  %35 = load i8, i8* %c.addr
  %36 = icmp eq i8 %35, 64
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond.res52 = phi i1 [ true, %cond.true46 ], [ %36, %cond.false47 ]
  br i1 %cond.res52, label %cond.true43, label %cond.false44

cond.true49:                                      ; preds = %code
  br label %cond.end51

cond.false50:                                     ; preds = %code
  %37 = load i8, i8* %c.addr
  %38 = icmp eq i8 %37, 33
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond.res = phi i1 [ true, %cond.true49 ], [ %38, %cond.false50 ]
  br i1 %cond.res, label %cond.true46, label %cond.false47
}

; Function Attrs: inlinehint nounwind
define internal i1 @isOpCharDot(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp eq i8 %1, 46
  br i1 %2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  br label %cond.end

cond.false:                                       ; preds = %code
  %3 = load i8, i8* %c.addr
  %4 = call i1 @isOpChar(i8 %3)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ true, %cond.true ], [ %4, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseOperator(%SparrowScanner* %this) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %ch = alloca i8
  %funptr = alloca i1 (i8)*
  %i = alloca i32
  %c = alloca i8
  %tmp.this = alloca i32
  %tmp.this4 = alloca i32
  %hasOtherDot = alloca i1
  %funptr8 = alloca i1 (i8)*
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  store i8 %3, i8* %ch
  br label %if_block

if_block:                                         ; preds = %code
  %4 = load i8, i8* %ch
  %5 = call i1 @isOpChar(i8 %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %6 = load %SparrowScanner*, %SparrowScanner** %this.addr
  store i1 (i8)* @isOpCharDot, i1 (i8)** %funptr
  %7 = bitcast i1 (i8)** %funptr to %"FunctionPtr1[Bool, Char]"*
  %8 = load %"FunctionPtr1[Bool, Char]", %"FunctionPtr1[Bool, Char]"* %7
  call void @advanceAndCapture(%SparrowScanner* %6, %"FunctionPtr1[Bool, Char]" %8)
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %9 = load i8, i8* %ch
  %10 = icmp eq i8 %9, 46
  br i1 %10, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i32 1, i32* %i
  %11 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %12 = load i32, i32* %i
  store i32 %12, i32* %tmp.this
  %13 = load i32, i32* %tmp.this
  %14 = call i8 @peekChar.476(%SparrowScanner* %11, i32 %13)
  store i8 %14, i8* %c
  br label %while_block

if_end3:                                          ; preds = %if_end7, %if_block1
  ret i1 false

while_block:                                      ; preds = %while_step, %if_then2
  %15 = load i8, i8* %c
  %16 = call i1 @isOpChar(i8 %15)
  br i1 %16, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %17 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %18 = call i32 @"pre_++.21"(i32* %i)
  store i32 %18, i32* %tmp.this4
  %19 = load i32, i32* %tmp.this4
  %20 = call i8 @peekChar.476(%SparrowScanner* %17, i32 %19)
  store i8 %20, i8* %c
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %21 = load i8, i8* %c
  %22 = icmp eq i8 %21, 46
  store i1 %22, i1* %hasOtherDot
  br label %if_block5

if_block5:                                        ; preds = %while_end
  %23 = load i1, i1* %hasOtherDot
  br i1 %23, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  %24 = load %SparrowScanner*, %SparrowScanner** %this.addr
  store i1 (i8)* @isOpCharDot, i1 (i8)** %funptr8
  %25 = bitcast i1 (i8)** %funptr8 to %"FunctionPtr1[Bool, Char]"*
  %26 = load %"FunctionPtr1[Bool, Char]", %"FunctionPtr1[Bool, Char]"* %25
  call void @advanceAndCapture(%SparrowScanner* %24, %"FunctionPtr1[Bool, Char]" %26)
  ret i1 true

if_end7:                                          ; preds = %dumy_block9, %if_block5
  br label %if_end3

dumy_block9:                                      ; No predecessors!
  br label %if_end7
}

; Function Attrs: inlinehint nounwind
define internal void @advanceAndCapture(%SparrowScanner* %this, %"FunctionPtr1[Bool, Char]" %pred) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %pred.addr = alloca %"FunctionPtr1[Bool, Char]"
  store %"FunctionPtr1[Bool, Char]" %pred, %"FunctionPtr1[Bool, Char]"* %pred.addr
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  br i1 %3, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %4 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %4, i32 0, i32 3
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 2
  %7 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %7, i32 0, i32 2
  %9 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %8)
  call void @"+=.473"(%String* %6, i8 %9)
  br label %while_step

while_step:                                       ; preds = %while_body
  %10 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %11 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %10, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %11)
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %12 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %13 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %12, i32 0, i32 2
  %14 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %13)
  %15 = call i1 @"().475"(%"FunctionPtr1[Bool, Char]"* %pred.addr, i8 %14)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %15, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @"().475"(%"FunctionPtr1[Bool, Char]"* %this, i8 %p1) #4 {
  %this.addr = alloca %"FunctionPtr1[Bool, Char]"*
  store %"FunctionPtr1[Bool, Char]"* %this, %"FunctionPtr1[Bool, Char]"** %this.addr
  %p1.addr = alloca i8
  store i8 %p1, i8* %p1.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr1[Bool, Char]"*, %"FunctionPtr1[Bool, Char]"** %this.addr
  %2 = load i8, i8* %p1.addr
  %3 = bitcast %"FunctionPtr1[Bool, Char]"* %1 to i1 (i8)**
  %4 = load i1 (i8)*, i1 (i8)** %3
  %5 = call i1 %4(i8 %2)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal i8 @peekChar.476(%SparrowScanner* %this, i32 %n) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = getelementptr inbounds %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]", %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2, i32 0, i32 0
  %4 = load i32, i32* %n.addr
  %5 = call i8 @peek(%"RangeWithLookahead[BufferedCharSourceRange]"* %3, i32 %4)
  ret i8 %5
}

; Function Attrs: inlinehint nounwind
define internal i1 @isAlpha(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isalpha(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @isalpha(i32)

; Function Attrs: noinline nounwind
define void @parseIdentifer(%TokenType* sret %_result, %SparrowScanner* %this) #5 {
  %_result.addr = alloca %TokenType*
  store %TokenType* %_result, %TokenType** %_result.addr
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %allowSymbolChars = alloca i1
  %firstDot = alloca i1
  %ch = alloca i8
  %data = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %tmp.StringRef24 = alloca %StringRef
  %tmp.StringRef30 = alloca %StringRef
  %tmp.StringRef36 = alloca %StringRef
  %tmp.StringRef42 = alloca %StringRef
  %tmp.StringRef48 = alloca %StringRef
  %tmp.StringRef54 = alloca %StringRef
  %tmp.StringRef60 = alloca %StringRef
  %tmp.StringRef66 = alloca %StringRef
  %tmp.StringRef72 = alloca %StringRef
  %tmp.StringRef78 = alloca %StringRef
  %tmp.StringRef84 = alloca %StringRef
  %tmp.StringRef90 = alloca %StringRef
  %tmp.StringRef96 = alloca %StringRef
  %tmp.StringRef102 = alloca %StringRef
  %tmp.StringRef108 = alloca %StringRef
  %tmp.StringRef114 = alloca %StringRef
  %tmp.StringRef120 = alloca %StringRef
  %tmp.StringRef126 = alloca %StringRef
  %tmp.StringRef132 = alloca %StringRef
  %tmp.StringRef138 = alloca %StringRef
  %tmp.StringRef144 = alloca %StringRef
  %tmp.StringRef150 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  store i1 false, i1* %allowSymbolChars
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 3
  %3 = getelementptr inbounds %Token, %Token* %2, i32 0, i32 2
  %4 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %4, i32 0, i32 2
  %6 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  call void @"+=.473"(%String* %3, i8 %6)
  %7 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %8 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %7, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %8)
  store i1 true, i1* %firstDot
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %9 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %10 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %9, i32 0, i32 2
  %11 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %10)
  br i1 %11, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %12 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %13 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %12, i32 0, i32 2
  %14 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %13)
  store i8 %14, i8* %ch
  br label %if_block

while_step:                                       ; preds = %if_end7
  %15 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %16 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %15, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %16)
  br label %while_block

while_end:                                        ; preds = %if_then, %while_block
  %17 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %18 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %17, i32 0, i32 3
  %19 = getelementptr inbounds %Token, %Token* %18, i32 0, i32 2
  %20 = call %StringRef @asStringRef(%String* %19)
  call void @ctor.56(%StringRef* %data, %StringRef %20)
  br label %if_block16

if_block:                                         ; preds = %while_body
  %21 = load i8, i8* %ch
  %22 = call i1 @isAlpha(i8 %21)
  %23 = xor i1 true, %22
  br i1 %23, label %cond.true1, label %cond.false2

if_then:                                          ; preds = %cond.end
  br label %while_end

if_end:                                           ; preds = %dumy_block, %cond.end
  %24 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %25 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %24, i32 0, i32 3
  %26 = getelementptr inbounds %Token, %Token* %25, i32 0, i32 2
  %27 = load i8, i8* %ch
  call void @"+=.473"(%String* %26, i8 %27)
  br label %if_block5

cond.true:                                        ; preds = %cond.end3
  %28 = load i8, i8* %ch
  %29 = call i1 @isDigit(i8 %28)
  %30 = xor i1 true, %29
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %30, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res4, label %if_then, label %if_end

cond.true1:                                       ; preds = %if_block
  %31 = load i8, i8* %ch
  %32 = icmp ne i8 %31, 95
  br label %cond.end3

cond.false2:                                      ; preds = %if_block
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %32, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block5:                                        ; preds = %if_end
  %33 = load i8, i8* %ch
  %34 = icmp eq i8 %33, 95
  br i1 %34, label %cond.true8, label %cond.false9

if_then6:                                         ; preds = %cond.end10
  %35 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %36 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %35, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %36)
  br label %if_block12

if_end7:                                          ; preds = %if_end14, %cond.end10
  br label %while_step

cond.true8:                                       ; preds = %if_block5
  %37 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %38 = call i8 @peekChar(%SparrowScanner* %37)
  %39 = call i1 @isOpCharDot(i8 %38)
  br label %cond.end10

cond.false9:                                      ; preds = %if_block5
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond.res11 = phi i1 [ %39, %cond.true8 ], [ false, %cond.false9 ]
  br i1 %cond.res11, label %if_then6, label %if_end7

if_block12:                                       ; preds = %if_then6
  %40 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %41 = call i1 @parseOperator(%SparrowScanner* %40)
  br i1 %41, label %if_then13, label %if_end14

if_then13:                                        ; preds = %if_block12
  %42 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %42, i32 37)
  ret void

if_end14:                                         ; preds = %dumy_block15, %if_block12
  br label %if_end7

dumy_block15:                                     ; No predecessors!
  br label %if_end14

if_block16:                                       ; preds = %while_end
  %43 = load %StringRef, %StringRef* %data
  %44 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %45 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.14, i32 0, i32 0), i8** %44
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.14, i32 0, i32 5), i8** %45
  %46 = load %StringRef, %StringRef* %tmp.StringRef
  %47 = call i1 @"=="(%StringRef %43, %StringRef %46)
  br i1 %47, label %if_then17, label %if_else

if_then17:                                        ; preds = %if_block16
  %48 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %48, i32 11)
  ret void

if_else:                                          ; preds = %if_block16
  br label %if_block20

if_end18:                                         ; preds = %if_end23, %dumy_block19
  ret void

dumy_block19:                                     ; No predecessors!
  br label %if_end18

if_block20:                                       ; preds = %if_else
  %49 = load %StringRef, %StringRef* %data
  %50 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef24, i32 0, i32 0
  %51 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef24, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.15, i32 0, i32 0), i8** %50
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.15, i32 0, i32 5), i8** %51
  %52 = load %StringRef, %StringRef* %tmp.StringRef24
  %53 = call i1 @"=="(%StringRef %49, %StringRef %52)
  br i1 %53, label %if_then21, label %if_else22

if_then21:                                        ; preds = %if_block20
  %54 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %54, i32 12)
  ret void

if_else22:                                        ; preds = %if_block20
  br label %if_block26

if_end23:                                         ; preds = %if_end29, %dumy_block25
  br label %if_end18

dumy_block25:                                     ; No predecessors!
  br label %if_end23

if_block26:                                       ; preds = %if_else22
  %55 = load %StringRef, %StringRef* %data
  %56 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef30, i32 0, i32 0
  %57 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef30, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.16, i32 0, i32 0), i8** %56
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.16, i32 0, i32 7), i8** %57
  %58 = load %StringRef, %StringRef* %tmp.StringRef30
  %59 = call i1 @"=="(%StringRef %55, %StringRef %58)
  br i1 %59, label %if_then27, label %if_else28

if_then27:                                        ; preds = %if_block26
  %60 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %60, i32 4)
  ret void

if_else28:                                        ; preds = %if_block26
  br label %if_block32

if_end29:                                         ; preds = %if_end35, %dumy_block31
  br label %if_end23

dumy_block31:                                     ; No predecessors!
  br label %if_end29

if_block32:                                       ; preds = %if_else28
  %61 = load %StringRef, %StringRef* %data
  %62 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef36, i32 0, i32 0
  %63 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef36, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.17, i32 0, i32 0), i8** %62
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.17, i32 0, i32 8), i8** %63
  %64 = load %StringRef, %StringRef* %tmp.StringRef36
  %65 = call i1 @"=="(%StringRef %61, %StringRef %64)
  br i1 %65, label %if_then33, label %if_else34

if_then33:                                        ; preds = %if_block32
  %66 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %66, i32 13)
  ret void

if_else34:                                        ; preds = %if_block32
  br label %if_block38

if_end35:                                         ; preds = %if_end41, %dumy_block37
  br label %if_end29

dumy_block37:                                     ; No predecessors!
  br label %if_end35

if_block38:                                       ; preds = %if_else34
  %67 = load %StringRef, %StringRef* %data
  %68 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef42, i32 0, i32 0
  %69 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef42, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.18, i32 0, i32 0), i8** %68
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.18, i32 0, i32 8), i8** %69
  %70 = load %StringRef, %StringRef* %tmp.StringRef42
  %71 = call i1 @"=="(%StringRef %67, %StringRef %70)
  br i1 %71, label %if_then39, label %if_else40

if_then39:                                        ; preds = %if_block38
  %72 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %72, i32 5)
  ret void

if_else40:                                        ; preds = %if_block38
  br label %if_block44

if_end41:                                         ; preds = %if_end47, %dumy_block43
  br label %if_end35

dumy_block43:                                     ; No predecessors!
  br label %if_end41

if_block44:                                       ; preds = %if_else40
  %73 = load %StringRef, %StringRef* %data
  %74 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef48, i32 0, i32 0
  %75 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef48, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.19, i32 0, i32 0), i8** %74
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.19, i32 0, i32 3), i8** %75
  %76 = load %StringRef, %StringRef* %tmp.StringRef48
  %77 = call i1 @"=="(%StringRef %73, %StringRef %76)
  br i1 %77, label %if_then45, label %if_else46

if_then45:                                        ; preds = %if_block44
  %78 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %78, i32 6)
  ret void

if_else46:                                        ; preds = %if_block44
  br label %if_block50

if_end47:                                         ; preds = %if_end53, %dumy_block49
  br label %if_end41

dumy_block49:                                     ; No predecessors!
  br label %if_end47

if_block50:                                       ; preds = %if_else46
  %79 = load %StringRef, %StringRef* %data
  %80 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef54, i32 0, i32 0
  %81 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef54, i32 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.20, i32 0, i32 0), i8** %80
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.20, i32 0, i32 2), i8** %81
  %82 = load %StringRef, %StringRef* %tmp.StringRef54
  %83 = call i1 @"=="(%StringRef %79, %StringRef %82)
  br i1 %83, label %if_then51, label %if_else52

if_then51:                                        ; preds = %if_block50
  %84 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %84, i32 16)
  ret void

if_else52:                                        ; preds = %if_block50
  br label %if_block56

if_end53:                                         ; preds = %if_end59, %dumy_block55
  br label %if_end47

dumy_block55:                                     ; No predecessors!
  br label %if_end53

if_block56:                                       ; preds = %if_else52
  %85 = load %StringRef, %StringRef* %data
  %86 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef60, i32 0, i32 0
  %87 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef60, i32 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.21, i32 0, i32 0), i8** %86
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.21, i32 0, i32 4), i8** %87
  %88 = load %StringRef, %StringRef* %tmp.StringRef60
  %89 = call i1 @"=="(%StringRef %85, %StringRef %88)
  br i1 %89, label %if_then57, label %if_else58

if_then57:                                        ; preds = %if_block56
  %90 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %90, i32 24)
  ret void

if_else58:                                        ; preds = %if_block56
  br label %if_block62

if_end59:                                         ; preds = %if_end65, %dumy_block61
  br label %if_end53

dumy_block61:                                     ; No predecessors!
  br label %if_end59

if_block62:                                       ; preds = %if_else58
  %91 = load %StringRef, %StringRef* %data
  %92 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef66, i32 0, i32 0
  %93 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef66, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.22, i32 0, i32 0), i8** %92
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.22, i32 0, i32 5), i8** %93
  %94 = load %StringRef, %StringRef* %tmp.StringRef66
  %95 = call i1 @"=="(%StringRef %91, %StringRef %94)
  br i1 %95, label %if_then63, label %if_else64

if_then63:                                        ; preds = %if_block62
  %96 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %96, i32 21)
  ret void

if_else64:                                        ; preds = %if_block62
  br label %if_block68

if_end65:                                         ; preds = %if_end71, %dumy_block67
  br label %if_end59

dumy_block67:                                     ; No predecessors!
  br label %if_end65

if_block68:                                       ; preds = %if_else64
  %97 = load %StringRef, %StringRef* %data
  %98 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef72, i32 0, i32 0
  %99 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef72, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.23, i32 0, i32 0), i8** %98
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.23, i32 0, i32 7), i8** %99
  %100 = load %StringRef, %StringRef* %tmp.StringRef72
  %101 = call i1 @"=="(%StringRef %97, %StringRef %100)
  br i1 %101, label %if_then69, label %if_else70

if_then69:                                        ; preds = %if_block68
  %102 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %102, i32 14)
  ret void

if_else70:                                        ; preds = %if_block68
  br label %if_block74

if_end71:                                         ; preds = %if_end77, %dumy_block73
  br label %if_end65

dumy_block73:                                     ; No predecessors!
  br label %if_end71

if_block74:                                       ; preds = %if_else70
  %103 = load %StringRef, %StringRef* %data
  %104 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef78, i32 0, i32 0
  %105 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef78, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.24, i32 0, i32 0), i8** %104
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.24, i32 0, i32 3), i8** %105
  %106 = load %StringRef, %StringRef* %tmp.StringRef78
  %107 = call i1 @"=="(%StringRef %103, %StringRef %106)
  br i1 %107, label %if_then75, label %if_else76

if_then75:                                        ; preds = %if_block74
  %108 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %108, i32 15)
  ret void

if_else76:                                        ; preds = %if_block74
  br label %if_block80

if_end77:                                         ; preds = %if_end83, %dumy_block79
  br label %if_end71

dumy_block79:                                     ; No predecessors!
  br label %if_end77

if_block80:                                       ; preds = %if_else76
  %109 = load %StringRef, %StringRef* %data
  %110 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef84, i32 0, i32 0
  %111 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef84, i32 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.25, i32 0, i32 0), i8** %110
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.25, i32 0, i32 6), i8** %111
  %112 = load %StringRef, %StringRef* %tmp.StringRef84
  %113 = call i1 @"=="(%StringRef %109, %StringRef %112)
  br i1 %113, label %if_then81, label %if_else82

if_then81:                                        ; preds = %if_block80
  %114 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %114, i32 3)
  ret void

if_else82:                                        ; preds = %if_block80
  br label %if_block86

if_end83:                                         ; preds = %if_end89, %dumy_block85
  br label %if_end77

dumy_block85:                                     ; No predecessors!
  br label %if_end83

if_block86:                                       ; preds = %if_else82
  %115 = load %StringRef, %StringRef* %data
  %116 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef90, i32 0, i32 0
  %117 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef90, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.26, i32 0, i32 0), i8** %116
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.26, i32 0, i32 3), i8** %117
  %118 = load %StringRef, %StringRef* %tmp.StringRef90
  %119 = call i1 @"=="(%StringRef %115, %StringRef %118)
  br i1 %119, label %if_then87, label %if_else88

if_then87:                                        ; preds = %if_block86
  %120 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %120, i32 7)
  ret void

if_else88:                                        ; preds = %if_block86
  br label %if_block92

if_end89:                                         ; preds = %if_end95, %dumy_block91
  br label %if_end83

dumy_block91:                                     ; No predecessors!
  br label %if_end89

if_block92:                                       ; preds = %if_else88
  %121 = load %StringRef, %StringRef* %data
  %122 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef96, i32 0, i32 0
  %123 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef96, i32 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.27, i32 0, i32 0), i8** %122
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.27, i32 0, i32 6), i8** %123
  %124 = load %StringRef, %StringRef* %tmp.StringRef96
  %125 = call i1 @"=="(%StringRef %121, %StringRef %124)
  br i1 %125, label %if_then93, label %if_else94

if_then93:                                        ; preds = %if_block92
  %126 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %126, i32 2)
  ret void

if_else94:                                        ; preds = %if_block92
  br label %if_block98

if_end95:                                         ; preds = %if_end101, %dumy_block97
  br label %if_end89

dumy_block97:                                     ; No predecessors!
  br label %if_end95

if_block98:                                       ; preds = %if_else94
  %127 = load %StringRef, %StringRef* %data
  %128 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef102, i32 0, i32 0
  %129 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef102, i32 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.28, i32 0, i32 0), i8** %128
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.28, i32 0, i32 4), i8** %129
  %130 = load %StringRef, %StringRef* %tmp.StringRef102
  %131 = call i1 @"=="(%StringRef %127, %StringRef %130)
  br i1 %131, label %if_then99, label %if_else100

if_then99:                                        ; preds = %if_block98
  %132 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %132, i32 22)
  ret void

if_else100:                                       ; preds = %if_block98
  br label %if_block104

if_end101:                                        ; preds = %if_end107, %dumy_block103
  br label %if_end95

dumy_block103:                                    ; No predecessors!
  br label %if_end101

if_block104:                                      ; preds = %if_else100
  %133 = load %StringRef, %StringRef* %data
  %134 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef108, i32 0, i32 0
  %135 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef108, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.29, i32 0, i32 0), i8** %134
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.29, i32 0, i32 7), i8** %135
  %136 = load %StringRef, %StringRef* %tmp.StringRef108
  %137 = call i1 @"=="(%StringRef %133, %StringRef %136)
  br i1 %137, label %if_then105, label %if_else106

if_then105:                                       ; preds = %if_block104
  %138 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %138, i32 8)
  ret void

if_else106:                                       ; preds = %if_block104
  br label %if_block110

if_end107:                                        ; preds = %if_end113, %dumy_block109
  br label %if_end101

dumy_block109:                                    ; No predecessors!
  br label %if_end107

if_block110:                                      ; preds = %if_else106
  %139 = load %StringRef, %StringRef* %data
  %140 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef114, i32 0, i32 0
  %141 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef114, i32 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.30, i32 0, i32 0), i8** %140
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.30, i32 0, i32 6), i8** %141
  %142 = load %StringRef, %StringRef* %tmp.StringRef114
  %143 = call i1 @"=="(%StringRef %139, %StringRef %142)
  br i1 %143, label %if_then111, label %if_else112

if_then111:                                       ; preds = %if_block110
  %144 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %144, i32 17)
  ret void

if_else112:                                       ; preds = %if_block110
  br label %if_block116

if_end113:                                        ; preds = %if_end119, %dumy_block115
  br label %if_end107

dumy_block115:                                    ; No predecessors!
  br label %if_end113

if_block116:                                      ; preds = %if_else112
  %145 = load %StringRef, %StringRef* %data
  %146 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef120, i32 0, i32 0
  %147 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef120, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.31, i32 0, i32 0), i8** %146
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.31, i32 0, i32 5), i8** %147
  %148 = load %StringRef, %StringRef* %tmp.StringRef120
  %149 = call i1 @"=="(%StringRef %145, %StringRef %148)
  br i1 %149, label %if_then117, label %if_else118

if_then117:                                       ; preds = %if_block116
  %150 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %150, i32 18)
  ret void

if_else118:                                       ; preds = %if_block116
  br label %if_block122

if_end119:                                        ; preds = %if_end125, %dumy_block121
  br label %if_end113

dumy_block121:                                    ; No predecessors!
  br label %if_end119

if_block122:                                      ; preds = %if_else118
  %151 = load %StringRef, %StringRef* %data
  %152 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef126, i32 0, i32 0
  %153 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef126, i32 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.32, i32 0, i32 0), i8** %152
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.32, i32 0, i32 4), i8** %153
  %154 = load %StringRef, %StringRef* %tmp.StringRef126
  %155 = call i1 @"=="(%StringRef %151, %StringRef %154)
  br i1 %155, label %if_then123, label %if_else124

if_then123:                                       ; preds = %if_block122
  %156 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %156, i32 23)
  ret void

if_else124:                                       ; preds = %if_block122
  br label %if_block128

if_end125:                                        ; preds = %if_end131, %dumy_block127
  br label %if_end119

dumy_block127:                                    ; No predecessors!
  br label %if_end125

if_block128:                                      ; preds = %if_else124
  %157 = load %StringRef, %StringRef* %data
  %158 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef132, i32 0, i32 0
  %159 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef132, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.33, i32 0, i32 0), i8** %158
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.33, i32 0, i32 3), i8** %159
  %160 = load %StringRef, %StringRef* %tmp.StringRef132
  %161 = call i1 @"=="(%StringRef %157, %StringRef %160)
  br i1 %161, label %if_then129, label %if_else130

if_then129:                                       ; preds = %if_block128
  %162 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %162, i32 19)
  ret void

if_else130:                                       ; preds = %if_block128
  br label %if_block134

if_end131:                                        ; preds = %if_end137, %dumy_block133
  br label %if_end125

dumy_block133:                                    ; No predecessors!
  br label %if_end131

if_block134:                                      ; preds = %if_else130
  %163 = load %StringRef, %StringRef* %data
  %164 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef138, i32 0, i32 0
  %165 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef138, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.34, i32 0, i32 0), i8** %164
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.34, i32 0, i32 5), i8** %165
  %166 = load %StringRef, %StringRef* %tmp.StringRef138
  %167 = call i1 @"=="(%StringRef %163, %StringRef %166)
  br i1 %167, label %if_then135, label %if_else136

if_then135:                                       ; preds = %if_block134
  %168 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %168, i32 9)
  ret void

if_else136:                                       ; preds = %if_block134
  br label %if_block140

if_end137:                                        ; preds = %if_end143, %dumy_block139
  br label %if_end131

dumy_block139:                                    ; No predecessors!
  br label %if_end137

if_block140:                                      ; preds = %if_else136
  %169 = load %StringRef, %StringRef* %data
  %170 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef144, i32 0, i32 0
  %171 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef144, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.35, i32 0, i32 0), i8** %170
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.35, i32 0, i32 3), i8** %171
  %172 = load %StringRef, %StringRef* %tmp.StringRef144
  %173 = call i1 @"=="(%StringRef %169, %StringRef %172)
  br i1 %173, label %if_then141, label %if_else142

if_then141:                                       ; preds = %if_block140
  %174 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %174, i32 10)
  ret void

if_else142:                                       ; preds = %if_block140
  br label %if_block146

if_end143:                                        ; preds = %if_end149, %dumy_block145
  br label %if_end137

dumy_block145:                                    ; No predecessors!
  br label %if_end143

if_block146:                                      ; preds = %if_else142
  %175 = load %StringRef, %StringRef* %data
  %176 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef150, i32 0, i32 0
  %177 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef150, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.36, i32 0, i32 0), i8** %176
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.36, i32 0, i32 5), i8** %177
  %178 = load %StringRef, %StringRef* %tmp.StringRef150
  %179 = call i1 @"=="(%StringRef %175, %StringRef %178)
  br i1 %179, label %if_then147, label %if_else148

if_then147:                                       ; preds = %if_block146
  %180 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %180, i32 20)
  ret void

if_else148:                                       ; preds = %if_block146
  %181 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %181, i32 37)
  ret void

if_end149:                                        ; preds = %dumy_block152, %dumy_block151
  br label %if_end143

dumy_block151:                                    ; No predecessors!
  br label %if_end149

dumy_block152:                                    ; No predecessors!
  br label %if_end149
}

; Function Attrs: noinline nounwind
define void @parseNumeric(%TokenType* sret %_result, %SparrowScanner* %this) #5 {
  %_result.addr = alloca %TokenType*
  store %TokenType* %_result, %TokenType** %_result.addr
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %isLong = alloca i1
  %isUnsigned = alloca i1
  %isFloating = alloca i1
  %type = alloca i32
  %ch = alloca i8
  %ch2 = alloca i8
  %ch3 = alloca i8
  %tmp.this = alloca i32
  %tmp.this1 = alloca i64
  %tmp.this2 = alloca i64
  %tmp.this11 = alloca i64
  %tmp.this12 = alloca i64
  %tmp.this21 = alloca i64
  %tmp.this22 = alloca i64
  %tmp.this23 = alloca i64
  %funptr = alloca i1 (i8)*
  %funptr55 = alloca i1 (i8)*
  %tmp.this69 = alloca %String
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %tmp.this90 = alloca i8
  %tmp.this91 = alloca %TokenType
  %tmp.this92 = alloca %TokenType
  %tmp.this104 = alloca %TokenType
  %tmp.this105 = alloca %TokenType
  %tmp.this117 = alloca %TokenType
  %tmp.this118 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  store i1 false, i1* %isLong
  store i1 false, i1* %isUnsigned
  store i1 false, i1* %isFloating
  store i32 0, i32* %type
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  store i8 %3, i8* %ch
  %4 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %5 = call i8 @peekChar(%SparrowScanner* %4)
  %6 = call i8 @toLower(i8 %5)
  store i8 %6, i8* %ch2
  %7 = load %SparrowScanner*, %SparrowScanner** %this.addr
  store i32 2, i32* %tmp.this
  %8 = load i32, i32* %tmp.this
  %9 = call i8 @peekChar.476(%SparrowScanner* %7, i32 %8)
  %10 = call i8 @toLower(i8 %9)
  store i8 %10, i8* %ch3
  br label %if_block

if_block:                                         ; preds = %code
  %11 = load i8, i8* %ch
  %12 = icmp eq i8 %11, 48
  br i1 %12, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %13 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %14 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %13, i32 0, i32 2
  store i64 2, i64* %tmp.this1
  %15 = load i64, i64* %tmp.this1
  call void @advance.469(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %14, i64 %15)
  %16 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %17 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %16, i32 0, i32 2
  store i64 16, i64* %tmp.this2
  %18 = load i64, i64* %tmp.this2
  %19 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %20 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %19, i32 0, i32 3
  %21 = getelementptr inbounds %Token, %Token* %20, i32 0, i32 2
  %22 = call i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %17, i64 %18, %String* %21)
  %23 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %24 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %23, i32 0, i32 3
  %25 = getelementptr inbounds %Token, %Token* %24, i32 0, i32 3
  store i64 %22, i64* %25
  br label %if_end

if_else:                                          ; preds = %cond.end
  br label %if_block3

if_end:                                           ; preds = %if_end6, %if_then
  br label %if_block66

cond.true:                                        ; preds = %if_block
  %26 = load i8, i8* %ch2
  %27 = icmp eq i8 %26, 120
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %27, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_else

if_block3:                                        ; preds = %if_else
  %28 = load i8, i8* %ch
  %29 = icmp eq i8 %28, 48
  br i1 %29, label %cond.true7, label %cond.false8

if_then4:                                         ; preds = %cond.end9
  %30 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %31 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %30, i32 0, i32 2
  store i64 2, i64* %tmp.this11
  %32 = load i64, i64* %tmp.this11
  call void @advance.469(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %31, i64 %32)
  %33 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %34 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %33, i32 0, i32 2
  store i64 2, i64* %tmp.this12
  %35 = load i64, i64* %tmp.this12
  %36 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %37 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %36, i32 0, i32 3
  %38 = getelementptr inbounds %Token, %Token* %37, i32 0, i32 2
  %39 = call i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %34, i64 %35, %String* %38)
  %40 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %41 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %40, i32 0, i32 3
  %42 = getelementptr inbounds %Token, %Token* %41, i32 0, i32 3
  store i64 %39, i64* %42
  br label %if_end6

if_else5:                                         ; preds = %cond.end9
  br label %if_block13

if_end6:                                          ; preds = %if_end16, %if_then4
  br label %if_end

cond.true7:                                       ; preds = %if_block3
  %43 = load i8, i8* %ch2
  %44 = icmp eq i8 %43, 98
  br label %cond.end9

cond.false8:                                      ; preds = %if_block3
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res10 = phi i1 [ %44, %cond.true7 ], [ false, %cond.false8 ]
  br i1 %cond.res10, label %if_then4, label %if_else5

if_block13:                                       ; preds = %if_else5
  %45 = load i8, i8* %ch
  %46 = icmp eq i8 %45, 48
  br i1 %46, label %cond.true17, label %cond.false18

if_then14:                                        ; preds = %cond.end19
  %47 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %48 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %47, i32 0, i32 2
  store i64 1, i64* %tmp.this21
  %49 = load i64, i64* %tmp.this21
  call void @advance.469(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %48, i64 %49)
  %50 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %51 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %50, i32 0, i32 2
  store i64 8, i64* %tmp.this22
  %52 = load i64, i64* %tmp.this22
  %53 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %54 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %53, i32 0, i32 3
  %55 = getelementptr inbounds %Token, %Token* %54, i32 0, i32 2
  %56 = call i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %51, i64 %52, %String* %55)
  %57 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %58 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %57, i32 0, i32 3
  %59 = getelementptr inbounds %Token, %Token* %58, i32 0, i32 3
  store i64 %56, i64* %59
  br label %if_end16

if_else15:                                        ; preds = %cond.end19
  %60 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %61 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %60, i32 0, i32 2
  store i64 10, i64* %tmp.this23
  %62 = load i64, i64* %tmp.this23
  %63 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %64 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %63, i32 0, i32 3
  %65 = getelementptr inbounds %Token, %Token* %64, i32 0, i32 2
  %66 = call i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %61, i64 %62, %String* %65)
  %67 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %68 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %67, i32 0, i32 3
  %69 = getelementptr inbounds %Token, %Token* %68, i32 0, i32 3
  store i64 %66, i64* %69
  br label %if_block24

if_end16:                                         ; preds = %if_end26, %if_then14
  br label %if_end6

cond.true17:                                      ; preds = %if_block13
  %70 = load i8, i8* %ch2
  %71 = icmp eq i8 %70, 111
  br label %cond.end19

cond.false18:                                     ; preds = %if_block13
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond.res20 = phi i1 [ %71, %cond.true17 ], [ false, %cond.false18 ]
  br i1 %cond.res20, label %if_then14, label %if_else15

if_block24:                                       ; preds = %if_else15
  %72 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %73 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %72, i32 0, i32 2
  %74 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %73)
  br i1 %74, label %if_then25, label %if_end26

if_then25:                                        ; preds = %if_block24
  %75 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %76 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %75, i32 0, i32 2
  %77 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %76)
  %78 = call i8 @toLower(i8 %77)
  store i8 %78, i8* %ch
  br label %if_block27

if_end26:                                         ; preds = %if_end29, %if_block24
  br label %if_end16

if_block27:                                       ; preds = %if_then25
  %79 = load i8, i8* %ch
  %80 = icmp eq i8 %79, 46
  br i1 %80, label %cond.true39, label %cond.false40

if_then28:                                        ; preds = %cond.end32
  store i1 true, i1* %isFloating
  br label %if_block46

if_end29:                                         ; preds = %if_end58, %cond.end32
  br label %if_end26

cond.true30:                                      ; preds = %cond.end35
  br label %cond.end32

cond.false31:                                     ; preds = %cond.end35
  %81 = load i8, i8* %ch
  %82 = icmp eq i8 %81, 100
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond.res45 = phi i1 [ true, %cond.true30 ], [ %82, %cond.false31 ]
  br i1 %cond.res45, label %if_then28, label %if_end29

cond.true33:                                      ; preds = %cond.end38
  br label %cond.end35

cond.false34:                                     ; preds = %cond.end38
  %83 = load i8, i8* %ch
  %84 = icmp eq i8 %83, 102
  br label %cond.end35

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond.res44 = phi i1 [ true, %cond.true33 ], [ %84, %cond.false34 ]
  br i1 %cond.res44, label %cond.true30, label %cond.false31

cond.true36:                                      ; preds = %cond.end41
  br label %cond.end38

cond.false37:                                     ; preds = %cond.end41
  %85 = load i8, i8* %ch
  %86 = icmp eq i8 %85, 101
  br label %cond.end38

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond.res43 = phi i1 [ true, %cond.true36 ], [ %86, %cond.false37 ]
  br i1 %cond.res43, label %cond.true33, label %cond.false34

cond.true39:                                      ; preds = %if_block27
  %87 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %88 = call i8 @peekChar(%SparrowScanner* %87)
  %89 = call i1 @isOpCharDot(i8 %88)
  %90 = xor i1 true, %89
  br label %cond.end41

cond.false40:                                     ; preds = %if_block27
  br label %cond.end41

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond.res42 = phi i1 [ %90, %cond.true39 ], [ false, %cond.false40 ]
  br i1 %cond.res42, label %cond.true36, label %cond.false37

if_block46:                                       ; preds = %if_then28
  %91 = load i8, i8* %ch
  %92 = icmp eq i8 %91, 46
  br i1 %92, label %if_then47, label %if_end48

if_then47:                                        ; preds = %if_block46
  %93 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @advanceAndCapture1(%SparrowScanner* %93)
  %94 = load %SparrowScanner*, %SparrowScanner** %this.addr
  store i1 (i8)* @isDigit, i1 (i8)** %funptr
  %95 = bitcast i1 (i8)** %funptr to %"FunctionPtr1[Bool, Char]"*
  %96 = load %"FunctionPtr1[Bool, Char]", %"FunctionPtr1[Bool, Char]"* %95
  call void @advanceAndCaptureDigit(%SparrowScanner* %94, %"FunctionPtr1[Bool, Char]" %96)
  br label %if_end48

if_end48:                                         ; preds = %if_then47, %if_block46
  br label %if_block49

if_block49:                                       ; preds = %if_end48
  %97 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %98 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %97, i32 0, i32 2
  %99 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %98)
  br i1 %99, label %if_then50, label %if_end51

if_then50:                                        ; preds = %if_block49
  %100 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %101 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %100, i32 0, i32 2
  %102 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %101)
  %103 = call i8 @toLower(i8 %102)
  store i8 %103, i8* %ch
  br label %if_block52

if_end51:                                         ; preds = %if_end54, %if_block49
  br label %if_block56

if_block52:                                       ; preds = %if_then50
  %104 = load i8, i8* %ch
  %105 = icmp eq i8 %104, 101
  br i1 %105, label %if_then53, label %if_end54

if_then53:                                        ; preds = %if_block52
  %106 = load %SparrowScanner*, %SparrowScanner** %this.addr
  call void @advanceAndCapture1(%SparrowScanner* %106)
  %107 = load %SparrowScanner*, %SparrowScanner** %this.addr
  store i1 (i8)* @isDigit, i1 (i8)** %funptr55
  %108 = bitcast i1 (i8)** %funptr55 to %"FunctionPtr1[Bool, Char]"*
  %109 = load %"FunctionPtr1[Bool, Char]", %"FunctionPtr1[Bool, Char]"* %108
  call void @advanceAndCaptureDigit(%SparrowScanner* %107, %"FunctionPtr1[Bool, Char]" %109)
  br label %if_end54

if_end54:                                         ; preds = %if_then53, %if_block52
  br label %if_end51

if_block56:                                       ; preds = %if_end51
  %110 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %111 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %110, i32 0, i32 2
  %112 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %111)
  br i1 %112, label %if_then57, label %if_end58

if_then57:                                        ; preds = %if_block56
  store i1 true, i1* %isLong
  %113 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %114 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %113, i32 0, i32 2
  %115 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %114)
  %116 = call i8 @toLower(i8 %115)
  store i8 %116, i8* %ch
  br label %if_block59

if_end58:                                         ; preds = %if_end62, %if_block56
  br label %if_end29

if_block59:                                       ; preds = %if_then57
  %117 = load i8, i8* %ch
  %118 = icmp eq i8 %117, 102
  br i1 %118, label %if_then60, label %if_else61

if_then60:                                        ; preds = %if_block59
  store i1 false, i1* %isLong
  %119 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %120 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %119, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %120)
  br label %if_end62

if_else61:                                        ; preds = %if_block59
  br label %if_block63

if_end62:                                         ; preds = %if_end65, %if_then60
  br label %if_end58

if_block63:                                       ; preds = %if_else61
  %121 = load i8, i8* %ch
  %122 = icmp eq i8 %121, 100
  br i1 %122, label %if_then64, label %if_end65

if_then64:                                        ; preds = %if_block63
  %123 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %124 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %123, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %124)
  br label %if_end65

if_end65:                                         ; preds = %if_then64, %if_block63
  br label %if_end62

if_block66:                                       ; preds = %if_end
  %125 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %126 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %125, i32 0, i32 3
  %127 = getelementptr inbounds %Token, %Token* %126, i32 0, i32 2
  %128 = call i1 @isEmpty.397(%String* %127)
  br i1 %128, label %if_then67, label %if_end68

if_then67:                                        ; preds = %if_block66
  %129 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %130 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %131 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str.37, i32 0, i32 0), i8** %130
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str.37, i32 0, i32 23), i8** %131
  %132 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %132, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %tmp.this69, %StringRef* %"$tmpForRef")
  call void @reportError(%SparrowScanner* %129, %String* %tmp.this69)
  call void @dtor.261(%String* %tmp.this69)
  %133 = load %TokenType*, %TokenType** %_result.addr
  call void @ctor.417(%TokenType* %133, i32 0)
  ret void

if_end68:                                         ; preds = %dumy_block, %if_block66
  br label %if_block70

dumy_block:                                       ; No predecessors!
  br label %if_end68

if_block70:                                       ; preds = %if_end68
  %134 = load i1, i1* %isFloating
  %135 = xor i1 true, %134
  br i1 %135, label %if_then71, label %if_end72

if_then71:                                        ; preds = %if_block70
  br label %if_block73

if_end72:                                         ; preds = %if_end82, %if_block70
  br label %if_block87

if_block73:                                       ; preds = %if_then71
  %136 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %137 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %136, i32 0, i32 2
  %138 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %137)
  br i1 %138, label %cond.true76, label %cond.false77

if_then74:                                        ; preds = %cond.end78
  store i1 true, i1* %isUnsigned
  %139 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %140 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %139, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %140)
  br label %if_end75

if_end75:                                         ; preds = %if_then74, %cond.end78
  br label %if_block80

cond.true76:                                      ; preds = %if_block73
  %141 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %142 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %141, i32 0, i32 2
  %143 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %142)
  %144 = call i8 @toLower(i8 %143)
  %145 = icmp eq i8 %144, 117
  br label %cond.end78

cond.false77:                                     ; preds = %if_block73
  br label %cond.end78

cond.end78:                                       ; preds = %cond.false77, %cond.true76
  %cond.res79 = phi i1 [ %145, %cond.true76 ], [ false, %cond.false77 ]
  br i1 %cond.res79, label %if_then74, label %if_end75

if_block80:                                       ; preds = %if_end75
  %146 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %147 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %146, i32 0, i32 2
  %148 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %147)
  br i1 %148, label %cond.true83, label %cond.false84

if_then81:                                        ; preds = %cond.end85
  store i1 true, i1* %isLong
  %149 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %150 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %149, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %150)
  br label %if_end82

if_end82:                                         ; preds = %if_then81, %cond.end85
  br label %if_end72

cond.true83:                                      ; preds = %if_block80
  %151 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %152 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %151, i32 0, i32 2
  %153 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %152)
  %154 = call i8 @toLower(i8 %153)
  %155 = icmp eq i8 %154, 108
  br label %cond.end85

cond.false84:                                     ; preds = %if_block80
  br label %cond.end85

cond.end85:                                       ; preds = %cond.false84, %cond.true83
  %cond.res86 = phi i1 [ %155, %cond.true83 ], [ false, %cond.false84 ]
  br i1 %cond.res86, label %if_then81, label %if_end82

if_block87:                                       ; preds = %if_end72
  %156 = load i1, i1* %isFloating
  br i1 %156, label %if_then88, label %if_end89

if_then88:                                        ; preds = %if_block87
  %157 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %158 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %157, i32 0, i32 3
  %159 = getelementptr inbounds %Token, %Token* %158, i32 0, i32 2
  store i8 0, i8* %tmp.this90
  %160 = load i8, i8* %tmp.this90
  call void @"+=.473"(%String* %159, i8 %160)
  %161 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %162 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %161, i32 0, i32 3
  %163 = getelementptr inbounds %Token, %Token* %162, i32 0, i32 2
  %164 = call %StringRef @asStringRef(%String* %163)
  %165 = call double @asDouble(%StringRef %164)
  %166 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %167 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %166, i32 0, i32 3
  %168 = getelementptr inbounds %Token, %Token* %167, i32 0, i32 4
  store double %165, double* %168
  %169 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %170 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %169, i32 0, i32 3
  %171 = getelementptr inbounds %Token, %Token* %170, i32 0, i32 2
  call void @popBack.477(%String* %171)
  %172 = load %TokenType*, %TokenType** %_result.addr
  %173 = load i1, i1* %isLong
  br i1 %173, label %cond_alt1, label %cond_alt2

if_end89:                                         ; preds = %cond_destruct_end95, %if_block87
  br label %if_block97

cond_alt1:                                        ; preds = %if_then88
  call void @ctor.417(%TokenType* %tmp.this91, i32 46)
  br label %cond_end

cond_alt2:                                        ; preds = %if_then88
  call void @ctor.417(%TokenType* %tmp.this92, i32 45)
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi %TokenType* [ %tmp.this91, %cond_alt1 ], [ %tmp.this92, %cond_alt2 ]
  call void @ctor.203(%TokenType* %172, %TokenType* %cond)
  br i1 %173, label %cond_destruct_alt1, label %cond_destruct_alt2

cond_destruct_alt1:                               ; preds = %cond_end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %cond_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void

cond_destruct_alt193:                             ; preds = %dumy_block96
  br label %cond_destruct_end95

cond_destruct_alt294:                             ; preds = %dumy_block96
  br label %cond_destruct_end95

cond_destruct_end95:                              ; preds = %cond_destruct_alt294, %cond_destruct_alt193
  br label %if_end89

dumy_block96:                                     ; No predecessors!
  br i1 %173, label %cond_destruct_alt193, label %cond_destruct_alt294

if_block97:                                       ; preds = %if_end89
  %174 = load i1, i1* %isUnsigned
  br i1 %174, label %if_then98, label %if_else99

if_then98:                                        ; preds = %if_block97
  %175 = load %TokenType*, %TokenType** %_result.addr
  %176 = load i1, i1* %isLong
  br i1 %176, label %cond_alt1101, label %cond_alt2102

if_else99:                                        ; preds = %if_block97
  %177 = load %TokenType*, %TokenType** %_result.addr
  %178 = load i1, i1* %isLong
  br i1 %178, label %cond_alt1114, label %cond_alt2115

if_end100:                                        ; preds = %cond_destruct_end125, %cond_destruct_end112
  ret void

cond_alt1101:                                     ; preds = %if_then98
  call void @ctor.417(%TokenType* %tmp.this104, i32 44)
  br label %cond_end103

cond_alt2102:                                     ; preds = %if_then98
  call void @ctor.417(%TokenType* %tmp.this105, i32 43)
  br label %cond_end103

cond_end103:                                      ; preds = %cond_alt2102, %cond_alt1101
  %cond106 = phi %TokenType* [ %tmp.this104, %cond_alt1101 ], [ %tmp.this105, %cond_alt2102 ]
  call void @ctor.203(%TokenType* %175, %TokenType* %cond106)
  br i1 %176, label %cond_destruct_alt1107, label %cond_destruct_alt2108

cond_destruct_alt1107:                            ; preds = %cond_end103
  br label %cond_destruct_end109

cond_destruct_alt2108:                            ; preds = %cond_end103
  br label %cond_destruct_end109

cond_destruct_end109:                             ; preds = %cond_destruct_alt2108, %cond_destruct_alt1107
  ret void

cond_destruct_alt1110:                            ; preds = %dumy_block113
  br label %cond_destruct_end112

cond_destruct_alt2111:                            ; preds = %dumy_block113
  br label %cond_destruct_end112

cond_destruct_end112:                             ; preds = %cond_destruct_alt2111, %cond_destruct_alt1110
  br label %if_end100

dumy_block113:                                    ; No predecessors!
  br i1 %176, label %cond_destruct_alt1110, label %cond_destruct_alt2111

cond_alt1114:                                     ; preds = %if_else99
  call void @ctor.417(%TokenType* %tmp.this117, i32 42)
  br label %cond_end116

cond_alt2115:                                     ; preds = %if_else99
  call void @ctor.417(%TokenType* %tmp.this118, i32 41)
  br label %cond_end116

cond_end116:                                      ; preds = %cond_alt2115, %cond_alt1114
  %cond119 = phi %TokenType* [ %tmp.this117, %cond_alt1114 ], [ %tmp.this118, %cond_alt2115 ]
  call void @ctor.203(%TokenType* %177, %TokenType* %cond119)
  br i1 %178, label %cond_destruct_alt1120, label %cond_destruct_alt2121

cond_destruct_alt1120:                            ; preds = %cond_end116
  br label %cond_destruct_end122

cond_destruct_alt2121:                            ; preds = %cond_end116
  br label %cond_destruct_end122

cond_destruct_end122:                             ; preds = %cond_destruct_alt2121, %cond_destruct_alt1120
  ret void

cond_destruct_alt1123:                            ; preds = %dumy_block126
  br label %cond_destruct_end125

cond_destruct_alt2124:                            ; preds = %dumy_block126
  br label %cond_destruct_end125

cond_destruct_end125:                             ; preds = %cond_destruct_alt2124, %cond_destruct_alt1123
  br label %if_end100

dumy_block126:                                    ; No predecessors!
  br i1 %178, label %cond_destruct_alt1123, label %cond_destruct_alt2124
}

; Function Attrs: inlinehint nounwind
define internal i64 @consumeDigits(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r, i64 %base, %String* %capture) #4 {
  %r.addr = alloca %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*
  store %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %r, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %base.addr = alloca i64
  store i64 %base, i64* %base.addr
  %capture.addr = alloca %String*
  store %String* %capture, %String** %capture.addr
  %res = alloca i64
  %tmp.this = alloca i64
  %tmp.this8 = alloca i64
  %tmp.this24 = alloca i64
  br label %code

code:                                             ; preds = %0
  store i64 0, i64* %res
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load i64, i64* %base.addr
  store i64 16, i64* %tmp.this
  %2 = load i64, i64* %tmp.this
  %3 = icmp eq i64 %1, %2
  br i1 %3, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  br label %while_block

if_else:                                          ; preds = %if_block
  br label %while_block9

if_end:                                           ; preds = %while_end12, %while_end
  %4 = load i64, i64* %res
  ret i64 %4

while_block:                                      ; preds = %while_step, %if_then
  %5 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %6 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  br i1 %6, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  br label %if_block5

while_step:                                       ; preds = %if_end7
  %7 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %7)
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_end

cond.true:                                        ; preds = %while_block
  %8 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %9 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %8)
  %10 = call i1 @isXdigit(i8 %9)
  br i1 %10, label %cond.true1, label %cond.false2

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.end3
  %cond.res4 = phi i1 [ %cond.res, %cond.end3 ], [ false, %cond.false ]
  br i1 %cond.res4, label %while_body, label %while_end

cond.true1:                                       ; preds = %cond.true
  br label %cond.end3

cond.false2:                                      ; preds = %cond.true
  %11 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %12 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %11)
  %13 = icmp eq i8 %12, 95
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ true, %cond.true1 ], [ %13, %cond.false2 ]
  br label %cond.end

if_block5:                                        ; preds = %while_body
  %14 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %15 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %14)
  %16 = icmp ne i8 %15, 95
  br i1 %16, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  %17 = load %String*, %String** %capture.addr
  %18 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %19 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %18)
  call void @"+=.473"(%String* %17, i8 %19)
  %20 = load i64, i64* %res
  %21 = load i64, i64* %base.addr
  %22 = mul i64 %20, %21
  store i64 %22, i64* %res
  %23 = load i64, i64* %res
  %24 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %25 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %24)
  %26 = call i32 @getXdigitVal(i8 %25)
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %tmp.this8
  %28 = load i64, i64* %tmp.this8
  %29 = add i64 %23, %28
  store i64 %29, i64* %res
  br label %if_end7

if_end7:                                          ; preds = %if_then6, %if_block5
  br label %while_step

while_block9:                                     ; preds = %while_step11, %if_else
  %30 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %31 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %30)
  br i1 %31, label %cond.true13, label %cond.false14

while_body10:                                     ; preds = %cond.end15
  br label %if_block21

while_step11:                                     ; preds = %if_end23
  %32 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %32)
  br label %while_block9

while_end12:                                      ; preds = %cond.end15
  br label %if_end

cond.true13:                                      ; preds = %while_block9
  %33 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %34 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %33)
  %35 = call i1 @isXdigit(i8 %34)
  br i1 %35, label %cond.true16, label %cond.false17

cond.false14:                                     ; preds = %while_block9
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.end18
  %cond.res20 = phi i1 [ %cond.res19, %cond.end18 ], [ false, %cond.false14 ]
  br i1 %cond.res20, label %while_body10, label %while_end12

cond.true16:                                      ; preds = %cond.true13
  br label %cond.end18

cond.false17:                                     ; preds = %cond.true13
  %36 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %37 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %36)
  %38 = icmp eq i8 %37, 95
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond.res19 = phi i1 [ true, %cond.true16 ], [ %38, %cond.false17 ]
  br label %cond.end15

if_block21:                                       ; preds = %while_body10
  %39 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %40 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %39)
  %41 = icmp ne i8 %40, 95
  br i1 %41, label %if_then22, label %if_end23

if_then22:                                        ; preds = %if_block21
  %42 = load %String*, %String** %capture.addr
  %43 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %44 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %43)
  call void @"+=.473"(%String* %42, i8 %44)
  %45 = load i64, i64* %res
  %46 = load i64, i64* %base.addr
  %47 = mul i64 %45, %46
  store i64 %47, i64* %res
  %48 = load i64, i64* %res
  %49 = load %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"*, %"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"** %r.addr
  %50 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %49)
  %51 = call i32 @getDigitVal(i8 %50)
  %52 = zext i32 %51 to i64
  store i64 %52, i64* %tmp.this24
  %53 = load i64, i64* %tmp.this24
  %54 = add i64 %48, %53
  store i64 %54, i64* %res
  br label %if_end23

if_end23:                                         ; preds = %if_then22, %if_block21
  br label %while_step11
}

; Function Attrs: inlinehint nounwind
define internal i1 @isXdigit(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isxdigit(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @isxdigit(i32)

; Function Attrs: inlinehint nounwind
define internal i32 @getDigitVal(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  %tmp.this1 = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  call void @_ass_32_8z(i32* %tmp.this1, i8 48)
  %3 = load i32, i32* %tmp.this1
  %4 = sub i32 %2, %3
  ret i32 %4
}

; Function Attrs: inlinehint nounwind
define internal void @advanceAndCaptureDigit(%SparrowScanner* %this, %"FunctionPtr1[Bool, Char]" %pred) #4 {
  %this.addr = alloca %SparrowScanner*
  store %SparrowScanner* %this, %SparrowScanner** %this.addr
  %pred.addr = alloca %"FunctionPtr1[Bool, Char]"
  store %"FunctionPtr1[Bool, Char]" %pred, %"FunctionPtr1[Bool, Char]"* %pred.addr
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %2 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %1, i32 0, i32 2
  %3 = call i1 @"pre_!!.442"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %2)
  br i1 %3, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  br label %if_block

while_step:                                       ; preds = %if_end
  %4 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %5 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %4, i32 0, i32 2
  call void @popFront.423(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %5)
  br label %while_block

while_end:                                        ; preds = %cond.end
  ret void

cond.true:                                        ; preds = %while_block
  %6 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %7 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %6, i32 0, i32 2
  %8 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %7)
  %9 = call i1 @"().475"(%"FunctionPtr1[Bool, Char]"* %pred.addr, i8 %8)
  br i1 %9, label %cond.true1, label %cond.false2

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.end3
  %cond.res4 = phi i1 [ %cond.res, %cond.end3 ], [ false, %cond.false ]
  br i1 %cond.res4, label %while_body, label %while_end

cond.true1:                                       ; preds = %cond.true
  br label %cond.end3

cond.false2:                                      ; preds = %cond.true
  %10 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %11 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %10, i32 0, i32 2
  %12 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %11)
  %13 = icmp eq i8 %12, 95
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ true, %cond.true1 ], [ %13, %cond.false2 ]
  br label %cond.end

if_block:                                         ; preds = %while_body
  %14 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %15 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %14, i32 0, i32 2
  %16 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %15)
  %17 = icmp ne i8 %16, 95
  br i1 %17, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %18 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %19 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %18, i32 0, i32 3
  %20 = getelementptr inbounds %Token, %Token* %19, i32 0, i32 2
  %21 = load %SparrowScanner*, %SparrowScanner** %this.addr
  %22 = getelementptr inbounds %SparrowScanner, %SparrowScanner* %21, i32 0, i32 2
  %23 = call i8 @"pre_*"(%"LocationSyncCharRange[RangeWithLookahead[BufferedCharSourceRange]]"* %22)
  call void @"+=.473"(%String* %20, i8 %23)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  br label %while_step
}

; Function Attrs: inlinehint nounwind
define internal void @popBack.477(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 1
  %3 = load %String*, %String** %this.addr
  %4 = getelementptr inbounds %String, %String* %3, i32 0, i32 1
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %4
  store i64 -1, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %5, i64 %6)
  call void @"=.200"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %"$tmpC")
  %7 = load %String*, %String** %this.addr
  %8 = getelementptr inbounds %String, %String* %7, i32 0, i32 1
  %9 = load %"RawPtr[Char]", %"RawPtr[Char]"* %8
  %10 = call i8* @value(%"RawPtr[Char]" %9)
  %11 = load i8, i8* %10
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @toString.478(%String* sret %_result, %StringRef %a1, i8 %a2, %StringRef %a3, i32 %a4, i8 %a5) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %a1.addr = alloca %StringRef
  store %StringRef %a1, %StringRef* %a1.addr
  %a2.addr = alloca i8
  store i8 %a2, i8* %a2.addr
  %a3.addr = alloca %StringRef
  store %StringRef %a3, %StringRef* %a3.addr
  %a4.addr = alloca i32
  store i32 %a4, i32* %a4.addr
  %a5.addr = alloca i8
  store i8 %a5, i8* %a5.addr
  %s = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.452(%StringOutputStream* %s)
  %1 = call %StringOutputStream* @"<<"(%StringOutputStream* %s, %StringRef* %a1.addr)
  %2 = call %StringOutputStream* @"<<.479"(%StringOutputStream* %1, i8* %a2.addr)
  %3 = call %StringOutputStream* @"<<"(%StringOutputStream* %2, %StringRef* %a3.addr)
  %4 = call %StringOutputStream* @"<<.483"(%StringOutputStream* %3, i32* %a4.addr)
  %5 = call %StringOutputStream* @"<<.479"(%StringOutputStream* %4, i8* %a5.addr)
  %6 = load %String*, %String** %_result.addr
  %7 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.189(%String* %6, %String* %7)
  call void @dtor.454(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.454(%StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringOutputStream* @"<<.479"(%StringOutputStream* %s, i8* %x) #4 {
  %s.addr = alloca %StringOutputStream*
  store %StringOutputStream* %s, %StringOutputStream** %s.addr
  %x.addr = alloca i8*
  store i8* %x, i8** %x.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %s.addr
  %2 = load i8*, i8** %x.addr
  %3 = load i8, i8* %2
  call void @"<<<.480"(%StringOutputStream* %1, i8 %3)
  %4 = load %StringOutputStream*, %StringOutputStream** %s.addr
  ret %StringOutputStream* %4
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.480"(%StringOutputStream* %this, i8 %x) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %x.addr = alloca i8
  store i8 %x, i8* %x.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load i8, i8* %x.addr
  call void @append.481(%String* %2, i8 %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @append.481(%String* %this, i8 %value) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = load i8, i8* %value.addr
  %3 = load %String*, %String** %this.addr
  %4 = getelementptr inbounds %String, %String* %3, i32 0, i32 1
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %4
  %6 = call i8* @bytePtr(%"RawPtr[Char]" %5)
  %7 = load %String*, %String** %this.addr
  %8 = getelementptr inbounds %String, %String* %7, i32 0, i32 1
  %9 = load %"RawPtr[Char]", %"RawPtr[Char]"* %8
  %10 = call i8* @bytePtr(%"RawPtr[Char]" %9)
  call void @ctor.57(%StringRef* %tmp.this, i8* %6, i8* %10)
  %11 = load %StringRef, %StringRef* %tmp.this
  call void @insertBefore.482(%String* %1, i8 %2, %StringRef %11)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @insertBefore.482(%String* %this, i8 %value, %StringRef %pos) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  %pos.addr = alloca %StringRef
  store %StringRef %pos, %StringRef* %pos.addr
  %posCount = alloca i64
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  %p = alloca %"RawPtr[Char]"
  %tmp.this1 = alloca i64
  %q = alloca %"RawPtr[Char]"
  %tmp.this2 = alloca i64
  %"$tmpC3" = alloca %"RawPtr[Char]"
  %"$tmpC4" = alloca %"RawPtr[Char]"
  %tmp.this5 = alloca i64
  %"$tmpC6" = alloca %"RawPtr[Char]"
  %"$tmpC7" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %StringRef, %StringRef* %pos.addr
  call void @_frontPtr(%"RawPtr[Char]"* %"$tmpC", %StringRef %1)
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %3 = load %String*, %String** %this.addr
  %4 = getelementptr inbounds %String, %String* %3, i32 0, i32 0
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %4
  %6 = call i64 @diff(%"RawPtr[Char]" %2, %"RawPtr[Char]" %5)
  store i64 %6, i64* %posCount
  %7 = load %String*, %String** %this.addr
  %8 = load %String*, %String** %this.addr
  %9 = call i64 @size.190(%String* %8)
  store i64 1, i64* %tmp.this
  %10 = load i64, i64* %tmp.this
  %11 = add i64 %9, %10
  call void @reserve(%String* %7, i64 %11)
  %12 = load %String*, %String** %this.addr
  %13 = getelementptr inbounds %String, %String* %12, i32 0, i32 1
  %14 = load %"RawPtr[Char]", %"RawPtr[Char]"* %13
  store i64 -1, i64* %tmp.this1
  %15 = load i64, i64* %tmp.this1
  call void @advance(%"RawPtr[Char]"* %p, %"RawPtr[Char]" %14, i64 %15)
  %16 = load %String*, %String** %this.addr
  %17 = getelementptr inbounds %String, %String* %16, i32 0, i32 0
  %18 = load %"RawPtr[Char]", %"RawPtr[Char]"* %17
  %19 = load i64, i64* %posCount
  store i64 1, i64* %tmp.this2
  %20 = load i64, i64* %tmp.this2
  %21 = call i64 @_DiffType_opMinus(i64 %19, i64 %20)
  call void @advance(%"RawPtr[Char]"* %q, %"RawPtr[Char]" %18, i64 %21)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %22 = call i1 @"==.268"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %q)
  %23 = xor i1 true, %22
  br i1 %23, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %24 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  %25 = call i8* @value(%"RawPtr[Char]" %24)
  %26 = load i8, i8* %25
  %27 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC3", %"RawPtr[Char]" %27)
  %28 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC3"
  %29 = call i8* @value(%"RawPtr[Char]" %28)
  store i8 %26, i8* %29
  %30 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  %31 = call i8* @value(%"RawPtr[Char]" %30)
  %32 = load i8, i8* %31
  br label %while_step

while_step:                                       ; preds = %while_body
  %33 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  store i64 -1, i64* %tmp.this5
  %34 = load i64, i64* %tmp.this5
  call void @advance(%"RawPtr[Char]"* %"$tmpC4", %"RawPtr[Char]" %33, i64 %34)
  call void @"=.200"(%"RawPtr[Char]"* %p, %"RawPtr[Char]"* %"$tmpC4")
  br label %while_block

while_end:                                        ; preds = %while_block
  %35 = load i8, i8* %value.addr
  %36 = load %"RawPtr[Char]", %"RawPtr[Char]"* %p
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC6", %"RawPtr[Char]" %36)
  %37 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC6"
  %38 = call i8* @value(%"RawPtr[Char]" %37)
  store i8 %35, i8* %38
  %39 = load %String*, %String** %this.addr
  %40 = getelementptr inbounds %String, %String* %39, i32 0, i32 1
  %41 = load %String*, %String** %this.addr
  %42 = getelementptr inbounds %String, %String* %41, i32 0, i32 1
  %43 = load %"RawPtr[Char]", %"RawPtr[Char]"* %42
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC7", %"RawPtr[Char]" %43)
  call void @"=.200"(%"RawPtr[Char]"* %40, %"RawPtr[Char]"* %"$tmpC7")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringOutputStream* @"<<.483"(%StringOutputStream* %s, i32* %x) #4 {
  %s.addr = alloca %StringOutputStream*
  store %StringOutputStream* %s, %StringOutputStream** %s.addr
  %x.addr = alloca i32*
  store i32* %x, i32** %x.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %s.addr
  %2 = load i32*, i32** %x.addr
  %3 = load i32, i32* %2
  call void @"<<<.484"(%StringOutputStream* %1, i32 %3)
  %4 = load %StringOutputStream*, %StringOutputStream** %s.addr
  ret %StringOutputStream* %4
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.484"(%StringOutputStream* %this, i32 %x) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %x.addr = alloca i32
  store i32 %x, i32* %x.addr
  %"$tmpC" = alloca %String
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load i32, i32* %x.addr
  call void @intToString(%String* %"$tmpC", i32 %3)
  %4 = call %StringRef @all.485(%String* %"$tmpC")
  call void @append(%String* %2, %StringRef %4)
  call void @dtor.261(%String* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @all.485(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %tmp.this = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = call i8* @bytePtr(%"RawPtr[Char]" %3)
  %5 = load %String*, %String** %this.addr
  %6 = getelementptr inbounds %String, %String* %5, i32 0, i32 1
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %6
  %8 = call i8* @bytePtr(%"RawPtr[Char]" %7)
  call void @ctor.57(%StringRef* %tmp.this, i8* %4, i8* %8)
  %9 = load %StringRef, %StringRef* %tmp.this
  ret %StringRef %9
}

; Function Attrs: inlinehint nounwind
define internal void @intToString(%String* sret %_result, i32 %x) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %x.addr = alloca i32
  store i32 %x, i32* %x.addr
  %buf = alloca [12 x i8]
  %"$tmpForRef" = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %x.addr
  %2 = bitcast [12 x i8]* %buf to i8*
  call void @_Int_to_CString(i32 %1, i8* %2)
  %3 = load %String*, %String** %_result.addr
  %4 = bitcast [12 x i8]* %buf to i8*
  %5 = call %StringRef @_String_fromCString(i8* %4)
  store %StringRef %5, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %3, %StringRef* %"$tmpForRef")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"+=.486"(%"Vector[UInt]"* %this, i32* %value) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %value.addr = alloca i32*
  store i32* %value, i32** %value.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = load i32*, i32** %value.addr
  call void @pushBack.487(%"Vector[UInt]"* %1, i32* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack.487(%"Vector[UInt]"* %this, i32* %value) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %value.addr = alloca i32*
  store i32* %value, i32** %value.addr
  %t = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this5 = alloca i64
  %"$tmpC" = alloca %"RawPtr[UInt]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 1
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %4 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %3, i32 0, i32 2
  %5 = call i1 @"==.271"(%"RawPtr[UInt]"* %2, %"RawPtr[UInt]"* %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  store i64 2, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %8 = call i64 @capacity.488(%"Vector[UInt]"* %7)
  %9 = mul i64 %6, %8
  store i64 %9, i64* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %10 = load i32*, i32** %value.addr
  %11 = load i32, i32* %10
  %12 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %13 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %12, i32 0, i32 1
  %14 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %13
  %15 = call i32* @value.272(%"RawPtr[UInt]" %14)
  store i32 %11, i32* %15
  %16 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %17 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %16, i32 0, i32 1
  %18 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %19 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %18, i32 0, i32 1
  %20 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %19
  call void @advance.273(%"RawPtr[UInt]"* %"$tmpC", %"RawPtr[UInt]" %20)
  call void @"=.225"(%"RawPtr[UInt]"* %17, %"RawPtr[UInt]"* %"$tmpC")
  ret void

if_block1:                                        ; preds = %if_then
  %21 = load i64, i64* %t
  store i64 2, i64* %tmp.this4
  %22 = load i64, i64* %tmp.this4
  %23 = icmp slt i64 %21, %22
  br i1 %23, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 2, i64* %tmp.this5
  %24 = load i64, i64* %tmp.this5
  store i64 %24, i64* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %25 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %26 = load i64, i64* %t
  call void @reserve.489(%"Vector[UInt]"* %25, i64 %26)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i64 @capacity.488(%"Vector[UInt]"* %this) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 2
  %3 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %2
  %4 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %5 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %4, i32 0, i32 0
  %6 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %5
  %7 = call i64 @diff.223(%"RawPtr[UInt]" %3, %"RawPtr[UInt]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal void @reserve.489(%"Vector[UInt]"* %this, i64 %n) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %curCapacity = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this8 = alloca double
  %tmp.this9 = alloca double
  %tmp.this10 = alloca i64
  %tmp.this11 = alloca double
  %curSize = alloca i64
  %"$tmpC" = alloca %"RawPtr[UInt]"
  %"$tmpC12" = alloca %"RawPtr[UInt]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = call i64 @capacity.488(%"Vector[UInt]"* %1)
  store i64 %2, i64* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load i64, i64* %n.addr
  %4 = load i64, i64* %curCapacity
  %5 = icmp sle i64 %3, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %6 = load i64, i64* %n.addr
  store i64 8, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 8, i64* %tmp.this4
  %9 = load i64, i64* %tmp.this4
  store i64 %9, i64* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block5

if_block5:                                        ; preds = %if_end3
  %10 = load i64, i64* %n.addr
  %11 = sitofp i64 %10 to double
  store double %11, double* %tmp.this8
  %12 = load double, double* %tmp.this8
  %13 = load i64, i64* %curCapacity
  %14 = sitofp i64 %13 to double
  store double %14, double* %tmp.this9
  %15 = load double, double* %tmp.this9
  %16 = call double @_Double_opMul(double 2.000000e+00, double %15)
  %17 = call i1 @_Double_opLT(double %12, double %16)
  br i1 %17, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  %18 = load i64, i64* %curCapacity
  %19 = sitofp i64 %18 to double
  store double %19, double* %tmp.this11
  %20 = load double, double* %tmp.this11
  %21 = call double @_Double_opMul(double 2.000000e+00, double %20)
  %22 = fptoui double %21 to i64
  store i64 %22, i64* %tmp.this10
  %23 = load i64, i64* %tmp.this10
  store i64 %23, i64* %n.addr
  br label %if_end7

if_end7:                                          ; preds = %if_then6, %if_block5
  %24 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %25 = call i64 @size.222(%"Vector[UInt]"* %24)
  store i64 %25, i64* %curSize
  %26 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %27 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %26, i32 0, i32 0
  %28 = load i64, i64* %n.addr
  call void @reallocPtr.490(%"RawPtr[UInt]"* %27, i64 %28)
  %29 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %30 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %29, i32 0, i32 1
  %31 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %32 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %31, i32 0, i32 0
  %33 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %32
  %34 = load i64, i64* %curSize
  call void @advance.228(%"RawPtr[UInt]"* %"$tmpC", %"RawPtr[UInt]" %33, i64 %34)
  call void @"=.225"(%"RawPtr[UInt]"* %30, %"RawPtr[UInt]"* %"$tmpC")
  %35 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %36 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %35, i32 0, i32 2
  %37 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %38 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %37, i32 0, i32 0
  %39 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %38
  %40 = load i64, i64* %n.addr
  call void @advance.228(%"RawPtr[UInt]"* %"$tmpC12", %"RawPtr[UInt]" %39, i64 %40)
  call void @"=.225"(%"RawPtr[UInt]"* %36, %"RawPtr[UInt]"* %"$tmpC12")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reallocPtr.490(%"RawPtr[UInt]"* %this, i64 %n) #4 {
  %this.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %this, %"RawPtr[UInt]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %this.addr
  %2 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %1
  %3 = call i8* @bytePtr.224(%"RawPtr[UInt]" %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 4
  %6 = call i8* @realloc(i8* %3, i64 %5)
  %7 = bitcast i8* %6 to i32*
  %8 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %this.addr
  %9 = getelementptr inbounds %"RawPtr[UInt]", %"RawPtr[UInt]"* %8, i32 0, i32 0
  store i32* %7, i32** %9
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.491(%"RangeWithLookahead[SparrowScanner]"* %this) #4 {
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %1, i32 0, i32 1
  %3 = call i1 @isEmpty.492(%"Vector[Token]"* %2)
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.492(%"Vector[Token]"* %this) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 1
  %5 = call i1 @"==.218"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal void @front.493(%Token* sret %_result, %"RangeWithLookahead[SparrowScanner]"* %this) #4 {
  %_result.addr = alloca %Token*
  store %Token* %_result, %Token** %_result.addr
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %_result.addr
  %2 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %3 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %2, i32 0, i32 1
  %4 = call %Token* @front.494(%"Vector[Token]"* %3)
  call void @ctor.202(%Token* %1, %Token* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Token* @front.494(%"Vector[Token]"* %this) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %2
  %4 = call %Token* @value.219(%"RawPtr[Token]" %3)
  ret %Token* %4
}

; Function Attrs: noinline nounwind
define void @popFront.495(%"SparrowLayoutDecoder[SparrowScanner]"* %this) #5 {
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %tmp.this = alloca %TokenType
  %oldType = alloca %TokenType
  %"$tmpC" = alloca %Token
  %changeLine = alloca i1
  %"$tmpC1" = alloca %Token
  %tmp.this2 = alloca %TokenType
  %"$tmpC3" = alloca %Token
  %tmp.this4 = alloca %TokenType
  %"$tmpC5" = alloca %Token
  %tmp.this6 = alloca %TokenType
  %tk = alloca %Token
  %outsideParens = alloca i1
  %newCol = alloca i32
  %oldCol = alloca i32
  %tmp.this21 = alloca %TokenType
  %tmp.this22 = alloca i32
  %tmp.this35 = alloca %TokenType
  %tmp.this37 = alloca %TokenType
  %tmp.this39 = alloca %TokenType
  %tmp.this41 = alloca %TokenType
  %tmp.this57 = alloca %TokenType
  %tmp.this59 = alloca %TokenType
  %tmp.this69 = alloca i32
  %numDedents = alloca i32
  %tmp.this75 = alloca %TokenType
  %"$tmpC79" = alloca %String
  %tmp.StringRef = alloca %StringRef
  %tmp.StringRef80 = alloca %StringRef
  %tmp.this87 = alloca %TokenType
  %"$tmpForRef" = alloca i8
  %tmp.this92 = alloca %TokenType
  %"$tmpForRef93" = alloca i8
  %tmp.this98 = alloca %TokenType
  %"$tmpForRef99" = alloca i8
  %tmp.this107 = alloca %TokenType
  %tmp.this116 = alloca %TokenType
  %tmp.this124 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 5
  %3 = load i32, i32* %2
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %5, i32 0, i32 5
  %7 = call i32 @post_--.48(i32* %6)
  %8 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %9 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %8, i32 0, i32 4
  call void @ctor.417(%TokenType* %tmp.this, i32 26)
  call void @"=.298"(%TokenType* %9, %TokenType* %tmp.this)
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  %10 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  call void @front.496(%Token* %"$tmpC", %"SparrowLayoutDecoder[SparrowScanner]"* %10)
  %11 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  call void @ctor.203(%TokenType* %oldType, %TokenType* %11)
  call void @dtor.260(%Token* %"$tmpC")
  %12 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %13 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %12, i32 0, i32 0
  call void @popFront.497(%"RangeWithLookahead[SparrowScanner]"* %13)
  %14 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %15 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %14, i32 0, i32 0
  call void @front.493(%Token* %"$tmpC1", %"RangeWithLookahead[SparrowScanner]"* %15)
  %16 = getelementptr inbounds %Token, %Token* %"$tmpC1", i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this2, i32 1)
  %17 = call i1 @"==.352"(%TokenType* %16, %TokenType* %tmp.this2)
  br i1 %17, label %cond.true, label %cond.false

dumy_block:                                       ; No predecessors!
  br label %if_end

cond.true:                                        ; preds = %if_end
  br label %cond.end

cond.false:                                       ; preds = %if_end
  %18 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %19 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %18, i32 0, i32 0
  call void @front.493(%Token* %"$tmpC3", %"RangeWithLookahead[SparrowScanner]"* %19)
  %20 = getelementptr inbounds %Token, %Token* %"$tmpC3", i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this4, i32 0)
  %21 = call i1 @"==.352"(%TokenType* %20, %TokenType* %tmp.this4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ true, %cond.true ], [ %21, %cond.false ]
  store i1 %cond.res, i1* %changeLine
  br i1 %17, label %cond_destruct_alt1, label %cond_destruct_alt2

cond_destruct_alt1:                               ; preds = %cond.end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %cond.end
  call void @dtor.260(%Token* %"$tmpC3")
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  call void @dtor.260(%Token* %"$tmpC1")
  br label %while_block

while_block:                                      ; preds = %while_step, %cond_destruct_end
  %22 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %23 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %22, i32 0, i32 0
  call void @front.493(%Token* %"$tmpC5", %"RangeWithLookahead[SparrowScanner]"* %23)
  %24 = getelementptr inbounds %Token, %Token* %"$tmpC5", i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this6, i32 1)
  %25 = call i1 @"==.352"(%TokenType* %24, %TokenType* %tmp.this6)
  br i1 %25, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %26 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %27 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %26, i32 0, i32 0
  call void @popFront.497(%"RangeWithLookahead[SparrowScanner]"* %27)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  call void @dtor.260(%Token* %"$tmpC5")
  %28 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %29 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %28, i32 0, i32 0
  call void @front.493(%Token* %tk, %"RangeWithLookahead[SparrowScanner]"* %29)
  %30 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %31 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %30, i32 0, i32 3
  %32 = call i1 @isEmpty.416(%"Vector[Char]"* %31)
  br i1 %32, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %while_end
  br label %cond.end9

cond.false8:                                      ; preds = %while_end
  %33 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %34 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %33, i32 0, i32 3
  %35 = call i8* @back.511(%"Vector[Char]"* %34)
  %36 = load i8, i8* %35
  %37 = icmp eq i8 %36, 123
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res10 = phi i1 [ true, %cond.true7 ], [ %37, %cond.false8 ]
  store i1 %cond.res10, i1* %outsideParens
  br label %if_block11

if_block11:                                       ; preds = %cond.end9
  %38 = load i1, i1* %changeLine
  br i1 %38, label %cond.true14, label %cond.false15

if_then12:                                        ; preds = %cond.end16
  %39 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 0
  %40 = getelementptr inbounds %Location, %Location* %39, i32 0, i32 1
  %41 = getelementptr inbounds %LineCol, %LineCol* %40, i32 0, i32 1
  %42 = load i32, i32* %41
  store i32 %42, i32* %newCol
  %43 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %44 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %43, i32 0, i32 2
  %45 = call i32* @back.512(%"Vector[UInt]"* %44)
  %46 = load i32, i32* %45
  store i32 %46, i32* %oldCol
  br label %if_block18

if_end13:                                         ; preds = %cond_destruct_end83, %cond.end16
  br label %if_block84

cond.true14:                                      ; preds = %if_block11
  %47 = load i1, i1* %outsideParens
  br label %cond.end16

cond.false15:                                     ; preds = %if_block11
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond.res17 = phi i1 [ %47, %cond.true14 ], [ false, %cond.false15 ]
  br i1 %cond.res17, label %if_then12, label %if_end13

if_block18:                                       ; preds = %if_then12
  %48 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this21, i32 0)
  %49 = call i1 @"==.352"(%TokenType* %48, %TokenType* %tmp.this21)
  br i1 %49, label %if_then19, label %if_end20

if_then19:                                        ; preds = %if_block18
  store i32 1, i32* %tmp.this22
  %50 = load i32, i32* %tmp.this22
  store i32 %50, i32* %newCol
  br label %if_end20

if_end20:                                         ; preds = %if_then19, %if_block18
  br label %if_block23

if_block23:                                       ; preds = %if_end20
  %51 = load i32, i32* %newCol
  %52 = load i32, i32* %oldCol
  %53 = icmp eq i32 %51, %52
  br i1 %53, label %cond.true32, label %cond.false33

if_then24:                                        ; preds = %cond.end28
  %54 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %55 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %54, i32 0, i32 4
  call void @ctor.417(%TokenType* %tmp.this41, i32 32)
  call void @"=.298"(%TokenType* %55, %TokenType* %tmp.this41)
  %56 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %57 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %56, i32 0, i32 5
  store i32 1, i32* %57
  br label %if_end25

if_end25:                                         ; preds = %if_then24, %cond.end28
  br i1 %cond.res38, label %cond_destruct_alt142, label %cond_destruct_alt243

cond.true26:                                      ; preds = %cond.end31
  call void @ctor.417(%TokenType* %tmp.this39, i32 26)
  %58 = call i1 @"==.352"(%TokenType* %oldType, %TokenType* %tmp.this39)
  %59 = xor i1 true, %58
  br label %cond.end28

cond.false27:                                     ; preds = %cond.end31
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond.res40 = phi i1 [ %59, %cond.true26 ], [ false, %cond.false27 ]
  br i1 %cond.res40, label %if_then24, label %if_end25

cond.true29:                                      ; preds = %cond.end34
  call void @ctor.417(%TokenType* %tmp.this37, i32 32)
  %60 = call i1 @"==.352"(%TokenType* %oldType, %TokenType* %tmp.this37)
  %61 = xor i1 true, %60
  br label %cond.end31

cond.false30:                                     ; preds = %cond.end34
  br label %cond.end31

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond.res38 = phi i1 [ %61, %cond.true29 ], [ false, %cond.false30 ]
  br i1 %cond.res38, label %cond.true26, label %cond.false27

cond.true32:                                      ; preds = %if_block23
  %62 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this35, i32 25)
  %63 = call i1 @"==.352"(%TokenType* %62, %TokenType* %tmp.this35)
  %64 = xor i1 true, %63
  br label %cond.end34

cond.false33:                                     ; preds = %if_block23
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond.res36 = phi i1 [ %64, %cond.true32 ], [ false, %cond.false33 ]
  br i1 %cond.res36, label %cond.true29, label %cond.false30

cond_destruct_alt142:                             ; preds = %if_end25
  br label %cond_destruct_end44

cond_destruct_alt243:                             ; preds = %if_end25
  br label %cond_destruct_end44

cond_destruct_end44:                              ; preds = %cond_destruct_alt243, %cond_destruct_alt142
  br i1 %cond.res36, label %cond_destruct_alt145, label %cond_destruct_alt246

cond_destruct_alt145:                             ; preds = %cond_destruct_end44
  br label %cond_destruct_end47

cond_destruct_alt246:                             ; preds = %cond_destruct_end44
  br label %cond_destruct_end47

cond_destruct_end47:                              ; preds = %cond_destruct_alt246, %cond_destruct_alt145
  br i1 %53, label %cond_destruct_alt148, label %cond_destruct_alt249

cond_destruct_alt148:                             ; preds = %cond_destruct_end47
  br label %cond_destruct_end50

cond_destruct_alt249:                             ; preds = %cond_destruct_end47
  br label %cond_destruct_end50

cond_destruct_end50:                              ; preds = %cond_destruct_alt249, %cond_destruct_alt148
  br label %if_block51

if_block51:                                       ; preds = %cond_destruct_end50
  %65 = load i32, i32* %newCol
  %66 = load i32, i32* %oldCol
  %67 = icmp sgt i32 %65, %66
  br i1 %67, label %cond.true54, label %cond.false55

if_then52:                                        ; preds = %cond.end56
  %68 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %69 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %68, i32 0, i32 4
  call void @ctor.417(%TokenType* %tmp.this59, i32 25)
  call void @"=.298"(%TokenType* %69, %TokenType* %tmp.this59)
  %70 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %71 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %70, i32 0, i32 5
  store i32 1, i32* %71
  %72 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %73 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %72, i32 0, i32 2
  call void @"+=.486"(%"Vector[UInt]"* %73, i32* %newCol)
  br label %if_end53

if_end53:                                         ; preds = %if_then52, %cond.end56
  br i1 %67, label %cond_destruct_alt160, label %cond_destruct_alt261

cond.true54:                                      ; preds = %if_block51
  %74 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this57, i32 0)
  %75 = call i1 @"==.352"(%TokenType* %74, %TokenType* %tmp.this57)
  %76 = xor i1 true, %75
  br label %cond.end56

cond.false55:                                     ; preds = %if_block51
  br label %cond.end56

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond.res58 = phi i1 [ %76, %cond.true54 ], [ false, %cond.false55 ]
  br i1 %cond.res58, label %if_then52, label %if_end53

cond_destruct_alt160:                             ; preds = %if_end53
  br label %cond_destruct_end62

cond_destruct_alt261:                             ; preds = %if_end53
  br label %cond_destruct_end62

cond_destruct_end62:                              ; preds = %cond_destruct_alt261, %cond_destruct_alt160
  br label %if_block63

if_block63:                                       ; preds = %cond_destruct_end62
  %77 = load i32, i32* %newCol
  %78 = load i32, i32* %oldCol
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %cond.true66, label %cond.false67

if_then64:                                        ; preds = %cond.end68
  store i32 0, i32* %numDedents
  br label %while_block71

if_end65:                                         ; preds = %if_end78, %cond.end68
  br i1 %79, label %cond_destruct_alt181, label %cond_destruct_alt282

cond.true66:                                      ; preds = %if_block63
  %80 = load i32, i32* %newCol
  store i32 1, i32* %tmp.this69
  %81 = load i32, i32* %tmp.this69
  %82 = icmp sge i32 %80, %81
  br label %cond.end68

cond.false67:                                     ; preds = %if_block63
  br label %cond.end68

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond.res70 = phi i1 [ %82, %cond.true66 ], [ false, %cond.false67 ]
  br i1 %cond.res70, label %if_then64, label %if_end65

while_block71:                                    ; preds = %while_step73, %if_then64
  %83 = load i32, i32* %newCol
  %84 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %85 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %84, i32 0, i32 2
  %86 = call i32* @back.512(%"Vector[UInt]"* %85)
  %87 = load i32, i32* %86
  %88 = icmp slt i32 %83, %87
  br i1 %88, label %while_body72, label %while_end74

while_body72:                                     ; preds = %while_block71
  %89 = call i32 @"post_++.39"(i32* %numDedents)
  %90 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %91 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %90, i32 0, i32 2
  call void @popBack.514(%"Vector[UInt]"* %91)
  br label %while_step73

while_step73:                                     ; preds = %while_body72
  br label %while_block71

while_end74:                                      ; preds = %while_block71
  %92 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %93 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %92, i32 0, i32 4
  call void @ctor.417(%TokenType* %tmp.this75, i32 32)
  call void @"=.298"(%TokenType* %93, %TokenType* %tmp.this75)
  %94 = load i32, i32* %numDedents
  %95 = add i32 1, %94
  %96 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %97 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %96, i32 0, i32 5
  store i32 %95, i32* %97
  br label %if_block76

if_block76:                                       ; preds = %while_end74
  %98 = load i32, i32* %newCol
  %99 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %100 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %99, i32 0, i32 2
  %101 = call i32* @back.512(%"Vector[UInt]"* %100)
  %102 = load i32, i32* %101
  %103 = icmp ne i32 %98, %102
  br i1 %103, label %if_then77, label %if_end78

if_then77:                                        ; preds = %if_block76
  %104 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %105 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %104, i32 0, i32 1
  %106 = load %ErrorReporter, %ErrorReporter* %105
  %107 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 0
  %108 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %109 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @str.40, i32 0, i32 0), i8** %108
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @str.40, i32 0, i32 31), i8** %109
  %110 = load %StringRef, %StringRef* %tmp.StringRef
  %111 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %112 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %111, i32 0, i32 2
  %113 = call i32* @back.512(%"Vector[UInt]"* %112)
  %114 = load i32, i32* %113
  %115 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef80, i32 0, i32 0
  %116 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef80, i32 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.41, i32 0, i32 0), i8** %115
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.41, i32 0, i32 6), i8** %116
  %117 = load %StringRef, %StringRef* %tmp.StringRef80
  %118 = load i32, i32* %newCol
  call void @toString.515(%String* %"$tmpC79", %StringRef %110, i32 %114, %StringRef %117, i32 %118)
  call void @reportError.450(%ErrorReporter %106, %Location* %107, %String* %"$tmpC79")
  call void @dtor.261(%String* %"$tmpC79")
  br label %if_end78

if_end78:                                         ; preds = %if_then77, %if_block76
  br label %if_end65

cond_destruct_alt181:                             ; preds = %if_end65
  br label %cond_destruct_end83

cond_destruct_alt282:                             ; preds = %if_end65
  br label %cond_destruct_end83

cond_destruct_end83:                              ; preds = %cond_destruct_alt282, %cond_destruct_alt181
  br label %if_end13

if_block84:                                       ; preds = %if_end13
  %119 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this87, i32 29)
  %120 = call i1 @"==.352"(%TokenType* %119, %TokenType* %tmp.this87)
  br i1 %120, label %if_then85, label %if_else

if_then85:                                        ; preds = %if_block84
  %121 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %122 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %121, i32 0, i32 3
  store i8 40, i8* %"$tmpForRef"
  call void @"+="(%"Vector[Char]"* %122, i8* %"$tmpForRef")
  br label %if_end86

if_else:                                          ; preds = %if_block84
  br label %if_block88

if_end86:                                         ; preds = %if_end91, %if_then85
  call void @dtor.260(%Token* %tk)
  ret void

if_block88:                                       ; preds = %if_else
  %123 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this92, i32 27)
  %124 = call i1 @"==.352"(%TokenType* %123, %TokenType* %tmp.this92)
  br i1 %124, label %if_then89, label %if_else90

if_then89:                                        ; preds = %if_block88
  %125 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %126 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %125, i32 0, i32 3
  store i8 91, i8* %"$tmpForRef93"
  call void @"+="(%"Vector[Char]"* %126, i8* %"$tmpForRef93")
  br label %if_end91

if_else90:                                        ; preds = %if_block88
  br label %if_block94

if_end91:                                         ; preds = %if_end97, %if_then89
  br label %if_end86

if_block94:                                       ; preds = %if_else90
  %127 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this98, i32 25)
  %128 = call i1 @"==.352"(%TokenType* %127, %TokenType* %tmp.this98)
  br i1 %128, label %if_then95, label %if_else96

if_then95:                                        ; preds = %if_block94
  %129 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %130 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %129, i32 0, i32 3
  store i8 123, i8* %"$tmpForRef99"
  call void @"+="(%"Vector[Char]"* %130, i8* %"$tmpForRef99")
  br label %if_end97

if_else96:                                        ; preds = %if_block94
  br label %if_block100

if_end97:                                         ; preds = %if_end103, %if_then95
  br label %if_end91

if_block100:                                      ; preds = %if_else96
  %131 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this107, i32 30)
  %132 = call i1 @"==.352"(%TokenType* %131, %TokenType* %tmp.this107)
  br i1 %132, label %cond.true104, label %cond.false105

if_then101:                                       ; preds = %cond.end106
  %133 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %134 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %133, i32 0, i32 3
  call void @popBack.518(%"Vector[Char]"* %134)
  br label %if_end103

if_else102:                                       ; preds = %cond.end106
  br label %if_block109

if_end103:                                        ; preds = %if_end112, %if_then101
  br label %if_end97

cond.true104:                                     ; preds = %if_block100
  %135 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %136 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %135, i32 0, i32 3
  %137 = call i8* @back.511(%"Vector[Char]"* %136)
  %138 = load i8, i8* %137
  %139 = icmp eq i8 %138, 40
  br label %cond.end106

cond.false105:                                    ; preds = %if_block100
  br label %cond.end106

cond.end106:                                      ; preds = %cond.false105, %cond.true104
  %cond.res108 = phi i1 [ %139, %cond.true104 ], [ false, %cond.false105 ]
  br i1 %cond.res108, label %if_then101, label %if_else102

if_block109:                                      ; preds = %if_else102
  %140 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this116, i32 28)
  %141 = call i1 @"==.352"(%TokenType* %140, %TokenType* %tmp.this116)
  br i1 %141, label %cond.true113, label %cond.false114

if_then110:                                       ; preds = %cond.end115
  %142 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %143 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %142, i32 0, i32 3
  call void @popBack.518(%"Vector[Char]"* %143)
  br label %if_end112

if_else111:                                       ; preds = %cond.end115
  br label %if_block118

if_end112:                                        ; preds = %if_end120, %if_then110
  br label %if_end103

cond.true113:                                     ; preds = %if_block109
  %144 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %145 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %144, i32 0, i32 3
  %146 = call i8* @back.511(%"Vector[Char]"* %145)
  %147 = load i8, i8* %146
  %148 = icmp eq i8 %147, 91
  br label %cond.end115

cond.false114:                                    ; preds = %if_block109
  br label %cond.end115

cond.end115:                                      ; preds = %cond.false114, %cond.true113
  %cond.res117 = phi i1 [ %148, %cond.true113 ], [ false, %cond.false114 ]
  br i1 %cond.res117, label %if_then110, label %if_else111

if_block118:                                      ; preds = %if_else111
  %149 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this124, i32 26)
  %150 = call i1 @"==.352"(%TokenType* %149, %TokenType* %tmp.this124)
  br i1 %150, label %cond.true121, label %cond.false122

if_then119:                                       ; preds = %cond.end123
  %151 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %152 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %151, i32 0, i32 3
  call void @popBack.518(%"Vector[Char]"* %152)
  br label %if_end120

if_end120:                                        ; preds = %if_then119, %cond.end123
  br label %if_end112

cond.true121:                                     ; preds = %if_block118
  %153 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %154 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %153, i32 0, i32 3
  %155 = call i8* @back.511(%"Vector[Char]"* %154)
  %156 = load i8, i8* %155
  %157 = icmp eq i8 %156, 123
  br label %cond.end123

cond.false122:                                    ; preds = %if_block118
  br label %cond.end123

cond.end123:                                      ; preds = %cond.false122, %cond.true121
  %cond.res125 = phi i1 [ %157, %cond.true121 ], [ false, %cond.false122 ]
  br i1 %cond.res125, label %if_then119, label %if_end120
}

; Function Attrs: inlinehint nounwind
define internal void @front.496(%Token* sret %_result, %"SparrowLayoutDecoder[SparrowScanner]"* %this) #4 {
  %_result.addr = alloca %Token*
  store %Token* %_result, %Token** %_result.addr
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %tk = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 0
  call void @front.493(%Token* %tk, %"RangeWithLookahead[SparrowScanner]"* %2)
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %4 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %3, i32 0, i32 5
  %5 = load i32, i32* %4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %7 = getelementptr inbounds %Token, %Token* %tk, i32 0, i32 1
  %8 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %9 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %8, i32 0, i32 4
  call void @"=.298"(%TokenType* %7, %TokenType* %9)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %10 = load %Token*, %Token** %_result.addr
  call void @ctor.202(%Token* %10, %Token* %tk)
  call void @dtor.260(%Token* %tk)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.260(%Token* %tk)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.497(%"RangeWithLookahead[SparrowScanner]"* %this) #4 {
  %this.addr = alloca %"RangeWithLookahead[SparrowScanner]"*
  store %"RangeWithLookahead[SparrowScanner]"* %this, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %tmp.this = alloca i64
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %1, i32 0, i32 1
  store i64 0, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  call void @remove.498(%"Vector[Token]"* %2, i64 %3)
  br label %if_block

if_block:                                         ; preds = %code
  %4 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %5 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %4, i32 0, i32 1
  %6 = call i1 @isEmpty.492(%"Vector[Token]"* %5)
  br i1 %6, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %7 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %7, i32 0, i32 1
  %9 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %10 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %9, i32 0, i32 0
  call void @"post_++.411"(%Token* %"$tmpC", %SparrowScanner* %10)
  call void @"+=.409"(%"Vector[Token]"* %8, %Token* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC")
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  ret void

cond.true:                                        ; preds = %if_block
  %11 = load %"RangeWithLookahead[SparrowScanner]"*, %"RangeWithLookahead[SparrowScanner]"** %this.addr
  %12 = getelementptr inbounds %"RangeWithLookahead[SparrowScanner]", %"RangeWithLookahead[SparrowScanner]"* %11, i32 0, i32 0
  %13 = call i1 @"pre_!!.407"(%SparrowScanner* %12)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %13, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @remove.498(%"Vector[Token]"* %this, i64 %index) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %r = alloca %"ContiguousMemoryRange[Token]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  call void @all.499(%"ContiguousMemoryRange[Token]"* %r, %"Vector[Token]"* %1)
  %2 = load i64, i64* %index.addr
  call void @popFront.501(%"ContiguousMemoryRange[Token]"* %r, i64 %2)
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %4 = call i64 @size.209(%"Vector[Token]"* %3)
  %5 = load i64, i64* %index.addr
  %6 = call i64 @_SizeType_opMinus(i64 %4, i64 %5)
  store i64 1, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = call i64 @_SizeType_opMinus(i64 %6, i64 %7)
  call void @popBack.503(%"ContiguousMemoryRange[Token]"* %r, i64 %8)
  %9 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %10 = load %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %r
  call void @remove.504(%"Vector[Token]"* %9, %"ContiguousMemoryRange[Token]" %10)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @all.499(%"ContiguousMemoryRange[Token]"* sret %_result, %"Vector[Token]"* %this) #4 {
  %_result.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %_result, %"ContiguousMemoryRange[Token]"** %_result.addr
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %_result.addr
  %2 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %3 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %2, i32 0, i32 0
  %4 = load %"RawPtr[Token]", %"RawPtr[Token]"* %3
  %5 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %5, i32 0, i32 1
  %7 = load %"RawPtr[Token]", %"RawPtr[Token]"* %6
  call void @ctor.500(%"ContiguousMemoryRange[Token]"* %1, %"RawPtr[Token]" %4, %"RawPtr[Token]" %7)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.500(%"ContiguousMemoryRange[Token]"* %this, %"RawPtr[Token]" %f_begin, %"RawPtr[Token]" %f_end) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  %f_begin.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %f_begin, %"RawPtr[Token]"* %f_begin.addr
  %f_end.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %f_end, %"RawPtr[Token]"* %f_end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 0
  call void @ctor.217(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %f_begin.addr)
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 1
  call void @ctor.217(%"RawPtr[Token]"* %4, %"RawPtr[Token]"* %f_end.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.501(%"ContiguousMemoryRange[Token]"* %this, i64 %n) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %"$tmpC" = alloca %"RawPtr[Token]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 0
  %5 = load %"RawPtr[Token]", %"RawPtr[Token]"* %4
  %6 = load i64, i64* %n.addr
  store i64 %6, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  call void @advance.502(%"RawPtr[Token]"* %"$tmpC", %"RawPtr[Token]" %5, i64 %7)
  call void @"=.212"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advance.502(%"RawPtr[Token]"* sret %_result, %"RawPtr[Token]" %this, i64 %n) #4 {
  %_result.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %_result, %"RawPtr[Token]"** %_result.addr
  %this.addr = alloca %"RawPtr[Token]"
  store %"RawPtr[Token]" %this, %"RawPtr[Token]"* %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %_result.addr
  %2 = load %"RawPtr[Token]", %"RawPtr[Token]"* %this.addr
  %3 = call i8* @bytePtr.211(%"RawPtr[Token]" %2)
  %4 = load i64, i64* %n.addr
  store i64 72, i64* %tmp.this1
  %5 = load i64, i64* %tmp.this1
  %6 = mul i64 %4, %5
  store i64 %6, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = call i8* @ptrAdd(i8* %3, i64 %7)
  call void @ctor.216(%"RawPtr[Token]"* %1, i8* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @popBack.503(%"ContiguousMemoryRange[Token]"* %this, i64 %n) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %"$tmpC" = alloca %"RawPtr[Token]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 1
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 1
  %5 = load %"RawPtr[Token]", %"RawPtr[Token]"* %4
  %6 = load i64, i64* %n.addr
  store i64 %6, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = sub i64 0, %7
  call void @advance.502(%"RawPtr[Token]"* %"$tmpC", %"RawPtr[Token]" %5, i64 %8)
  call void @"=.212"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @remove.504(%"Vector[Token]"* %this, %"ContiguousMemoryRange[Token]" %range) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %range.addr = alloca %"ContiguousMemoryRange[Token]"
  store %"ContiguousMemoryRange[Token]" %range, %"ContiguousMemoryRange[Token]"* %range.addr
  %rBegin = alloca %"RawPtr[Token]"
  %rEnd = alloca %"RawPtr[Token]"
  %"$rangeVar" = alloca %"ContiguousMemoryRange[Token]"
  %el = alloca %Token*
  %"$tmpC" = alloca %"RawPtr[Token]"
  %"$tmpC5" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %range.addr
  call void @frontPtr.505(%"RawPtr[Token]"* %rBegin, %"ContiguousMemoryRange[Token]" %1)
  %2 = load %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %range.addr
  call void @backPtr.506(%"RawPtr[Token]"* %rEnd, %"ContiguousMemoryRange[Token]" %2)
  call void @ctor.507(%"ContiguousMemoryRange[Token]"* %"$rangeVar", %"ContiguousMemoryRange[Token]"* %range.addr)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %3 = load %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %"$rangeVar"
  %4 = call i1 @isEmpty.508(%"ContiguousMemoryRange[Token]" %3)
  %5 = xor i1 true, %4
  br i1 %5, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %6 = load %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %"$rangeVar"
  %7 = call %Token* @front.509(%"ContiguousMemoryRange[Token]" %6)
  store %Token* %7, %Token** %el
  %8 = load %Token*, %Token** %el
  call void @dtor.260(%Token* %8)
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.510(%"ContiguousMemoryRange[Token]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %while_block1

while_block1:                                     ; preds = %while_step3, %while_end
  %9 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %10 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %9, i32 0, i32 1
  %11 = call i1 @"==.218"(%"RawPtr[Token]"* %rEnd, %"RawPtr[Token]"* %10)
  %12 = xor i1 true, %11
  br i1 %12, label %while_body2, label %while_end4

while_body2:                                      ; preds = %while_block1
  %13 = load %"RawPtr[Token]", %"RawPtr[Token]"* %rBegin
  %14 = call %Token* @value.219(%"RawPtr[Token]" %13)
  %15 = load %"RawPtr[Token]", %"RawPtr[Token]"* %rEnd
  %16 = call %Token* @value.219(%"RawPtr[Token]" %15)
  call void @ctor.202(%Token* %14, %Token* %16)
  %17 = load %"RawPtr[Token]", %"RawPtr[Token]"* %rEnd
  %18 = call %Token* @value.219(%"RawPtr[Token]" %17)
  call void @dtor.260(%Token* %18)
  %19 = load %"RawPtr[Token]", %"RawPtr[Token]"* %rBegin
  call void @advance.220(%"RawPtr[Token]"* %"$tmpC", %"RawPtr[Token]" %19)
  call void @"=.212"(%"RawPtr[Token]"* %rBegin, %"RawPtr[Token]"* %"$tmpC")
  %20 = load %"RawPtr[Token]", %"RawPtr[Token]"* %rEnd
  call void @advance.220(%"RawPtr[Token]"* %"$tmpC5", %"RawPtr[Token]" %20)
  call void @"=.212"(%"RawPtr[Token]"* %rEnd, %"RawPtr[Token]"* %"$tmpC5")
  br label %while_step3

while_step3:                                      ; preds = %while_body2
  br label %while_block1

while_end4:                                       ; preds = %while_block1
  %21 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %22 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %21, i32 0, i32 1
  call void @"=.212"(%"RawPtr[Token]"* %22, %"RawPtr[Token]"* %rBegin)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @frontPtr.505(%"RawPtr[Token]"* sret %_result, %"ContiguousMemoryRange[Token]" %this) #4 {
  %_result.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %_result, %"RawPtr[Token]"** %_result.addr
  %this.addr = alloca %"ContiguousMemoryRange[Token]"
  store %"ContiguousMemoryRange[Token]" %this, %"ContiguousMemoryRange[Token]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %_result.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this.addr, i32 0, i32 0
  call void @ctor.217(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @backPtr.506(%"RawPtr[Token]"* sret %_result, %"ContiguousMemoryRange[Token]" %this) #4 {
  %_result.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %_result, %"RawPtr[Token]"** %_result.addr
  %this.addr = alloca %"ContiguousMemoryRange[Token]"
  store %"ContiguousMemoryRange[Token]" %this, %"ContiguousMemoryRange[Token]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Token]"*, %"RawPtr[Token]"** %_result.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this.addr, i32 0, i32 1
  call void @ctor.217(%"RawPtr[Token]"* %1, %"RawPtr[Token]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.507(%"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %other, %"ContiguousMemoryRange[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 0
  call void @ctor.217(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  %5 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %5, i32 0, i32 1
  %7 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %8 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %7, i32 0, i32 1
  call void @ctor.217(%"RawPtr[Token]"* %6, %"RawPtr[Token]"* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.508(%"ContiguousMemoryRange[Token]" %this) #4 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"
  store %"ContiguousMemoryRange[Token]" %this, %"ContiguousMemoryRange[Token]"* %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this.addr, i32 0, i32 1
  %2 = load %"RawPtr[Token]", %"RawPtr[Token]"* %1
  %3 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this.addr, i32 0, i32 0
  %4 = load %"RawPtr[Token]", %"RawPtr[Token]"* %3
  %5 = call i64 @diff.210(%"RawPtr[Token]" %2, %"RawPtr[Token]" %4)
  store i64 0, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = icmp sle i64 %5, %6
  ret i1 %7
}

; Function Attrs: inlinehint nounwind
define internal %Token* @front.509(%"ContiguousMemoryRange[Token]" %this) #4 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"
  store %"ContiguousMemoryRange[Token]" %this, %"ContiguousMemoryRange[Token]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %this.addr, i32 0, i32 0
  %2 = load %"RawPtr[Token]", %"RawPtr[Token]"* %1
  %3 = call %Token* @value.219(%"RawPtr[Token]" %2)
  ret %Token* %3
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.510(%"ContiguousMemoryRange[Token]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  %"$tmpC" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 0
  %5 = load %"RawPtr[Token]", %"RawPtr[Token]"* %4
  call void @advance.220(%"RawPtr[Token]"* %"$tmpC", %"RawPtr[Token]" %5)
  call void @"=.212"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i8* @back.511(%"Vector[Char]"* %this) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 1
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  store i64 -1, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %3, i64 %4)
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %6 = call i8* @value(%"RawPtr[Char]" %5)
  ret i8* %6
}

; Function Attrs: inlinehint nounwind
define internal i32* @back.512(%"Vector[UInt]"* %this) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %"$tmpC" = alloca %"RawPtr[UInt]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 1
  %3 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %2
  store i64 -1, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  call void @advance.513(%"RawPtr[UInt]"* %"$tmpC", %"RawPtr[UInt]" %3, i64 %4)
  %5 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %"$tmpC"
  %6 = call i32* @value.272(%"RawPtr[UInt]" %5)
  ret i32* %6
}

; Function Attrs: inlinehint nounwind
define internal void @advance.513(%"RawPtr[UInt]"* sret %_result, %"RawPtr[UInt]" %this, i64 %n) #4 {
  %_result.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %_result, %"RawPtr[UInt]"** %_result.addr
  %this.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %this, %"RawPtr[UInt]"* %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[UInt]"*, %"RawPtr[UInt]"** %_result.addr
  %2 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %this.addr
  %3 = call i8* @bytePtr.224(%"RawPtr[UInt]" %2)
  %4 = load i64, i64* %n.addr
  store i64 4, i64* %tmp.this1
  %5 = load i64, i64* %tmp.this1
  %6 = mul i64 %4, %5
  store i64 %6, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = call i8* @ptrAdd(i8* %3, i64 %7)
  call void @ctor.229(%"RawPtr[UInt]"* %1, i8* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popBack.514(%"Vector[UInt]"* %this) #4 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %"$tmpC" = alloca %"RawPtr[UInt]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 1
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %4 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %3, i32 0, i32 1
  %5 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %4
  store i64 -1, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  call void @advance.513(%"RawPtr[UInt]"* %"$tmpC", %"RawPtr[UInt]" %5, i64 %6)
  call void @"=.225"(%"RawPtr[UInt]"* %2, %"RawPtr[UInt]"* %"$tmpC")
  %7 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %8 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %7, i32 0, i32 1
  %9 = load %"RawPtr[UInt]", %"RawPtr[UInt]"* %8
  %10 = call i32* @value.272(%"RawPtr[UInt]" %9)
  %11 = load i32, i32* %10
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @toString.515(%String* sret %_result, %StringRef %a1, i32 %a2, %StringRef %a3, i32 %a4) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %a1.addr = alloca %StringRef
  store %StringRef %a1, %StringRef* %a1.addr
  %a2.addr = alloca i32
  store i32 %a2, i32* %a2.addr
  %a3.addr = alloca %StringRef
  store %StringRef %a3, %StringRef* %a3.addr
  %a4.addr = alloca i32
  store i32 %a4, i32* %a4.addr
  %s = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.452(%StringOutputStream* %s)
  %1 = call %StringOutputStream* @"<<"(%StringOutputStream* %s, %StringRef* %a1.addr)
  %2 = call %StringOutputStream* @"<<.516"(%StringOutputStream* %1, i32* %a2.addr)
  %3 = call %StringOutputStream* @"<<"(%StringOutputStream* %2, %StringRef* %a3.addr)
  %4 = call %StringOutputStream* @"<<.516"(%StringOutputStream* %3, i32* %a4.addr)
  %5 = load %String*, %String** %_result.addr
  %6 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.189(%String* %5, %String* %6)
  call void @dtor.454(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.454(%StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringOutputStream* @"<<.516"(%StringOutputStream* %s, i32* %x) #4 {
  %s.addr = alloca %StringOutputStream*
  store %StringOutputStream* %s, %StringOutputStream** %s.addr
  %x.addr = alloca i32*
  store i32* %x, i32** %x.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %s.addr
  %2 = load i32*, i32** %x.addr
  %3 = load i32, i32* %2
  %4 = zext i32 %3 to i64
  store i64 %4, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  call void @"<<<.517"(%StringOutputStream* %1, i64 %5)
  %6 = load %StringOutputStream*, %StringOutputStream** %s.addr
  ret %StringOutputStream* %6
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.517"(%StringOutputStream* %this, i64 %x) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %x.addr = alloca i64
  store i64 %x, i64* %x.addr
  %"$tmpC" = alloca %String
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load i64, i64* %x.addr
  call void @ulongToString(%String* %"$tmpC", i64 %3)
  %4 = call %StringRef @all.485(%String* %"$tmpC")
  call void @append(%String* %2, %StringRef %4)
  call void @dtor.261(%String* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ulongToString(%String* sret %_result, i64 %x) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %x.addr = alloca i64
  store i64 %x, i64* %x.addr
  %buf = alloca [16 x i8]
  %"$tmpForRef" = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load i64, i64* %x.addr
  %2 = bitcast [16 x i8]* %buf to i8*
  call void @_ULong_to_CString(i64 %1, i8* %2)
  %3 = load %String*, %String** %_result.addr
  %4 = bitcast [16 x i8]* %buf to i8*
  %5 = call %StringRef @_String_fromCString(i8* %4)
  store %StringRef %5, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %3, %StringRef* %"$tmpForRef")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popBack.518(%"Vector[Char]"* %this) #4 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 1
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 1
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %4
  store i64 -1, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %5, i64 %6)
  call void @"=.200"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %"$tmpC")
  %7 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %8 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %7, i32 0, i32 1
  %9 = load %"RawPtr[Char]", %"RawPtr[Char]"* %8
  %10 = call i8* @value(%"RawPtr[Char]" %9)
  %11 = load i8, i8* %10
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.519(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowLayoutDecoder[SparrowScanner]" %tokens, %AstBuilder* %astBuilder, %ErrorReporter %errorReporter) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tokens.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"
  store %"SparrowLayoutDecoder[SparrowScanner]" %tokens, %"SparrowLayoutDecoder[SparrowScanner]"* %tokens.addr
  %astBuilder.addr = alloca %AstBuilder*
  store %AstBuilder* %astBuilder, %AstBuilder** %astBuilder.addr
  %errorReporter.addr = alloca %ErrorReporter
  store %ErrorReporter %errorReporter, %ErrorReporter* %errorReporter.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 1
  call void @ctor.143(%Token* %2)
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %4 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %tokens.addr
  call void @ctor.520(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %4, %"SparrowLayoutDecoder[SparrowScanner]" %5)
  %6 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %7 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6, i32 0, i32 2
  store i1 false, i1* %7
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, i32 0, i32 3
  %10 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  call void @ctor.233(%AstBuilder* %9, %AstBuilder* %10)
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, i32 0, i32 4
  call void @ctor.204(%ErrorReporter* %12, %ErrorReporter* %errorReporter.addr)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.520(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowLayoutDecoder[SparrowScanner]" %src) #4 {
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %src.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"
  store %"SparrowLayoutDecoder[SparrowScanner]" %src, %"SparrowLayoutDecoder[SparrowScanner]"* %src.addr
  %tmp.this = alloca i64
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  call void @ctor.147(%"SparrowLayoutDecoder[SparrowScanner]"* %2)
  %3 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %4 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3, i32 0, i32 0
  call void @"=.301"(%"SparrowLayoutDecoder[SparrowScanner]"* %4, %"SparrowLayoutDecoder[SparrowScanner]"* %src.addr)
  %5 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  call void @ctor.149(%"Vector[Token]"* %6)
  %7 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  store i64 10, i64* %tmp.this
  %9 = load i64, i64* %tmp.this
  call void @reserve.404(%"Vector[Token]"* %8, i64 %9)
  br label %if_block

if_block:                                         ; preds = %code
  %10 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %10, i32 0, i32 0
  %12 = call i1 @"pre_!!.521"(%"SparrowLayoutDecoder[SparrowScanner]"* %11)
  br i1 %12, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %13 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %13, i32 0, i32 1
  %15 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %16 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %15, i32 0, i32 0
  call void @"post_++.523"(%Token* %"$tmpC", %"SparrowLayoutDecoder[SparrowScanner]"* %16)
  call void @"+=.409"(%"Vector[Token]"* %14, %Token* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC")
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @"pre_!!.521"(%"SparrowLayoutDecoder[SparrowScanner]"* %r) #4 {
  %r.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %r, %"SparrowLayoutDecoder[SparrowScanner]"** %r.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %r.addr
  %2 = call i1 @isEmpty.522(%"SparrowLayoutDecoder[SparrowScanner]"* %1)
  %3 = xor i1 true, %2
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.522(%"SparrowLayoutDecoder[SparrowScanner]"* %this) #4 {
  %this.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %this, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %2 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %1, i32 0, i32 5
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %5 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %this.addr
  %6 = getelementptr inbounds %"SparrowLayoutDecoder[SparrowScanner]", %"SparrowLayoutDecoder[SparrowScanner]"* %5, i32 0, i32 0
  %7 = call i1 @isEmpty.491(%"RangeWithLookahead[SparrowScanner]"* %6)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %7, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: inlinehint nounwind
define internal void @"post_++.523"(%Token* sret %_result, %"SparrowLayoutDecoder[SparrowScanner]"* %r) #4 {
  %_result.addr = alloca %Token*
  store %Token* %_result, %Token** %_result.addr
  %r.addr = alloca %"SparrowLayoutDecoder[SparrowScanner]"*
  store %"SparrowLayoutDecoder[SparrowScanner]"* %r, %"SparrowLayoutDecoder[SparrowScanner]"** %r.addr
  %res = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %r.addr
  call void @front.496(%Token* %res, %"SparrowLayoutDecoder[SparrowScanner]"* %1)
  %2 = load %"SparrowLayoutDecoder[SparrowScanner]"*, %"SparrowLayoutDecoder[SparrowScanner]"** %r.addr
  call void @popFront.495(%"SparrowLayoutDecoder[SparrowScanner]"* %2)
  %3 = load %Token*, %Token** %_result.addr
  call void @ctor.202(%Token* %3, %Token* %res)
  call void @dtor.260(%Token* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.260(%Token* %res)
  ret void
}

; Function Attrs: noinline nounwind
define %ParserContext* @spr_parserIf_createParser(%CharSource %chars, %Location* %loc, %AstBuilder* %astBuilder, %ErrorReporter %reporter) #5 {
  %chars.addr = alloca %CharSource
  store %CharSource %chars, %CharSource* %chars.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %astBuilder.addr = alloca %AstBuilder*
  store %AstBuilder* %astBuilder, %AstBuilder** %astBuilder.addr
  %reporter.addr = alloca %ErrorReporter
  store %ErrorReporter %reporter, %ErrorReporter* %reporter.addr
  %res = alloca %ParserContext*
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %loc.addr
  %2 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %3 = call %ParserContext* @new(%CharSource* %chars.addr, %Location* %1, %AstBuilder* %2, %ErrorReporter* %reporter.addr)
  store %ParserContext* %3, %ParserContext** %res
  %4 = load %ParserContext*, %ParserContext** %res
  ret %ParserContext* %4
}

; Function Attrs: inlinehint nounwind
define internal %ParserContext* @new(%CharSource* %arg1, %Location* %arg2, %AstBuilder* %arg3, %ErrorReporter* %arg4) #4 {
  %arg1.addr = alloca %CharSource*
  store %CharSource* %arg1, %CharSource** %arg1.addr
  %arg2.addr = alloca %Location*
  store %Location* %arg2, %Location** %arg2.addr
  %arg3.addr = alloca %AstBuilder*
  store %AstBuilder* %arg3, %AstBuilder** %arg3.addr
  %arg4.addr = alloca %ErrorReporter*
  store %ErrorReporter* %arg4, %ErrorReporter** %arg4.addr
  %res = alloca %ParserContext*
  br label %code

code:                                             ; preds = %0
  %1 = call i8* @malloc(i64 1288)
  %2 = bitcast i8* %1 to %ParserContext*
  store %ParserContext* %2, %ParserContext** %res
  %3 = load %ParserContext*, %ParserContext** %res
  %4 = load %CharSource*, %CharSource** %arg1.addr
  %5 = load %CharSource, %CharSource* %4
  %6 = load %Location*, %Location** %arg2.addr
  %7 = load %Location, %Location* %6
  %8 = load %AstBuilder*, %AstBuilder** %arg3.addr
  %9 = load %ErrorReporter*, %ErrorReporter** %arg4.addr
  %10 = load %ErrorReporter, %ErrorReporter* %9
  call void @ctor.388(%ParserContext* %3, %CharSource %5, %Location %7, %AstBuilder* %8, %ErrorReporter %10)
  %11 = load %ParserContext*, %ParserContext** %res
  ret %ParserContext* %11
}

; Function Attrs: noinline nounwind
define %ParserContext* @spr_parserIf_createParserFile(%StringRef %filename, %Location* %loc, %AstBuilder* %astBuilder, %ErrorReporter %reporter) #5 {
  %filename.addr = alloca %StringRef
  store %StringRef %filename, %StringRef* %filename.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %astBuilder.addr = alloca %AstBuilder*
  store %AstBuilder* %astBuilder, %AstBuilder** %astBuilder.addr
  %reporter.addr = alloca %ErrorReporter
  store %ErrorReporter %reporter, %ErrorReporter* %reporter.addr
  %fileCharSource = alloca %FileCharSource*
  %"$tmpC" = alloca %CharSource
  br label %code

code:                                             ; preds = %0
  %1 = call %FileCharSource* @new.524(%StringRef* %filename.addr)
  store %FileCharSource* %1, %FileCharSource** %fileCharSource
  %2 = load %FileCharSource*, %FileCharSource** %fileCharSource
  call void @mkCharSource(%CharSource* %"$tmpC", %FileCharSource* %2)
  %3 = load %CharSource, %CharSource* %"$tmpC"
  %4 = load %Location*, %Location** %loc.addr
  %5 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %6 = load %ErrorReporter, %ErrorReporter* %reporter.addr
  %7 = call %ParserContext* @spr_parserIf_createParser(%CharSource %3, %Location* %4, %AstBuilder* %5, %ErrorReporter %6)
  ret %ParserContext* %7
}

; Function Attrs: inlinehint nounwind
define internal %FileCharSource* @new.524(%StringRef* %arg1) #4 {
  %arg1.addr = alloca %StringRef*
  store %StringRef* %arg1, %StringRef** %arg1.addr
  %res = alloca %FileCharSource*
  br label %code

code:                                             ; preds = %0
  %1 = call i8* @malloc(i64 8)
  %2 = bitcast i8* %1 to %FileCharSource*
  store %FileCharSource* %2, %FileCharSource** %res
  %3 = load %FileCharSource*, %FileCharSource** %res
  %4 = load %StringRef*, %StringRef** %arg1.addr
  %5 = load %StringRef, %StringRef* %4
  call void @ctor.525(%FileCharSource* %3, %StringRef %5)
  %6 = load %FileCharSource*, %FileCharSource** %res
  ret %FileCharSource* %6
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.525(%FileCharSource* %this, %StringRef %filename) #4 {
  %this.addr = alloca %FileCharSource*
  store %FileCharSource* %this, %FileCharSource** %this.addr
  %filename.addr = alloca %StringRef
  store %StringRef %filename, %StringRef* %filename.addr
  %tmp.StringRef = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load %FileCharSource*, %FileCharSource** %this.addr
  %2 = getelementptr inbounds %FileCharSource, %FileCharSource* %1, i32 0, i32 0
  %3 = load %StringRef, %StringRef* %filename.addr
  %4 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %5 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.42, i32 0, i32 0), i8** %4
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.42, i32 0, i32 1), i8** %5
  %6 = load %StringRef, %StringRef* %tmp.StringRef
  call void @ctor.526(%File* %2, %StringRef %3, %StringRef %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.526(%File* %this, %StringRef %filename, %StringRef %mode) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %filename.addr = alloca %StringRef
  store %StringRef %filename, %StringRef* %filename.addr
  %mode.addr = alloca %StringRef
  store %StringRef %mode, %StringRef* %mode.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = call i8* @cStr(%StringRef* %filename.addr)
  %4 = call i8* @cStr(%StringRef* %mode.addr)
  %5 = call i8* @fopen(i8* %3, i8* %4)
  %6 = load %File*, %File** %this.addr
  %7 = getelementptr inbounds %File, %File* %6, i32 0, i32 0
  store i8* %5, i8** %7
  ret void
}

declare i8* @fopen(i8*, i8*)

; Function Attrs: inlinehint nounwind
define internal void @mkCharSource(%CharSource* sret %_result, %FileCharSource* %obj) #4 {
  %_result.addr = alloca %CharSource*
  store %CharSource* %_result, %CharSource** %_result.addr
  %obj.addr = alloca %FileCharSource*
  store %FileCharSource* %obj, %FileCharSource** %obj.addr
  %res = alloca %CharSource
  %"$tmpForRef" = alloca %UntypedPtr
  %funptr = alloca void (%FileCharSource*, %String*, i32)*
  br label %code

code:                                             ; preds = %0
  call void @ctor.134(%CharSource* %res)
  %1 = getelementptr inbounds %CharSource, %CharSource* %res, i32 0, i32 0
  %2 = load %FileCharSource*, %FileCharSource** %obj.addr
  %3 = call %UntypedPtr @_eraseType(%FileCharSource* %2)
  store %UntypedPtr %3, %UntypedPtr* %"$tmpForRef"
  call void @"=.288"(%UntypedPtr* %1, %UntypedPtr* %"$tmpForRef")
  %4 = getelementptr inbounds %CharSource, %CharSource* %res, i32 0, i32 1
  store void (%FileCharSource*, %String*, i32)* @readChars.529, void (%FileCharSource*, %String*, i32)** %funptr
  %5 = bitcast void (%FileCharSource*, %String*, i32)** %funptr to %"FunctionPtr3[Void, @FileCharSource, @String, Int]"*
  %6 = load %"FunctionPtr3[Void, @FileCharSource, @String, Int]", %"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %5
  call void @_reinterpretAssign(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %4, %"FunctionPtr3[Void, @FileCharSource, @String, Int]" %6)
  %7 = load %CharSource*, %CharSource** %_result.addr
  call void @ctor.186(%CharSource* %7, %CharSource* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %UntypedPtr @_eraseType(%FileCharSource* %obj) #4 {
  %obj.addr = alloca %FileCharSource*
  store %FileCharSource* %obj, %FileCharSource** %obj.addr
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileCharSource*, %FileCharSource** %obj.addr
  %2 = bitcast %FileCharSource* %1 to i8*
  call void @ctor.527(%UntypedPtr* %tmp.this, i8* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  ret %UntypedPtr %3
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.527(%UntypedPtr* %this, i8* %fdata) #3 {
  %this.addr = alloca %UntypedPtr*
  store %UntypedPtr* %this, %UntypedPtr** %this.addr
  %fdata.addr = alloca i8*
  store i8* %fdata, i8** %fdata.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %fdata.addr
  %2 = load %UntypedPtr*, %UntypedPtr** %this.addr
  %3 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %2, i32 0, i32 0
  store i8* %1, i8** %3
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @_reinterpretAssign(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %dest, %"FunctionPtr3[Void, @FileCharSource, @String, Int]" %src) #4 {
  %dest.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %dest, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %dest.addr
  %src.addr = alloca %"FunctionPtr3[Void, @FileCharSource, @String, Int]"
  store %"FunctionPtr3[Void, @FileCharSource, @String, Int]" %src, %"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %dest.addr
  %2 = bitcast %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %1 to %"FunctionPtr3[Void, @FileCharSource, @String, Int]"*
  call void @"=.528"(%"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %2, %"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %src.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.528"(%"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %this, %"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, @FileCharSource, @String, Int]"*
  store %"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %this, %"FunctionPtr3[Void, @FileCharSource, @String, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, @FileCharSource, @String, Int]"*
  store %"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %other, %"FunctionPtr3[Void, @FileCharSource, @String, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, @FileCharSource, @String, Int]"*, %"FunctionPtr3[Void, @FileCharSource, @String, Int]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, @FileCharSource, @String, Int]", %"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Void, @FileCharSource, @String, Int]"*, %"FunctionPtr3[Void, @FileCharSource, @String, Int]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Void, @FileCharSource, @String, Int]", %"FunctionPtr3[Void, @FileCharSource, @String, Int]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @readChars.529(%FileCharSource* %this, %String* %dest, i32 %numChars) #4 {
  %this.addr = alloca %FileCharSource*
  store %FileCharSource* %this, %FileCharSource** %this.addr
  %dest.addr = alloca %String*
  store %String* %dest, %String** %dest.addr
  %numChars.addr = alloca i32
  store i32 %numChars, i32* %numChars.addr
  %"$rangeVar" = alloca %"NumericRangeInc[Int]"
  %i = alloca i32
  %ch = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %numChars.addr
  call void @..(%"NumericRangeInc[Int]"* %"$rangeVar", i32 0, i32 %1)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %2 = load %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %"$rangeVar"
  %3 = call i1 @isEmpty.531(%"NumericRangeInc[Int]" %2)
  %4 = xor i1 true, %3
  br i1 %4, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %5 = load %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %"$rangeVar"
  %6 = call i32 @front.532(%"NumericRangeInc[Int]" %5)
  store i32 %6, i32* %i
  %7 = load %FileCharSource*, %FileCharSource** %this.addr
  %8 = getelementptr inbounds %FileCharSource, %FileCharSource* %7, i32 0, i32 0
  %9 = call i8 @readChar(%File* %8)
  store i8 %9, i8* %ch
  br label %if_block

while_step:                                       ; preds = %if_end
  call void @popFront.533(%"NumericRangeInc[Int]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %if_then, %while_block
  ret void

if_block:                                         ; preds = %while_body
  %10 = load %FileCharSource*, %FileCharSource** %this.addr
  %11 = getelementptr inbounds %FileCharSource, %FileCharSource* %10, i32 0, i32 0
  %12 = call i1 @isEof(%File* %11)
  br i1 %12, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  br label %while_end

if_end:                                           ; preds = %dumy_block, %if_block
  %13 = load %String*, %String** %dest.addr
  %14 = load i8, i8* %ch
  call void @"+=.473"(%String* %13, i8 %14)
  br label %while_step

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @..(%"NumericRangeInc[Int]"* sret %_result, i32 %start, i32 %end) #4 {
  %_result.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %_result, %"NumericRangeInc[Int]"** %_result.addr
  %start.addr = alloca i32
  store i32 %start, i32* %start.addr
  %end.addr = alloca i32
  store i32 %end, i32* %end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %_result.addr
  %2 = load i32, i32* %start.addr
  %3 = load i32, i32* %end.addr
  call void @ctor.530(%"NumericRangeInc[Int]"* %1, i32 %2, i32 %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.530(%"NumericRangeInc[Int]"* %this, i32 %start, i32 %end) #4 {
  %this.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"** %this.addr
  %start.addr = alloca i32
  store i32 %start, i32* %start.addr
  %end.addr = alloca i32
  store i32 %end, i32* %end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i32, i32* %start.addr
  %2 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %3 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %2, i32 0, i32 0
  store i32 %1, i32* %3
  %4 = load i32, i32* %end.addr
  %5 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %6 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %5, i32 0, i32 1
  store i32 %4, i32* %6
  %7 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %8 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %7, i32 0, i32 2
  store i1 false, i1* %8
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.531(%"NumericRangeInc[Int]" %this) #4 {
  %this.addr = alloca %"NumericRangeInc[Int]"
  store %"NumericRangeInc[Int]" %this, %"NumericRangeInc[Int]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this.addr, i32 0, i32 2
  %2 = load i1, i1* %1
  br i1 %2, label %cond_alt1, label %cond_alt2

cond_alt1:                                        ; preds = %code
  %3 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this.addr, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this.addr, i32 0, i32 1
  %6 = load i32, i32* %5
  %7 = icmp sgt i32 %4, %6
  br label %cond_end

cond_alt2:                                        ; preds = %code
  %8 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this.addr, i32 0, i32 0
  %9 = load i32, i32* %8
  %10 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this.addr, i32 0, i32 1
  %11 = load i32, i32* %10
  %12 = icmp sge i32 %9, %11
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi i1 [ %7, %cond_alt1 ], [ %12, %cond_alt2 ]
  ret i1 %cond
}

; Function Attrs: inlinehint nounwind
define internal i32 @front.532(%"NumericRangeInc[Int]" %this) #4 {
  %this.addr = alloca %"NumericRangeInc[Int]"
  store %"NumericRangeInc[Int]" %this, %"NumericRangeInc[Int]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %this.addr, i32 0, i32 0
  %2 = load i32, i32* %1
  ret i32 %2
}

; Function Attrs: inlinehint nounwind
define internal i8 @readChar(%File* %this) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %tmp.this = alloca i8
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = call i32 @fgetc(i8* %3)
  %5 = trunc i32 %4 to i8
  store i8 %5, i8* %tmp.this
  %6 = load i8, i8* %tmp.this
  ret i8 %6
}

declare i32 @fgetc(i8*)

; Function Attrs: inlinehint nounwind
define internal i1 @isEof(%File* %this) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = call i32 @feof(i8* %3)
  %5 = icmp ne i32 0, %4
  ret i1 %5
}

declare i32 @feof(i8*)

; Function Attrs: alwaysinline nounwind
define internal void @popFront.533(%"NumericRangeInc[Int]"* %this) #3 {
  %this.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"** %this.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  store i32 1, i32* %tmp.this
  %4 = load i32, i32* %tmp.this
  %5 = add i32 %3, %4
  %6 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %7 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %6, i32 0, i32 0
  store i32 %5, i32* %7
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.534(%"NumericRangeInc[Int]"* %this) #3 {
  %this.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.535(%CharSource* %this) #3 {
  %this.addr = alloca %CharSource*
  store %CharSource* %this, %CharSource** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: noinline nounwind
define %ParserContext* @spr_parserIf_createParserStringRef(%StringRef %code, %Location* %loc, %AstBuilder* %astBuilder, %ErrorReporter %reporter) #5 {
  %code.addr = alloca %StringRef
  store %StringRef %code, %StringRef* %code.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %astBuilder.addr = alloca %AstBuilder*
  store %AstBuilder* %astBuilder, %AstBuilder** %astBuilder.addr
  %reporter.addr = alloca %ErrorReporter
  store %ErrorReporter %reporter, %ErrorReporter* %reporter.addr
  %stringCharSource = alloca %StringCharSource*
  %"$tmpC" = alloca %CharSource
  br label %code1

code1:                                            ; preds = %0
  %1 = call %StringCharSource* @new.536(%StringRef* %code.addr)
  store %StringCharSource* %1, %StringCharSource** %stringCharSource
  %2 = load %StringCharSource*, %StringCharSource** %stringCharSource
  call void @mkCharSource.538(%CharSource* %"$tmpC", %StringCharSource* %2)
  %3 = load %CharSource, %CharSource* %"$tmpC"
  %4 = load %Location*, %Location** %loc.addr
  %5 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %6 = load %ErrorReporter, %ErrorReporter* %reporter.addr
  %7 = call %ParserContext* @spr_parserIf_createParser(%CharSource %3, %Location* %4, %AstBuilder* %5, %ErrorReporter %6)
  ret %ParserContext* %7
}

; Function Attrs: inlinehint nounwind
define internal %StringCharSource* @new.536(%StringRef* %arg1) #4 {
  %arg1.addr = alloca %StringRef*
  store %StringRef* %arg1, %StringRef** %arg1.addr
  %res = alloca %StringCharSource*
  br label %code

code:                                             ; preds = %0
  %1 = call i8* @malloc(i64 16)
  %2 = bitcast i8* %1 to %StringCharSource*
  store %StringCharSource* %2, %StringCharSource** %res
  %3 = load %StringCharSource*, %StringCharSource** %res
  %4 = load %StringRef*, %StringRef** %arg1.addr
  %5 = load %StringRef, %StringRef* %4
  call void @ctor.537(%StringCharSource* %3, %StringRef %5)
  %6 = load %StringCharSource*, %StringCharSource** %res
  ret %StringCharSource* %6
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.537(%StringCharSource* %this, %StringRef %f_content) #3 {
  %this.addr = alloca %StringCharSource*
  store %StringCharSource* %this, %StringCharSource** %this.addr
  %f_content.addr = alloca %StringRef
  store %StringRef %f_content, %StringRef* %f_content.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringCharSource*, %StringCharSource** %this.addr
  %2 = getelementptr inbounds %StringCharSource, %StringCharSource* %1, i32 0, i32 0
  %3 = load %StringRef, %StringRef* %f_content.addr
  call void @ctor.56(%StringRef* %2, %StringRef %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @mkCharSource.538(%CharSource* sret %_result, %StringCharSource* %obj) #4 {
  %_result.addr = alloca %CharSource*
  store %CharSource* %_result, %CharSource** %_result.addr
  %obj.addr = alloca %StringCharSource*
  store %StringCharSource* %obj, %StringCharSource** %obj.addr
  %res = alloca %CharSource
  %"$tmpForRef" = alloca %UntypedPtr
  %funptr = alloca void (%StringCharSource*, %String*, i32)*
  br label %code

code:                                             ; preds = %0
  call void @ctor.134(%CharSource* %res)
  %1 = getelementptr inbounds %CharSource, %CharSource* %res, i32 0, i32 0
  %2 = load %StringCharSource*, %StringCharSource** %obj.addr
  %3 = call %UntypedPtr @_eraseType.539(%StringCharSource* %2)
  store %UntypedPtr %3, %UntypedPtr* %"$tmpForRef"
  call void @"=.288"(%UntypedPtr* %1, %UntypedPtr* %"$tmpForRef")
  %4 = getelementptr inbounds %CharSource, %CharSource* %res, i32 0, i32 1
  store void (%StringCharSource*, %String*, i32)* @readChars.542, void (%StringCharSource*, %String*, i32)** %funptr
  %5 = bitcast void (%StringCharSource*, %String*, i32)** %funptr to %"FunctionPtr3[Void, @StringCharSource, @String, Int]"*
  %6 = load %"FunctionPtr3[Void, @StringCharSource, @String, Int]", %"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %5
  call void @_reinterpretAssign.540(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %4, %"FunctionPtr3[Void, @StringCharSource, @String, Int]" %6)
  %7 = load %CharSource*, %CharSource** %_result.addr
  call void @ctor.186(%CharSource* %7, %CharSource* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %UntypedPtr @_eraseType.539(%StringCharSource* %obj) #4 {
  %obj.addr = alloca %StringCharSource*
  store %StringCharSource* %obj, %StringCharSource** %obj.addr
  %tmp.this = alloca %UntypedPtr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringCharSource*, %StringCharSource** %obj.addr
  %2 = bitcast %StringCharSource* %1 to i8*
  call void @ctor.527(%UntypedPtr* %tmp.this, i8* %2)
  %3 = load %UntypedPtr, %UntypedPtr* %tmp.this
  ret %UntypedPtr %3
}

; Function Attrs: inlinehint nounwind
define internal void @_reinterpretAssign.540(%"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %dest, %"FunctionPtr3[Void, @StringCharSource, @String, Int]" %src) #4 {
  %dest.addr = alloca %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*
  store %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %dest, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %dest.addr
  %src.addr = alloca %"FunctionPtr3[Void, @StringCharSource, @String, Int]"
  store %"FunctionPtr3[Void, @StringCharSource, @String, Int]" %src, %"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %src.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, UntypedPtr, @String, Int]"*, %"FunctionPtr3[Void, UntypedPtr, @String, Int]"** %dest.addr
  %2 = bitcast %"FunctionPtr3[Void, UntypedPtr, @String, Int]"* %1 to %"FunctionPtr3[Void, @StringCharSource, @String, Int]"*
  call void @"=.541"(%"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %2, %"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %src.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.541"(%"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %this, %"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %other) #3 {
  %this.addr = alloca %"FunctionPtr3[Void, @StringCharSource, @String, Int]"*
  store %"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %this, %"FunctionPtr3[Void, @StringCharSource, @String, Int]"** %this.addr
  %other.addr = alloca %"FunctionPtr3[Void, @StringCharSource, @String, Int]"*
  store %"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %other, %"FunctionPtr3[Void, @StringCharSource, @String, Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Void, @StringCharSource, @String, Int]"*, %"FunctionPtr3[Void, @StringCharSource, @String, Int]"** %other.addr
  %2 = getelementptr inbounds %"FunctionPtr3[Void, @StringCharSource, @String, Int]", %"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %"FunctionPtr3[Void, @StringCharSource, @String, Int]"*, %"FunctionPtr3[Void, @StringCharSource, @String, Int]"** %this.addr
  %5 = getelementptr inbounds %"FunctionPtr3[Void, @StringCharSource, @String, Int]", %"FunctionPtr3[Void, @StringCharSource, @String, Int]"* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @readChars.542(%StringCharSource* %this, %String* %dest, i32 %numChars) #4 {
  %this.addr = alloca %StringCharSource*
  store %StringCharSource* %this, %StringCharSource** %this.addr
  %dest.addr = alloca %String*
  store %String* %dest, %String** %dest.addr
  %numChars.addr = alloca i32
  store i32 %numChars, i32* %numChars.addr
  %sz = alloca i32
  %toRead = alloca i32
  %"$rangeVar" = alloca %"NumericRangeInc[Int]"
  %i = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load %StringCharSource*, %StringCharSource** %this.addr
  %2 = getelementptr inbounds %StringCharSource, %StringCharSource* %1, i32 0, i32 0
  %3 = call i64 @size(%StringRef* %2)
  %4 = trunc i64 %3 to i32
  store i32 %4, i32* %sz
  %5 = load i32, i32* %numChars.addr
  %6 = load i32, i32* %sz
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %cond_alt1, label %cond_alt2

cond_alt1:                                        ; preds = %code
  br label %cond_end

cond_alt2:                                        ; preds = %code
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi i32* [ %numChars.addr, %cond_alt1 ], [ %sz, %cond_alt2 ]
  %8 = load i32, i32* %cond
  store i32 %8, i32* %toRead
  %9 = load i32, i32* %sz
  call void @..(%"NumericRangeInc[Int]"* %"$rangeVar", i32 0, i32 %9)
  br label %while_block

while_block:                                      ; preds = %while_step, %cond_end
  %10 = load %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %"$rangeVar"
  %11 = call i1 @isEmpty.531(%"NumericRangeInc[Int]" %10)
  %12 = xor i1 true, %11
  br i1 %12, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %13 = load %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %"$rangeVar"
  %14 = call i32 @front.532(%"NumericRangeInc[Int]" %13)
  store i32 %14, i32* %i
  %15 = load %String*, %String** %dest.addr
  %16 = load %StringCharSource*, %StringCharSource** %this.addr
  %17 = getelementptr inbounds %StringCharSource, %StringCharSource* %16, i32 0, i32 0
  %18 = call i8* @front(%StringRef* %17)
  %19 = load i8, i8* %18
  call void @"+=.473"(%String* %15, i8 %19)
  %20 = load %StringCharSource*, %StringCharSource** %this.addr
  %21 = getelementptr inbounds %StringCharSource, %StringCharSource* %20, i32 0, i32 0
  call void @popFront(%StringRef* %21)
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.533(%"NumericRangeInc[Int]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: noinline nounwind
define void @spr_parserIf_destroyParser(%ParserContext* %ctx) #5 {
  %ctx.addr = alloca %ParserContext*
  store %ParserContext* %ctx, %ParserContext** %ctx.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %ctx.addr
  call void @delete(%ParserContext* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @delete(%ParserContext* %obj) #4 {
  %obj.addr = alloca %ParserContext*
  store %ParserContext* %obj, %ParserContext** %obj.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %ParserContext*, %ParserContext** %obj.addr
  %2 = bitcast %ParserContext* %1 to i8*
  %3 = call i1 @implOpRefNE(i8* %2, i8* null)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %ParserContext*, %ParserContext** %obj.addr
  call void @dtor.258(%ParserContext* %4)
  %5 = load %ParserContext*, %ParserContext** %obj.addr
  %6 = bitcast %ParserContext* %5 to i8*
  call void @free(i8* %6)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: noinline nounwind
define void @spr_parserIf_nextToken(%ParserContext* %ctx, %Token* %outToken) #5 {
  %ctx.addr = alloca %ParserContext*
  store %ParserContext* %ctx, %ParserContext** %ctx.addr
  %outToken.addr = alloca %Token*
  store %Token* %outToken, %Token** %outToken.addr
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %outToken.addr
  %2 = load %ParserContext*, %ParserContext** %ctx.addr
  %3 = getelementptr inbounds %ParserContext, %ParserContext* %2, i32 0, i32 0
  call void @"post_++.411"(%Token* %"$tmpC", %SparrowScanner* %3)
  call void @"=.297"(%Token* %1, %Token* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC")
  ret void
}

; Function Attrs: noinline nounwind
define %Node @spr_parserIf_parseModule(%ParserContext* %ctx) #5 {
  %ctx.addr = alloca %ParserContext*
  store %ParserContext* %ctx, %ParserContext** %ctx.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %ctx.addr
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %1, i32 0, i32 2
  %3 = call %Node @parseModule(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  ret %Node %3
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseModule(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %loc = alloca %Location
  %moduleName = alloca %Node
  %"$tmpForRef" = alloca %Node
  %decls = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %Location
  %"$tmpC1" = alloca %Location
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %3 = call %Node @parseModuleName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  store %Node %3, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %moduleName, %Node* %"$tmpForRef")
  call void @ctor.556(%Node* %decls)
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseStmts(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i1 true, %Node* %decls)
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 0)
  %6 = load %TokenType, %TokenType* %tmp.this
  %7 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, %TokenType %6)
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, i32 0, i32 3
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC1", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10)
  call void @span(%Location* %"$tmpC", %Location* %loc, %Location* %"$tmpC1")
  %11 = load %Node, %Node* %moduleName
  %12 = load %Node, %Node* %decls
  %13 = call %Node @mkModule(%AstBuilder* %9, %Location* %"$tmpC", %Node %11, %Node %12)
  ret %Node %13
}

; Function Attrs: inlinehint nounwind
define internal void @curLoc(%Location* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %_result.addr = alloca %Location*
  store %Location* %_result, %Location** %_result.addr
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %_result.addr
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %3)
  %4 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 0
  call void @ctor.182(%Location* %1, %Location* %4)
  call void @dtor.260(%Token* %"$tmpC")
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.260(%Token* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"pre_*.543"(%Token* sret %_result, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %r) #4 {
  %_result.addr = alloca %Token*
  store %Token* %_result, %Token** %_result.addr
  %r.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %r, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %r.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %_result.addr
  %2 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %r.addr
  call void @front.544(%Token* %1, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @front.544(%Token* sret %_result, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %_result.addr = alloca %Token*
  store %Token* %_result, %Token** %_result.addr
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Token*, %Token** %_result.addr
  %2 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %3 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 1
  %4 = call %Token* @front.494(%"Vector[Token]"* %3)
  call void @ctor.202(%Token* %1, %Token* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.545(%Node* %this, %Node* %other) #3 {
  %this.addr = alloca %Node*
  store %Node* %this, %Node** %this.addr
  %other.addr = alloca %Node*
  store %Node* %other, %Node** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Node*, %Node** %this.addr
  %2 = getelementptr inbounds %Node, %Node* %1, i32 0, i32 0
  %3 = load %Node*, %Node** %other.addr
  %4 = getelementptr inbounds %Node, %Node* %3, i32 0, i32 0
  call void @ctor.187(%UntypedPtr* %2, %UntypedPtr* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseModuleName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %qid = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this2 = alloca %TokenType
  %tmp.this3 = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 32)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %if_block

if_block:                                         ; preds = %while_end
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 2)
  %5 = load %TokenType, %TokenType* %tmp.this1
  %6 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, %TokenType %5)
  br i1 %6, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = call %Node @parseQualifiedName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i1 false)
  store %Node %8, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %qid, %Node* %"$tmpForRef")
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this2, i32 32)
  %10 = load %TokenType, %TokenType* %tmp.this2
  %11 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9, %TokenType %10)
  %12 = load %Node, %Node* %qid
  ret %Node %12

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.556(%Node* %tmp.this3)
  %13 = load %Node, %Node* %tmp.this3
  ret %Node %13

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType %t) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %t.addr = alloca %TokenType
  store %TokenType %t, %TokenType* %t.addr
  %"$tmpC" = alloca %Token
  %"$tmpC1" = alloca %Token
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  %3 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  %4 = call i1 @"==.352"(%TokenType* %3, %TokenType* %t.addr)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 0
  call void @"post_++.546"(%Token* %"$tmpC1", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %8)
  call void @"=.297"(%Token* %6, %Token* %"$tmpC1")
  call void @dtor.260(%Token* %"$tmpC1")
  call void @dtor.260(%Token* %"$tmpC")
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  call void @dtor.260(%Token* %"$tmpC")
  ret i1 false

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @"post_++.546"(%Token* sret %_result, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %r) #4 {
  %_result.addr = alloca %Token*
  store %Token* %_result, %Token** %_result.addr
  %r.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %r, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %r.addr
  %res = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %r.addr
  call void @front.544(%Token* %res, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %r.addr
  call void @popFront.547(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  %3 = load %Token*, %Token** %_result.addr
  call void @ctor.202(%Token* %3, %Token* %res)
  call void @dtor.260(%Token* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.260(%Token* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.547(%"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tmp.this = alloca i64
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 1
  store i64 0, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  call void @remove.498(%"Vector[Token]"* %2, i64 %3)
  br label %if_block

if_block:                                         ; preds = %code
  %4 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %4, i32 0, i32 1
  %6 = call i1 @isEmpty.492(%"Vector[Token]"* %5)
  br i1 %6, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %7 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  %9 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %10 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %9, i32 0, i32 0
  call void @"post_++.523"(%Token* %"$tmpC", %"SparrowLayoutDecoder[SparrowScanner]"* %10)
  call void @"+=.409"(%"Vector[Token]"* %8, %Token* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC")
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  ret void

cond.true:                                        ; preds = %if_block
  %11 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %11, i32 0, i32 0
  %13 = call i1 @"pre_!!.521"(%"SparrowLayoutDecoder[SparrowScanner]"* %12)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %13, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseQualifiedName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %allowStar) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %allowStar.addr = alloca i1
  store i1 %allowStar, i1* %allowStar.addr
  %loc = alloca %Location
  %tmp.this = alloca %TokenType
  %base = alloca %Node
  %"$tmpForRef" = alloca %Node
  %lastId = alloca %String
  %tmp.this1 = alloca %TokenType
  %tmp.this2 = alloca %TokenType
  %"$tmpForRef3" = alloca %Node
  %"$tmpC" = alloca %Location
  %"$tmpC4" = alloca %Location
  %tmp.this8 = alloca %TokenType
  %"$tmpForRef9" = alloca %Node
  %"$tmpC10" = alloca %Location
  %"$tmpC11" = alloca %Location
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 37)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 3
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  %9 = getelementptr inbounds %Token, %Token* %8, i32 0, i32 2
  %10 = call %StringRef @asStringRef(%String* %9)
  %11 = call %Node @mkIdentifier(%AstBuilder* %6, %Location* %loc, %StringRef %10)
  store %Node %11, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %base, %Node* %"$tmpForRef")
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 1
  %14 = getelementptr inbounds %Token, %Token* %13, i32 0, i32 2
  call void @ctor.189(%String* %lastId, %String* %14)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %15 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 34)
  %16 = load %TokenType, %TokenType* %tmp.this1
  %17 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %15, %TokenType %16)
  br i1 %17, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block

while_step:                                       ; preds = %cond_destruct_end7
  br label %while_block

while_end:                                        ; preds = %cond_destruct_end, %while_block
  %18 = load %Node, %Node* %base
  call void @dtor.261(%String* %lastId)
  ret %Node %18

if_block:                                         ; preds = %while_body
  %19 = load i1, i1* %allowStar.addr
  br i1 %19, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %20 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %21 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %20, i32 0, i32 3
  %22 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC4", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %22)
  call void @span(%Location* %"$tmpC", %Location* %loc, %Location* %"$tmpC4")
  %23 = load %Node, %Node* %base
  %24 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %25 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %24, i32 0, i32 1
  %26 = getelementptr inbounds %Token, %Token* %25, i32 0, i32 2
  %27 = call %StringRef @asStringRef(%String* %26)
  %28 = call %Node @mkStarExpr(%AstBuilder* %21, %Location* %"$tmpC", %Node %23, %StringRef %27)
  store %Node %28, %Node* %"$tmpForRef3"
  call void @"=.554"(%Node* %base, %Node* %"$tmpForRef3")
  br i1 %19, label %cond_destruct_alt1, label %cond_destruct_alt2

if_end:                                           ; preds = %dumy_block, %cond.end
  br i1 %19, label %cond_destruct_alt15, label %cond_destruct_alt26

cond.true:                                        ; preds = %if_block
  %29 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this2, i32 38)
  %30 = load %TokenType, %TokenType* %tmp.this2
  %31 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %29, %TokenType %30)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %31, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end

cond_destruct_alt1:                               ; preds = %if_then
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_then
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  br label %while_end

dumy_block:                                       ; No predecessors!
  br label %if_end

cond_destruct_alt15:                              ; preds = %if_end
  br label %cond_destruct_end7

cond_destruct_alt26:                              ; preds = %if_end
  br label %cond_destruct_end7

cond_destruct_end7:                               ; preds = %cond_destruct_alt26, %cond_destruct_alt15
  %32 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this8, i32 37)
  %33 = load %TokenType, %TokenType* %tmp.this8
  %34 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %32, %TokenType %33)
  %35 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %36 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %35, i32 0, i32 3
  %37 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC11", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %37)
  call void @span(%Location* %"$tmpC10", %Location* %loc, %Location* %"$tmpC11")
  %38 = load %Node, %Node* %base
  %39 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %40 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %39, i32 0, i32 1
  %41 = getelementptr inbounds %Token, %Token* %40, i32 0, i32 2
  %42 = call %StringRef @asStringRef(%String* %41)
  %43 = call %Node @mkCompoundExpr(%AstBuilder* %36, %Location* %"$tmpC10", %Node %38, %StringRef %42)
  store %Node %43, %Node* %"$tmpForRef9"
  call void @"=.554"(%Node* %base, %Node* %"$tmpForRef9")
  br label %while_step

dumy_block12:                                     ; No predecessors!
  call void @dtor.261(%String* %lastId)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType %t) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %t.addr = alloca %TokenType
  store %TokenType %t, %TokenType* %t.addr
  %"$tmpC" = alloca %String
  %tmp.StringRef = alloca %StringRef
  %"$tmpC5" = alloca %Token
  %tmp.StringRef6 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = load %TokenType, %TokenType* %t.addr
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i32 0, i32 2
  %6 = load i1, i1* %5
  br i1 %6, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %9 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.93, i32 0, i32 0), i8** %8
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.93, i32 0, i32 25), i8** %9
  %10 = load %StringRef, %StringRef* %tmp.StringRef
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC5", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %12)
  %13 = getelementptr inbounds %Token, %Token* %"$tmpC5", i32 0, i32 1
  %14 = load %TokenType, %TokenType* %13
  %15 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef6, i32 0, i32 0
  %16 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef6, i32 0, i32 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.94, i32 0, i32 0), i8** %15
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.94, i32 0, i32 12), i8** %16
  %17 = load %StringRef, %StringRef* %tmp.StringRef6
  %18 = load %TokenType, %TokenType* %t.addr
  call void @toString.549(%String* %"$tmpC", %StringRef %10, %TokenType %14, %StringRef %17, %TokenType %18)
  call void @reportError.548(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC5")
  ret i1 false

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal void @reportError.548(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %String* %msg) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %msg.addr = alloca %String*
  store %String* %msg, %String** %msg.addr
  %"$tmpC" = alloca %Token
  %"$tmpC1" = alloca %Token
  %tmp.this = alloca %TokenType
  %"$tmpC2" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 4
  %3 = load %ErrorReporter, %ErrorReporter* %2
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %5)
  %6 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 0
  %7 = load %String*, %String** %msg.addr
  call void @reportError.450(%ErrorReporter %3, %Location* %6, %String* %7)
  call void @dtor.260(%Token* %"$tmpC")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %9 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC1", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  %10 = getelementptr inbounds %Token, %Token* %"$tmpC1", i32 0, i32 1
  call void @ctor.417(%TokenType* %tmp.this, i32 0)
  %11 = call i1 @"==.352"(%TokenType* %10, %TokenType* %tmp.this)
  %12 = xor i1 true, %11
  br i1 %12, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i32 0, i32 1
  %15 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %16 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %15, i32 0, i32 0
  call void @"post_++.546"(%Token* %"$tmpC2", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %16)
  call void @"=.297"(%Token* %14, %Token* %"$tmpC2")
  call void @dtor.260(%Token* %"$tmpC2")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  call void @dtor.260(%Token* %"$tmpC1")
  %17 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %18 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %17, i32 0, i32 2
  store i1 true, i1* %18
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @toString.549(%String* sret %_result, %StringRef %a1, %TokenType %a2, %StringRef %a3, %TokenType %a4) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %a1.addr = alloca %StringRef
  store %StringRef %a1, %StringRef* %a1.addr
  %a2.addr = alloca %TokenType
  store %TokenType %a2, %TokenType* %a2.addr
  %a3.addr = alloca %StringRef
  store %StringRef %a3, %StringRef* %a3.addr
  %a4.addr = alloca %TokenType
  store %TokenType %a4, %TokenType* %a4.addr
  %s = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.452(%StringOutputStream* %s)
  %1 = call %StringOutputStream* @"<<"(%StringOutputStream* %s, %StringRef* %a1.addr)
  %2 = call %StringOutputStream* @"<<.550"(%StringOutputStream* %1, %TokenType* %a2.addr)
  %3 = call %StringOutputStream* @"<<"(%StringOutputStream* %2, %StringRef* %a3.addr)
  %4 = call %StringOutputStream* @"<<.550"(%StringOutputStream* %3, %TokenType* %a4.addr)
  %5 = load %String*, %String** %_result.addr
  %6 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.189(%String* %5, %String* %6)
  call void @dtor.454(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.454(%StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringOutputStream* @"<<.550"(%StringOutputStream* %s, %TokenType* %x) #4 {
  %s.addr = alloca %StringOutputStream*
  store %StringOutputStream* %s, %StringOutputStream** %s.addr
  %x.addr = alloca %TokenType*
  store %TokenType* %x, %TokenType** %x.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %TokenType*, %TokenType** %x.addr
  %2 = load %TokenType, %TokenType* %1
  %3 = load %StringOutputStream*, %StringOutputStream** %s.addr
  call void @">>"(%TokenType %2, %StringOutputStream* %3)
  %4 = load %StringOutputStream*, %StringOutputStream** %s.addr
  ret %StringOutputStream* %4
}

; Function Attrs: inlinehint nounwind
define internal void @">>"(%TokenType %t, %StringOutputStream* %os) #4 {
  %t.addr = alloca %TokenType
  store %TokenType %t, %TokenType* %t.addr
  %os.addr = alloca %StringOutputStream*
  store %StringOutputStream* %os, %StringOutputStream** %os.addr
  %"$tmpC" = alloca %String
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %os.addr
  %2 = load %TokenType, %TokenType* %t.addr
  call void @_asString(%String* %"$tmpC", %TokenType %2)
  %3 = call %StringOutputStream* @"<<.551"(%StringOutputStream* %1, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %StringOutputStream* @"<<.551"(%StringOutputStream* %s, %String* %x) #4 {
  %s.addr = alloca %StringOutputStream*
  store %StringOutputStream* %s, %StringOutputStream** %s.addr
  %x.addr = alloca %String*
  store %String* %x, %String** %x.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %x.addr
  %2 = load %StringOutputStream*, %StringOutputStream** %s.addr
  call void @">>.552"(%String* %1, %StringOutputStream* %2)
  %3 = load %StringOutputStream*, %StringOutputStream** %s.addr
  ret %StringOutputStream* %3
}

; Function Attrs: inlinehint nounwind
define internal void @">>.552"(%String* %this, %StringOutputStream* %os) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %os.addr = alloca %StringOutputStream*
  store %StringOutputStream* %os, %StringOutputStream** %os.addr
  %"$tmpForRef" = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %os.addr
  %2 = load %String*, %String** %this.addr
  %3 = call %StringRef @asStringRef(%String* %2)
  store %StringRef %3, %StringRef* %"$tmpForRef"
  %4 = call %StringOutputStream* @"<<"(%StringOutputStream* %1, %StringRef* %"$tmpForRef")
  ret void
}

; Function Attrs: noinline nounwind
define void @_asString(%String* sret %_result, %TokenType %t) #5 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %t.addr = alloca %TokenType
  store %TokenType %t, %TokenType* %t.addr
  %tmp.this = alloca %TokenType
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef6" = alloca %StringRef
  %tmp.StringRef7 = alloca %StringRef
  %tmp.this13 = alloca %TokenType
  %"$tmpForRef14" = alloca %StringRef
  %tmp.StringRef15 = alloca %StringRef
  %tmp.this21 = alloca %TokenType
  %"$tmpForRef22" = alloca %StringRef
  %tmp.StringRef23 = alloca %StringRef
  %tmp.this29 = alloca %TokenType
  %"$tmpForRef30" = alloca %StringRef
  %tmp.StringRef31 = alloca %StringRef
  %tmp.this37 = alloca %TokenType
  %"$tmpForRef38" = alloca %StringRef
  %tmp.StringRef39 = alloca %StringRef
  %tmp.this45 = alloca %TokenType
  %"$tmpForRef46" = alloca %StringRef
  %tmp.StringRef47 = alloca %StringRef
  %tmp.this53 = alloca %TokenType
  %"$tmpForRef54" = alloca %StringRef
  %tmp.StringRef55 = alloca %StringRef
  %tmp.this61 = alloca %TokenType
  %"$tmpForRef62" = alloca %StringRef
  %tmp.StringRef63 = alloca %StringRef
  %tmp.this69 = alloca %TokenType
  %"$tmpForRef70" = alloca %StringRef
  %tmp.StringRef71 = alloca %StringRef
  %tmp.this77 = alloca %TokenType
  %"$tmpForRef78" = alloca %StringRef
  %tmp.StringRef79 = alloca %StringRef
  %tmp.this85 = alloca %TokenType
  %"$tmpForRef86" = alloca %StringRef
  %tmp.StringRef87 = alloca %StringRef
  %tmp.this93 = alloca %TokenType
  %"$tmpForRef94" = alloca %StringRef
  %tmp.StringRef95 = alloca %StringRef
  %tmp.this101 = alloca %TokenType
  %"$tmpForRef102" = alloca %StringRef
  %tmp.StringRef103 = alloca %StringRef
  %tmp.this109 = alloca %TokenType
  %"$tmpForRef110" = alloca %StringRef
  %tmp.StringRef111 = alloca %StringRef
  %tmp.this117 = alloca %TokenType
  %"$tmpForRef118" = alloca %StringRef
  %tmp.StringRef119 = alloca %StringRef
  %tmp.this125 = alloca %TokenType
  %"$tmpForRef126" = alloca %StringRef
  %tmp.StringRef127 = alloca %StringRef
  %tmp.this133 = alloca %TokenType
  %"$tmpForRef134" = alloca %StringRef
  %tmp.StringRef135 = alloca %StringRef
  %tmp.this141 = alloca %TokenType
  %"$tmpForRef142" = alloca %StringRef
  %tmp.StringRef143 = alloca %StringRef
  %tmp.this149 = alloca %TokenType
  %"$tmpForRef150" = alloca %StringRef
  %tmp.StringRef151 = alloca %StringRef
  %tmp.this157 = alloca %TokenType
  %"$tmpForRef158" = alloca %StringRef
  %tmp.StringRef159 = alloca %StringRef
  %tmp.this165 = alloca %TokenType
  %"$tmpForRef166" = alloca %StringRef
  %tmp.StringRef167 = alloca %StringRef
  %tmp.this173 = alloca %TokenType
  %"$tmpForRef174" = alloca %StringRef
  %tmp.StringRef175 = alloca %StringRef
  %tmp.this181 = alloca %TokenType
  %"$tmpForRef182" = alloca %StringRef
  %tmp.StringRef183 = alloca %StringRef
  %tmp.this189 = alloca %TokenType
  %"$tmpForRef190" = alloca %StringRef
  %tmp.StringRef191 = alloca %StringRef
  %tmp.this197 = alloca %TokenType
  %"$tmpForRef198" = alloca %StringRef
  %tmp.StringRef199 = alloca %StringRef
  %tmp.this205 = alloca %TokenType
  %"$tmpForRef206" = alloca %StringRef
  %tmp.StringRef207 = alloca %StringRef
  %tmp.this213 = alloca %TokenType
  %"$tmpForRef214" = alloca %StringRef
  %tmp.StringRef215 = alloca %StringRef
  %tmp.this221 = alloca %TokenType
  %"$tmpForRef222" = alloca %StringRef
  %tmp.StringRef223 = alloca %StringRef
  %tmp.this229 = alloca %TokenType
  %"$tmpForRef230" = alloca %StringRef
  %tmp.StringRef231 = alloca %StringRef
  %tmp.this237 = alloca %TokenType
  %"$tmpForRef238" = alloca %StringRef
  %tmp.StringRef239 = alloca %StringRef
  %tmp.this245 = alloca %TokenType
  %"$tmpForRef246" = alloca %StringRef
  %tmp.StringRef247 = alloca %StringRef
  %tmp.this253 = alloca %TokenType
  %"$tmpForRef254" = alloca %StringRef
  %tmp.StringRef255 = alloca %StringRef
  %tmp.this261 = alloca %TokenType
  %"$tmpForRef262" = alloca %StringRef
  %tmp.StringRef263 = alloca %StringRef
  %tmp.this269 = alloca %TokenType
  %"$tmpForRef270" = alloca %StringRef
  %tmp.StringRef271 = alloca %StringRef
  %tmp.this277 = alloca %TokenType
  %"$tmpForRef278" = alloca %StringRef
  %tmp.StringRef279 = alloca %StringRef
  %tmp.this285 = alloca %TokenType
  %"$tmpForRef286" = alloca %StringRef
  %tmp.StringRef287 = alloca %StringRef
  %tmp.this293 = alloca %TokenType
  %"$tmpForRef294" = alloca %StringRef
  %tmp.StringRef295 = alloca %StringRef
  %tmp.this301 = alloca %TokenType
  %"$tmpForRef302" = alloca %StringRef
  %tmp.StringRef303 = alloca %StringRef
  %tmp.this309 = alloca %TokenType
  %"$tmpForRef310" = alloca %StringRef
  %tmp.StringRef311 = alloca %StringRef
  %tmp.this317 = alloca %TokenType
  %"$tmpForRef318" = alloca %StringRef
  %tmp.StringRef319 = alloca %StringRef
  %tmp.this325 = alloca %TokenType
  %"$tmpForRef326" = alloca %StringRef
  %tmp.StringRef327 = alloca %StringRef
  %tmp.this333 = alloca %TokenType
  %"$tmpForRef334" = alloca %StringRef
  %tmp.StringRef335 = alloca %StringRef
  %tmp.this341 = alloca %TokenType
  %"$tmpForRef342" = alloca %StringRef
  %tmp.StringRef343 = alloca %StringRef
  %tmp.this349 = alloca %TokenType
  %"$tmpForRef350" = alloca %StringRef
  %tmp.StringRef351 = alloca %StringRef
  %tmp.this357 = alloca %TokenType
  %"$tmpForRef358" = alloca %StringRef
  %tmp.StringRef359 = alloca %StringRef
  %tmp.this365 = alloca %TokenType
  %"$tmpForRef366" = alloca %StringRef
  %tmp.StringRef367 = alloca %StringRef
  %tmp.this373 = alloca %TokenType
  %"$tmpForRef374" = alloca %StringRef
  %tmp.StringRef375 = alloca %StringRef
  %tmp.this381 = alloca %TokenType
  %"$tmpForRef382" = alloca %StringRef
  %tmp.StringRef383 = alloca %StringRef
  %tmp.this388 = alloca %TokenType
  %"$tmpForRef389" = alloca %StringRef
  %tmp.StringRef390 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.417(%TokenType* %tmp.this, i32 0)
  %1 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this)
  br i1 %1, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %2 = load %String*, %String** %_result.addr
  %3 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %4 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.43, i32 0, i32 0), i8** %3
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.43, i32 0, i32 11), i8** %4
  %5 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %5, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %2, %StringRef* %"$tmpForRef")
  ret void

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %if_end4, %dumy_block
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_else
  call void @ctor.417(%TokenType* %tmp.this5, i32 1)
  %6 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this5)
  br i1 %6, label %if_then2, label %if_else3

if_then2:                                         ; preds = %if_block1
  %7 = load %String*, %String** %_result.addr
  %8 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef7, i32 0, i32 0
  %9 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef7, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.44, i32 0, i32 0), i8** %8
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.44, i32 0, i32 8), i8** %9
  %10 = load %StringRef, %StringRef* %tmp.StringRef7
  store %StringRef %10, %StringRef* %"$tmpForRef6"
  call void @ctor.471(%String* %7, %StringRef* %"$tmpForRef6")
  ret void

if_else3:                                         ; preds = %if_block1
  br label %if_block9

if_end4:                                          ; preds = %if_end12, %dumy_block8
  br label %if_end

dumy_block8:                                      ; No predecessors!
  br label %if_end4

if_block9:                                        ; preds = %if_else3
  call void @ctor.417(%TokenType* %tmp.this13, i32 2)
  %11 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this13)
  br i1 %11, label %if_then10, label %if_else11

if_then10:                                        ; preds = %if_block9
  %12 = load %String*, %String** %_result.addr
  %13 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef15, i32 0, i32 0
  %14 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef15, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.45, i32 0, i32 0), i8** %13
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.45, i32 0, i32 8), i8** %14
  %15 = load %StringRef, %StringRef* %tmp.StringRef15
  store %StringRef %15, %StringRef* %"$tmpForRef14"
  call void @ctor.471(%String* %12, %StringRef* %"$tmpForRef14")
  ret void

if_else11:                                        ; preds = %if_block9
  br label %if_block17

if_end12:                                         ; preds = %if_end20, %dumy_block16
  br label %if_end4

dumy_block16:                                     ; No predecessors!
  br label %if_end12

if_block17:                                       ; preds = %if_else11
  call void @ctor.417(%TokenType* %tmp.this21, i32 3)
  %16 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this21)
  br i1 %16, label %if_then18, label %if_else19

if_then18:                                        ; preds = %if_block17
  %17 = load %String*, %String** %_result.addr
  %18 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef23, i32 0, i32 0
  %19 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef23, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.46, i32 0, i32 0), i8** %18
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.46, i32 0, i32 8), i8** %19
  %20 = load %StringRef, %StringRef* %tmp.StringRef23
  store %StringRef %20, %StringRef* %"$tmpForRef22"
  call void @ctor.471(%String* %17, %StringRef* %"$tmpForRef22")
  ret void

if_else19:                                        ; preds = %if_block17
  br label %if_block25

if_end20:                                         ; preds = %if_end28, %dumy_block24
  br label %if_end12

dumy_block24:                                     ; No predecessors!
  br label %if_end20

if_block25:                                       ; preds = %if_else19
  call void @ctor.417(%TokenType* %tmp.this29, i32 4)
  %21 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this29)
  br i1 %21, label %if_then26, label %if_else27

if_then26:                                        ; preds = %if_block25
  %22 = load %String*, %String** %_result.addr
  %23 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef31, i32 0, i32 0
  %24 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef31, i32 0, i32 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.47, i32 0, i32 0), i8** %23
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.47, i32 0, i32 9), i8** %24
  %25 = load %StringRef, %StringRef* %tmp.StringRef31
  store %StringRef %25, %StringRef* %"$tmpForRef30"
  call void @ctor.471(%String* %22, %StringRef* %"$tmpForRef30")
  ret void

if_else27:                                        ; preds = %if_block25
  br label %if_block33

if_end28:                                         ; preds = %if_end36, %dumy_block32
  br label %if_end20

dumy_block32:                                     ; No predecessors!
  br label %if_end28

if_block33:                                       ; preds = %if_else27
  call void @ctor.417(%TokenType* %tmp.this37, i32 5)
  %26 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this37)
  br i1 %26, label %if_then34, label %if_else35

if_then34:                                        ; preds = %if_block33
  %27 = load %String*, %String** %_result.addr
  %28 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef39, i32 0, i32 0
  %29 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef39, i32 0, i32 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.48, i32 0, i32 0), i8** %28
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.48, i32 0, i32 10), i8** %29
  %30 = load %StringRef, %StringRef* %tmp.StringRef39
  store %StringRef %30, %StringRef* %"$tmpForRef38"
  call void @ctor.471(%String* %27, %StringRef* %"$tmpForRef38")
  ret void

if_else35:                                        ; preds = %if_block33
  br label %if_block41

if_end36:                                         ; preds = %if_end44, %dumy_block40
  br label %if_end28

dumy_block40:                                     ; No predecessors!
  br label %if_end36

if_block41:                                       ; preds = %if_else35
  call void @ctor.417(%TokenType* %tmp.this45, i32 6)
  %31 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this45)
  br i1 %31, label %if_then42, label %if_else43

if_then42:                                        ; preds = %if_block41
  %32 = load %String*, %String** %_result.addr
  %33 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef47, i32 0, i32 0
  %34 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef47, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.49, i32 0, i32 0), i8** %33
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.49, i32 0, i32 5), i8** %34
  %35 = load %StringRef, %StringRef* %tmp.StringRef47
  store %StringRef %35, %StringRef* %"$tmpForRef46"
  call void @ctor.471(%String* %32, %StringRef* %"$tmpForRef46")
  ret void

if_else43:                                        ; preds = %if_block41
  br label %if_block49

if_end44:                                         ; preds = %if_end52, %dumy_block48
  br label %if_end36

dumy_block48:                                     ; No predecessors!
  br label %if_end44

if_block49:                                       ; preds = %if_else43
  call void @ctor.417(%TokenType* %tmp.this53, i32 8)
  %36 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this53)
  br i1 %36, label %if_then50, label %if_else51

if_then50:                                        ; preds = %if_block49
  %37 = load %String*, %String** %_result.addr
  %38 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef55, i32 0, i32 0
  %39 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef55, i32 0, i32 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.50, i32 0, i32 0), i8** %38
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.50, i32 0, i32 9), i8** %39
  %40 = load %StringRef, %StringRef* %tmp.StringRef55
  store %StringRef %40, %StringRef* %"$tmpForRef54"
  call void @ctor.471(%String* %37, %StringRef* %"$tmpForRef54")
  ret void

if_else51:                                        ; preds = %if_block49
  br label %if_block57

if_end52:                                         ; preds = %if_end60, %dumy_block56
  br label %if_end44

dumy_block56:                                     ; No predecessors!
  br label %if_end52

if_block57:                                       ; preds = %if_else51
  call void @ctor.417(%TokenType* %tmp.this61, i32 9)
  %41 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this61)
  br i1 %41, label %if_then58, label %if_else59

if_then58:                                        ; preds = %if_block57
  %42 = load %String*, %String** %_result.addr
  %43 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef63, i32 0, i32 0
  %44 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef63, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.51, i32 0, i32 0), i8** %43
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.51, i32 0, i32 7), i8** %44
  %45 = load %StringRef, %StringRef* %tmp.StringRef63
  store %StringRef %45, %StringRef* %"$tmpForRef62"
  call void @ctor.471(%String* %42, %StringRef* %"$tmpForRef62")
  ret void

if_else59:                                        ; preds = %if_block57
  br label %if_block65

if_end60:                                         ; preds = %if_end68, %dumy_block64
  br label %if_end52

dumy_block64:                                     ; No predecessors!
  br label %if_end60

if_block65:                                       ; preds = %if_else59
  call void @ctor.417(%TokenType* %tmp.this69, i32 7)
  %46 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this69)
  br i1 %46, label %if_then66, label %if_else67

if_then66:                                        ; preds = %if_block65
  %47 = load %String*, %String** %_result.addr
  %48 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef71, i32 0, i32 0
  %49 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef71, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.52, i32 0, i32 0), i8** %48
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.52, i32 0, i32 5), i8** %49
  %50 = load %StringRef, %StringRef* %tmp.StringRef71
  store %StringRef %50, %StringRef* %"$tmpForRef70"
  call void @ctor.471(%String* %47, %StringRef* %"$tmpForRef70")
  ret void

if_else67:                                        ; preds = %if_block65
  br label %if_block73

if_end68:                                         ; preds = %if_end76, %dumy_block72
  br label %if_end60

dumy_block72:                                     ; No predecessors!
  br label %if_end68

if_block73:                                       ; preds = %if_else67
  call void @ctor.417(%TokenType* %tmp.this77, i32 10)
  %51 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this77)
  br i1 %51, label %if_then74, label %if_else75

if_then74:                                        ; preds = %if_block73
  %52 = load %String*, %String** %_result.addr
  %53 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef79, i32 0, i32 0
  %54 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef79, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.53, i32 0, i32 0), i8** %53
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.53, i32 0, i32 5), i8** %54
  %55 = load %StringRef, %StringRef* %tmp.StringRef79
  store %StringRef %55, %StringRef* %"$tmpForRef78"
  call void @ctor.471(%String* %52, %StringRef* %"$tmpForRef78")
  ret void

if_else75:                                        ; preds = %if_block73
  br label %if_block81

if_end76:                                         ; preds = %if_end84, %dumy_block80
  br label %if_end68

dumy_block80:                                     ; No predecessors!
  br label %if_end76

if_block81:                                       ; preds = %if_else75
  call void @ctor.417(%TokenType* %tmp.this85, i32 11)
  %56 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this85)
  br i1 %56, label %if_then82, label %if_else83

if_then82:                                        ; preds = %if_block81
  %57 = load %String*, %String** %_result.addr
  %58 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef87, i32 0, i32 0
  %59 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef87, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.54, i32 0, i32 0), i8** %58
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.54, i32 0, i32 7), i8** %59
  %60 = load %StringRef, %StringRef* %tmp.StringRef87
  store %StringRef %60, %StringRef* %"$tmpForRef86"
  call void @ctor.471(%String* %57, %StringRef* %"$tmpForRef86")
  ret void

if_else83:                                        ; preds = %if_block81
  br label %if_block89

if_end84:                                         ; preds = %if_end92, %dumy_block88
  br label %if_end76

dumy_block88:                                     ; No predecessors!
  br label %if_end84

if_block89:                                       ; preds = %if_else83
  call void @ctor.417(%TokenType* %tmp.this93, i32 12)
  %61 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this93)
  br i1 %61, label %if_then90, label %if_else91

if_then90:                                        ; preds = %if_block89
  %62 = load %String*, %String** %_result.addr
  %63 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef95, i32 0, i32 0
  %64 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef95, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.55, i32 0, i32 0), i8** %63
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.55, i32 0, i32 7), i8** %64
  %65 = load %StringRef, %StringRef* %tmp.StringRef95
  store %StringRef %65, %StringRef* %"$tmpForRef94"
  call void @ctor.471(%String* %62, %StringRef* %"$tmpForRef94")
  ret void

if_else91:                                        ; preds = %if_block89
  br label %if_block97

if_end92:                                         ; preds = %if_end100, %dumy_block96
  br label %if_end84

dumy_block96:                                     ; No predecessors!
  br label %if_end92

if_block97:                                       ; preds = %if_else91
  call void @ctor.417(%TokenType* %tmp.this101, i32 13)
  %66 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this101)
  br i1 %66, label %if_then98, label %if_else99

if_then98:                                        ; preds = %if_block97
  %67 = load %String*, %String** %_result.addr
  %68 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef103, i32 0, i32 0
  %69 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef103, i32 0, i32 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.56, i32 0, i32 0), i8** %68
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.56, i32 0, i32 10), i8** %69
  %70 = load %StringRef, %StringRef* %tmp.StringRef103
  store %StringRef %70, %StringRef* %"$tmpForRef102"
  call void @ctor.471(%String* %67, %StringRef* %"$tmpForRef102")
  ret void

if_else99:                                        ; preds = %if_block97
  br label %if_block105

if_end100:                                        ; preds = %if_end108, %dumy_block104
  br label %if_end92

dumy_block104:                                    ; No predecessors!
  br label %if_end100

if_block105:                                      ; preds = %if_else99
  call void @ctor.417(%TokenType* %tmp.this109, i32 14)
  %71 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this109)
  br i1 %71, label %if_then106, label %if_else107

if_then106:                                       ; preds = %if_block105
  %72 = load %String*, %String** %_result.addr
  %73 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef111, i32 0, i32 0
  %74 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef111, i32 0, i32 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.57, i32 0, i32 0), i8** %73
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.57, i32 0, i32 9), i8** %74
  %75 = load %StringRef, %StringRef* %tmp.StringRef111
  store %StringRef %75, %StringRef* %"$tmpForRef110"
  call void @ctor.471(%String* %72, %StringRef* %"$tmpForRef110")
  ret void

if_else107:                                       ; preds = %if_block105
  br label %if_block113

if_end108:                                        ; preds = %if_end116, %dumy_block112
  br label %if_end100

dumy_block112:                                    ; No predecessors!
  br label %if_end108

if_block113:                                      ; preds = %if_else107
  call void @ctor.417(%TokenType* %tmp.this117, i32 15)
  %76 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this117)
  br i1 %76, label %if_then114, label %if_else115

if_then114:                                       ; preds = %if_block113
  %77 = load %String*, %String** %_result.addr
  %78 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef119, i32 0, i32 0
  %79 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef119, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.58, i32 0, i32 0), i8** %78
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.58, i32 0, i32 5), i8** %79
  %80 = load %StringRef, %StringRef* %tmp.StringRef119
  store %StringRef %80, %StringRef* %"$tmpForRef118"
  call void @ctor.471(%String* %77, %StringRef* %"$tmpForRef118")
  ret void

if_else115:                                       ; preds = %if_block113
  br label %if_block121

if_end116:                                        ; preds = %if_end124, %dumy_block120
  br label %if_end108

dumy_block120:                                    ; No predecessors!
  br label %if_end116

if_block121:                                      ; preds = %if_else115
  call void @ctor.417(%TokenType* %tmp.this125, i32 16)
  %81 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this125)
  br i1 %81, label %if_then122, label %if_else123

if_then122:                                       ; preds = %if_block121
  %82 = load %String*, %String** %_result.addr
  %83 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef127, i32 0, i32 0
  %84 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef127, i32 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.59, i32 0, i32 0), i8** %83
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.59, i32 0, i32 4), i8** %84
  %85 = load %StringRef, %StringRef* %tmp.StringRef127
  store %StringRef %85, %StringRef* %"$tmpForRef126"
  call void @ctor.471(%String* %82, %StringRef* %"$tmpForRef126")
  ret void

if_else123:                                       ; preds = %if_block121
  br label %if_block129

if_end124:                                        ; preds = %if_end132, %dumy_block128
  br label %if_end116

dumy_block128:                                    ; No predecessors!
  br label %if_end124

if_block129:                                      ; preds = %if_else123
  call void @ctor.417(%TokenType* %tmp.this133, i32 17)
  %86 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this133)
  br i1 %86, label %if_then130, label %if_else131

if_then130:                                       ; preds = %if_block129
  %87 = load %String*, %String** %_result.addr
  %88 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef135, i32 0, i32 0
  %89 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef135, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.60, i32 0, i32 0), i8** %88
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.60, i32 0, i32 8), i8** %89
  %90 = load %StringRef, %StringRef* %tmp.StringRef135
  store %StringRef %90, %StringRef* %"$tmpForRef134"
  call void @ctor.471(%String* %87, %StringRef* %"$tmpForRef134")
  ret void

if_else131:                                       ; preds = %if_block129
  br label %if_block137

if_end132:                                        ; preds = %if_end140, %dumy_block136
  br label %if_end124

dumy_block136:                                    ; No predecessors!
  br label %if_end132

if_block137:                                      ; preds = %if_else131
  call void @ctor.417(%TokenType* %tmp.this141, i32 18)
  %91 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this141)
  br i1 %91, label %if_then138, label %if_else139

if_then138:                                       ; preds = %if_block137
  %92 = load %String*, %String** %_result.addr
  %93 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef143, i32 0, i32 0
  %94 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef143, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.61, i32 0, i32 0), i8** %93
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.61, i32 0, i32 7), i8** %94
  %95 = load %StringRef, %StringRef* %tmp.StringRef143
  store %StringRef %95, %StringRef* %"$tmpForRef142"
  call void @ctor.471(%String* %92, %StringRef* %"$tmpForRef142")
  ret void

if_else139:                                       ; preds = %if_block137
  br label %if_block145

if_end140:                                        ; preds = %if_end148, %dumy_block144
  br label %if_end132

dumy_block144:                                    ; No predecessors!
  br label %if_end140

if_block145:                                      ; preds = %if_else139
  call void @ctor.417(%TokenType* %tmp.this149, i32 19)
  %96 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this149)
  br i1 %96, label %if_then146, label %if_else147

if_then146:                                       ; preds = %if_block145
  %97 = load %String*, %String** %_result.addr
  %98 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef151, i32 0, i32 0
  %99 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef151, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.62, i32 0, i32 0), i8** %98
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.62, i32 0, i32 5), i8** %99
  %100 = load %StringRef, %StringRef* %tmp.StringRef151
  store %StringRef %100, %StringRef* %"$tmpForRef150"
  call void @ctor.471(%String* %97, %StringRef* %"$tmpForRef150")
  ret void

if_else147:                                       ; preds = %if_block145
  br label %if_block153

if_end148:                                        ; preds = %if_end156, %dumy_block152
  br label %if_end140

dumy_block152:                                    ; No predecessors!
  br label %if_end148

if_block153:                                      ; preds = %if_else147
  call void @ctor.417(%TokenType* %tmp.this157, i32 20)
  %101 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this157)
  br i1 %101, label %if_then154, label %if_else155

if_then154:                                       ; preds = %if_block153
  %102 = load %String*, %String** %_result.addr
  %103 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef159, i32 0, i32 0
  %104 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef159, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.63, i32 0, i32 0), i8** %103
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.63, i32 0, i32 7), i8** %104
  %105 = load %StringRef, %StringRef* %tmp.StringRef159
  store %StringRef %105, %StringRef* %"$tmpForRef158"
  call void @ctor.471(%String* %102, %StringRef* %"$tmpForRef158")
  ret void

if_else155:                                       ; preds = %if_block153
  br label %if_block161

if_end156:                                        ; preds = %if_end164, %dumy_block160
  br label %if_end148

dumy_block160:                                    ; No predecessors!
  br label %if_end156

if_block161:                                      ; preds = %if_else155
  call void @ctor.417(%TokenType* %tmp.this165, i32 21)
  %106 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this165)
  br i1 %106, label %if_then162, label %if_else163

if_then162:                                       ; preds = %if_block161
  %107 = load %String*, %String** %_result.addr
  %108 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef167, i32 0, i32 0
  %109 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef167, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.64, i32 0, i32 0), i8** %108
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.64, i32 0, i32 7), i8** %109
  %110 = load %StringRef, %StringRef* %tmp.StringRef167
  store %StringRef %110, %StringRef* %"$tmpForRef166"
  call void @ctor.471(%String* %107, %StringRef* %"$tmpForRef166")
  ret void

if_else163:                                       ; preds = %if_block161
  br label %if_block169

if_end164:                                        ; preds = %if_end172, %dumy_block168
  br label %if_end156

dumy_block168:                                    ; No predecessors!
  br label %if_end164

if_block169:                                      ; preds = %if_else163
  call void @ctor.417(%TokenType* %tmp.this173, i32 22)
  %111 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this173)
  br i1 %111, label %if_then170, label %if_else171

if_then170:                                       ; preds = %if_block169
  %112 = load %String*, %String** %_result.addr
  %113 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef175, i32 0, i32 0
  %114 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef175, i32 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.65, i32 0, i32 0), i8** %113
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.65, i32 0, i32 6), i8** %114
  %115 = load %StringRef, %StringRef* %tmp.StringRef175
  store %StringRef %115, %StringRef* %"$tmpForRef174"
  call void @ctor.471(%String* %112, %StringRef* %"$tmpForRef174")
  ret void

if_else171:                                       ; preds = %if_block169
  br label %if_block177

if_end172:                                        ; preds = %if_end180, %dumy_block176
  br label %if_end164

dumy_block176:                                    ; No predecessors!
  br label %if_end172

if_block177:                                      ; preds = %if_else171
  call void @ctor.417(%TokenType* %tmp.this181, i32 23)
  %116 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this181)
  br i1 %116, label %if_then178, label %if_else179

if_then178:                                       ; preds = %if_block177
  %117 = load %String*, %String** %_result.addr
  %118 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef183, i32 0, i32 0
  %119 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef183, i32 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.66, i32 0, i32 0), i8** %118
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.66, i32 0, i32 6), i8** %119
  %120 = load %StringRef, %StringRef* %tmp.StringRef183
  store %StringRef %120, %StringRef* %"$tmpForRef182"
  call void @ctor.471(%String* %117, %StringRef* %"$tmpForRef182")
  ret void

if_else179:                                       ; preds = %if_block177
  br label %if_block185

if_end180:                                        ; preds = %if_end188, %dumy_block184
  br label %if_end172

dumy_block184:                                    ; No predecessors!
  br label %if_end180

if_block185:                                      ; preds = %if_else179
  call void @ctor.417(%TokenType* %tmp.this189, i32 24)
  %121 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this189)
  br i1 %121, label %if_then186, label %if_else187

if_then186:                                       ; preds = %if_block185
  %122 = load %String*, %String** %_result.addr
  %123 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef191, i32 0, i32 0
  %124 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef191, i32 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.67, i32 0, i32 0), i8** %123
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.67, i32 0, i32 6), i8** %124
  %125 = load %StringRef, %StringRef* %tmp.StringRef191
  store %StringRef %125, %StringRef* %"$tmpForRef190"
  call void @ctor.471(%String* %122, %StringRef* %"$tmpForRef190")
  ret void

if_else187:                                       ; preds = %if_block185
  br label %if_block193

if_end188:                                        ; preds = %if_end196, %dumy_block192
  br label %if_end180

dumy_block192:                                    ; No predecessors!
  br label %if_end188

if_block193:                                      ; preds = %if_else187
  call void @ctor.417(%TokenType* %tmp.this197, i32 25)
  %126 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this197)
  br i1 %126, label %if_then194, label %if_else195

if_then194:                                       ; preds = %if_block193
  %127 = load %String*, %String** %_result.addr
  %128 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef199, i32 0, i32 0
  %129 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef199, i32 0, i32 1
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.68, i32 0, i32 0), i8** %128
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.68, i32 0, i32 15), i8** %129
  %130 = load %StringRef, %StringRef* %tmp.StringRef199
  store %StringRef %130, %StringRef* %"$tmpForRef198"
  call void @ctor.471(%String* %127, %StringRef* %"$tmpForRef198")
  ret void

if_else195:                                       ; preds = %if_block193
  br label %if_block201

if_end196:                                        ; preds = %if_end204, %dumy_block200
  br label %if_end188

dumy_block200:                                    ; No predecessors!
  br label %if_end196

if_block201:                                      ; preds = %if_else195
  call void @ctor.417(%TokenType* %tmp.this205, i32 26)
  %131 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this205)
  br i1 %131, label %if_then202, label %if_else203

if_then202:                                       ; preds = %if_block201
  %132 = load %String*, %String** %_result.addr
  %133 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef207, i32 0, i32 0
  %134 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef207, i32 0, i32 1
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.69, i32 0, i32 0), i8** %133
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.69, i32 0, i32 15), i8** %134
  %135 = load %StringRef, %StringRef* %tmp.StringRef207
  store %StringRef %135, %StringRef* %"$tmpForRef206"
  call void @ctor.471(%String* %132, %StringRef* %"$tmpForRef206")
  ret void

if_else203:                                       ; preds = %if_block201
  br label %if_block209

if_end204:                                        ; preds = %if_end212, %dumy_block208
  br label %if_end196

dumy_block208:                                    ; No predecessors!
  br label %if_end204

if_block209:                                      ; preds = %if_else203
  call void @ctor.417(%TokenType* %tmp.this213, i32 27)
  %136 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this213)
  br i1 %136, label %if_then210, label %if_else211

if_then210:                                       ; preds = %if_block209
  %137 = load %String*, %String** %_result.addr
  %138 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef215, i32 0, i32 0
  %139 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef215, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.70, i32 0, i32 0), i8** %138
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.70, i32 0, i32 3), i8** %139
  %140 = load %StringRef, %StringRef* %tmp.StringRef215
  store %StringRef %140, %StringRef* %"$tmpForRef214"
  call void @ctor.471(%String* %137, %StringRef* %"$tmpForRef214")
  ret void

if_else211:                                       ; preds = %if_block209
  br label %if_block217

if_end212:                                        ; preds = %if_end220, %dumy_block216
  br label %if_end204

dumy_block216:                                    ; No predecessors!
  br label %if_end212

if_block217:                                      ; preds = %if_else211
  call void @ctor.417(%TokenType* %tmp.this221, i32 28)
  %141 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this221)
  br i1 %141, label %if_then218, label %if_else219

if_then218:                                       ; preds = %if_block217
  %142 = load %String*, %String** %_result.addr
  %143 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef223, i32 0, i32 0
  %144 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef223, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.71, i32 0, i32 0), i8** %143
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.71, i32 0, i32 3), i8** %144
  %145 = load %StringRef, %StringRef* %tmp.StringRef223
  store %StringRef %145, %StringRef* %"$tmpForRef222"
  call void @ctor.471(%String* %142, %StringRef* %"$tmpForRef222")
  ret void

if_else219:                                       ; preds = %if_block217
  br label %if_block225

if_end220:                                        ; preds = %if_end228, %dumy_block224
  br label %if_end212

dumy_block224:                                    ; No predecessors!
  br label %if_end220

if_block225:                                      ; preds = %if_else219
  call void @ctor.417(%TokenType* %tmp.this229, i32 29)
  %146 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this229)
  br i1 %146, label %if_then226, label %if_else227

if_then226:                                       ; preds = %if_block225
  %147 = load %String*, %String** %_result.addr
  %148 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef231, i32 0, i32 0
  %149 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef231, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.72, i32 0, i32 0), i8** %148
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.72, i32 0, i32 3), i8** %149
  %150 = load %StringRef, %StringRef* %tmp.StringRef231
  store %StringRef %150, %StringRef* %"$tmpForRef230"
  call void @ctor.471(%String* %147, %StringRef* %"$tmpForRef230")
  ret void

if_else227:                                       ; preds = %if_block225
  br label %if_block233

if_end228:                                        ; preds = %if_end236, %dumy_block232
  br label %if_end220

dumy_block232:                                    ; No predecessors!
  br label %if_end228

if_block233:                                      ; preds = %if_else227
  call void @ctor.417(%TokenType* %tmp.this237, i32 30)
  %151 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this237)
  br i1 %151, label %if_then234, label %if_else235

if_then234:                                       ; preds = %if_block233
  %152 = load %String*, %String** %_result.addr
  %153 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef239, i32 0, i32 0
  %154 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef239, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.73, i32 0, i32 0), i8** %153
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.73, i32 0, i32 3), i8** %154
  %155 = load %StringRef, %StringRef* %tmp.StringRef239
  store %StringRef %155, %StringRef* %"$tmpForRef238"
  call void @ctor.471(%String* %152, %StringRef* %"$tmpForRef238")
  ret void

if_else235:                                       ; preds = %if_block233
  br label %if_block241

if_end236:                                        ; preds = %if_end244, %dumy_block240
  br label %if_end228

dumy_block240:                                    ; No predecessors!
  br label %if_end236

if_block241:                                      ; preds = %if_else235
  call void @ctor.417(%TokenType* %tmp.this245, i32 31)
  %156 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this245)
  br i1 %156, label %if_then242, label %if_else243

if_then242:                                       ; preds = %if_block241
  %157 = load %String*, %String** %_result.addr
  %158 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef247, i32 0, i32 0
  %159 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef247, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.74, i32 0, i32 0), i8** %158
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.74, i32 0, i32 3), i8** %159
  %160 = load %StringRef, %StringRef* %tmp.StringRef247
  store %StringRef %160, %StringRef* %"$tmpForRef246"
  call void @ctor.471(%String* %157, %StringRef* %"$tmpForRef246")
  ret void

if_else243:                                       ; preds = %if_block241
  br label %if_block249

if_end244:                                        ; preds = %if_end252, %dumy_block248
  br label %if_end236

dumy_block248:                                    ; No predecessors!
  br label %if_end244

if_block249:                                      ; preds = %if_else243
  call void @ctor.417(%TokenType* %tmp.this253, i32 32)
  %161 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this253)
  br i1 %161, label %if_then250, label %if_else251

if_then250:                                       ; preds = %if_block249
  %162 = load %String*, %String** %_result.addr
  %163 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef255, i32 0, i32 0
  %164 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef255, i32 0, i32 1
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.75, i32 0, i32 0), i8** %163
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.75, i32 0, i32 16), i8** %164
  %165 = load %StringRef, %StringRef* %tmp.StringRef255
  store %StringRef %165, %StringRef* %"$tmpForRef254"
  call void @ctor.471(%String* %162, %StringRef* %"$tmpForRef254")
  ret void

if_else251:                                       ; preds = %if_block249
  br label %if_block257

if_end252:                                        ; preds = %if_end260, %dumy_block256
  br label %if_end244

dumy_block256:                                    ; No predecessors!
  br label %if_end252

if_block257:                                      ; preds = %if_else251
  call void @ctor.417(%TokenType* %tmp.this261, i32 33)
  %166 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this261)
  br i1 %166, label %if_then258, label %if_else259

if_then258:                                       ; preds = %if_block257
  %167 = load %String*, %String** %_result.addr
  %168 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef263, i32 0, i32 0
  %169 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef263, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.76, i32 0, i32 0), i8** %168
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.76, i32 0, i32 3), i8** %169
  %170 = load %StringRef, %StringRef* %tmp.StringRef263
  store %StringRef %170, %StringRef* %"$tmpForRef262"
  call void @ctor.471(%String* %167, %StringRef* %"$tmpForRef262")
  ret void

if_else259:                                       ; preds = %if_block257
  br label %if_block265

if_end260:                                        ; preds = %if_end268, %dumy_block264
  br label %if_end252

dumy_block264:                                    ; No predecessors!
  br label %if_end260

if_block265:                                      ; preds = %if_else259
  call void @ctor.417(%TokenType* %tmp.this269, i32 34)
  %171 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this269)
  br i1 %171, label %if_then266, label %if_else267

if_then266:                                       ; preds = %if_block265
  %172 = load %String*, %String** %_result.addr
  %173 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef271, i32 0, i32 0
  %174 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef271, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.77, i32 0, i32 0), i8** %173
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.77, i32 0, i32 3), i8** %174
  %175 = load %StringRef, %StringRef* %tmp.StringRef271
  store %StringRef %175, %StringRef* %"$tmpForRef270"
  call void @ctor.471(%String* %172, %StringRef* %"$tmpForRef270")
  ret void

if_else267:                                       ; preds = %if_block265
  br label %if_block273

if_end268:                                        ; preds = %if_end276, %dumy_block272
  br label %if_end260

dumy_block272:                                    ; No predecessors!
  br label %if_end268

if_block273:                                      ; preds = %if_else267
  call void @ctor.417(%TokenType* %tmp.this277, i32 35)
  %176 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this277)
  br i1 %176, label %if_then274, label %if_else275

if_then274:                                       ; preds = %if_block273
  %177 = load %String*, %String** %_result.addr
  %178 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef279, i32 0, i32 0
  %179 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef279, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.78, i32 0, i32 0), i8** %178
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.78, i32 0, i32 3), i8** %179
  %180 = load %StringRef, %StringRef* %tmp.StringRef279
  store %StringRef %180, %StringRef* %"$tmpForRef278"
  call void @ctor.471(%String* %177, %StringRef* %"$tmpForRef278")
  ret void

if_else275:                                       ; preds = %if_block273
  br label %if_block281

if_end276:                                        ; preds = %if_end284, %dumy_block280
  br label %if_end268

dumy_block280:                                    ; No predecessors!
  br label %if_end276

if_block281:                                      ; preds = %if_else275
  call void @ctor.417(%TokenType* %tmp.this285, i32 36)
  %181 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this285)
  br i1 %181, label %if_then282, label %if_else283

if_then282:                                       ; preds = %if_block281
  %182 = load %String*, %String** %_result.addr
  %183 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef287, i32 0, i32 0
  %184 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef287, i32 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.79, i32 0, i32 0), i8** %183
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.79, i32 0, i32 3), i8** %184
  %185 = load %StringRef, %StringRef* %tmp.StringRef287
  store %StringRef %185, %StringRef* %"$tmpForRef286"
  call void @ctor.471(%String* %182, %StringRef* %"$tmpForRef286")
  ret void

if_else283:                                       ; preds = %if_block281
  br label %if_block289

if_end284:                                        ; preds = %if_end292, %dumy_block288
  br label %if_end276

dumy_block288:                                    ; No predecessors!
  br label %if_end284

if_block289:                                      ; preds = %if_else283
  call void @ctor.417(%TokenType* %tmp.this293, i32 37)
  %186 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this293)
  br i1 %186, label %if_then290, label %if_else291

if_then290:                                       ; preds = %if_block289
  %187 = load %String*, %String** %_result.addr
  %188 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef295, i32 0, i32 0
  %189 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef295, i32 0, i32 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.80, i32 0, i32 0), i8** %188
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.80, i32 0, i32 10), i8** %189
  %190 = load %StringRef, %StringRef* %tmp.StringRef295
  store %StringRef %190, %StringRef* %"$tmpForRef294"
  call void @ctor.471(%String* %187, %StringRef* %"$tmpForRef294")
  ret void

if_else291:                                       ; preds = %if_block289
  br label %if_block297

if_end292:                                        ; preds = %if_end300, %dumy_block296
  br label %if_end284

dumy_block296:                                    ; No predecessors!
  br label %if_end292

if_block297:                                      ; preds = %if_else291
  call void @ctor.417(%TokenType* %tmp.this301, i32 38)
  %191 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this301)
  br i1 %191, label %if_then298, label %if_else299

if_then298:                                       ; preds = %if_block297
  %192 = load %String*, %String** %_result.addr
  %193 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef303, i32 0, i32 0
  %194 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef303, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.81, i32 0, i32 0), i8** %193
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.81, i32 0, i32 8), i8** %194
  %195 = load %StringRef, %StringRef* %tmp.StringRef303
  store %StringRef %195, %StringRef* %"$tmpForRef302"
  call void @ctor.471(%String* %192, %StringRef* %"$tmpForRef302")
  ret void

if_else299:                                       ; preds = %if_block297
  br label %if_block305

if_end300:                                        ; preds = %if_end308, %dumy_block304
  br label %if_end292

dumy_block304:                                    ; No predecessors!
  br label %if_end300

if_block305:                                      ; preds = %if_else299
  call void @ctor.417(%TokenType* %tmp.this309, i32 39)
  %196 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this309)
  br i1 %196, label %if_then306, label %if_else307

if_then306:                                       ; preds = %if_block305
  %197 = load %String*, %String** %_result.addr
  %198 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef311, i32 0, i32 0
  %199 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef311, i32 0, i32 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.82, i32 0, i32 0), i8** %198
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.82, i32 0, i32 12), i8** %199
  %200 = load %StringRef, %StringRef* %tmp.StringRef311
  store %StringRef %200, %StringRef* %"$tmpForRef310"
  call void @ctor.471(%String* %197, %StringRef* %"$tmpForRef310")
  ret void

if_else307:                                       ; preds = %if_block305
  br label %if_block313

if_end308:                                        ; preds = %if_end316, %dumy_block312
  br label %if_end300

dumy_block312:                                    ; No predecessors!
  br label %if_end308

if_block313:                                      ; preds = %if_else307
  call void @ctor.417(%TokenType* %tmp.this317, i32 40)
  %201 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this317)
  br i1 %201, label %if_then314, label %if_else315

if_then314:                                       ; preds = %if_block313
  %202 = load %String*, %String** %_result.addr
  %203 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef319, i32 0, i32 0
  %204 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef319, i32 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.83, i32 0, i32 0), i8** %203
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.83, i32 0, i32 14), i8** %204
  %205 = load %StringRef, %StringRef* %tmp.StringRef319
  store %StringRef %205, %StringRef* %"$tmpForRef318"
  call void @ctor.471(%String* %202, %StringRef* %"$tmpForRef318")
  ret void

if_else315:                                       ; preds = %if_block313
  br label %if_block321

if_end316:                                        ; preds = %if_end324, %dumy_block320
  br label %if_end308

dumy_block320:                                    ; No predecessors!
  br label %if_end316

if_block321:                                      ; preds = %if_else315
  call void @ctor.417(%TokenType* %tmp.this325, i32 41)
  %206 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this325)
  br i1 %206, label %if_then322, label %if_else323

if_then322:                                       ; preds = %if_block321
  %207 = load %String*, %String** %_result.addr
  %208 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef327, i32 0, i32 0
  %209 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef327, i32 0, i32 1
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.84, i32 0, i32 0), i8** %208
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.84, i32 0, i32 11), i8** %209
  %210 = load %StringRef, %StringRef* %tmp.StringRef327
  store %StringRef %210, %StringRef* %"$tmpForRef326"
  call void @ctor.471(%String* %207, %StringRef* %"$tmpForRef326")
  ret void

if_else323:                                       ; preds = %if_block321
  br label %if_block329

if_end324:                                        ; preds = %if_end332, %dumy_block328
  br label %if_end316

dumy_block328:                                    ; No predecessors!
  br label %if_end324

if_block329:                                      ; preds = %if_else323
  call void @ctor.417(%TokenType* %tmp.this333, i32 42)
  %211 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this333)
  br i1 %211, label %if_then330, label %if_else331

if_then330:                                       ; preds = %if_block329
  %212 = load %String*, %String** %_result.addr
  %213 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef335, i32 0, i32 0
  %214 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef335, i32 0, i32 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.85, i32 0, i32 0), i8** %213
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.85, i32 0, i32 12), i8** %214
  %215 = load %StringRef, %StringRef* %tmp.StringRef335
  store %StringRef %215, %StringRef* %"$tmpForRef334"
  call void @ctor.471(%String* %212, %StringRef* %"$tmpForRef334")
  ret void

if_else331:                                       ; preds = %if_block329
  br label %if_block337

if_end332:                                        ; preds = %if_end340, %dumy_block336
  br label %if_end324

dumy_block336:                                    ; No predecessors!
  br label %if_end332

if_block337:                                      ; preds = %if_else331
  call void @ctor.417(%TokenType* %tmp.this341, i32 43)
  %216 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this341)
  br i1 %216, label %if_then338, label %if_else339

if_then338:                                       ; preds = %if_block337
  %217 = load %String*, %String** %_result.addr
  %218 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef343, i32 0, i32 0
  %219 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef343, i32 0, i32 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.86, i32 0, i32 0), i8** %218
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.86, i32 0, i32 12), i8** %219
  %220 = load %StringRef, %StringRef* %tmp.StringRef343
  store %StringRef %220, %StringRef* %"$tmpForRef342"
  call void @ctor.471(%String* %217, %StringRef* %"$tmpForRef342")
  ret void

if_else339:                                       ; preds = %if_block337
  br label %if_block345

if_end340:                                        ; preds = %if_end348, %dumy_block344
  br label %if_end332

dumy_block344:                                    ; No predecessors!
  br label %if_end340

if_block345:                                      ; preds = %if_else339
  call void @ctor.417(%TokenType* %tmp.this349, i32 44)
  %221 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this349)
  br i1 %221, label %if_then346, label %if_else347

if_then346:                                       ; preds = %if_block345
  %222 = load %String*, %String** %_result.addr
  %223 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef351, i32 0, i32 0
  %224 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef351, i32 0, i32 1
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.87, i32 0, i32 0), i8** %223
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.87, i32 0, i32 13), i8** %224
  %225 = load %StringRef, %StringRef* %tmp.StringRef351
  store %StringRef %225, %StringRef* %"$tmpForRef350"
  call void @ctor.471(%String* %222, %StringRef* %"$tmpForRef350")
  ret void

if_else347:                                       ; preds = %if_block345
  br label %if_block353

if_end348:                                        ; preds = %if_end356, %dumy_block352
  br label %if_end340

dumy_block352:                                    ; No predecessors!
  br label %if_end348

if_block353:                                      ; preds = %if_else347
  call void @ctor.417(%TokenType* %tmp.this357, i32 45)
  %226 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this357)
  br i1 %226, label %if_then354, label %if_else355

if_then354:                                       ; preds = %if_block353
  %227 = load %String*, %String** %_result.addr
  %228 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef359, i32 0, i32 0
  %229 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef359, i32 0, i32 1
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.88, i32 0, i32 0), i8** %228
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.88, i32 0, i32 13), i8** %229
  %230 = load %StringRef, %StringRef* %tmp.StringRef359
  store %StringRef %230, %StringRef* %"$tmpForRef358"
  call void @ctor.471(%String* %227, %StringRef* %"$tmpForRef358")
  ret void

if_else355:                                       ; preds = %if_block353
  br label %if_block361

if_end356:                                        ; preds = %if_end364, %dumy_block360
  br label %if_end348

dumy_block360:                                    ; No predecessors!
  br label %if_end356

if_block361:                                      ; preds = %if_else355
  call void @ctor.417(%TokenType* %tmp.this365, i32 46)
  %231 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this365)
  br i1 %231, label %if_then362, label %if_else363

if_then362:                                       ; preds = %if_block361
  %232 = load %String*, %String** %_result.addr
  %233 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef367, i32 0, i32 0
  %234 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef367, i32 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.89, i32 0, i32 0), i8** %233
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.89, i32 0, i32 14), i8** %234
  %235 = load %StringRef, %StringRef* %tmp.StringRef367
  store %StringRef %235, %StringRef* %"$tmpForRef366"
  call void @ctor.471(%String* %232, %StringRef* %"$tmpForRef366")
  ret void

if_else363:                                       ; preds = %if_block361
  br label %if_block369

if_end364:                                        ; preds = %if_end372, %dumy_block368
  br label %if_end356

dumy_block368:                                    ; No predecessors!
  br label %if_end364

if_block369:                                      ; preds = %if_else363
  call void @ctor.417(%TokenType* %tmp.this373, i32 253)
  %236 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this373)
  br i1 %236, label %if_then370, label %if_else371

if_then370:                                       ; preds = %if_block369
  %237 = load %String*, %String** %_result.addr
  %238 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef375, i32 0, i32 0
  %239 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef375, i32 0, i32 1
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.90, i32 0, i32 0), i8** %238
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.90, i32 0, i32 13), i8** %239
  %240 = load %StringRef, %StringRef* %tmp.StringRef375
  store %StringRef %240, %StringRef* %"$tmpForRef374"
  call void @ctor.471(%String* %237, %StringRef* %"$tmpForRef374")
  ret void

if_else371:                                       ; preds = %if_block369
  br label %if_block377

if_end372:                                        ; preds = %if_end380, %dumy_block376
  br label %if_end364

dumy_block376:                                    ; No predecessors!
  br label %if_end372

if_block377:                                      ; preds = %if_else371
  call void @ctor.417(%TokenType* %tmp.this381, i32 254)
  %241 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this381)
  br i1 %241, label %if_then378, label %if_else379

if_then378:                                       ; preds = %if_block377
  %242 = load %String*, %String** %_result.addr
  %243 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef383, i32 0, i32 0
  %244 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef383, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.91, i32 0, i32 0), i8** %243
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.91, i32 0, i32 7), i8** %244
  %245 = load %StringRef, %StringRef* %tmp.StringRef383
  store %StringRef %245, %StringRef* %"$tmpForRef382"
  call void @ctor.471(%String* %242, %StringRef* %"$tmpForRef382")
  ret void

if_else379:                                       ; preds = %if_block377
  br label %if_block385

if_end380:                                        ; preds = %if_end387, %dumy_block384
  br label %if_end372

dumy_block384:                                    ; No predecessors!
  br label %if_end380

if_block385:                                      ; preds = %if_else379
  call void @ctor.417(%TokenType* %tmp.this388, i32 255)
  %246 = call i1 @"==.352"(%TokenType* %t.addr, %TokenType* %tmp.this388)
  br i1 %246, label %if_then386, label %if_end387

if_then386:                                       ; preds = %if_block385
  %247 = load %String*, %String** %_result.addr
  %248 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef390, i32 0, i32 0
  %249 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef390, i32 0, i32 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.92, i32 0, i32 0), i8** %248
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.92, i32 0, i32 10), i8** %249
  %250 = load %StringRef, %StringRef* %tmp.StringRef390
  store %StringRef %250, %StringRef* %"$tmpForRef389"
  call void @ctor.471(%String* %247, %StringRef* %"$tmpForRef389")
  ret void

if_end387:                                        ; preds = %dumy_block391, %if_block385
  br label %if_end380

dumy_block391:                                    ; No predecessors!
  br label %if_end387
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkIdentifier(%AstBuilder* %obj, %Location* %loc, %StringRef %id) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 18
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %id.addr
  %8 = call %Node @"().553"(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().553"(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %StringRef, %StringRef* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %1 to %Node (%UntypedPtr, %Location*, %StringRef)**
  %6 = load %Node (%UntypedPtr, %Location*, %StringRef)*, %Node (%UntypedPtr, %Location*, %StringRef)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, %StringRef %4)
  ret %Node %7
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.554"(%Node* %this, %Node* %other) #3 {
  %this.addr = alloca %Node*
  store %Node* %this, %Node** %this.addr
  %other.addr = alloca %Node*
  store %Node* %other, %Node** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Node*, %Node** %this.addr
  %2 = getelementptr inbounds %Node, %Node* %1, i32 0, i32 0
  %3 = load %Node*, %Node** %other.addr
  %4 = getelementptr inbounds %Node, %Node* %3, i32 0, i32 0
  call void @"=.288"(%UntypedPtr* %2, %UntypedPtr* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkStarExpr(%AstBuilder* %obj, %Location* %loc, %Node %base, %StringRef %id) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 20
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %base.addr
  %8 = load %StringRef, %StringRef* %id.addr
  %9 = call %Node @"().555"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %StringRef %8)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().555"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %StringRef %p4) #4 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %StringRef
  store %StringRef %p4, %StringRef* %p4.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %Node, %Node* %p3.addr
  %5 = load %StringRef, %StringRef* %p4.addr
  %6 = bitcast %"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %1 to %Node (%UntypedPtr, %Location*, %Node, %StringRef)**
  %7 = load %Node (%UntypedPtr, %Location*, %Node, %StringRef)*, %Node (%UntypedPtr, %Location*, %Node, %StringRef)** %6
  %8 = call %Node %7(%UntypedPtr %2, %Location* %3, %Node %4, %StringRef %5)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal void @span(%Location* sret %_result, %Location* %start, %Location* %end) #4 {
  %_result.addr = alloca %Location*
  store %Location* %_result, %Location** %_result.addr
  %start.addr = alloca %Location*
  store %Location* %start, %Location** %start.addr
  %end.addr = alloca %Location*
  store %Location* %end, %Location** %end.addr
  %res = alloca %Location
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %start.addr
  call void @ctor.182(%Location* %res, %Location* %1)
  %2 = load %Location*, %Location** %end.addr
  call void @copyEnd(%Location* %res, %Location* %2)
  %3 = load %Location*, %Location** %_result.addr
  call void @ctor.182(%Location* %3, %Location* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @copyEnd(%Location* %l, %Location* %other) #4 {
  %l.addr = alloca %Location*
  store %Location* %l, %Location** %l.addr
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %l.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 2
  %3 = load %Location*, %Location** %other.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 2
  call void @"=.285"(%LineCol* %2, %LineCol* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @lastLoc(%Location* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %_result.addr = alloca %Location*
  store %Location* %_result, %Location** %_result.addr
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %_result.addr
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 1
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  call void @ctor.182(%Location* %1, %Location* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkCompoundExpr(%AstBuilder* %obj, %Location* %loc, %Node %base, %StringRef %id) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 19
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %base.addr
  %8 = load %StringRef, %StringRef* %id.addr
  %9 = call %Node @"().555"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %StringRef %8)
  ret %Node %9
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.556(%Node* %this) #3 {
  %this.addr = alloca %Node*
  store %Node* %this, %Node** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Node*, %Node** %this.addr
  %2 = getelementptr inbounds %Node, %Node* %1, i32 0, i32 0
  call void @ctor.135(%UntypedPtr* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseStmts(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %topLevel, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %child = alloca %Node
  %"$tmpForRef" = alloca %Node
  %"$tmpForRef1" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = load i1, i1* %topLevel.addr
  %3 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i1 %2)
  store %Node %3, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %child, %Node* %"$tmpForRef")
  br label %if_block

while_step:                                       ; preds = %dumy_block2, %if_then
  br label %while_block

while_end:                                        ; preds = %if_end, %while_block
  ret void

if_block:                                         ; preds = %while_body
  %4 = load %Node, %Node* %child
  %5 = call i1 @isSet.595(%Node %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %6 = load %Node*, %Node** %res.addr
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 3
  %9 = load %Node*, %Node** %res.addr
  %10 = load %Node, %Node* %9
  %11 = load %Node, %Node* %child
  %12 = call %Node @addToNodeList(%AstBuilder* %8, %Node %10, %Node %11)
  store %Node %12, %Node* %"$tmpForRef1"
  call void @"=.554"(%Node* %6, %Node* %"$tmpForRef1")
  br label %while_step

if_end:                                           ; preds = %dumy_block, %if_block
  br label %while_end

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block2:                                      ; No predecessors!
  br label %while_step
}

; Function Attrs: noinline nounwind
define %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %topLevel) #5 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %res = alloca %Node
  %loc = alloca %Location
  %mods = alloca %Node
  %"$tmpForRef" = alloca %Node
  %found = alloca i1
  %"$tmpForRef56" = alloca %Node
  %"$tmpC" = alloca %Location
  %"$tmpC57" = alloca %Location
  %"$tmpC58" = alloca %String
  %tmp.StringRef = alloca %StringRef
  %"$tmpC59" = alloca %Token
  %tmp.StringRef60 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @consumeSemis(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %4 = call %Node @parseModifiers(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3)
  store %Node %4, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %mods, %Node* %"$tmpForRef")
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = call i1 @parseImportLineOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, %Node* %res)
  br i1 %6, label %cond.true37, label %cond.false38

cond.true:                                        ; preds = %cond.end3
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = call i1 @parseReturnStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %Node* %res)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res52 = phi i1 [ true, %cond.true ], [ %8, %cond.false ]
  store i1 %cond.res52, i1* %found
  br label %if_block

cond.true1:                                       ; preds = %cond.end6
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %10 = call i1 @parseContinueStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9, %Node* %res)
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res51 = phi i1 [ true, %cond.true1 ], [ %10, %cond.false2 ]
  br i1 %cond.res51, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = call i1 @parseBreakStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, %Node* %res)
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res50 = phi i1 [ true, %cond.true4 ], [ %12, %cond.false5 ]
  br i1 %cond.res50, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = load i1, i1* %topLevel.addr
  %15 = call i1 @parseWhileStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, %Node* %res, i1 %14)
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res49 = phi i1 [ true, %cond.true7 ], [ %15, %cond.false8 ]
  br i1 %cond.res49, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %cond.end15
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end15
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = load i1, i1* %topLevel.addr
  %18 = call i1 @parseForStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, %Node* %res, i1 %17)
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res48 = phi i1 [ true, %cond.true10 ], [ %18, %cond.false11 ]
  br i1 %cond.res48, label %cond.true7, label %cond.false8

cond.true13:                                      ; preds = %cond.end18
  br label %cond.end15

cond.false14:                                     ; preds = %cond.end18
  %19 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %20 = load i1, i1* %topLevel.addr
  %21 = call i1 @parseIfStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %19, %Node* %res, i1 %20)
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res47 = phi i1 [ true, %cond.true13 ], [ %21, %cond.false14 ]
  br i1 %cond.res47, label %cond.true10, label %cond.false11

cond.true16:                                      ; preds = %cond.end21
  br label %cond.end18

cond.false17:                                     ; preds = %cond.end21
  %22 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %23 = load i1, i1* %topLevel.addr
  %24 = call i1 @parseBlockStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %22, %Node* %res, i1 %23)
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond.res46 = phi i1 [ true, %cond.true16 ], [ %24, %cond.false17 ]
  br i1 %cond.res46, label %cond.true13, label %cond.false14

cond.true19:                                      ; preds = %cond.end24
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end24
  %25 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %26 = call i1 @parseExprStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %25, %Node* %res)
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond.res45 = phi i1 [ true, %cond.true19 ], [ %26, %cond.false20 ]
  br i1 %cond.res45, label %cond.true16, label %cond.false17

cond.true22:                                      ; preds = %cond.end27
  br label %cond.end24

cond.false23:                                     ; preds = %cond.end27
  %27 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %28 = call i1 @parseFunDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %27, %Node* %res)
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond.res44 = phi i1 [ true, %cond.true22 ], [ %28, %cond.false23 ]
  br i1 %cond.res44, label %cond.true19, label %cond.false20

cond.true25:                                      ; preds = %cond.end30
  br label %cond.end27

cond.false26:                                     ; preds = %cond.end30
  %29 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %30 = call i1 @parseVarLikeDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %29, %Node* %res)
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond.res43 = phi i1 [ true, %cond.true25 ], [ %30, %cond.false26 ]
  br i1 %cond.res43, label %cond.true22, label %cond.false23

cond.true28:                                      ; preds = %cond.end33
  br label %cond.end30

cond.false29:                                     ; preds = %cond.end33
  %31 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %32 = call i1 @parseConceptDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %31, %Node* %res)
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond.res42 = phi i1 [ true, %cond.true28 ], [ %32, %cond.false29 ]
  br i1 %cond.res42, label %cond.true25, label %cond.false26

cond.true31:                                      ; preds = %cond.end36
  br label %cond.end33

cond.false32:                                     ; preds = %cond.end36
  %33 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %34 = call i1 @parseDatatypeDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %33, %Node* %res)
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond.res41 = phi i1 [ true, %cond.true31 ], [ %34, %cond.false32 ]
  br i1 %cond.res41, label %cond.true28, label %cond.false29

cond.true34:                                      ; preds = %cond.end39
  br label %cond.end36

cond.false35:                                     ; preds = %cond.end39
  %35 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %36 = call i1 @parsePackageDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %35, %Node* %res)
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond.res40 = phi i1 [ true, %cond.true34 ], [ %36, %cond.false35 ]
  br i1 %cond.res40, label %cond.true31, label %cond.false32

cond.true37:                                      ; preds = %code
  br label %cond.end39

cond.false38:                                     ; preds = %code
  %37 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %38 = call i1 @parseUsingDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %37, %Node* %res)
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond.res = phi i1 [ true, %cond.true37 ], [ %38, %cond.false38 ]
  br i1 %cond.res, label %cond.true34, label %cond.false35

if_block:                                         ; preds = %cond.end
  %39 = load %Node, %Node* %mods
  %40 = call i1 @isSet.595(%Node %39)
  br i1 %40, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  br label %if_block53

if_end:                                           ; preds = %if_end55, %if_block
  %41 = load %Node, %Node* %res
  ret %Node %41

if_block53:                                       ; preds = %if_then
  %42 = load i1, i1* %found
  br i1 %42, label %if_then54, label %if_else

if_then54:                                        ; preds = %if_block53
  %43 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %44 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %43, i32 0, i32 3
  %45 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC57", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %45)
  call void @span(%Location* %"$tmpC", %Location* %loc, %Location* %"$tmpC57")
  %46 = load %Node, %Node* %res
  %47 = load %Node, %Node* %mods
  %48 = call %Node @mkModifiers(%AstBuilder* %44, %Location* %"$tmpC", %Node %46, %Node %47)
  store %Node %48, %Node* %"$tmpForRef56"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef56")
  br label %if_end55

if_else:                                          ; preds = %if_block53
  %49 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %50 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %51 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.109, i32 0, i32 0), i8** %50
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.109, i32 0, i32 25), i8** %51
  %52 = load %StringRef, %StringRef* %tmp.StringRef
  %53 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %54 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %53, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC59", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %54)
  %55 = getelementptr inbounds %Token, %Token* %"$tmpC59", i32 0, i32 1
  %56 = load %TokenType, %TokenType* %55
  %57 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef60, i32 0, i32 0
  %58 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef60, i32 0, i32 1
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.110, i32 0, i32 0), i8** %57
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.110, i32 0, i32 21), i8** %58
  %59 = load %StringRef, %StringRef* %tmp.StringRef60
  call void @toString.597(%String* %"$tmpC58", %StringRef %52, %TokenType %56, %StringRef %59)
  call void @reportError.548(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %49, %String* %"$tmpC58")
  call void @dtor.261(%String* %"$tmpC58")
  call void @dtor.260(%Token* %"$tmpC59")
  br label %if_end55

if_end55:                                         ; preds = %if_else, %if_then54
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @consumeSemis(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tmp.this = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 32)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseModifiers(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %Node
  %tmp.this = alloca %TokenType
  %e = alloca %Node
  %"$tmpForRef" = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %tmp.this2 = alloca %TokenType
  %"$tmpForRef3" = alloca %Node
  %"$tmpForRef4" = alloca %Node
  %tmp.this5 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 27)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  call void @ctor.556(%Node* %e)
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i1 true)
  store %Node %5, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %e, %Node* %"$tmpForRef")
  %6 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %7 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6, i32 0, i32 3
  %8 = load %Node, %Node* %res
  %9 = load %Node, %Node* %e
  %10 = call %Node @addToNodeList(%AstBuilder* %7, %Node %8, %Node %9)
  store %Node %10, %Node* %"$tmpForRef1"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef1")
  br label %while_block

if_end:                                           ; preds = %while_end, %if_block
  %11 = load %Node, %Node* %res
  ret %Node %11

while_block:                                      ; preds = %while_step, %if_then
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this2, i32 33)
  %13 = load %TokenType, %TokenType* %tmp.this2
  %14 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, %TokenType %13)
  br i1 %14, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %15 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %16 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %15, i1 true)
  store %Node %16, %Node* %"$tmpForRef3"
  call void @"=.554"(%Node* %e, %Node* %"$tmpForRef3")
  %17 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %18 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %17, i32 0, i32 3
  %19 = load %Node, %Node* %res
  %20 = load %Node, %Node* %e
  %21 = call %Node @addToNodeList(%AstBuilder* %18, %Node %19, %Node %20)
  store %Node %21, %Node* %"$tmpForRef4"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef4")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %22 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 28)
  %23 = load %TokenType, %TokenType* %tmp.this5
  %24 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %22, %TokenType %23)
  %25 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @consumeSemis(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %25)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %loc = alloca %Location
  %baseExpr = alloca %Node
  %"$tmpForRef" = alloca %Node
  %op = alloca %String
  %"$tmpC" = alloca %String
  %rhs = alloca %Node
  %"$tmpForRef4" = alloca %Node
  %"$tmpForRef5" = alloca %Node
  %"$tmpC6" = alloca %Location
  %"$tmpC7" = alloca %Location
  %"$tmpForRef8" = alloca %Node
  %"$tmpC9" = alloca %Location
  %"$tmpC10" = alloca %Location
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %3 = load i1, i1* %withEqual.addr
  %4 = call %Node @parsePrefixExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, i1 %3)
  store %Node %4, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %baseExpr, %Node* %"$tmpForRef")
  call void @ctor.137(%String* %op)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = load i1, i1* %withEqual.addr
  call void @parseIdOrOperOpt(%String* %"$tmpC", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i1 %6)
  %7 = call %String* @"=.290"(%String* %op, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  br label %if_block

while_step:                                       ; preds = %if_end3
  br label %while_block

while_end:                                        ; preds = %if_else, %if_then, %while_block
  %8 = load %Node, %Node* %baseExpr
  call void @dtor.261(%String* %op)
  ret %Node %8

if_block:                                         ; preds = %while_body
  %9 = call i1 @isEmpty.397(%String* %op)
  br i1 %9, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  br label %while_end

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = load i1, i1* %withEqual.addr
  %12 = call i1 @nextIsExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i1 %11)
  br i1 %12, label %if_then2, label %if_else

if_then2:                                         ; preds = %if_block1
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = load i1, i1* %withEqual.addr
  %15 = call %Node @parsePrefixExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i1 %14)
  store %Node %15, %Node* %"$tmpForRef4"
  call void @ctor.545(%Node* %rhs, %Node* %"$tmpForRef4")
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i32 0, i32 3
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC7", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18)
  call void @span(%Location* %"$tmpC6", %Location* %loc, %Location* %"$tmpC7")
  %19 = load %Node, %Node* %baseExpr
  %20 = call %StringRef @asStringRef(%String* %op)
  %21 = load %Node, %Node* %rhs
  %22 = call %Node @mkInfixOp(%AstBuilder* %17, %Location* %"$tmpC6", %Node %19, %StringRef %20, %Node %21)
  store %Node %22, %Node* %"$tmpForRef5"
  call void @"=.554"(%Node* %baseExpr, %Node* %"$tmpForRef5")
  br label %if_end3

if_else:                                          ; preds = %if_block1
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 3
  %25 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC10", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %25)
  call void @span(%Location* %"$tmpC9", %Location* %loc, %Location* %"$tmpC10")
  %26 = load %Node, %Node* %baseExpr
  %27 = call %StringRef @asStringRef(%String* %op)
  %28 = call %Node @mkPostfixOp(%AstBuilder* %24, %Location* %"$tmpC9", %Node %26, %StringRef %27)
  store %Node %28, %Node* %"$tmpForRef8"
  call void @"=.554"(%Node* %baseExpr, %Node* %"$tmpForRef8")
  br label %while_end

if_end3:                                          ; preds = %dumy_block11, %if_then2
  br label %while_step

dumy_block11:                                     ; No predecessors!
  br label %if_end3

dumy_block12:                                     ; No predecessors!
  call void @dtor.261(%String* %op)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @parsePrefixExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %loc = alloca %Location
  %op = alloca %String
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %String
  %tmp.this1 = alloca %TokenType
  %"$tmpC2" = alloca %String
  %baseExpr = alloca %Node
  %"$tmpForRef" = alloca %Node
  %"$tmpC7" = alloca %Location
  %"$tmpC8" = alloca %Location
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  call void @ctor.137(%String* %op)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 35)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  br i1 %4, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %"$tmpC", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5)
  %6 = call %String* @"=.290"(%String* %op, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 35)
  %8 = load %TokenType, %TokenType* %tmp.this1
  %9 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  br label %if_end

if_else:                                          ; preds = %if_block
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseOperOpt(%String* %"$tmpC2", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i1 true)
  %11 = call %String* @"=.290"(%String* %op, %String* %"$tmpC2")
  call void @dtor.261(%String* %"$tmpC2")
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  br label %if_block3

if_block3:                                        ; preds = %if_end
  %12 = call i1 @isEmpty.397(%String* %op)
  br i1 %12, label %if_then4, label %if_else5

if_then4:                                         ; preds = %if_block3
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = call %Node @parseSimpleExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i1 true)
  call void @dtor.261(%String* %op)
  ret %Node %14

if_else5:                                         ; preds = %if_block3
  %15 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %16 = call %Node @parsePrefixExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %15, i1 true)
  store %Node %16, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %baseExpr, %Node* %"$tmpForRef")
  %17 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %18 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %17, i32 0, i32 3
  %19 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC8", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %19)
  call void @span(%Location* %"$tmpC7", %Location* %loc, %Location* %"$tmpC8")
  %20 = call %StringRef @asStringRef(%String* %op)
  %21 = load %Node, %Node* %baseExpr
  %22 = call %Node @mkPrefixOp(%AstBuilder* %18, %Location* %"$tmpC7", %StringRef %20, %Node %21)
  call void @dtor.261(%String* %op)
  ret %Node %22

if_end6:                                          ; preds = %dumy_block9, %dumy_block
  call void @dtor.261(%String* %op)
  unreachable

dumy_block:                                       ; No predecessors!
  br label %if_end6

dumy_block9:                                      ; No predecessors!
  br label %if_end6
}

; Function Attrs: inlinehint nounwind
define internal void @parseId(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tmp.this = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 37)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  %4 = load %String*, %String** %_result.addr
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 2
  call void @ctor.189(%String* %4, %String* %7)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseOperOpt(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %tmp.this = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 38)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %4 = load %String*, %String** %_result.addr
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 2
  call void @ctor.189(%String* %4, %String* %7)
  ret void

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %cond_destruct_end13, %dumy_block
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_else
  %8 = load i1, i1* %withEqual.addr
  br i1 %8, label %cond.true, label %cond.false

if_then2:                                         ; preds = %cond.end
  %9 = load %String*, %String** %_result.addr
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i32 0, i32 1
  %12 = getelementptr inbounds %Token, %Token* %11, i32 0, i32 2
  call void @ctor.189(%String* %9, %String* %12)
  br i1 %8, label %cond_destruct_alt1, label %cond_destruct_alt2

if_else3:                                         ; preds = %cond.end
  %13 = load %String*, %String** %_result.addr
  call void @ctor.137(%String* %13)
  br i1 %8, label %cond_destruct_alt17, label %cond_destruct_alt28

if_end4:                                          ; preds = %dumy_block10, %dumy_block6
  br i1 %8, label %cond_destruct_alt111, label %cond_destruct_alt212

cond.true:                                        ; preds = %if_block1
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 36)
  %15 = load %TokenType, %TokenType* %tmp.this5
  %16 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, %TokenType %15)
  br label %cond.end

cond.false:                                       ; preds = %if_block1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %16, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then2, label %if_else3

cond_destruct_alt1:                               ; preds = %if_then2
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_then2
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void

dumy_block6:                                      ; No predecessors!
  br label %if_end4

cond_destruct_alt17:                              ; preds = %if_else3
  br label %cond_destruct_end9

cond_destruct_alt28:                              ; preds = %if_else3
  br label %cond_destruct_end9

cond_destruct_end9:                               ; preds = %cond_destruct_alt28, %cond_destruct_alt17
  ret void

dumy_block10:                                     ; No predecessors!
  br label %if_end4

cond_destruct_alt111:                             ; preds = %if_end4
  br label %cond_destruct_end13

cond_destruct_alt212:                             ; preds = %if_end4
  br label %cond_destruct_end13

cond_destruct_end13:                              ; preds = %cond_destruct_alt212, %cond_destruct_alt111
  br label %if_end
}

; Function Attrs: noinline nounwind
define %Node @parseSimpleExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #5 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %res = alloca %Node
  %loc = alloca %Location
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this6 = alloca %TokenType
  %"$tmpForRef7" = alloca %Node
  %tmp.this8 = alloca %TokenType
  %tmp.this13 = alloca %TokenType
  %"$tmpForRef14" = alloca %Node
  %tmp.this19 = alloca %TokenType
  %"$tmpForRef20" = alloca %Node
  %tmp.this25 = alloca %TokenType
  %"$tmpForRef26" = alloca %Node
  %tmp.this31 = alloca %TokenType
  %"$tmpForRef32" = alloca %Node
  %tmp.this37 = alloca %TokenType
  %"$tmpForRef38" = alloca %Node
  %tmp.this39 = alloca i32
  %tmp.this44 = alloca %TokenType
  %"$tmpForRef45" = alloca %Node
  %tmp.this46 = alloca i32
  %tmp.this51 = alloca %TokenType
  %"$tmpForRef52" = alloca %Node
  %tmp.this53 = alloca i64
  %tmp.this58 = alloca %TokenType
  %"$tmpForRef59" = alloca %Node
  %tmp.this60 = alloca i64
  %tmp.this65 = alloca %TokenType
  %"$tmpForRef66" = alloca %Node
  %tmp.this67 = alloca float
  %tmp.this72 = alloca %TokenType
  %"$tmpForRef73" = alloca %Node
  %tmp.this74 = alloca double
  %tmp.this79 = alloca %TokenType
  %"$tmpForRef80" = alloca %Node
  %tmp.this81 = alloca i64
  %tmp.this85 = alloca %TokenType
  %"$tmpForRef86" = alloca %Node
  %"$tmpC" = alloca %String
  %tmp.StringRef = alloca %StringRef
  %"$tmpC90" = alloca %Token
  %tmp.StringRef91 = alloca %StringRef
  %tmp.this92 = alloca %Node
  %tmp.this97 = alloca %TokenType
  %args = alloca %Node
  %"$tmpForRef98" = alloca %Node
  %tmp.this99 = alloca %TokenType
  %"$tmpForRef100" = alloca %Node
  %"$tmpC101" = alloca %Location
  %"$tmpC102" = alloca %Location
  %tmp.this107 = alloca %TokenType
  %tmp.this112 = alloca %TokenType
  %tmp.this113 = alloca %TokenType
  %"$tmpForRef114" = alloca %Node
  %"$tmpC115" = alloca %Location
  %"$tmpC116" = alloca %Location
  %tmp.StringRef117 = alloca %StringRef
  %id = alloca %String
  %"$tmpForRef118" = alloca %Node
  %"$tmpC119" = alloca %Location
  %"$tmpC120" = alloca %Location
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 29)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  br i1 %4, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = call %Node @parseLambdaExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5)
  store %Node %6, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef")
  br label %if_end

if_else:                                          ; preds = %cond.end
  br label %if_block2

if_end:                                           ; preds = %if_end5, %if_then
  br i1 %4, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true:                                        ; preds = %if_block
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 6)
  %8 = load %TokenType, %TokenType* %tmp.this1
  %9 = call i1 @next2Is(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %9, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_else

if_block2:                                        ; preds = %if_else
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this6, i32 29)
  %11 = load %TokenType, %TokenType* %tmp.this6
  %12 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, %TokenType %11)
  br i1 %12, label %if_then3, label %if_else4

if_then3:                                         ; preds = %if_block2
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i32 0, i32 3
  %15 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %16 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %15, i1 true)
  %17 = call %Node @mkParenthesisExpr(%AstBuilder* %14, %Node %16)
  store %Node %17, %Node* %"$tmpForRef7"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef7")
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this8, i32 30)
  %19 = load %TokenType, %TokenType* %tmp.this8
  %20 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18, %TokenType %19)
  br label %if_end5

if_else4:                                         ; preds = %if_block2
  br label %if_block9

if_end5:                                          ; preds = %if_end12, %if_then3
  br label %if_end

if_block9:                                        ; preds = %if_else4
  %21 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this13, i32 37)
  %22 = load %TokenType, %TokenType* %tmp.this13
  %23 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %21, %TokenType %22)
  br i1 %23, label %if_then10, label %if_else11

if_then10:                                        ; preds = %if_block9
  %24 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %25 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %24, i32 0, i32 3
  %26 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %27 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %26, i32 0, i32 1
  %28 = getelementptr inbounds %Token, %Token* %27, i32 0, i32 0
  %29 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %30 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %29, i32 0, i32 1
  %31 = getelementptr inbounds %Token, %Token* %30, i32 0, i32 2
  %32 = call %StringRef @asStringRef(%String* %31)
  %33 = call %Node @mkIdentifier(%AstBuilder* %25, %Location* %28, %StringRef %32)
  store %Node %33, %Node* %"$tmpForRef14"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef14")
  br label %if_end12

if_else11:                                        ; preds = %if_block9
  br label %if_block15

if_end12:                                         ; preds = %if_end18, %if_then10
  br label %if_end5

if_block15:                                       ; preds = %if_else11
  %34 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this19, i32 22)
  %35 = load %TokenType, %TokenType* %tmp.this19
  %36 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %34, %TokenType %35)
  br i1 %36, label %if_then16, label %if_else17

if_then16:                                        ; preds = %if_block15
  %37 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %38 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %37, i32 0, i32 3
  %39 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %40 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %39, i32 0, i32 1
  %41 = getelementptr inbounds %Token, %Token* %40, i32 0, i32 0
  %42 = call %Node @mkNullLiteral(%AstBuilder* %38, %Location* %41)
  store %Node %42, %Node* %"$tmpForRef20"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef20")
  br label %if_end18

if_else17:                                        ; preds = %if_block15
  br label %if_block21

if_end18:                                         ; preds = %if_end24, %if_then16
  br label %if_end12

if_block21:                                       ; preds = %if_else17
  %43 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this25, i32 23)
  %44 = load %TokenType, %TokenType* %tmp.this25
  %45 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %43, %TokenType %44)
  br i1 %45, label %if_then22, label %if_else23

if_then22:                                        ; preds = %if_block21
  %46 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %47 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %46, i32 0, i32 3
  %48 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %49 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %48, i32 0, i32 1
  %50 = getelementptr inbounds %Token, %Token* %49, i32 0, i32 0
  %51 = call %Node @mkBoolLiteral(%AstBuilder* %47, %Location* %50, i1 true)
  store %Node %51, %Node* %"$tmpForRef26"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef26")
  br label %if_end24

if_else23:                                        ; preds = %if_block21
  br label %if_block27

if_end24:                                         ; preds = %if_end30, %if_then22
  br label %if_end18

if_block27:                                       ; preds = %if_else23
  %52 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this31, i32 21)
  %53 = load %TokenType, %TokenType* %tmp.this31
  %54 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %52, %TokenType %53)
  br i1 %54, label %if_then28, label %if_else29

if_then28:                                        ; preds = %if_block27
  %55 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %56 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %55, i32 0, i32 3
  %57 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %58 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %57, i32 0, i32 1
  %59 = getelementptr inbounds %Token, %Token* %58, i32 0, i32 0
  %60 = call %Node @mkBoolLiteral(%AstBuilder* %56, %Location* %59, i1 false)
  store %Node %60, %Node* %"$tmpForRef32"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef32")
  br label %if_end30

if_else29:                                        ; preds = %if_block27
  br label %if_block33

if_end30:                                         ; preds = %if_end36, %if_then28
  br label %if_end24

if_block33:                                       ; preds = %if_else29
  %61 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this37, i32 41)
  %62 = load %TokenType, %TokenType* %tmp.this37
  %63 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %61, %TokenType %62)
  br i1 %63, label %if_then34, label %if_else35

if_then34:                                        ; preds = %if_block33
  %64 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %65 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %64, i32 0, i32 3
  %66 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %67 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %66, i32 0, i32 1
  %68 = getelementptr inbounds %Token, %Token* %67, i32 0, i32 0
  %69 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %70 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %69, i32 0, i32 1
  %71 = getelementptr inbounds %Token, %Token* %70, i32 0, i32 3
  %72 = load i64, i64* %71
  %73 = trunc i64 %72 to i32
  store i32 %73, i32* %tmp.this39
  %74 = load i32, i32* %tmp.this39
  %75 = call %Node @mkIntLiteral(%AstBuilder* %65, %Location* %68, i32 %74)
  store %Node %75, %Node* %"$tmpForRef38"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef38")
  br label %if_end36

if_else35:                                        ; preds = %if_block33
  br label %if_block40

if_end36:                                         ; preds = %if_end43, %if_then34
  br label %if_end30

if_block40:                                       ; preds = %if_else35
  %76 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this44, i32 43)
  %77 = load %TokenType, %TokenType* %tmp.this44
  %78 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %76, %TokenType %77)
  br i1 %78, label %if_then41, label %if_else42

if_then41:                                        ; preds = %if_block40
  %79 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %80 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %79, i32 0, i32 3
  %81 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %82 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %81, i32 0, i32 1
  %83 = getelementptr inbounds %Token, %Token* %82, i32 0, i32 0
  %84 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %85 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %84, i32 0, i32 1
  %86 = getelementptr inbounds %Token, %Token* %85, i32 0, i32 3
  %87 = load i64, i64* %86
  %88 = trunc i64 %87 to i32
  store i32 %88, i32* %tmp.this46
  %89 = load i32, i32* %tmp.this46
  %90 = call %Node @mkUIntLiteral(%AstBuilder* %80, %Location* %83, i32 %89)
  store %Node %90, %Node* %"$tmpForRef45"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef45")
  br label %if_end43

if_else42:                                        ; preds = %if_block40
  br label %if_block47

if_end43:                                         ; preds = %if_end50, %if_then41
  br label %if_end36

if_block47:                                       ; preds = %if_else42
  %91 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this51, i32 42)
  %92 = load %TokenType, %TokenType* %tmp.this51
  %93 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %91, %TokenType %92)
  br i1 %93, label %if_then48, label %if_else49

if_then48:                                        ; preds = %if_block47
  %94 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %95 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %94, i32 0, i32 3
  %96 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %97 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %96, i32 0, i32 1
  %98 = getelementptr inbounds %Token, %Token* %97, i32 0, i32 0
  %99 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %100 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %99, i32 0, i32 1
  %101 = getelementptr inbounds %Token, %Token* %100, i32 0, i32 3
  %102 = load i64, i64* %101
  store i64 %102, i64* %tmp.this53
  %103 = load i64, i64* %tmp.this53
  %104 = call %Node @mkLongLiteral(%AstBuilder* %95, %Location* %98, i64 %103)
  store %Node %104, %Node* %"$tmpForRef52"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef52")
  br label %if_end50

if_else49:                                        ; preds = %if_block47
  br label %if_block54

if_end50:                                         ; preds = %if_end57, %if_then48
  br label %if_end43

if_block54:                                       ; preds = %if_else49
  %105 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this58, i32 44)
  %106 = load %TokenType, %TokenType* %tmp.this58
  %107 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %105, %TokenType %106)
  br i1 %107, label %if_then55, label %if_else56

if_then55:                                        ; preds = %if_block54
  %108 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %109 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %108, i32 0, i32 3
  %110 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %111 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %110, i32 0, i32 1
  %112 = getelementptr inbounds %Token, %Token* %111, i32 0, i32 0
  %113 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %114 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %113, i32 0, i32 1
  %115 = getelementptr inbounds %Token, %Token* %114, i32 0, i32 3
  %116 = load i64, i64* %115
  store i64 %116, i64* %tmp.this60
  %117 = load i64, i64* %tmp.this60
  %118 = call %Node @mkULongLiteral(%AstBuilder* %109, %Location* %112, i64 %117)
  store %Node %118, %Node* %"$tmpForRef59"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef59")
  br label %if_end57

if_else56:                                        ; preds = %if_block54
  br label %if_block61

if_end57:                                         ; preds = %if_end64, %if_then55
  br label %if_end50

if_block61:                                       ; preds = %if_else56
  %119 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this65, i32 45)
  %120 = load %TokenType, %TokenType* %tmp.this65
  %121 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %119, %TokenType %120)
  br i1 %121, label %if_then62, label %if_else63

if_then62:                                        ; preds = %if_block61
  %122 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %123 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %122, i32 0, i32 3
  %124 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %125 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %124, i32 0, i32 1
  %126 = getelementptr inbounds %Token, %Token* %125, i32 0, i32 0
  %127 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %128 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %127, i32 0, i32 1
  %129 = getelementptr inbounds %Token, %Token* %128, i32 0, i32 4
  %130 = load double, double* %129
  %131 = fptrunc double %130 to float
  store float %131, float* %tmp.this67
  %132 = load float, float* %tmp.this67
  %133 = call %Node @mkFloatLiteral(%AstBuilder* %123, %Location* %126, float %132)
  store %Node %133, %Node* %"$tmpForRef66"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef66")
  br label %if_end64

if_else63:                                        ; preds = %if_block61
  br label %if_block68

if_end64:                                         ; preds = %if_end71, %if_then62
  br label %if_end57

if_block68:                                       ; preds = %if_else63
  %134 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this72, i32 46)
  %135 = load %TokenType, %TokenType* %tmp.this72
  %136 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %134, %TokenType %135)
  br i1 %136, label %if_then69, label %if_else70

if_then69:                                        ; preds = %if_block68
  %137 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %138 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %137, i32 0, i32 3
  %139 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %140 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %139, i32 0, i32 1
  %141 = getelementptr inbounds %Token, %Token* %140, i32 0, i32 0
  %142 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %143 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %142, i32 0, i32 1
  %144 = getelementptr inbounds %Token, %Token* %143, i32 0, i32 4
  %145 = load double, double* %144
  store double %145, double* %tmp.this74
  %146 = load double, double* %tmp.this74
  %147 = call %Node @mkDoubleLiteral(%AstBuilder* %138, %Location* %141, double %146)
  store %Node %147, %Node* %"$tmpForRef73"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef73")
  br label %if_end71

if_else70:                                        ; preds = %if_block68
  br label %if_block75

if_end71:                                         ; preds = %if_end78, %if_then69
  br label %if_end64

if_block75:                                       ; preds = %if_else70
  %148 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this79, i32 39)
  %149 = load %TokenType, %TokenType* %tmp.this79
  %150 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %148, %TokenType %149)
  br i1 %150, label %if_then76, label %if_else77

if_then76:                                        ; preds = %if_block75
  %151 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %152 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %151, i32 0, i32 3
  %153 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %154 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %153, i32 0, i32 1
  %155 = getelementptr inbounds %Token, %Token* %154, i32 0, i32 0
  %156 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %157 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %156, i32 0, i32 1
  %158 = getelementptr inbounds %Token, %Token* %157, i32 0, i32 2
  store i64 0, i64* %tmp.this81
  %159 = load i64, i64* %tmp.this81
  %160 = call i8* @"().344"(%String* %158, i64 %159)
  %161 = load i8, i8* %160
  %162 = call %Node @mkCharLiteral(%AstBuilder* %152, %Location* %155, i8 %161)
  store %Node %162, %Node* %"$tmpForRef80"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef80")
  br label %if_end78

if_else77:                                        ; preds = %if_block75
  br label %if_block82

if_end78:                                         ; preds = %if_end84, %if_then76
  br label %if_end71

if_block82:                                       ; preds = %if_else77
  %163 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this85, i32 40)
  %164 = load %TokenType, %TokenType* %tmp.this85
  %165 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %163, %TokenType %164)
  br i1 %165, label %if_then83, label %if_end84

if_then83:                                        ; preds = %if_block82
  %166 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %167 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %166, i32 0, i32 3
  %168 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %169 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %168, i32 0, i32 1
  %170 = getelementptr inbounds %Token, %Token* %169, i32 0, i32 0
  %171 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %172 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %171, i32 0, i32 1
  %173 = getelementptr inbounds %Token, %Token* %172, i32 0, i32 2
  %174 = call %StringRef @asStringRef(%String* %173)
  %175 = call %Node @mkStringLiteral(%AstBuilder* %167, %Location* %170, %StringRef %174)
  store %Node %175, %Node* %"$tmpForRef86"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef86")
  br label %if_end84

if_end84:                                         ; preds = %if_then83, %if_block82
  br label %if_end78

cond_destruct_alt1:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  br label %if_block87

if_block87:                                       ; preds = %cond_destruct_end
  %176 = load %Node, %Node* %res
  %177 = call i1 @isNull(%Node %176)
  br i1 %177, label %if_then88, label %if_end89

if_then88:                                        ; preds = %if_block87
  %178 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %179 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %180 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.98, i32 0, i32 0), i8** %179
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.98, i32 0, i32 25), i8** %180
  %181 = load %StringRef, %StringRef* %tmp.StringRef
  %182 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %183 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %182, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC90", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %183)
  %184 = getelementptr inbounds %Token, %Token* %"$tmpC90", i32 0, i32 1
  %185 = load %TokenType, %TokenType* %184
  %186 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef91, i32 0, i32 0
  %187 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef91, i32 0, i32 1
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str.99, i32 0, i32 0), i8** %186
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str.99, i32 0, i32 22), i8** %187
  %188 = load %StringRef, %StringRef* %tmp.StringRef91
  call void @toString.597(%String* %"$tmpC", %StringRef %181, %TokenType %185, %StringRef %188)
  call void @reportError.548(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %178, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC90")
  call void @ctor.556(%Node* %tmp.this92)
  %189 = load %Node, %Node* %tmp.this92
  ret %Node %189

if_end89:                                         ; preds = %dumy_block, %if_block87
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end89

while_block:                                      ; preds = %while_step, %if_end89
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  br label %if_block93

while_step:                                       ; preds = %if_end96
  br label %while_block

while_end:                                        ; preds = %if_else105, %while_block
  %190 = load %Node, %Node* %res
  ret %Node %190

if_block93:                                       ; preds = %while_body
  %191 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this97, i32 29)
  %192 = load %TokenType, %TokenType* %tmp.this97
  %193 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %191, %TokenType %192)
  br i1 %193, label %if_then94, label %if_else95

if_then94:                                        ; preds = %if_block93
  %194 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %195 = call %Node @parseExprListOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %194)
  store %Node %195, %Node* %"$tmpForRef98"
  call void @ctor.545(%Node* %args, %Node* %"$tmpForRef98")
  %196 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this99, i32 30)
  %197 = load %TokenType, %TokenType* %tmp.this99
  %198 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %196, %TokenType %197)
  %199 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %200 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %199, i32 0, i32 3
  %201 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC102", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %201)
  call void @span(%Location* %"$tmpC101", %Location* %loc, %Location* %"$tmpC102")
  %202 = load %Node, %Node* %res
  %203 = load %Node, %Node* %args
  %204 = call %Node @mkFunAppExpr(%AstBuilder* %200, %Location* %"$tmpC101", %Node %202, %Node %203)
  store %Node %204, %Node* %"$tmpForRef100"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef100")
  br label %if_end96

if_else95:                                        ; preds = %if_block93
  br label %if_block103

if_end96:                                         ; preds = %if_end106, %if_then94
  br label %while_step

if_block103:                                      ; preds = %if_else95
  %205 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this107, i32 34)
  %206 = load %TokenType, %TokenType* %tmp.this107
  %207 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %205, %TokenType %206)
  br i1 %207, label %if_then104, label %if_else105

if_then104:                                       ; preds = %if_block103
  br label %if_block108

if_else105:                                       ; preds = %if_block103
  br label %while_end

if_end106:                                        ; preds = %dumy_block121, %if_end111
  br label %if_end96

if_block108:                                      ; preds = %if_then104
  %208 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this112, i32 29)
  %209 = load %TokenType, %TokenType* %tmp.this112
  %210 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %208, %TokenType %209)
  br i1 %210, label %if_then109, label %if_else110

if_then109:                                       ; preds = %if_block108
  %211 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this113, i32 30)
  %212 = load %TokenType, %TokenType* %tmp.this113
  %213 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %211, %TokenType %212)
  %214 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %215 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %214, i32 0, i32 3
  %216 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC116", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %216)
  call void @span(%Location* %"$tmpC115", %Location* %loc, %Location* %"$tmpC116")
  %217 = load %Node, %Node* %res
  %218 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef117, i32 0, i32 0
  %219 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef117, i32 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.100, i32 0, i32 0), i8** %218
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.100, i32 0, i32 2), i8** %219
  %220 = load %StringRef, %StringRef* %tmp.StringRef117
  %221 = call %Node @mkDotExpr(%AstBuilder* %215, %Location* %"$tmpC115", %Node %217, %StringRef %220)
  store %Node %221, %Node* %"$tmpForRef114"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef114")
  br label %if_end111

if_else110:                                       ; preds = %if_block108
  %222 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %223 = load i1, i1* %withEqual.addr
  call void @parseIdOrOper(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %222, i1 %223)
  %224 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %225 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %224, i32 0, i32 3
  %226 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC120", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %226)
  call void @span(%Location* %"$tmpC119", %Location* %loc, %Location* %"$tmpC120")
  %227 = load %Node, %Node* %res
  %228 = call %StringRef @asStringRef(%String* %id)
  %229 = call %Node @mkDotExpr(%AstBuilder* %225, %Location* %"$tmpC119", %Node %227, %StringRef %228)
  store %Node %229, %Node* %"$tmpForRef118"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef118")
  call void @dtor.261(%String* %id)
  br label %if_end111

if_end111:                                        ; preds = %if_else110, %if_then109
  br label %if_end106

dumy_block121:                                    ; No predecessors!
  br label %if_end106
}

; Function Attrs: inlinehint nounwind
define internal i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType %t) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %t.addr = alloca %TokenType
  store %TokenType %t, %TokenType* %t.addr
  %"$tmpC" = alloca %Token
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  %3 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  %4 = call i1 @"==.352"(%TokenType* %3, %TokenType* %t.addr)
  call void @dtor.260(%Token* %"$tmpC")
  ret i1 %4

dumy_block:                                       ; No predecessors!
  call void @dtor.260(%Token* %"$tmpC")
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal i1 @next2Is(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %TokenType %t) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %t.addr = alloca %TokenType
  store %TokenType %t, %TokenType* %t.addr
  %"$tmpC" = alloca %Token
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  store i32 1, i32* %tmp.this
  %3 = load i32, i32* %tmp.this
  call void @peek.557(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 %3)
  %4 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  %5 = call i1 @"==.352"(%TokenType* %4, %TokenType* %t.addr)
  call void @dtor.260(%Token* %"$tmpC")
  ret i1 %5

dumy_block:                                       ; No predecessors!
  call void @dtor.260(%Token* %"$tmpC")
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @peek.557(%Token* sret %_result, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, i32 %n) #4 {
  %_result.addr = alloca %Token*
  store %Token* %_result, %Token** %_result.addr
  %this.addr = alloca %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %n.addr = alloca i32
  store i32 %n, i32* %n.addr
  %tmp.this = alloca i64
  %"$tmpC" = alloca %Token
  %tmp.this1 = alloca i64
  %tmp.this2 = alloca i64
  br label %code

code:                                             ; preds = %0
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %1 = load i32, i32* %n.addr
  %2 = zext i32 %1 to i64
  store i64 %2, i64* %tmp.this
  %3 = load i64, i64* %tmp.this
  %4 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %4, i32 0, i32 1
  %6 = call i64 @size.209(%"Vector[Token]"* %5)
  %7 = icmp sge i64 %3, %6
  br i1 %7, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %8 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %9 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %8, i32 0, i32 1
  %10 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %10, i32 0, i32 0
  call void @"post_++.523"(%Token* %"$tmpC", %"SparrowLayoutDecoder[SparrowScanner]"* %11)
  call void @"+=.409"(%"Vector[Token]"* %9, %Token* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %cond.end
  br label %if_block

cond.true:                                        ; preds = %while_block
  %12 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 0
  %14 = call i1 @"pre_!!.521"(%"SparrowLayoutDecoder[SparrowScanner]"* %13)
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %14, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

if_block:                                         ; preds = %while_end
  %15 = load i32, i32* %n.addr
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %tmp.this1
  %17 = load i64, i64* %tmp.this1
  %18 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %19 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %18, i32 0, i32 1
  %20 = call i64 @size.209(%"Vector[Token]"* %19)
  %21 = icmp slt i64 %17, %20
  br i1 %21, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %22 = load %Token*, %Token** %_result.addr
  %23 = load %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"*, %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 1
  %25 = load i32, i32* %n.addr
  %26 = zext i32 %25 to i64
  store i64 %26, i64* %tmp.this2
  %27 = load i64, i64* %tmp.this2
  %28 = call %Token* @"().558"(%"Vector[Token]"* %24, i64 %27)
  call void @ctor.202(%Token* %22, %Token* %28)
  ret void

if_else:                                          ; preds = %if_block
  %29 = load %Token*, %Token** %_result.addr
  call void @ctor.143(%Token* %29)
  ret void

if_end:                                           ; preds = %dumy_block3, %dumy_block
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block3:                                      ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Token* @"().558"(%"Vector[Token]"* %this, i64 %index) #4 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %"$tmpC" = alloca %"RawPtr[Token]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  %3 = load %"RawPtr[Token]", %"RawPtr[Token]"* %2
  %4 = load i64, i64* %index.addr
  call void @advance.215(%"RawPtr[Token]"* %"$tmpC", %"RawPtr[Token]" %3, i64 %4)
  %5 = load %"RawPtr[Token]", %"RawPtr[Token]"* %"$tmpC"
  %6 = call %Token* @value.219(%"RawPtr[Token]" %5)
  ret %Token* %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseLambdaExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %loc = alloca %Location
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %closureParams = alloca %Node
  %"$tmpForRef" = alloca %Node
  %formals = alloca %Node
  %"$tmpForRef2" = alloca %Node
  %retType = alloca %Node
  %"$tmpForRef3" = alloca %Node
  %body = alloca %Node
  %bodyExp = alloca %Node
  %tmp.this4 = alloca %TokenType
  %"$tmpForRef5" = alloca %Node
  %"$tmpForRef6" = alloca %Node
  %tmp.this7 = alloca %TokenType
  %"$tmpC" = alloca %Location
  %"$tmpC8" = alloca %Location
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 29)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 6)
  %6 = load %TokenType, %TokenType* %tmp.this1
  %7 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, %TokenType %6)
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %9 = call %Node @parseClosureParams(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8)
  store %Node %9, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %closureParams, %Node* %"$tmpForRef")
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = call %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10)
  store %Node %11, %Node* %"$tmpForRef2"
  call void @ctor.545(%Node* %formals, %Node* %"$tmpForRef2")
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = call %Node @parseTypeNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12)
  store %Node %13, %Node* %"$tmpForRef3"
  call void @ctor.545(%Node* %retType, %Node* %"$tmpForRef3")
  call void @ctor.556(%Node* %body)
  call void @ctor.556(%Node* %bodyExp)
  br label %if_block

if_block:                                         ; preds = %code
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this4, i32 36)
  %15 = load %TokenType, %TokenType* %tmp.this4
  %16 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, %TokenType %15)
  br i1 %16, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %17 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %18 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %17, i1 true)
  store %Node %18, %Node* %"$tmpForRef5"
  call void @"=.554"(%Node* %bodyExp, %Node* %"$tmpForRef5")
  br label %if_end

if_else:                                          ; preds = %if_block
  %19 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %20 = call %Node @parseFunBody(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %19)
  store %Node %20, %Node* %"$tmpForRef6"
  call void @"=.554"(%Node* %body, %Node* %"$tmpForRef6")
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  %21 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this7, i32 30)
  %22 = load %TokenType, %TokenType* %tmp.this7
  %23 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %21, %TokenType %22)
  %24 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %25 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %24, i32 0, i32 3
  %26 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC8", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %26)
  call void @span(%Location* %"$tmpC", %Location* %loc, %Location* %"$tmpC8")
  %27 = load %Node, %Node* %closureParams
  %28 = load %Node, %Node* %formals
  %29 = load %Node, %Node* %retType
  %30 = load %Node, %Node* %body
  %31 = load %Node, %Node* %bodyExp
  %32 = call %Node @mkLambdaExpr(%AstBuilder* %25, %Location* %"$tmpC", %Node %27, %Node %28, %Node %29, %Node %30, %Node %31)
  ret %Node %32
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseClosureParams(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %Node
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this6 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 34)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 25)
  %5 = load %TokenType, %TokenType* %tmp.this1
  %6 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, %TokenType %5)
  br label %if_block2

if_end:                                           ; preds = %if_end4, %if_block
  %7 = load %Node, %Node* %res
  ret %Node %7

if_block2:                                        ; preds = %if_then
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 37)
  %9 = load %TokenType, %TokenType* %tmp.this5
  %10 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, %TokenType %9)
  br i1 %10, label %if_then3, label %if_end4

if_then3:                                         ; preds = %if_block2
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = call %Node @parseIdListNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11)
  store %Node %12, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef")
  br label %if_end4

if_end4:                                          ; preds = %if_then3, %if_block2
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this6, i32 26)
  %14 = load %TokenType, %TokenType* %tmp.this6
  %15 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, %TokenType %14)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseIdListNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %Node
  %id = alloca %String
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %String
  %"$tmpForRef1" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 3
  %4 = load %Node, %Node* %res
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 3
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  %9 = getelementptr inbounds %Token, %Token* %8, i32 0, i32 0
  %10 = call %StringRef @asStringRef(%String* %id)
  %11 = call %Node @mkIdentifier(%AstBuilder* %6, %Location* %9, %StringRef %10)
  %12 = call %Node @addToNodeList(%AstBuilder* %3, %Node %4, %Node %11)
  store %Node %12, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 33)
  %14 = load %TokenType, %TokenType* %tmp.this
  %15 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, %TokenType %14)
  br i1 %15, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %"$tmpC", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16)
  %17 = call %String* @"=.290"(%String* %id, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %19 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18, i32 0, i32 3
  %20 = load %Node, %Node* %res
  %21 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %22 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %21, i32 0, i32 3
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 1
  %25 = getelementptr inbounds %Token, %Token* %24, i32 0, i32 0
  %26 = call %StringRef @asStringRef(%String* %id)
  %27 = call %Node @mkIdentifier(%AstBuilder* %22, %Location* %25, %StringRef %26)
  %28 = call %Node @addToNodeList(%AstBuilder* %19, %Node %20, %Node %27)
  store %Node %28, %Node* %"$tmpForRef1"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef1")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %29 = load %Node, %Node* %res
  call void @dtor.261(%String* %id)
  ret %Node %29

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @addToNodeList(%AstBuilder* %obj, %Node %nl, %Node %newNode) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %nl.addr = alloca %Node
  store %Node %nl, %Node* %nl.addr
  %newNode.addr = alloca %Node
  store %Node %newNode, %Node* %newNode.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 1
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Node, %Node* %nl.addr
  %7 = load %Node, %Node* %newNode.addr
  %8 = call %Node @"().559"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %2, %UntypedPtr %5, %Node %6, %Node %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().559"(%"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %UntypedPtr %p1, %Node %p2, %Node %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Node
  store %Node %p2, %Node* %p2.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, Node, Node]"*, %"FunctionPtr3[Node, UntypedPtr, Node, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Node, %Node* %p2.addr
  %4 = load %Node, %Node* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, Node, Node]"* %1 to %Node (%UntypedPtr, %Node, %Node)**
  %6 = load %Node (%UntypedPtr, %Node, %Node)*, %Node (%UntypedPtr, %Node, %Node)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Node %3, %Node %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %Node
  %tmp.this = alloca %TokenType
  %tmp.this4 = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %tmp.this6 = alloca %TokenType
  %tmp.this10 = alloca %TokenType
  %loc = alloca %Location
  %ids = alloca %"Vector[LocString]"
  %"$tmpC" = alloca %Location
  %"$tmpC11" = alloca %Location
  %tmp.StringRef = alloca %StringRef
  %tmp.this12 = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 29)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  br label %if_block1

if_else:                                          ; preds = %if_block
  br label %if_block7

if_end:                                           ; preds = %if_end9, %while_end
  %4 = load %Node, %Node* %res
  ret %Node %4

if_block1:                                        ; preds = %if_then
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this4, i32 30)
  %6 = load %TokenType, %TokenType* %tmp.this4
  %7 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, %TokenType %6)
  br i1 %7, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  %8 = load %Node, %Node* %res
  ret %Node %8

if_end3:                                          ; preds = %dumy_block, %if_block1
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseFormal(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9, %Node* %res)
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end3

while_block:                                      ; preds = %while_step, %if_end3
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 33)
  %11 = load %TokenType, %TokenType* %tmp.this5
  %12 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, %TokenType %11)
  br i1 %12, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseFormal(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, %Node* %res)
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this6, i32 30)
  %15 = load %TokenType, %TokenType* %tmp.this6
  %16 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, %TokenType %15)
  br label %if_end

if_block7:                                        ; preds = %if_else
  %17 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this10, i32 37)
  %18 = load %TokenType, %TokenType* %tmp.this10
  %19 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %17, %TokenType %18)
  br i1 %19, label %if_then8, label %if_end9

if_then8:                                         ; preds = %if_block7
  %20 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %20)
  %21 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseIdList(%"Vector[LocString]"* %ids, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %21)
  %22 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %23 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %22, i32 0, i32 3
  %24 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %25 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %24, i32 0, i32 3
  %26 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC11", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %26)
  call void @span(%Location* %"$tmpC", %Location* %loc, %Location* %"$tmpC11")
  %27 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %28 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.95, i32 0, i32 0), i8** %27
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.95, i32 0, i32 7), i8** %28
  %29 = load %StringRef, %StringRef* %tmp.StringRef
  %30 = call %Node @mkIdentifier(%AstBuilder* %25, %Location* %"$tmpC", %StringRef %29)
  call void @ctor.556(%Node* %tmp.this12)
  %31 = load %Node, %Node* %tmp.this12
  call void @createFormals(%AstBuilder* %23, %"Vector[LocString]"* %ids, %Node %30, %Node %31, i32 2, %Node* %res)
  call void @dtor.586(%"Vector[LocString]"* %ids)
  br label %if_end9

if_end9:                                          ; preds = %if_then8, %if_block7
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal void @parseFormal(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %ids = alloca %"Vector[LocString]"
  %tmp.this = alloca %TokenType
  %typeNode = alloca %Node
  %"$tmpForRef" = alloca %Node
  %init = alloca %Node
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef2" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseIdList(%"Vector[LocString]"* %ids, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 31)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i1 false)
  store %Node %6, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %typeNode, %Node* %"$tmpForRef")
  call void @ctor.556(%Node* %init)
  br label %if_block

if_block:                                         ; preds = %code
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 36)
  %8 = load %TokenType, %TokenType* %tmp.this1
  %9 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  br i1 %9, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i1 true)
  store %Node %11, %Node* %"$tmpForRef2"
  call void @"=.554"(%Node* %init, %Node* %"$tmpForRef2")
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 3
  %14 = load %Node, %Node* %typeNode
  %15 = load %Node, %Node* %init
  %16 = load %Node*, %Node** %res.addr
  call void @createFormals(%AstBuilder* %13, %"Vector[LocString]"* %ids, %Node %14, %Node %15, i32 2, %Node* %16)
  call void @dtor.586(%"Vector[LocString]"* %ids)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @parseIdList(%"Vector[LocString]"* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %_result.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %_result, %"Vector[LocString]"** %_result.addr
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %"Vector[LocString]"
  %id = alloca %String
  %tmp.this = alloca %LocString
  %"$tmpC" = alloca %"Tuple[Location, String]"
  %tmp.this1 = alloca %TokenType
  %"$tmpC2" = alloca %String
  %tmp.this3 = alloca %LocString
  %"$tmpC4" = alloca %"Tuple[Location, String]"
  br label %code

code:                                             ; preds = %0
  call void @ctor.560(%"Vector[LocString]"* %res)
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 1
  %4 = getelementptr inbounds %Token, %Token* %3, i32 0, i32 0
  %5 = load %Location, %Location* %4
  %6 = load %String, %String* %id
  call void @"~"(%"Tuple[Location, String]"* %"$tmpC", %Location %5, %String %6)
  %7 = load %"Tuple[Location, String]", %"Tuple[Location, String]"* %"$tmpC"
  call void @ctor.578(%LocString* %tmp.this, %"Tuple[Location, String]" %7)
  call void @"+=.562"(%"Vector[LocString]"* %res, %LocString* %tmp.this)
  call void @dtor.580(%LocString* %tmp.this)
  call void @dtor.581(%"Tuple[Location, String]"* %"$tmpC")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 33)
  %9 = load %TokenType, %TokenType* %tmp.this1
  %10 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, %TokenType %9)
  br i1 %10, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %"$tmpC2", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11)
  %12 = call %String* @"=.290"(%String* %id, %String* %"$tmpC2")
  call void @dtor.261(%String* %"$tmpC2")
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i32 0, i32 1
  %15 = getelementptr inbounds %Token, %Token* %14, i32 0, i32 0
  %16 = load %Location, %Location* %15
  %17 = load %String, %String* %id
  call void @"~"(%"Tuple[Location, String]"* %"$tmpC4", %Location %16, %String %17)
  %18 = load %"Tuple[Location, String]", %"Tuple[Location, String]"* %"$tmpC4"
  call void @ctor.578(%LocString* %tmp.this3, %"Tuple[Location, String]" %18)
  call void @"+=.562"(%"Vector[LocString]"* %res, %LocString* %tmp.this3)
  call void @dtor.580(%LocString* %tmp.this3)
  call void @dtor.581(%"Tuple[Location, String]"* %"$tmpC4")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %19 = load %"Vector[LocString]"*, %"Vector[LocString]"** %_result.addr
  call void @ctor.582(%"Vector[LocString]"* %19, %"Vector[LocString]"* %res)
  call void @dtor.261(%String* %id)
  call void @dtor.586(%"Vector[LocString]"* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %id)
  call void @dtor.586(%"Vector[LocString]"* %res)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.560(%"Vector[LocString]"* %this) #3 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 0
  call void @ctor.561(%"RawPtr[LocString]"* %2)
  %3 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %3, i32 0, i32 1
  call void @ctor.561(%"RawPtr[LocString]"* %4)
  %5 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %6 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %5, i32 0, i32 2
  call void @ctor.561(%"RawPtr[LocString]"* %6)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.561(%"RawPtr[LocString]"* %this) #3 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %1, i32 0, i32 0
  store %LocString* null, %LocString** %2
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"+=.562"(%"Vector[LocString]"* %this, %LocString* %value) #4 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %value.addr = alloca %LocString*
  store %LocString* %value, %LocString** %value.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = load %LocString*, %LocString** %value.addr
  call void @pushBack.563(%"Vector[LocString]"* %1, %LocString* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @pushBack.563(%"Vector[LocString]"* %this, %LocString* %value) #4 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %value.addr = alloca %LocString*
  store %LocString* %value, %LocString** %value.addr
  %t = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this5 = alloca i64
  %"$tmpC" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 1
  %3 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %3, i32 0, i32 2
  %5 = call i1 @"==.564"(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %4)
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  store i64 2, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %8 = call i64 @capacity.565(%"Vector[LocString]"* %7)
  %9 = mul i64 %6, %8
  store i64 %9, i64* %t
  br label %if_block1

if_end:                                           ; preds = %if_end3, %if_block
  %10 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %11 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %10, i32 0, i32 1
  %12 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %11
  %13 = call %LocString* @value.576(%"RawPtr[LocString]" %12)
  %14 = load %LocString*, %LocString** %value.addr
  call void @ctor.574(%LocString* %13, %LocString* %14)
  %15 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %16 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %15, i32 0, i32 1
  %17 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %18 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %17, i32 0, i32 1
  %19 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %18
  call void @advance.577(%"RawPtr[LocString]"* %"$tmpC", %"RawPtr[LocString]" %19)
  call void @"=.571"(%"RawPtr[LocString]"* %16, %"RawPtr[LocString]"* %"$tmpC")
  ret void

if_block1:                                        ; preds = %if_then
  %20 = load i64, i64* %t
  store i64 2, i64* %tmp.this4
  %21 = load i64, i64* %tmp.this4
  %22 = icmp slt i64 %20, %21
  br i1 %22, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 2, i64* %tmp.this5
  %23 = load i64, i64* %tmp.this5
  store i64 %23, i64* %t
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %24 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %25 = load i64, i64* %t
  call void @reserve.568(%"Vector[LocString]"* %24, i64 %25)
  br label %if_end
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.564"(%"RawPtr[LocString]"* %this, %"RawPtr[LocString]"* %other) #3 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  %other.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %other, %"RawPtr[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %2
  %4 = bitcast %LocString* %3 to i8*
  %5 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %other.addr
  %6 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %5, i32 0, i32 0
  %7 = load %LocString*, %LocString** %6
  %8 = bitcast %LocString* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  ret i1 %9
}

; Function Attrs: inlinehint nounwind
define internal i64 @capacity.565(%"Vector[LocString]"* %this) #4 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 2
  %3 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %2
  %4 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %5 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %4, i32 0, i32 0
  %6 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %5
  %7 = call i64 @diff.566(%"RawPtr[LocString]" %3, %"RawPtr[LocString]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i64 @diff.566(%"RawPtr[LocString]" %this, %"RawPtr[LocString]" %other) #4 {
  %this.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %this, %"RawPtr[LocString]"* %this.addr
  %other.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %other, %"RawPtr[LocString]"* %other.addr
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %this.addr
  %2 = call i8* @bytePtr.567(%"RawPtr[LocString]" %1)
  %3 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %other.addr
  %4 = call i8* @bytePtr.567(%"RawPtr[LocString]" %3)
  %5 = call i64 @ptrDiff(i8* %2, i8* %4)
  store i64 48, i64* %tmp.this1
  %6 = load i64, i64* %tmp.this1
  %7 = sdiv i64 %5, %6
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal i8* @bytePtr.567(%"RawPtr[LocString]" %this) #4 {
  %this.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %this, %"RawPtr[LocString]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this.addr, i32 0, i32 0
  %2 = load %LocString*, %LocString** %1
  %3 = bitcast %LocString* %2 to i8*
  ret i8* %3
}

; Function Attrs: inlinehint nounwind
define internal void @reserve.568(%"Vector[LocString]"* %this, i64 %n) #4 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %curCapacity = alloca i64
  %tmp.this = alloca i64
  %tmp.this4 = alloca i64
  %tmp.this8 = alloca double
  %tmp.this9 = alloca double
  %tmp.this10 = alloca i64
  %tmp.this11 = alloca double
  %curSize = alloca i64
  %"$tmpC" = alloca %"RawPtr[LocString]"
  %"$tmpC12" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = call i64 @capacity.565(%"Vector[LocString]"* %1)
  store i64 %2, i64* %curCapacity
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load i64, i64* %n.addr
  %4 = load i64, i64* %curCapacity
  %5 = icmp sle i64 %3, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %6 = load i64, i64* %n.addr
  store i64 8, i64* %tmp.this
  %7 = load i64, i64* %tmp.this
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  store i64 8, i64* %tmp.this4
  %9 = load i64, i64* %tmp.this4
  store i64 %9, i64* %n.addr
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  br label %if_block5

if_block5:                                        ; preds = %if_end3
  %10 = load i64, i64* %n.addr
  %11 = sitofp i64 %10 to double
  store double %11, double* %tmp.this8
  %12 = load double, double* %tmp.this8
  %13 = load i64, i64* %curCapacity
  %14 = sitofp i64 %13 to double
  store double %14, double* %tmp.this9
  %15 = load double, double* %tmp.this9
  %16 = call double @_Double_opMul(double 2.000000e+00, double %15)
  %17 = call i1 @_Double_opLT(double %12, double %16)
  br i1 %17, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  %18 = load i64, i64* %curCapacity
  %19 = sitofp i64 %18 to double
  store double %19, double* %tmp.this11
  %20 = load double, double* %tmp.this11
  %21 = call double @_Double_opMul(double 2.000000e+00, double %20)
  %22 = fptoui double %21 to i64
  store i64 %22, i64* %tmp.this10
  %23 = load i64, i64* %tmp.this10
  store i64 %23, i64* %n.addr
  br label %if_end7

if_end7:                                          ; preds = %if_then6, %if_block5
  %24 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %25 = call i64 @size.569(%"Vector[LocString]"* %24)
  store i64 %25, i64* %curSize
  %26 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %27 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %26, i32 0, i32 0
  %28 = load i64, i64* %n.addr
  call void @reallocPtr.570(%"RawPtr[LocString]"* %27, i64 %28)
  %29 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %30 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %29, i32 0, i32 1
  %31 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %32 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %31, i32 0, i32 0
  %33 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %32
  %34 = load i64, i64* %curSize
  call void @advance.572(%"RawPtr[LocString]"* %"$tmpC", %"RawPtr[LocString]" %33, i64 %34)
  call void @"=.571"(%"RawPtr[LocString]"* %30, %"RawPtr[LocString]"* %"$tmpC")
  %35 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %36 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %35, i32 0, i32 2
  %37 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %38 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %37, i32 0, i32 0
  %39 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %38
  %40 = load i64, i64* %n.addr
  call void @advance.572(%"RawPtr[LocString]"* %"$tmpC12", %"RawPtr[LocString]" %39, i64 %40)
  call void @"=.571"(%"RawPtr[LocString]"* %36, %"RawPtr[LocString]"* %"$tmpC12")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i64 @size.569(%"Vector[LocString]"* %this) #4 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 1
  %3 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %2
  %4 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %5 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %4, i32 0, i32 0
  %6 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %5
  %7 = call i64 @diff.566(%"RawPtr[LocString]" %3, %"RawPtr[LocString]" %6)
  store i64 %7, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  ret i64 %8
}

; Function Attrs: inlinehint nounwind
define internal void @reallocPtr.570(%"RawPtr[LocString]"* %this, i64 %n) #4 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %2 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %1
  %3 = call i8* @bytePtr.567(%"RawPtr[LocString]" %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 48
  %6 = call i8* @realloc(i8* %3, i64 %5)
  %7 = bitcast i8* %6 to %LocString*
  %8 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %9 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %8, i32 0, i32 0
  store %LocString* %7, %LocString** %9
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.571"(%"RawPtr[LocString]"* %this, %"RawPtr[LocString]"* %other) #3 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  %other.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %other, %"RawPtr[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %2
  %4 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %5 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %4, i32 0, i32 0
  store %LocString* %3, %LocString** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @advance.572(%"RawPtr[LocString]"* sret %_result, %"RawPtr[LocString]" %this, i64 %n) #4 {
  %_result.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %_result, %"RawPtr[LocString]"** %_result.addr
  %this.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %this, %"RawPtr[LocString]"* %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %_result.addr
  %2 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %this.addr
  %3 = call i8* @bytePtr.567(%"RawPtr[LocString]" %2)
  %4 = load i64, i64* %n.addr
  %5 = mul i64 %4, 48
  %6 = call i8* @ptrAdd(i8* %3, i64 %5)
  call void @ctor.573(%"RawPtr[LocString]"* %1, i8* %6)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.573(%"RawPtr[LocString]"* %this, i8* %byteRef) #4 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  %byteRef.addr = alloca i8*
  store i8* %byteRef, i8** %byteRef.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %2 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %1, i32 0, i32 0
  store %LocString* null, %LocString** %2
  %3 = load i8*, i8** %byteRef.addr
  %4 = bitcast i8* %3 to %LocString*
  %5 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %6 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %5, i32 0, i32 0
  store %LocString* %4, %LocString** %6
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.574(%LocString* %this, %LocString* %other) #3 {
  %this.addr = alloca %LocString*
  store %LocString* %this, %LocString** %this.addr
  %other.addr = alloca %LocString*
  store %LocString* %other, %LocString** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %this.addr
  %2 = getelementptr inbounds %LocString, %LocString* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %other.addr
  %4 = getelementptr inbounds %LocString, %LocString* %3, i32 0, i32 0
  call void @ctor.575(%"Tuple[Location, String]"* %2, %"Tuple[Location, String]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.575(%"Tuple[Location, String]"* %this, %"Tuple[Location, String]"* %other) #3 {
  %this.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %this, %"Tuple[Location, String]"** %this.addr
  %other.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %other, %"Tuple[Location, String]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %2 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %1, i32 0, i32 0
  %3 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %4 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %3, i32 0, i32 0
  call void @ctor.182(%Location* %2, %Location* %4)
  %5 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %6 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %5, i32 0, i32 1
  %7 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %8 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %7, i32 0, i32 1
  call void @ctor.189(%String* %6, %String* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %LocString* @value.576(%"RawPtr[LocString]" %this) #4 {
  %this.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %this, %"RawPtr[LocString]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this.addr, i32 0, i32 0
  %2 = load %LocString*, %LocString** %1
  ret %LocString* %2
}

; Function Attrs: inlinehint nounwind
define internal void @advance.577(%"RawPtr[LocString]"* sret %_result, %"RawPtr[LocString]" %this) #4 {
  %_result.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %_result, %"RawPtr[LocString]"** %_result.addr
  %this.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %this, %"RawPtr[LocString]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %_result.addr
  %2 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %this.addr
  %3 = call i8* @bytePtr.567(%"RawPtr[LocString]" %2)
  %4 = call i8* @ptrAdd(i8* %3, i64 48)
  call void @ctor.573(%"RawPtr[LocString]"* %1, i8* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.578(%LocString* %this, %"Tuple[Location, String]" %fdata) #3 {
  %this.addr = alloca %LocString*
  store %LocString* %this, %LocString** %this.addr
  %fdata.addr = alloca %"Tuple[Location, String]"
  store %"Tuple[Location, String]" %fdata, %"Tuple[Location, String]"* %fdata.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %this.addr
  %2 = getelementptr inbounds %LocString, %LocString* %1, i32 0, i32 0
  call void @ctor.575(%"Tuple[Location, String]"* %2, %"Tuple[Location, String]"* %fdata.addr)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"~"(%"Tuple[Location, String]"* sret %_result, %Location %v1, %String %v2) #4 {
  %_result.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %_result, %"Tuple[Location, String]"** %_result.addr
  %v1.addr = alloca %Location
  store %Location %v1, %Location* %v1.addr
  %v2.addr = alloca %String
  store %String %v2, %String* %v2.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %_result.addr
  %2 = load %Location, %Location* %v1.addr
  %3 = load %String, %String* %v2.addr
  call void @mkTuple(%"Tuple[Location, String]"* %1, %Location %2, %String %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @mkTuple(%"Tuple[Location, String]"* sret %_result, %Location %v1, %String %v2) #4 {
  %_result.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %_result, %"Tuple[Location, String]"** %_result.addr
  %v1.addr = alloca %Location
  store %Location %v1, %Location* %v1.addr
  %v2.addr = alloca %String
  store %String %v2, %String* %v2.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %_result.addr
  %2 = load %Location, %Location* %v1.addr
  %3 = load %String, %String* %v2.addr
  call void @ctor.579(%"Tuple[Location, String]"* %1, %Location %2, %String %3)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.579(%"Tuple[Location, String]"* %this, %Location %fv1, %String %fv2) #3 {
  %this.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %this, %"Tuple[Location, String]"** %this.addr
  %fv1.addr = alloca %Location
  store %Location %fv1, %Location* %fv1.addr
  %fv2.addr = alloca %String
  store %String %fv2, %String* %fv2.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %2 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %1, i32 0, i32 0
  call void @ctor.182(%Location* %2, %Location* %fv1.addr)
  %3 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %4 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %3, i32 0, i32 1
  call void @ctor.189(%String* %4, %String* %fv2.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.580(%LocString* %this) #3 {
  %this.addr = alloca %LocString*
  store %LocString* %this, %LocString** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %this.addr
  %2 = getelementptr inbounds %LocString, %LocString* %1, i32 0, i32 0
  call void @dtor.581(%"Tuple[Location, String]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.581(%"Tuple[Location, String]"* %this) #3 {
  %this.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %this, %"Tuple[Location, String]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %2 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %1, i32 0, i32 1
  call void @dtor.261(%String* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.582(%"Vector[LocString]"* %this, %"Vector[LocString]"* %other) #4 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %other.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %other, %"Vector[LocString]"** %other.addr
  %size = alloca i64
  %"$tmpC" = alloca %"RawPtr[LocString]"
  %"$tmpC1" = alloca %"RawPtr[LocString]"
  %dst = alloca %"RawPtr[LocString]"
  %src = alloca %"RawPtr[LocString]"
  %"$tmpC2" = alloca %"RawPtr[LocString]"
  %"$tmpC3" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 0
  call void @ctor.561(%"RawPtr[LocString]"* %2)
  %3 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %3, i32 0, i32 1
  call void @ctor.561(%"RawPtr[LocString]"* %4)
  %5 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %6 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %5, i32 0, i32 2
  call void @ctor.561(%"RawPtr[LocString]"* %6)
  %7 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %8 = call i64 @size.569(%"Vector[LocString]"* %7)
  store i64 %8, i64* %size
  %9 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %10 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %9, i32 0, i32 0
  %11 = load i64, i64* %size
  call void @allocRawPtr.583(%"RawPtr[LocString]"* %"$tmpC", i64 %11)
  call void @"=.571"(%"RawPtr[LocString]"* %10, %"RawPtr[LocString]"* %"$tmpC")
  %12 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %13 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %12, i32 0, i32 1
  %14 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %15 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %14, i32 0, i32 0
  %16 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %15
  %17 = load i64, i64* %size
  call void @advance.572(%"RawPtr[LocString]"* %"$tmpC1", %"RawPtr[LocString]" %16, i64 %17)
  call void @"=.571"(%"RawPtr[LocString]"* %13, %"RawPtr[LocString]"* %"$tmpC1")
  %18 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %19 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %18, i32 0, i32 2
  %20 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %21 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %20, i32 0, i32 1
  call void @"=.571"(%"RawPtr[LocString]"* %19, %"RawPtr[LocString]"* %21)
  %22 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %23 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %22, i32 0, i32 0
  call void @ctor.585(%"RawPtr[LocString]"* %dst, %"RawPtr[LocString]"* %23)
  %24 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %25 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %24, i32 0, i32 0
  call void @ctor.585(%"RawPtr[LocString]"* %src, %"RawPtr[LocString]"* %25)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %26 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %27 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %26, i32 0, i32 1
  %28 = call i1 @"==.564"(%"RawPtr[LocString]"* %dst, %"RawPtr[LocString]"* %27)
  %29 = xor i1 true, %28
  br i1 %29, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %30 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %dst
  %31 = call %LocString* @value.576(%"RawPtr[LocString]" %30)
  %32 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %src
  %33 = call %LocString* @value.576(%"RawPtr[LocString]" %32)
  call void @ctor.574(%LocString* %31, %LocString* %33)
  %34 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %dst
  call void @advance.577(%"RawPtr[LocString]"* %"$tmpC2", %"RawPtr[LocString]" %34)
  call void @"=.571"(%"RawPtr[LocString]"* %dst, %"RawPtr[LocString]"* %"$tmpC2")
  %35 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %src
  call void @advance.577(%"RawPtr[LocString]"* %"$tmpC3", %"RawPtr[LocString]" %35)
  call void @"=.571"(%"RawPtr[LocString]"* %src, %"RawPtr[LocString]"* %"$tmpC3")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @allocRawPtr.583(%"RawPtr[LocString]"* sret %_result, i64 %num) #4 {
  %_result.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %_result, %"RawPtr[LocString]"** %_result.addr
  %num.addr = alloca i64
  store i64 %num, i64* %num.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %_result.addr
  %2 = load i64, i64* %num.addr
  %3 = mul i64 %2, 48
  %4 = call i8* @malloc(i64 %3)
  %5 = bitcast i8* %4 to %LocString*
  call void @ctor.584(%"RawPtr[LocString]"* %1, %LocString* %5)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.584(%"RawPtr[LocString]"* %this, %LocString* %f_ptr) #3 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  %f_ptr.addr = alloca %LocString*
  store %LocString* %f_ptr, %LocString** %f_ptr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %f_ptr.addr
  %2 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %3 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %2, i32 0, i32 0
  store %LocString* %1, %LocString** %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.585(%"RawPtr[LocString]"* %this, %"RawPtr[LocString]"* %other) #3 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  %other.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %other, %"RawPtr[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %other.addr
  %2 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %2
  %4 = load %"RawPtr[LocString]"*, %"RawPtr[LocString]"** %this.addr
  %5 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %4, i32 0, i32 0
  store %LocString* %3, %LocString** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.586(%"Vector[LocString]"* %this) #4 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %p = alloca %"RawPtr[LocString]"
  %"$tmpC" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 0
  call void @ctor.585(%"RawPtr[LocString]"* %p, %"RawPtr[LocString]"* %2)
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %3 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %3, i32 0, i32 1
  %5 = call i1 @"==.564"(%"RawPtr[LocString]"* %p, %"RawPtr[LocString]"* %4)
  %6 = xor i1 true, %5
  br i1 %6, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %7 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %p
  %8 = call %LocString* @value.576(%"RawPtr[LocString]" %7)
  call void @dtor.580(%LocString* %8)
  br label %while_step

while_step:                                       ; preds = %while_body
  %9 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %p
  call void @advance.577(%"RawPtr[LocString]"* %"$tmpC", %"RawPtr[LocString]" %9)
  call void @"=.571"(%"RawPtr[LocString]"* %p, %"RawPtr[LocString]"* %"$tmpC")
  br label %while_block

while_end:                                        ; preds = %while_block
  %10 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %11 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %10, i32 0, i32 0
  %12 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %11
  call void @freePtr.587(%"RawPtr[LocString]" %12)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @freePtr.587(%"RawPtr[LocString]" %this) #4 {
  %this.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %this, %"RawPtr[LocString]"* %this.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %this.addr
  %2 = call i1 @isSet.588(%"RawPtr[LocString]" %1)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %this.addr
  %4 = call i8* @bytePtr.567(%"RawPtr[LocString]" %3)
  call void @free(i8* %4)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet.588(%"RawPtr[LocString]" %this) #4 {
  %this.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %this, %"RawPtr[LocString]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"RawPtr[LocString]", %"RawPtr[LocString]"* %this.addr, i32 0, i32 0
  %2 = load %LocString*, %LocString** %1
  %3 = bitcast %LocString* %2 to i8*
  %4 = call i1 @implOpRefNE(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal void @createFormals(%AstBuilder* %astBuilder, %"Vector[LocString]"* %ids, %Node %typeNode, %Node %init, i32 %kind, %Node* %res) #4 {
  %astBuilder.addr = alloca %AstBuilder*
  store %AstBuilder* %astBuilder, %AstBuilder** %astBuilder.addr
  %ids.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %ids, %"Vector[LocString]"** %ids.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  %kind.addr = alloca i32
  store i32 %kind, i32* %kind.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %"$rangeVar" = alloca %"ContiguousMemoryRange[LocString]"
  %id = alloca %LocString*
  %v = alloca %Node
  %"$tmpForRef" = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %"$rangeVar6" = alloca %"ContiguousMemoryRange[LocString]"
  %id11 = alloca %LocString*
  %v12 = alloca %Node
  %"$tmpForRef13" = alloca %Node
  %"$tmpForRef14" = alloca %Node
  %"$rangeVar15" = alloca %"ContiguousMemoryRange[LocString]"
  %id20 = alloca %LocString*
  %p = alloca %Node
  %"$tmpForRef21" = alloca %Node
  %"$tmpForRef22" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load i32, i32* %kind.addr
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %3 = load %"Vector[LocString]"*, %"Vector[LocString]"** %ids.addr
  call void @all.589(%"ContiguousMemoryRange[LocString]"* %"$rangeVar", %"Vector[LocString]"* %3)
  br label %while_block

if_else:                                          ; preds = %if_block
  br label %if_block2

if_end:                                           ; preds = %if_end5, %while_end
  ret void

while_block:                                      ; preds = %while_step, %if_then
  %4 = load %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %"$rangeVar"
  %5 = call i1 @isEmpty.591(%"ContiguousMemoryRange[LocString]" %4)
  %6 = xor i1 true, %5
  br i1 %6, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %7 = load %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %"$rangeVar"
  %8 = call %LocString* @front.592(%"ContiguousMemoryRange[LocString]" %7)
  store %LocString* %8, %LocString** %id
  %9 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %10 = load %LocString*, %LocString** %id
  %11 = getelementptr inbounds %LocString, %LocString* %10, i32 0, i32 0
  %12 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %11, i32 0, i32 0
  %13 = load %LocString*, %LocString** %id
  %14 = getelementptr inbounds %LocString, %LocString* %13, i32 0, i32 0
  %15 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %14, i32 0, i32 1
  %16 = call %StringRef @asStringRef(%String* %15)
  %17 = load %Node, %Node* %typeNode.addr
  %18 = load %Node, %Node* %init.addr
  %19 = call %Node @mkLet(%AstBuilder* %9, %Location* %12, %StringRef %16, %Node %17, %Node %18)
  store %Node %19, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %v, %Node* %"$tmpForRef")
  %20 = load %Node*, %Node** %res.addr
  %21 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %22 = load %Node*, %Node** %res.addr
  %23 = load %Node, %Node* %22
  %24 = load %Node, %Node* %v
  %25 = call %Node @addToNodeList(%AstBuilder* %21, %Node %23, %Node %24)
  store %Node %25, %Node* %"$tmpForRef1"
  call void @"=.554"(%Node* %20, %Node* %"$tmpForRef1")
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.594(%"ContiguousMemoryRange[LocString]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %if_end

if_block2:                                        ; preds = %if_else
  %26 = load i32, i32* %kind.addr
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %if_then3, label %if_else4

if_then3:                                         ; preds = %if_block2
  %28 = load %"Vector[LocString]"*, %"Vector[LocString]"** %ids.addr
  call void @all.589(%"ContiguousMemoryRange[LocString]"* %"$rangeVar6", %"Vector[LocString]"* %28)
  br label %while_block7

if_else4:                                         ; preds = %if_block2
  %29 = load %"Vector[LocString]"*, %"Vector[LocString]"** %ids.addr
  call void @all.589(%"ContiguousMemoryRange[LocString]"* %"$rangeVar15", %"Vector[LocString]"* %29)
  br label %while_block16

if_end5:                                          ; preds = %while_end19, %while_end10
  br label %if_end

while_block7:                                     ; preds = %while_step9, %if_then3
  %30 = load %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %"$rangeVar6"
  %31 = call i1 @isEmpty.591(%"ContiguousMemoryRange[LocString]" %30)
  %32 = xor i1 true, %31
  br i1 %32, label %while_body8, label %while_end10

while_body8:                                      ; preds = %while_block7
  %33 = load %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %"$rangeVar6"
  %34 = call %LocString* @front.592(%"ContiguousMemoryRange[LocString]" %33)
  store %LocString* %34, %LocString** %id11
  %35 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %36 = load %LocString*, %LocString** %id11
  %37 = getelementptr inbounds %LocString, %LocString* %36, i32 0, i32 0
  %38 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %37, i32 0, i32 0
  %39 = load %LocString*, %LocString** %id11
  %40 = getelementptr inbounds %LocString, %LocString* %39, i32 0, i32 0
  %41 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %40, i32 0, i32 1
  %42 = call %StringRef @asStringRef(%String* %41)
  %43 = load %Node, %Node* %typeNode.addr
  %44 = load %Node, %Node* %init.addr
  %45 = call %Node @mkVar(%AstBuilder* %35, %Location* %38, %StringRef %42, %Node %43, %Node %44)
  store %Node %45, %Node* %"$tmpForRef13"
  call void @ctor.545(%Node* %v12, %Node* %"$tmpForRef13")
  %46 = load %Node*, %Node** %res.addr
  %47 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %48 = load %Node*, %Node** %res.addr
  %49 = load %Node, %Node* %48
  %50 = load %Node, %Node* %v12
  %51 = call %Node @addToNodeList(%AstBuilder* %47, %Node %49, %Node %50)
  store %Node %51, %Node* %"$tmpForRef14"
  call void @"=.554"(%Node* %46, %Node* %"$tmpForRef14")
  br label %while_step9

while_step9:                                      ; preds = %while_body8
  call void @popFront.594(%"ContiguousMemoryRange[LocString]"* %"$rangeVar6")
  br label %while_block7

while_end10:                                      ; preds = %while_block7
  br label %if_end5

while_block16:                                    ; preds = %while_step18, %if_else4
  %52 = load %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %"$rangeVar15"
  %53 = call i1 @isEmpty.591(%"ContiguousMemoryRange[LocString]" %52)
  %54 = xor i1 true, %53
  br i1 %54, label %while_body17, label %while_end19

while_body17:                                     ; preds = %while_block16
  %55 = load %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %"$rangeVar15"
  %56 = call %LocString* @front.592(%"ContiguousMemoryRange[LocString]" %55)
  store %LocString* %56, %LocString** %id20
  %57 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %58 = load %LocString*, %LocString** %id20
  %59 = getelementptr inbounds %LocString, %LocString* %58, i32 0, i32 0
  %60 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %59, i32 0, i32 0
  %61 = load %LocString*, %LocString** %id20
  %62 = getelementptr inbounds %LocString, %LocString* %61, i32 0, i32 0
  %63 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %62, i32 0, i32 1
  %64 = call %StringRef @asStringRef(%String* %63)
  %65 = load %Node, %Node* %typeNode.addr
  %66 = load %Node, %Node* %init.addr
  %67 = call %Node @mkParameter(%AstBuilder* %57, %Location* %60, %StringRef %64, %Node %65, %Node %66)
  store %Node %67, %Node* %"$tmpForRef21"
  call void @ctor.545(%Node* %p, %Node* %"$tmpForRef21")
  %68 = load %Node*, %Node** %res.addr
  %69 = load %AstBuilder*, %AstBuilder** %astBuilder.addr
  %70 = load %Node*, %Node** %res.addr
  %71 = load %Node, %Node* %70
  %72 = load %Node, %Node* %p
  %73 = call %Node @addToNodeList(%AstBuilder* %69, %Node %71, %Node %72)
  store %Node %73, %Node* %"$tmpForRef22"
  call void @"=.554"(%Node* %68, %Node* %"$tmpForRef22")
  br label %while_step18

while_step18:                                     ; preds = %while_body17
  call void @popFront.594(%"ContiguousMemoryRange[LocString]"* %"$rangeVar15")
  br label %while_block16

while_end19:                                      ; preds = %while_block16
  br label %if_end5
}

; Function Attrs: inlinehint nounwind
define internal void @all.589(%"ContiguousMemoryRange[LocString]"* sret %_result, %"Vector[LocString]"* %this) #4 {
  %_result.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %_result, %"ContiguousMemoryRange[LocString]"** %_result.addr
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %_result.addr
  %2 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %3 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %2, i32 0, i32 0
  %4 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %3
  %5 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %6 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %5, i32 0, i32 1
  %7 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %6
  call void @ctor.590(%"ContiguousMemoryRange[LocString]"* %1, %"RawPtr[LocString]" %4, %"RawPtr[LocString]" %7)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.590(%"ContiguousMemoryRange[LocString]"* %this, %"RawPtr[LocString]" %f_begin, %"RawPtr[LocString]" %f_end) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"** %this.addr
  %f_begin.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %f_begin, %"RawPtr[LocString]"* %f_begin.addr
  %f_end.addr = alloca %"RawPtr[LocString]"
  store %"RawPtr[LocString]" %f_end, %"RawPtr[LocString]"* %f_end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %1, i32 0, i32 0
  call void @ctor.585(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %f_begin.addr)
  %3 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %3, i32 0, i32 1
  call void @ctor.585(%"RawPtr[LocString]"* %4, %"RawPtr[LocString]"* %f_end.addr)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.591(%"ContiguousMemoryRange[LocString]" %this) #4 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"
  store %"ContiguousMemoryRange[LocString]" %this, %"ContiguousMemoryRange[LocString]"* %this.addr
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this.addr, i32 0, i32 1
  %2 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %1
  %3 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this.addr, i32 0, i32 0
  %4 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %3
  %5 = call i64 @diff.566(%"RawPtr[LocString]" %2, %"RawPtr[LocString]" %4)
  store i64 0, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  %7 = icmp sle i64 %5, %6
  ret i1 %7
}

; Function Attrs: inlinehint nounwind
define internal %LocString* @front.592(%"ContiguousMemoryRange[LocString]" %this) #4 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"
  store %"ContiguousMemoryRange[LocString]" %this, %"ContiguousMemoryRange[LocString]"* %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %this.addr, i32 0, i32 0
  %2 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %1
  %3 = call %LocString* @value.576(%"RawPtr[LocString]" %2)
  ret %LocString* %3
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkLet(%AstBuilder* %obj, %Location* %loc, %StringRef %name, %Node %typeNode, %Node %init) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 10
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %name.addr
  %8 = load %Node, %Node* %typeNode.addr
  %9 = load %Node, %Node* %init.addr
  %10 = call %Node @"().593"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().593"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4, %Node %p5) #4 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %StringRef, %StringRef* %p3.addr
  %5 = load %Node, %Node* %p4.addr
  %6 = load %Node, %Node* %p5.addr
  %7 = bitcast %"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %1 to %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node)**
  %8 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node)** %7
  %9 = call %Node %8(%UntypedPtr %2, %Location* %3, %StringRef %4, %Node %5, %Node %6)
  ret %Node %9
}

; Function Attrs: alwaysinline nounwind
define internal void @popFront.594(%"ContiguousMemoryRange[LocString]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"** %this.addr
  %"$tmpC" = alloca %"RawPtr[LocString]"
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %3, i32 0, i32 0
  %5 = load %"RawPtr[LocString]", %"RawPtr[LocString]"* %4
  call void @advance.577(%"RawPtr[LocString]"* %"$tmpC", %"RawPtr[LocString]" %5)
  call void @"=.571"(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkVar(%AstBuilder* %obj, %Location* %loc, %StringRef %name, %Node %typeNode, %Node %init) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 11
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %name.addr
  %8 = load %Node, %Node* %typeNode.addr
  %9 = load %Node, %Node* %init.addr
  %10 = call %Node @"().593"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkParameter(%AstBuilder* %obj, %Location* %loc, %StringRef %name, %Node %typeNode, %Node %init) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 12
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %name.addr
  %8 = load %Node, %Node* %typeNode.addr
  %9 = load %Node, %Node* %init.addr
  %10 = call %Node @"().593"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseTypeNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 31)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i1 false)
  ret %Node %5

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.556(%Node* %tmp.this1)
  %6 = load %Node, %Node* %tmp.this1
  ret %Node %6

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseFunBody(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %Node
  %res = alloca %Node
  %"$tmpC" = alloca %String
  %tmp.StringRef = alloca %StringRef
  %"$tmpC5" = alloca %Token
  %tmp.StringRef6 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 32)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  call void @ctor.556(%Node* %tmp.this1)
  %4 = load %Node, %Node* %tmp.this1
  ret %Node %4

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.556(%Node* %res)
  br label %if_block2

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block2:                                        ; preds = %if_end
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = call i1 @parseBlockStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, %Node* %res, i1 false)
  %7 = xor i1 true, %6
  br i1 %7, label %if_then3, label %if_end4

if_then3:                                         ; preds = %if_block2
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %9 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %10 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.96, i32 0, i32 0), i8** %9
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.96, i32 0, i32 25), i8** %10
  %11 = load %StringRef, %StringRef* %tmp.StringRef
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC5", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %13)
  %14 = getelementptr inbounds %Token, %Token* %"$tmpC5", i32 0, i32 1
  %15 = load %TokenType, %TokenType* %14
  %16 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef6, i32 0, i32 0
  %17 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef6, i32 0, i32 1
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str.97, i32 0, i32 0), i8** %16
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str.97, i32 0, i32 27), i8** %17
  %18 = load %StringRef, %StringRef* %tmp.StringRef6
  call void @toString.597(%String* %"$tmpC", %StringRef %11, %TokenType %15, %StringRef %18)
  call void @reportError.548(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC5")
  br label %if_end4

if_end4:                                          ; preds = %if_then3, %if_block2
  %19 = load %Node, %Node* %res
  ret %Node %19
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseBlockStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %topLevel) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %loc = alloca %Location
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %Node
  %tmp.this2 = alloca %TokenType
  %s = alloca %Node
  %"$tmpForRef" = alloca %Node
  %"$tmpForRef6" = alloca %Node
  %tmp.this7 = alloca %TokenType
  %"$tmpForRef11" = alloca %Node
  %"$tmpC" = alloca %Location
  %"$tmpC12" = alloca %Location
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 25)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = load %Node*, %Node** %res.addr
  call void @ctor.556(%Node* %tmp.this1)
  call void @"=.554"(%Node* %5, %Node* %tmp.this1)
  br label %while_block

if_end:                                           ; preds = %dumy_block13, %if_block
  ret i1 false

while_block:                                      ; preds = %while_step, %if_then
  %6 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this2, i32 26)
  %7 = load %TokenType, %TokenType* %tmp.this2
  %8 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6, %TokenType %7)
  %9 = xor i1 true, %8
  br i1 %9, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = load i1, i1* %topLevel.addr
  %12 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i1 %11)
  store %Node %12, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %s, %Node* %"$tmpForRef")
  br label %if_block3

while_step:                                       ; preds = %if_end5
  br label %while_block

while_end:                                        ; preds = %if_else, %cond.end
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this7, i32 26)
  %14 = load %TokenType, %TokenType* %tmp.this7
  %15 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, %TokenType %14)
  br label %if_block8

cond.true:                                        ; preds = %while_block
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i32 0, i32 2
  %18 = load i1, i1* %17
  %19 = xor i1 true, %18
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %19, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

if_block3:                                        ; preds = %while_body
  %20 = load %Node, %Node* %s
  %21 = call i1 @isSet.595(%Node %20)
  br i1 %21, label %if_then4, label %if_else

if_then4:                                         ; preds = %if_block3
  %22 = load %Node*, %Node** %res.addr
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 3
  %25 = load %Node*, %Node** %res.addr
  %26 = load %Node, %Node* %25
  %27 = load %Node, %Node* %s
  %28 = call %Node @addToNodeList(%AstBuilder* %24, %Node %26, %Node %27)
  store %Node %28, %Node* %"$tmpForRef6"
  call void @"=.554"(%Node* %22, %Node* %"$tmpForRef6")
  br label %if_end5

if_else:                                          ; preds = %if_block3
  br label %while_end

if_end5:                                          ; preds = %dumy_block, %if_then4
  br label %while_step

dumy_block:                                       ; No predecessors!
  br label %if_end5

if_block8:                                        ; preds = %while_end
  %29 = load i1, i1* %topLevel.addr
  %30 = xor i1 true, %29
  br i1 %30, label %if_then9, label %if_end10

if_then9:                                         ; preds = %if_block8
  %31 = load %Node*, %Node** %res.addr
  %32 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %33 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %32, i32 0, i32 3
  %34 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC12", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %34)
  call void @span(%Location* %"$tmpC", %Location* %loc, %Location* %"$tmpC12")
  %35 = load %Node*, %Node** %res.addr
  %36 = load %Node, %Node* %35
  %37 = call %Node @mkBlockStmt(%AstBuilder* %33, %Location* %"$tmpC", %Node %36)
  store %Node %37, %Node* %"$tmpForRef11"
  call void @"=.554"(%Node* %31, %Node* %"$tmpForRef11")
  br label %if_end10

if_end10:                                         ; preds = %if_then9, %if_block8
  ret i1 true

dumy_block13:                                     ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @isSet.595(%Node %n) #4 {
  %n.addr = alloca %Node
  store %Node %n, %Node* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Node, %Node* %n.addr, i32 0, i32 0
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = call i1 @implOpRefNE(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkBlockStmt(%AstBuilder* %obj, %Location* %loc, %Node %stmts) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %stmts.addr = alloca %Node
  store %Node %stmts, %Node* %stmts.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 34
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %stmts.addr
  %8 = call %Node @"().596"(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %2, %UntypedPtr %5, %Location* %6, %Node %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().596"(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %Node, %Node* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %1 to %Node (%UntypedPtr, %Location*, %Node)**
  %6 = load %Node (%UntypedPtr, %Location*, %Node)*, %Node (%UntypedPtr, %Location*, %Node)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, %Node %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal void @toString.597(%String* sret %_result, %StringRef %a1, %TokenType %a2, %StringRef %a3) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %a1.addr = alloca %StringRef
  store %StringRef %a1, %StringRef* %a1.addr
  %a2.addr = alloca %TokenType
  store %TokenType %a2, %TokenType* %a2.addr
  %a3.addr = alloca %StringRef
  store %StringRef %a3, %StringRef* %a3.addr
  %s = alloca %StringOutputStream
  br label %code

code:                                             ; preds = %0
  call void @ctor.452(%StringOutputStream* %s)
  %1 = call %StringOutputStream* @"<<"(%StringOutputStream* %s, %StringRef* %a1.addr)
  %2 = call %StringOutputStream* @"<<.550"(%StringOutputStream* %1, %TokenType* %a2.addr)
  %3 = call %StringOutputStream* @"<<"(%StringOutputStream* %2, %StringRef* %a3.addr)
  %4 = load %String*, %String** %_result.addr
  %5 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %s, i32 0, i32 0
  call void @ctor.189(%String* %4, %String* %5)
  call void @dtor.454(%StringOutputStream* %s)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.454(%StringOutputStream* %s)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkLambdaExpr(%AstBuilder* %obj, %Location* %loc, %Node %closureParams, %Node %formals, %Node %retType, %Node %body, %Node %bodyExpr) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %closureParams.addr = alloca %Node
  store %Node %closureParams, %Node* %closureParams.addr
  %formals.addr = alloca %Node
  store %Node %formals, %Node* %formals.addr
  %retType.addr = alloca %Node
  store %Node %retType, %Node* %retType.addr
  %body.addr = alloca %Node
  store %Node %body, %Node* %body.addr
  %bodyExpr.addr = alloca %Node
  store %Node %bodyExpr, %Node* %bodyExpr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 23
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %closureParams.addr
  %8 = load %Node, %Node* %formals.addr
  %9 = load %Node, %Node* %retType.addr
  %10 = load %Node, %Node* %body.addr
  %11 = load %Node, %Node* %bodyExpr.addr
  %12 = call %Node @"().598"(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %Node %8, %Node %9, %Node %10, %Node %11)
  ret %Node %12
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().598"(%"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %Node %p4, %Node %p5, %Node %p6, %Node %p7) #4 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  %p7.addr = alloca %Node
  store %Node %p7, %Node* %p7.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %Node, %Node* %p3.addr
  %5 = load %Node, %Node* %p4.addr
  %6 = load %Node, %Node* %p5.addr
  %7 = load %Node, %Node* %p6.addr
  %8 = load %Node, %Node* %p7.addr
  %9 = bitcast %"FunctionPtr7[Node, UntypedPtr, @Location, Node, Node, Node, Node, Node]"* %1 to %Node (%UntypedPtr, %Location*, %Node, %Node, %Node, %Node, %Node)**
  %10 = load %Node (%UntypedPtr, %Location*, %Node, %Node, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %Node, %Node, %Node, %Node, %Node)** %9
  %11 = call %Node %10(%UntypedPtr %2, %Location* %3, %Node %4, %Node %5, %Node %6, %Node %7, %Node %8)
  ret %Node %11
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkParenthesisExpr(%AstBuilder* %obj, %Node %expr) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %expr.addr = alloca %Node
  store %Node %expr, %Node* %expr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 14
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Node, %Node* %expr.addr
  %7 = call %Node @"().599"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %2, %UntypedPtr %5, %Node %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().599"(%"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %UntypedPtr %p1, %Node %p2) #4 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, Node]"*
  store %"FunctionPtr2[Node, UntypedPtr, Node]"* %this, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Node
  store %Node %p2, %Node* %p2.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, Node]"*, %"FunctionPtr2[Node, UntypedPtr, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Node, %Node* %p2.addr
  %4 = bitcast %"FunctionPtr2[Node, UntypedPtr, Node]"* %1 to %Node (%UntypedPtr, %Node)**
  %5 = load %Node (%UntypedPtr, %Node)*, %Node (%UntypedPtr, %Node)** %4
  %6 = call %Node %5(%UntypedPtr %2, %Node %3)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkNullLiteral(%AstBuilder* %obj, %Location* %loc) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 24
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = call %Node @"().600"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %2, %UntypedPtr %5, %Location* %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().600"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %this, %UntypedPtr %p1, %Location* %p2) #4 {
  %this.addr = alloca %"FunctionPtr2[Node, UntypedPtr, @Location]"*
  store %"FunctionPtr2[Node, UntypedPtr, @Location]"* %this, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr2[Node, UntypedPtr, @Location]"*, %"FunctionPtr2[Node, UntypedPtr, @Location]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = bitcast %"FunctionPtr2[Node, UntypedPtr, @Location]"* %1 to %Node (%UntypedPtr, %Location*)**
  %5 = load %Node (%UntypedPtr, %Location*)*, %Node (%UntypedPtr, %Location*)** %4
  %6 = call %Node %5(%UntypedPtr %2, %Location* %3)
  ret %Node %6
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkBoolLiteral(%AstBuilder* %obj, %Location* %loc, i1 %val) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %val.addr = alloca i1
  store i1 %val, i1* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 25
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load i1, i1* %val.addr
  %8 = call %Node @"().601"(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %2, %UntypedPtr %5, %Location* %6, i1 %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().601"(%"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this, %UntypedPtr %p1, %Location* %p2, i1 %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca i1
  store i1 %p3, i1* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load i1, i1* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, Bool]"* %1 to %Node (%UntypedPtr, %Location*, i1)**
  %6 = load %Node (%UntypedPtr, %Location*, i1)*, %Node (%UntypedPtr, %Location*, i1)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, i1 %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkIntLiteral(%AstBuilder* %obj, %Location* %loc, i32 %val) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %val.addr = alloca i32
  store i32 %val, i32* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 26
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load i32, i32* %val.addr
  %8 = call %Node @"().602"(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %2, %UntypedPtr %5, %Location* %6, i32 %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().602"(%"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this, %UntypedPtr %p1, %Location* %p2, i32 %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca i32
  store i32 %p3, i32* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load i32, i32* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, Int]"* %1 to %Node (%UntypedPtr, %Location*, i32)**
  %6 = load %Node (%UntypedPtr, %Location*, i32)*, %Node (%UntypedPtr, %Location*, i32)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, i32 %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkUIntLiteral(%AstBuilder* %obj, %Location* %loc, i32 %val) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %val.addr = alloca i32
  store i32 %val, i32* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 27
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load i32, i32* %val.addr
  %8 = call %Node @"().603"(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %2, %UntypedPtr %5, %Location* %6, i32 %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().603"(%"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this, %UntypedPtr %p1, %Location* %p2, i32 %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca i32
  store i32 %p3, i32* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load i32, i32* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, UInt]"* %1 to %Node (%UntypedPtr, %Location*, i32)**
  %6 = load %Node (%UntypedPtr, %Location*, i32)*, %Node (%UntypedPtr, %Location*, i32)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, i32 %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkLongLiteral(%AstBuilder* %obj, %Location* %loc, i64 %val) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %val.addr = alloca i64
  store i64 %val, i64* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 28
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load i64, i64* %val.addr
  %8 = call %Node @"().604"(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %2, %UntypedPtr %5, %Location* %6, i64 %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().604"(%"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this, %UntypedPtr %p1, %Location* %p2, i64 %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca i64
  store i64 %p3, i64* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load i64, i64* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, Long]"* %1 to %Node (%UntypedPtr, %Location*, i64)**
  %6 = load %Node (%UntypedPtr, %Location*, i64)*, %Node (%UntypedPtr, %Location*, i64)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, i64 %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkULongLiteral(%AstBuilder* %obj, %Location* %loc, i64 %val) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %val.addr = alloca i64
  store i64 %val, i64* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 29
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load i64, i64* %val.addr
  %8 = call %Node @"().605"(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %2, %UntypedPtr %5, %Location* %6, i64 %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().605"(%"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this, %UntypedPtr %p1, %Location* %p2, i64 %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca i64
  store i64 %p3, i64* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load i64, i64* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, ULong]"* %1 to %Node (%UntypedPtr, %Location*, i64)**
  %6 = load %Node (%UntypedPtr, %Location*, i64)*, %Node (%UntypedPtr, %Location*, i64)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, i64 %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkFloatLiteral(%AstBuilder* %obj, %Location* %loc, float %val) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %val.addr = alloca float
  store float %val, float* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 30
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load float, float* %val.addr
  %8 = call %Node @"().606"(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %2, %UntypedPtr %5, %Location* %6, float %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().606"(%"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this, %UntypedPtr %p1, %Location* %p2, float %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca float
  store float %p3, float* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load float, float* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, Float]"* %1 to %Node (%UntypedPtr, %Location*, float)**
  %6 = load %Node (%UntypedPtr, %Location*, float)*, %Node (%UntypedPtr, %Location*, float)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, float %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkDoubleLiteral(%AstBuilder* %obj, %Location* %loc, double %val) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %val.addr = alloca double
  store double %val, double* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 31
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load double, double* %val.addr
  %8 = call %Node @"().607"(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %2, %UntypedPtr %5, %Location* %6, double %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().607"(%"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this, %UntypedPtr %p1, %Location* %p2, double %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca double
  store double %p3, double* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load double, double* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, Double]"* %1 to %Node (%UntypedPtr, %Location*, double)**
  %6 = load %Node (%UntypedPtr, %Location*, double)*, %Node (%UntypedPtr, %Location*, double)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, double %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkCharLiteral(%AstBuilder* %obj, %Location* %loc, i8 %val) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %val.addr = alloca i8
  store i8 %val, i8* %val.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 32
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load i8, i8* %val.addr
  %8 = call %Node @"().608"(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %2, %UntypedPtr %5, %Location* %6, i8 %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().608"(%"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this, %UntypedPtr %p1, %Location* %p2, i8 %p3) #4 {
  %this.addr = alloca %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*
  store %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %this, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca i8
  store i8 %p3, i8* %p3.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"*, %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load i8, i8* %p3.addr
  %5 = bitcast %"FunctionPtr3[Node, UntypedPtr, @Location, Char]"* %1 to %Node (%UntypedPtr, %Location*, i8)**
  %6 = load %Node (%UntypedPtr, %Location*, i8)*, %Node (%UntypedPtr, %Location*, i8)** %5
  %7 = call %Node %6(%UntypedPtr %2, %Location* %3, i8 %4)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkStringLiteral(%AstBuilder* %obj, %Location* %loc, %StringRef %data) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %data.addr = alloca %StringRef
  store %StringRef %data, %StringRef* %data.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 33
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %data.addr
  %8 = call %Node @"().553"(%"FunctionPtr3[Node, UntypedPtr, @Location, StringRef]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal i1 @isNull(%Node %n) #4 {
  %n.addr = alloca %Node
  store %Node %n, %Node* %n.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %Node, %Node* %n.addr, i32 0, i32 0
  %2 = getelementptr inbounds %UntypedPtr, %UntypedPtr* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = call i1 @implOpRefEQ(i8* %3, i8* null)
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseExprListOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %Node
  %expr = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpForRef1" = alloca %Node
  %"$tmpForRef2" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  call void @ctor.556(%Node* %expr)
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = call i1 @parseExprOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %Node* %expr, i1 false)
  %3 = xor i1 true, %2
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %Node, %Node* %res
  ret %Node %4

if_end:                                           ; preds = %dumy_block, %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 3
  %7 = load %Node, %Node* %res
  %8 = load %Node, %Node* %expr
  %9 = call %Node @addToNodeList(%AstBuilder* %6, %Node %7, %Node %8)
  store %Node %9, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef")
  br label %while_block

dumy_block:                                       ; No predecessors!
  br label %if_end

while_block:                                      ; preds = %while_step, %if_end
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 33)
  %11 = load %TokenType, %TokenType* %tmp.this
  %12 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, %TokenType %11)
  br i1 %12, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i1 true)
  store %Node %14, %Node* %"$tmpForRef1"
  call void @"=.554"(%Node* %expr, %Node* %"$tmpForRef1")
  %15 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %16 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %15, i32 0, i32 3
  %17 = load %Node, %Node* %res
  %18 = load %Node, %Node* %expr
  %19 = call %Node @addToNodeList(%AstBuilder* %16, %Node %17, %Node %18)
  store %Node %19, %Node* %"$tmpForRef2"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef2")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %20 = load %Node, %Node* %res
  ret %Node %20
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseExprOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %allowSemicolons) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %allowSemicolons.addr = alloca i1
  store i1 %allowSemicolons, i1* %allowSemicolons.addr
  %"$tmpForRef" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = call i1 @nextIsExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i1 true)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = load %Node*, %Node** %res.addr
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i1 true)
  store %Node %5, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %3, %Node* %"$tmpForRef")
  br label %if_block1

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block1:                                        ; preds = %if_then
  %6 = load i1, i1* %allowSemicolons.addr
  br i1 %6, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @consumeSemis(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7)
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal i1 @nextIsExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %t = alloca %TokenType
  %"$tmpC" = alloca %Token
  %tmp.this = alloca %TokenType
  %tmp.this40 = alloca %TokenType
  %tmp.this41 = alloca %TokenType
  %tmp.this42 = alloca %TokenType
  %tmp.this44 = alloca %TokenType
  %tmp.this46 = alloca %TokenType
  %tmp.this48 = alloca %TokenType
  %tmp.this50 = alloca %TokenType
  %tmp.this52 = alloca %TokenType
  %tmp.this54 = alloca %TokenType
  %tmp.this56 = alloca %TokenType
  %tmp.this58 = alloca %TokenType
  %tmp.this60 = alloca %TokenType
  %tmp.this62 = alloca %TokenType
  %tmp.this64 = alloca %TokenType
  %tmp.this66 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  %3 = getelementptr inbounds %Token, %Token* %"$tmpC", i32 0, i32 1
  call void @ctor.203(%TokenType* %t, %TokenType* %3)
  call void @dtor.260(%Token* %"$tmpC")
  br label %if_block

if_block:                                         ; preds = %code
  call void @ctor.417(%TokenType* %tmp.this, i32 36)
  %4 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = load i1, i1* %withEqual.addr
  ret i1 %5

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.417(%TokenType* %tmp.this40, i32 37)
  %6 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this40)
  br i1 %6, label %cond.true37, label %cond.false38

dumy_block:                                       ; No predecessors!
  br label %if_end

cond.true:                                        ; preds = %cond.end3
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  call void @ctor.417(%TokenType* %tmp.this66, i32 46)
  %7 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this66)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res67 = phi i1 [ true, %cond.true ], [ %7, %cond.false ]
  br i1 %cond.res65, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true1:                                       ; preds = %cond.end6
  br label %cond.end3

cond.false2:                                      ; preds = %cond.end6
  call void @ctor.417(%TokenType* %tmp.this64, i32 45)
  %8 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this64)
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res65 = phi i1 [ true, %cond.true1 ], [ %8, %cond.false2 ]
  br i1 %cond.res65, label %cond.true, label %cond.false

cond.true4:                                       ; preds = %cond.end9
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end9
  call void @ctor.417(%TokenType* %tmp.this62, i32 44)
  %9 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this62)
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond.res63 = phi i1 [ true, %cond.true4 ], [ %9, %cond.false5 ]
  br i1 %cond.res63, label %cond.true1, label %cond.false2

cond.true7:                                       ; preds = %cond.end12
  br label %cond.end9

cond.false8:                                      ; preds = %cond.end12
  call void @ctor.417(%TokenType* %tmp.this60, i32 43)
  %10 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this60)
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond.res61 = phi i1 [ true, %cond.true7 ], [ %10, %cond.false8 ]
  br i1 %cond.res61, label %cond.true4, label %cond.false5

cond.true10:                                      ; preds = %cond.end15
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end15
  call void @ctor.417(%TokenType* %tmp.this58, i32 42)
  %11 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this58)
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond.res59 = phi i1 [ true, %cond.true10 ], [ %11, %cond.false11 ]
  br i1 %cond.res59, label %cond.true7, label %cond.false8

cond.true13:                                      ; preds = %cond.end18
  br label %cond.end15

cond.false14:                                     ; preds = %cond.end18
  call void @ctor.417(%TokenType* %tmp.this56, i32 41)
  %12 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this56)
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond.res57 = phi i1 [ true, %cond.true13 ], [ %12, %cond.false14 ]
  br i1 %cond.res57, label %cond.true10, label %cond.false11

cond.true16:                                      ; preds = %cond.end21
  br label %cond.end18

cond.false17:                                     ; preds = %cond.end21
  call void @ctor.417(%TokenType* %tmp.this54, i32 40)
  %13 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this54)
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond.res55 = phi i1 [ true, %cond.true16 ], [ %13, %cond.false17 ]
  br i1 %cond.res55, label %cond.true13, label %cond.false14

cond.true19:                                      ; preds = %cond.end24
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end24
  call void @ctor.417(%TokenType* %tmp.this52, i32 39)
  %14 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this52)
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond.res53 = phi i1 [ true, %cond.true19 ], [ %14, %cond.false20 ]
  br i1 %cond.res53, label %cond.true16, label %cond.false17

cond.true22:                                      ; preds = %cond.end27
  br label %cond.end24

cond.false23:                                     ; preds = %cond.end27
  call void @ctor.417(%TokenType* %tmp.this50, i32 21)
  %15 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this50)
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond.res51 = phi i1 [ true, %cond.true22 ], [ %15, %cond.false23 ]
  br i1 %cond.res51, label %cond.true19, label %cond.false20

cond.true25:                                      ; preds = %cond.end30
  br label %cond.end27

cond.false26:                                     ; preds = %cond.end30
  call void @ctor.417(%TokenType* %tmp.this48, i32 23)
  %16 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this48)
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond.res49 = phi i1 [ true, %cond.true25 ], [ %16, %cond.false26 ]
  br i1 %cond.res49, label %cond.true22, label %cond.false23

cond.true28:                                      ; preds = %cond.end33
  br label %cond.end30

cond.false29:                                     ; preds = %cond.end33
  call void @ctor.417(%TokenType* %tmp.this46, i32 22)
  %17 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this46)
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond.res47 = phi i1 [ true, %cond.true28 ], [ %17, %cond.false29 ]
  br i1 %cond.res47, label %cond.true25, label %cond.false26

cond.true31:                                      ; preds = %cond.end36
  br label %cond.end33

cond.false32:                                     ; preds = %cond.end36
  call void @ctor.417(%TokenType* %tmp.this44, i32 29)
  %18 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this44)
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond.res45 = phi i1 [ true, %cond.true31 ], [ %18, %cond.false32 ]
  br i1 %cond.res45, label %cond.true28, label %cond.false29

cond.true34:                                      ; preds = %cond.end39
  br label %cond.end36

cond.false35:                                     ; preds = %cond.end39
  call void @ctor.417(%TokenType* %tmp.this42, i32 35)
  %19 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this42)
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond.res43 = phi i1 [ true, %cond.true34 ], [ %19, %cond.false35 ]
  br i1 %cond.res43, label %cond.true31, label %cond.false32

cond.true37:                                      ; preds = %if_end
  br label %cond.end39

cond.false38:                                     ; preds = %if_end
  call void @ctor.417(%TokenType* %tmp.this41, i32 38)
  %20 = call i1 @"==.352"(%TokenType* %t, %TokenType* %tmp.this41)
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond.res = phi i1 [ true, %cond.true37 ], [ %20, %cond.false38 ]
  br i1 %cond.res, label %cond.true34, label %cond.false35

cond_destruct_alt1:                               ; preds = %cond.end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %cond.end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  br i1 %cond.res63, label %cond_destruct_alt168, label %cond_destruct_alt269

cond_destruct_alt168:                             ; preds = %cond_destruct_end
  br label %cond_destruct_end70

cond_destruct_alt269:                             ; preds = %cond_destruct_end
  br label %cond_destruct_end70

cond_destruct_end70:                              ; preds = %cond_destruct_alt269, %cond_destruct_alt168
  br i1 %cond.res61, label %cond_destruct_alt171, label %cond_destruct_alt272

cond_destruct_alt171:                             ; preds = %cond_destruct_end70
  br label %cond_destruct_end73

cond_destruct_alt272:                             ; preds = %cond_destruct_end70
  br label %cond_destruct_end73

cond_destruct_end73:                              ; preds = %cond_destruct_alt272, %cond_destruct_alt171
  br i1 %cond.res59, label %cond_destruct_alt174, label %cond_destruct_alt275

cond_destruct_alt174:                             ; preds = %cond_destruct_end73
  br label %cond_destruct_end76

cond_destruct_alt275:                             ; preds = %cond_destruct_end73
  br label %cond_destruct_end76

cond_destruct_end76:                              ; preds = %cond_destruct_alt275, %cond_destruct_alt174
  br i1 %cond.res57, label %cond_destruct_alt177, label %cond_destruct_alt278

cond_destruct_alt177:                             ; preds = %cond_destruct_end76
  br label %cond_destruct_end79

cond_destruct_alt278:                             ; preds = %cond_destruct_end76
  br label %cond_destruct_end79

cond_destruct_end79:                              ; preds = %cond_destruct_alt278, %cond_destruct_alt177
  br i1 %cond.res55, label %cond_destruct_alt180, label %cond_destruct_alt281

cond_destruct_alt180:                             ; preds = %cond_destruct_end79
  br label %cond_destruct_end82

cond_destruct_alt281:                             ; preds = %cond_destruct_end79
  br label %cond_destruct_end82

cond_destruct_end82:                              ; preds = %cond_destruct_alt281, %cond_destruct_alt180
  br i1 %cond.res53, label %cond_destruct_alt183, label %cond_destruct_alt284

cond_destruct_alt183:                             ; preds = %cond_destruct_end82
  br label %cond_destruct_end85

cond_destruct_alt284:                             ; preds = %cond_destruct_end82
  br label %cond_destruct_end85

cond_destruct_end85:                              ; preds = %cond_destruct_alt284, %cond_destruct_alt183
  br i1 %cond.res51, label %cond_destruct_alt186, label %cond_destruct_alt287

cond_destruct_alt186:                             ; preds = %cond_destruct_end85
  br label %cond_destruct_end88

cond_destruct_alt287:                             ; preds = %cond_destruct_end85
  br label %cond_destruct_end88

cond_destruct_end88:                              ; preds = %cond_destruct_alt287, %cond_destruct_alt186
  br i1 %cond.res49, label %cond_destruct_alt189, label %cond_destruct_alt290

cond_destruct_alt189:                             ; preds = %cond_destruct_end88
  br label %cond_destruct_end91

cond_destruct_alt290:                             ; preds = %cond_destruct_end88
  br label %cond_destruct_end91

cond_destruct_end91:                              ; preds = %cond_destruct_alt290, %cond_destruct_alt189
  br i1 %cond.res47, label %cond_destruct_alt192, label %cond_destruct_alt293

cond_destruct_alt192:                             ; preds = %cond_destruct_end91
  br label %cond_destruct_end94

cond_destruct_alt293:                             ; preds = %cond_destruct_end91
  br label %cond_destruct_end94

cond_destruct_end94:                              ; preds = %cond_destruct_alt293, %cond_destruct_alt192
  br i1 %cond.res45, label %cond_destruct_alt195, label %cond_destruct_alt296

cond_destruct_alt195:                             ; preds = %cond_destruct_end94
  br label %cond_destruct_end97

cond_destruct_alt296:                             ; preds = %cond_destruct_end94
  br label %cond_destruct_end97

cond_destruct_end97:                              ; preds = %cond_destruct_alt296, %cond_destruct_alt195
  br i1 %cond.res43, label %cond_destruct_alt198, label %cond_destruct_alt299

cond_destruct_alt198:                             ; preds = %cond_destruct_end97
  br label %cond_destruct_end100

cond_destruct_alt299:                             ; preds = %cond_destruct_end97
  br label %cond_destruct_end100

cond_destruct_end100:                             ; preds = %cond_destruct_alt299, %cond_destruct_alt198
  br i1 %cond.res, label %cond_destruct_alt1101, label %cond_destruct_alt2102

cond_destruct_alt1101:                            ; preds = %cond_destruct_end100
  br label %cond_destruct_end103

cond_destruct_alt2102:                            ; preds = %cond_destruct_end100
  br label %cond_destruct_end103

cond_destruct_end103:                             ; preds = %cond_destruct_alt2102, %cond_destruct_alt1101
  br i1 %6, label %cond_destruct_alt1104, label %cond_destruct_alt2105

cond_destruct_alt1104:                            ; preds = %cond_destruct_end103
  br label %cond_destruct_end106

cond_destruct_alt2105:                            ; preds = %cond_destruct_end103
  br label %cond_destruct_end106

cond_destruct_end106:                             ; preds = %cond_destruct_alt2105, %cond_destruct_alt1104
  ret i1 %cond.res67

cond_destruct_alt1107:                            ; preds = %dumy_block110
  br label %cond_destruct_end109

cond_destruct_alt2108:                            ; preds = %dumy_block110
  br label %cond_destruct_end109

cond_destruct_end109:                             ; preds = %cond_destruct_alt2108, %cond_destruct_alt1107
  br i1 %cond.res63, label %cond_destruct_alt1111, label %cond_destruct_alt2112

dumy_block110:                                    ; No predecessors!
  br i1 %cond.res65, label %cond_destruct_alt1107, label %cond_destruct_alt2108

cond_destruct_alt1111:                            ; preds = %cond_destruct_end109
  br label %cond_destruct_end113

cond_destruct_alt2112:                            ; preds = %cond_destruct_end109
  br label %cond_destruct_end113

cond_destruct_end113:                             ; preds = %cond_destruct_alt2112, %cond_destruct_alt1111
  br i1 %cond.res61, label %cond_destruct_alt1114, label %cond_destruct_alt2115

cond_destruct_alt1114:                            ; preds = %cond_destruct_end113
  br label %cond_destruct_end116

cond_destruct_alt2115:                            ; preds = %cond_destruct_end113
  br label %cond_destruct_end116

cond_destruct_end116:                             ; preds = %cond_destruct_alt2115, %cond_destruct_alt1114
  br i1 %cond.res59, label %cond_destruct_alt1117, label %cond_destruct_alt2118

cond_destruct_alt1117:                            ; preds = %cond_destruct_end116
  br label %cond_destruct_end119

cond_destruct_alt2118:                            ; preds = %cond_destruct_end116
  br label %cond_destruct_end119

cond_destruct_end119:                             ; preds = %cond_destruct_alt2118, %cond_destruct_alt1117
  br i1 %cond.res57, label %cond_destruct_alt1120, label %cond_destruct_alt2121

cond_destruct_alt1120:                            ; preds = %cond_destruct_end119
  br label %cond_destruct_end122

cond_destruct_alt2121:                            ; preds = %cond_destruct_end119
  br label %cond_destruct_end122

cond_destruct_end122:                             ; preds = %cond_destruct_alt2121, %cond_destruct_alt1120
  br i1 %cond.res55, label %cond_destruct_alt1123, label %cond_destruct_alt2124

cond_destruct_alt1123:                            ; preds = %cond_destruct_end122
  br label %cond_destruct_end125

cond_destruct_alt2124:                            ; preds = %cond_destruct_end122
  br label %cond_destruct_end125

cond_destruct_end125:                             ; preds = %cond_destruct_alt2124, %cond_destruct_alt1123
  br i1 %cond.res53, label %cond_destruct_alt1126, label %cond_destruct_alt2127

cond_destruct_alt1126:                            ; preds = %cond_destruct_end125
  br label %cond_destruct_end128

cond_destruct_alt2127:                            ; preds = %cond_destruct_end125
  br label %cond_destruct_end128

cond_destruct_end128:                             ; preds = %cond_destruct_alt2127, %cond_destruct_alt1126
  br i1 %cond.res51, label %cond_destruct_alt1129, label %cond_destruct_alt2130

cond_destruct_alt1129:                            ; preds = %cond_destruct_end128
  br label %cond_destruct_end131

cond_destruct_alt2130:                            ; preds = %cond_destruct_end128
  br label %cond_destruct_end131

cond_destruct_end131:                             ; preds = %cond_destruct_alt2130, %cond_destruct_alt1129
  br i1 %cond.res49, label %cond_destruct_alt1132, label %cond_destruct_alt2133

cond_destruct_alt1132:                            ; preds = %cond_destruct_end131
  br label %cond_destruct_end134

cond_destruct_alt2133:                            ; preds = %cond_destruct_end131
  br label %cond_destruct_end134

cond_destruct_end134:                             ; preds = %cond_destruct_alt2133, %cond_destruct_alt1132
  br i1 %cond.res47, label %cond_destruct_alt1135, label %cond_destruct_alt2136

cond_destruct_alt1135:                            ; preds = %cond_destruct_end134
  br label %cond_destruct_end137

cond_destruct_alt2136:                            ; preds = %cond_destruct_end134
  br label %cond_destruct_end137

cond_destruct_end137:                             ; preds = %cond_destruct_alt2136, %cond_destruct_alt1135
  br i1 %cond.res45, label %cond_destruct_alt1138, label %cond_destruct_alt2139

cond_destruct_alt1138:                            ; preds = %cond_destruct_end137
  br label %cond_destruct_end140

cond_destruct_alt2139:                            ; preds = %cond_destruct_end137
  br label %cond_destruct_end140

cond_destruct_end140:                             ; preds = %cond_destruct_alt2139, %cond_destruct_alt1138
  br i1 %cond.res43, label %cond_destruct_alt1141, label %cond_destruct_alt2142

cond_destruct_alt1141:                            ; preds = %cond_destruct_end140
  br label %cond_destruct_end143

cond_destruct_alt2142:                            ; preds = %cond_destruct_end140
  br label %cond_destruct_end143

cond_destruct_end143:                             ; preds = %cond_destruct_alt2142, %cond_destruct_alt1141
  br i1 %cond.res, label %cond_destruct_alt1144, label %cond_destruct_alt2145

cond_destruct_alt1144:                            ; preds = %cond_destruct_end143
  br label %cond_destruct_end146

cond_destruct_alt2145:                            ; preds = %cond_destruct_end143
  br label %cond_destruct_end146

cond_destruct_end146:                             ; preds = %cond_destruct_alt2145, %cond_destruct_alt1144
  br i1 %6, label %cond_destruct_alt1147, label %cond_destruct_alt2148

cond_destruct_alt1147:                            ; preds = %cond_destruct_end146
  br label %cond_destruct_end149

cond_destruct_alt2148:                            ; preds = %cond_destruct_end146
  br label %cond_destruct_end149

cond_destruct_end149:                             ; preds = %cond_destruct_alt2148, %cond_destruct_alt1147
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkFunAppExpr(%AstBuilder* %obj, %Location* %loc, %Node %base, %Node %args) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %args.addr = alloca %Node
  store %Node %args, %Node* %args.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 22
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %base.addr
  %8 = load %Node, %Node* %args.addr
  %9 = call %Node @"().609"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %Node %8)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().609"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %Node %p4) #4 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %Node, %Node* %p3.addr
  %5 = load %Node, %Node* %p4.addr
  %6 = bitcast %"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %1 to %Node (%UntypedPtr, %Location*, %Node, %Node)**
  %7 = load %Node (%UntypedPtr, %Location*, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %Node, %Node)** %6
  %8 = call %Node %7(%UntypedPtr %2, %Location* %3, %Node %4, %Node %5)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkDotExpr(%AstBuilder* %obj, %Location* %loc, %Node %base, %StringRef %id) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 21
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %base.addr
  %8 = load %StringRef, %StringRef* %id.addr
  %9 = call %Node @"().555"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %StringRef %8)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal void @parseIdOrOper(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %tmp.this = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %tmp.this10 = alloca %TokenType
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %"$tmpC" = alloca %String
  %tmp.StringRef15 = alloca %StringRef
  %"$tmpC16" = alloca %Token
  %tmp.StringRef17 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 37)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %4 = load %String*, %String** %_result.addr
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 2
  call void @ctor.189(%String* %4, %String* %7)
  ret void

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %if_end4, %dumy_block
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %9 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef15, i32 0, i32 0
  %10 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef15, i32 0, i32 1
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.102, i32 0, i32 0), i8** %9
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.102, i32 0, i32 25), i8** %10
  %11 = load %StringRef, %StringRef* %tmp.StringRef15
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC16", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %13)
  %14 = getelementptr inbounds %Token, %Token* %"$tmpC16", i32 0, i32 1
  %15 = load %TokenType, %TokenType* %14
  %16 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef17, i32 0, i32 0
  %17 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef17, i32 0, i32 1
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str.103, i32 0, i32 0), i8** %16
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str.103, i32 0, i32 34), i8** %17
  %18 = load %StringRef, %StringRef* %tmp.StringRef17
  call void @toString.597(%String* %"$tmpC", %StringRef %11, %TokenType %15, %StringRef %18)
  call void @reportError.548(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC16")
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_else
  %19 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 38)
  %20 = load %TokenType, %TokenType* %tmp.this5
  %21 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %19, %TokenType %20)
  br i1 %21, label %if_then2, label %if_else3

if_then2:                                         ; preds = %if_block1
  %22 = load %String*, %String** %_result.addr
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 1
  %25 = getelementptr inbounds %Token, %Token* %24, i32 0, i32 2
  call void @ctor.189(%String* %22, %String* %25)
  ret void

if_else3:                                         ; preds = %if_block1
  br label %if_block7

if_end4:                                          ; preds = %cond_destruct_end14, %dumy_block6
  br label %if_end

dumy_block6:                                      ; No predecessors!
  br label %if_end4

if_block7:                                        ; preds = %if_else3
  %26 = load i1, i1* %withEqual.addr
  br i1 %26, label %cond.true, label %cond.false

if_then8:                                         ; preds = %cond.end
  %27 = load %String*, %String** %_result.addr
  %28 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %29 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.101, i32 0, i32 0), i8** %28
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.101, i32 0, i32 1), i8** %29
  %30 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %30, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %27, %StringRef* %"$tmpForRef")
  br i1 %26, label %cond_destruct_alt1, label %cond_destruct_alt2

if_end9:                                          ; preds = %dumy_block11, %cond.end
  br i1 %26, label %cond_destruct_alt112, label %cond_destruct_alt213

cond.true:                                        ; preds = %if_block7
  %31 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this10, i32 36)
  %32 = load %TokenType, %TokenType* %tmp.this10
  %33 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %31, %TokenType %32)
  br label %cond.end

cond.false:                                       ; preds = %if_block7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %33, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then8, label %if_end9

cond_destruct_alt1:                               ; preds = %if_then8
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_then8
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void

dumy_block11:                                     ; No predecessors!
  br label %if_end9

cond_destruct_alt112:                             ; preds = %if_end9
  br label %cond_destruct_end14

cond_destruct_alt213:                             ; preds = %if_end9
  br label %cond_destruct_end14

cond_destruct_end14:                              ; preds = %cond_destruct_alt213, %cond_destruct_alt112
  br label %if_end4
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkPrefixOp(%AstBuilder* %obj, %Location* %loc, %StringRef %op, %Node %base) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %op.addr = alloca %StringRef
  store %StringRef %op, %StringRef* %op.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 17
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %op.addr
  %8 = load %Node, %Node* %base.addr
  %9 = call %Node @"().610"(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().610"(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4) #4 {
  %this.addr = alloca %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*
  store %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %this, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"*, %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %StringRef, %StringRef* %p3.addr
  %5 = load %Node, %Node* %p4.addr
  %6 = bitcast %"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %1 to %Node (%UntypedPtr, %Location*, %StringRef, %Node)**
  %7 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node)** %6
  %8 = call %Node %7(%UntypedPtr %2, %Location* %3, %StringRef %4, %Node %5)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal void @parseIdOrOperOpt(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, i1 %withEqual) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %withEqual.addr = alloca i1
  store i1 %withEqual, i1* %withEqual.addr
  %tmp.this = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %tmp.this11 = alloca %TokenType
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 37)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  %4 = load %String*, %String** %_result.addr
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 2
  call void @ctor.189(%String* %4, %String* %7)
  ret void

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %if_end4, %dumy_block
  ret void

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_else
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 38)
  %9 = load %TokenType, %TokenType* %tmp.this5
  %10 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, %TokenType %9)
  br i1 %10, label %if_then2, label %if_else3

if_then2:                                         ; preds = %if_block1
  %11 = load %String*, %String** %_result.addr
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i32 0, i32 1
  %14 = getelementptr inbounds %Token, %Token* %13, i32 0, i32 2
  call void @ctor.189(%String* %11, %String* %14)
  ret void

if_else3:                                         ; preds = %if_block1
  br label %if_block7

if_end4:                                          ; preds = %cond_destruct_end19, %dumy_block6
  br label %if_end

dumy_block6:                                      ; No predecessors!
  br label %if_end4

if_block7:                                        ; preds = %if_else3
  %15 = load i1, i1* %withEqual.addr
  br i1 %15, label %cond.true, label %cond.false

if_then8:                                         ; preds = %cond.end
  %16 = load %String*, %String** %_result.addr
  %17 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %18 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.104, i32 0, i32 0), i8** %17
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.104, i32 0, i32 1), i8** %18
  %19 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %19, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %16, %StringRef* %"$tmpForRef")
  br i1 %15, label %cond_destruct_alt1, label %cond_destruct_alt2

if_else9:                                         ; preds = %cond.end
  %20 = load %String*, %String** %_result.addr
  call void @ctor.137(%String* %20)
  br i1 %15, label %cond_destruct_alt113, label %cond_destruct_alt214

if_end10:                                         ; preds = %dumy_block16, %dumy_block12
  br i1 %15, label %cond_destruct_alt117, label %cond_destruct_alt218

cond.true:                                        ; preds = %if_block7
  %21 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this11, i32 36)
  %22 = load %TokenType, %TokenType* %tmp.this11
  %23 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %21, %TokenType %22)
  br label %cond.end

cond.false:                                       ; preds = %if_block7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %23, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then8, label %if_else9

cond_destruct_alt1:                               ; preds = %if_then8
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_then8
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  ret void

dumy_block12:                                     ; No predecessors!
  br label %if_end10

cond_destruct_alt113:                             ; preds = %if_else9
  br label %cond_destruct_end15

cond_destruct_alt214:                             ; preds = %if_else9
  br label %cond_destruct_end15

cond_destruct_end15:                              ; preds = %cond_destruct_alt214, %cond_destruct_alt113
  ret void

dumy_block16:                                     ; No predecessors!
  br label %if_end10

cond_destruct_alt117:                             ; preds = %if_end10
  br label %cond_destruct_end19

cond_destruct_alt218:                             ; preds = %if_end10
  br label %cond_destruct_end19

cond_destruct_end19:                              ; preds = %cond_destruct_alt218, %cond_destruct_alt117
  br label %if_end4
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkInfixOp(%AstBuilder* %obj, %Location* %loc, %Node %lhs, %StringRef %op, %Node %rhs) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %lhs.addr = alloca %Node
  store %Node %lhs, %Node* %lhs.addr
  %op.addr = alloca %StringRef
  store %StringRef %op, %StringRef* %op.addr
  %rhs.addr = alloca %Node
  store %Node %rhs, %Node* %rhs.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 16
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %lhs.addr
  %8 = load %StringRef, %StringRef* %op.addr
  %9 = load %Node, %Node* %rhs.addr
  %10 = call %Node @"().611"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %StringRef %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().611"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %StringRef %p4, %Node %p5) #4 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %StringRef
  store %StringRef %p4, %StringRef* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %Node, %Node* %p3.addr
  %5 = load %StringRef, %StringRef* %p4.addr
  %6 = load %Node, %Node* %p5.addr
  %7 = bitcast %"FunctionPtr5[Node, UntypedPtr, @Location, Node, StringRef, Node]"* %1 to %Node (%UntypedPtr, %Location*, %Node, %StringRef, %Node)**
  %8 = load %Node (%UntypedPtr, %Location*, %Node, %StringRef, %Node)*, %Node (%UntypedPtr, %Location*, %Node, %StringRef, %Node)** %7
  %9 = call %Node %8(%UntypedPtr %2, %Location* %3, %Node %4, %StringRef %5, %Node %6)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkPostfixOp(%AstBuilder* %obj, %Location* %loc, %Node %base, %StringRef %op) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %base.addr = alloca %Node
  store %Node %base, %Node* %base.addr
  %op.addr = alloca %StringRef
  store %StringRef %op, %StringRef* %op.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 15
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %base.addr
  %8 = load %StringRef, %StringRef* %op.addr
  %9 = call %Node @"().555"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, StringRef]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %StringRef %8)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseImportLineOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %tmp.this = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this1 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 3)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %Node*, %Node** %res.addr
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = call %Node @parseImportNames(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5)
  store %Node %6, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %4, %Node* %"$tmpForRef")
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 32)
  %8 = load %TokenType, %TokenType* %tmp.this1
  %9 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseImportNames(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpForRef1" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i32 0, i32 3
  %3 = load %Node, %Node* %res
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = call %Node @parseImportName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4)
  %6 = call %Node @addToNodeList(%AstBuilder* %2, %Node %3, %Node %5)
  store %Node %6, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 33)
  %8 = load %TokenType, %TokenType* %tmp.this
  %9 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  br i1 %9, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i32 0, i32 3
  %12 = load %Node, %Node* %res
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = call %Node @parseImportName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13)
  %15 = call %Node @addToNodeList(%AstBuilder* %11, %Node %12, %Node %14)
  store %Node %15, %Node* %"$tmpForRef1"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef1")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %16 = load %Node, %Node* %res
  ret %Node %16
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseImportName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %loc = alloca %Location
  %id = alloca %String
  %toImport = alloca %Node
  %"$tmpForRef" = alloca %Node
  %declNames = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %"$tmpC" = alloca %Location
  %"$tmpC2" = alloca %Location
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseIdEqualOpt(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %4 = call %Node @parseQidOrString(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3)
  store %Node %4, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %toImport, %Node* %"$tmpForRef")
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = call %Node @parseImportDeclNamesOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5)
  store %Node %6, %Node* %"$tmpForRef1"
  call void @ctor.545(%Node* %declNames, %Node* %"$tmpForRef1")
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 3
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @lastLoc(%Location* %"$tmpC2", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  call void @span(%Location* %"$tmpC", %Location* %loc, %Location* %"$tmpC2")
  %10 = call %StringRef @asStringRef(%String* %id)
  %11 = load %Node, %Node* %toImport
  %12 = load %Node, %Node* %declNames
  %13 = call %Node @mkImportName(%AstBuilder* %8, %Location* %"$tmpC", %StringRef %10, %Node %11, %Node %12)
  call void @dtor.261(%String* %id)
  ret %Node %13

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @parseIdEqualOpt(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %id = alloca %String
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  %tmp.this2 = alloca %TokenType
  %tmp.this3 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  call void @ctor.137(%String* %id)
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 37)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %cond.true, label %cond.false

if_then:                                          ; preds = %cond.end
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this2, i32 37)
  %5 = load %TokenType, %TokenType* %tmp.this2
  %6 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, %TokenType %5)
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  %9 = getelementptr inbounds %Token, %Token* %8, i32 0, i32 2
  %10 = call %String* @"=.290"(%String* %id, %String* %9)
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this3, i32 36)
  %12 = load %TokenType, %TokenType* %tmp.this3
  %13 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, %TokenType %12)
  br label %if_end

if_end:                                           ; preds = %if_then, %cond.end
  br i1 %3, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true:                                        ; preds = %if_block
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 36)
  %15 = load %TokenType, %TokenType* %tmp.this1
  %16 = call i1 @next2Is(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, %TokenType %15)
  br label %cond.end

cond.false:                                       ; preds = %if_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %16, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then, label %if_end

cond_destruct_alt1:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %if_end
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  %17 = load %String*, %String** %_result.addr
  call void @ctor.189(%String* %17, %String* %id)
  call void @dtor.261(%String* %id)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %id)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseQidOrString(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tmp.this = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 40)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i32 0, i32 3
  %6 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %7 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6, i32 0, i32 1
  %8 = getelementptr inbounds %Token, %Token* %7, i32 0, i32 0
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %10 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9, i32 0, i32 1
  %11 = getelementptr inbounds %Token, %Token* %10, i32 0, i32 2
  %12 = call %StringRef @asStringRef(%String* %11)
  %13 = call %Node @mkStringLiteral(%AstBuilder* %5, %Location* %8, %StringRef %12)
  ret %Node %13

if_end:                                           ; preds = %dumy_block, %if_block
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %15 = call %Node @parseQualifiedName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, i1 false)
  ret %Node %15

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseImportDeclNamesOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this1 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 29)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = call %Node @parseIdOrOperListNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4)
  store %Node %5, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef")
  %6 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 30)
  %7 = load %TokenType, %TokenType* %tmp.this1
  %8 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6, %TokenType %7)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %9 = load %Node, %Node* %res
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseIdOrOperListNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %Node
  %id = alloca %String
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %"$tmpC" = alloca %String
  %"$tmpForRef1" = alloca %Node
  br label %code

code:                                             ; preds = %0
  call void @ctor.556(%Node* %res)
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseIdOrOper(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i1 true)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %3 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, i32 0, i32 3
  %4 = load %Node, %Node* %res
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 3
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i32 0, i32 1
  %9 = getelementptr inbounds %Token, %Token* %8, i32 0, i32 0
  %10 = call %StringRef @asStringRef(%String* %id)
  %11 = call %Node @mkIdentifier(%AstBuilder* %6, %Location* %9, %StringRef %10)
  %12 = call %Node @addToNodeList(%AstBuilder* %3, %Node %4, %Node %11)
  store %Node %12, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef")
  br label %while_block

while_block:                                      ; preds = %while_step, %code
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 33)
  %14 = load %TokenType, %TokenType* %tmp.this
  %15 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, %TokenType %14)
  br i1 %15, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseIdOrOper(%String* %"$tmpC", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i1 true)
  %17 = call %String* @"=.290"(%String* %id, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %19 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18, i32 0, i32 3
  %20 = load %Node, %Node* %res
  %21 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %22 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %21, i32 0, i32 3
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 1
  %25 = getelementptr inbounds %Token, %Token* %24, i32 0, i32 0
  %26 = call %StringRef @asStringRef(%String* %id)
  %27 = call %Node @mkIdentifier(%AstBuilder* %22, %Location* %25, %StringRef %26)
  %28 = call %Node @addToNodeList(%AstBuilder* %19, %Node %20, %Node %27)
  store %Node %28, %Node* %"$tmpForRef1"
  call void @"=.554"(%Node* %res, %Node* %"$tmpForRef1")
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  %29 = load %Node, %Node* %res
  call void @dtor.261(%String* %id)
  ret %Node %29

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkImportName(%AstBuilder* %obj, %Location* %loc, %StringRef %alias, %Node %toImport, %Node %decls) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %alias.addr = alloca %StringRef
  store %StringRef %alias, %StringRef* %alias.addr
  %toImport.addr = alloca %Node
  store %Node %toImport, %Node* %toImport.addr
  %decls.addr = alloca %Node
  store %Node %decls, %Node* %decls.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 4
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %alias.addr
  %8 = load %Node, %Node* %toImport.addr
  %9 = load %Node, %Node* %decls.addr
  %10 = call %Node @"().593"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseUsingDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %usingNode = alloca %Node
  %"$tmpForRef" = alloca %Node
  %"$tmpForRef4" = alloca %Node
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef6" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 9)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  %4 = xor i1 true, %3
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 0
  call void @ctor.182(%Location* %loc, %Location* %7)
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseIdEqualOpt(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8)
  call void @ctor.556(%Node* %usingNode)
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %9 = call i1 @isEmpty.397(%String* %id)
  br i1 %9, label %if_then2, label %if_else

if_then2:                                         ; preds = %if_block1
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = call %Node @parseQualifiedName(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i1 true)
  store %Node %11, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %usingNode, %Node* %"$tmpForRef")
  br label %if_end3

if_else:                                          ; preds = %if_block1
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %13 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, i1 true)
  store %Node %13, %Node* %"$tmpForRef4"
  call void @"=.554"(%Node* %usingNode, %Node* %"$tmpForRef4")
  br label %if_end3

if_end3:                                          ; preds = %if_else, %if_then2
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %15 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, i32 0, i32 1
  %16 = getelementptr inbounds %Token, %Token* %15, i32 0, i32 0
  call void @copyEnd(%Location* %loc, %Location* %16)
  %17 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 32)
  %18 = load %TokenType, %TokenType* %tmp.this5
  %19 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %17, %TokenType %18)
  %20 = load %Node*, %Node** %res.addr
  %21 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %22 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %21, i32 0, i32 3
  %23 = call %StringRef @asStringRef(%String* %id)
  %24 = load %Node, %Node* %usingNode
  %25 = call %Node @mkUsing(%AstBuilder* %22, %Location* %loc, %StringRef %23, %Node %24)
  store %Node %25, %Node* %"$tmpForRef6"
  call void @"=.554"(%Node* %20, %Node* %"$tmpForRef6")
  call void @dtor.261(%String* %id)
  ret i1 true

dumy_block7:                                      ; No predecessors!
  call void @dtor.261(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkUsing(%AstBuilder* %obj, %Location* %loc, %StringRef %alias, %Node %usingNode) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %alias.addr = alloca %StringRef
  store %StringRef %alias, %StringRef* %alias.addr
  %usingNode.addr = alloca %Node
  store %Node %usingNode, %Node* %usingNode.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 5
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %alias.addr
  %8 = load %Node, %Node* %usingNode.addr
  %9 = call %Node @"().610"(%"FunctionPtr4[Node, UntypedPtr, @Location, StringRef, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal i1 @parsePackageDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %formals = alloca %Node
  %"$tmpForRef" = alloca %Node
  %ifClause = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %tmp.this2 = alloca %TokenType
  %children = alloca %Node
  %tmp.this3 = alloca %TokenType
  %"$tmpForRef4" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 8)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  %4 = xor i1 true, %3
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 0
  call void @ctor.182(%Location* %loc, %Location* %7)
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8)
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %10 = call %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  store %Node %10, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %formals, %Node* %"$tmpForRef")
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11)
  store %Node %12, %Node* %"$tmpForRef1"
  call void @ctor.545(%Node* %ifClause, %Node* %"$tmpForRef1")
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this2, i32 25)
  %14 = load %TokenType, %TokenType* %tmp.this2
  %15 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, %TokenType %14)
  call void @ctor.556(%Node* %children)
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseStmts(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i1 true, %Node* %children)
  %17 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this3, i32 26)
  %18 = load %TokenType, %TokenType* %tmp.this3
  %19 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %17, %TokenType %18)
  %20 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %21 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %20, i32 0, i32 1
  %22 = getelementptr inbounds %Token, %Token* %21, i32 0, i32 0
  call void @copyEnd(%Location* %loc, %Location* %22)
  %23 = load %Node*, %Node** %res.addr
  %24 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %25 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %24, i32 0, i32 3
  %26 = call %StringRef @asStringRef(%String* %id)
  %27 = load %Node, %Node* %children
  %28 = load %Node, %Node* %formals
  %29 = load %Node, %Node* %ifClause
  %30 = call %Node @mkPackage(%AstBuilder* %25, %Location* %loc, %StringRef %26, %Node %27, %Node %28, %Node %29)
  store %Node %30, %Node* %"$tmpForRef4"
  call void @"=.554"(%Node* %23, %Node* %"$tmpForRef4")
  call void @dtor.261(%String* %id)
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block5:                                      ; No predecessors!
  call void @dtor.261(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 16)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i1 true)
  ret %Node %5

if_end:                                           ; preds = %dumy_block, %if_block
  call void @ctor.556(%Node* %tmp.this1)
  %6 = load %Node, %Node* %tmp.this1
  ret %Node %6

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkPackage(%AstBuilder* %obj, %Location* %loc, %StringRef %name, %Node %children, %Node %params, %Node %ifClause) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %children.addr = alloca %Node
  store %Node %children, %Node* %children.addr
  %params.addr = alloca %Node
  store %Node %params, %Node* %params.addr
  %ifClause.addr = alloca %Node
  store %Node %ifClause, %Node* %ifClause.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 6
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %name.addr
  %8 = load %Node, %Node* %children.addr
  %9 = load %Node, %Node* %params.addr
  %10 = load %Node, %Node* %ifClause.addr
  %11 = call %Node @"().612"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8, %Node %9, %Node %10)
  ret %Node %11
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().612"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4, %Node %p5, %Node %p6) #4 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %StringRef, %StringRef* %p3.addr
  %5 = load %Node, %Node* %p4.addr
  %6 = load %Node, %Node* %p5.addr
  %7 = load %Node, %Node* %p6.addr
  %8 = bitcast %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %1 to %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node)**
  %9 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node)** %8
  %10 = call %Node %9(%UntypedPtr %2, %Location* %3, %StringRef %4, %Node %5, %Node %6, %Node %7)
  ret %Node %10
}

; Function Attrs: noinline nounwind
define i1 @parseDatatypeDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #5 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %formals = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this4 = alloca %TokenType
  %underlyingData = alloca %Node
  %"$tmpForRef5" = alloca %Node
  %ifClause = alloca %Node
  %"$tmpForRef6" = alloca %Node
  %tmp.this7 = alloca %TokenType
  %"$tmpForRef8" = alloca %Node
  %tmp.this9 = alloca %Node
  %ifClause10 = alloca %Node
  %"$tmpForRef11" = alloca %Node
  %children = alloca %Node
  %tmp.this16 = alloca %TokenType
  %tmp.this17 = alloca %TokenType
  %tmp.this18 = alloca %TokenType
  %tmp.this26 = alloca %TokenType
  %tmp.this27 = alloca %TokenType
  %tmp.this32 = alloca %TokenType
  %usingNode = alloca %Node
  %"$tmpForRef38" = alloca %Node
  %tmp.this46 = alloca %TokenType
  %tmp.this47 = alloca %TokenType
  %tmp.this52 = alloca %TokenType
  %"$tmpForRef53" = alloca %Node
  %tmp.this54 = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 5)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  %4 = xor i1 true, %3
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 0
  call void @ctor.182(%Location* %loc, %Location* %7)
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8)
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %10 = call %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  store %Node %10, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %formals, %Node* %"$tmpForRef")
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this4, i32 36)
  %12 = load %TokenType, %TokenType* %tmp.this4
  %13 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, %TokenType %12)
  br i1 %13, label %if_then2, label %if_else

if_then2:                                         ; preds = %if_block1
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %15 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, i1 true)
  store %Node %15, %Node* %"$tmpForRef5"
  call void @ctor.545(%Node* %underlyingData, %Node* %"$tmpForRef5")
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16)
  store %Node %17, %Node* %"$tmpForRef6"
  call void @ctor.545(%Node* %ifClause, %Node* %"$tmpForRef6")
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this7, i32 32)
  %19 = load %TokenType, %TokenType* %tmp.this7
  %20 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18, %TokenType %19)
  %21 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %22 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %21, i32 0, i32 1
  %23 = getelementptr inbounds %Token, %Token* %22, i32 0, i32 0
  call void @copyEnd(%Location* %loc, %Location* %23)
  %24 = load %Node*, %Node** %res.addr
  %25 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %26 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %25, i32 0, i32 3
  %27 = call %StringRef @asStringRef(%String* %id)
  %28 = load %Node, %Node* %formals
  %29 = load %Node, %Node* %underlyingData
  %30 = load %Node, %Node* %ifClause
  call void @ctor.556(%Node* %tmp.this9)
  %31 = load %Node, %Node* %tmp.this9
  %32 = call %Node @mkDatatype(%AstBuilder* %26, %Location* %loc, %StringRef %27, %Node %28, %Node %29, %Node %30, %Node %31)
  store %Node %32, %Node* %"$tmpForRef8"
  call void @"=.554"(%Node* %24, %Node* %"$tmpForRef8")
  br label %if_end3

if_else:                                          ; preds = %if_block1
  %33 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %34 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %33)
  store %Node %34, %Node* %"$tmpForRef11"
  call void @ctor.545(%Node* %ifClause10, %Node* %"$tmpForRef11")
  call void @ctor.556(%Node* %children)
  br label %if_block12

if_end3:                                          ; preds = %if_end15, %if_then2
  call void @dtor.261(%String* %id)
  ret i1 true

if_block12:                                       ; preds = %if_else
  %35 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this16, i32 32)
  %36 = load %TokenType, %TokenType* %tmp.this16
  %37 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %35, %TokenType %36)
  br i1 %37, label %if_then13, label %if_else14

if_then13:                                        ; preds = %if_block12
  br label %if_end15

if_else14:                                        ; preds = %if_block12
  %38 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this17, i32 25)
  %39 = load %TokenType, %TokenType* %tmp.this17
  %40 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %38, %TokenType %39)
  br label %while_block

if_end15:                                         ; preds = %while_end, %if_then13
  %41 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %42 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %41, i32 0, i32 1
  %43 = getelementptr inbounds %Token, %Token* %42, i32 0, i32 0
  call void @copyEnd(%Location* %loc, %Location* %43)
  %44 = load %Node*, %Node** %res.addr
  %45 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %46 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %45, i32 0, i32 3
  %47 = call %StringRef @asStringRef(%String* %id)
  %48 = load %Node, %Node* %formals
  call void @ctor.556(%Node* %tmp.this54)
  %49 = load %Node, %Node* %tmp.this54
  %50 = load %Node, %Node* %ifClause10
  %51 = load %Node, %Node* %children
  %52 = call %Node @mkDatatype(%AstBuilder* %46, %Location* %loc, %StringRef %47, %Node %48, %Node %49, %Node %50, %Node %51)
  store %Node %52, %Node* %"$tmpForRef53"
  call void @"=.554"(%Node* %44, %Node* %"$tmpForRef53")
  br label %if_end3

while_block:                                      ; preds = %while_step, %if_else14
  %53 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this18, i32 26)
  %54 = load %TokenType, %TokenType* %tmp.this18
  %55 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %53, %TokenType %54)
  %56 = xor i1 true, %55
  br i1 %56, label %cond.true, label %cond.false

while_body:                                       ; preds = %cond.end
  br label %while_block19

while_step:                                       ; preds = %cond_destruct_end51
  br label %while_block

while_end:                                        ; preds = %if_then30, %cond.end
  %57 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this52, i32 26)
  %58 = load %TokenType, %TokenType* %tmp.this52
  %59 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %57, %TokenType %58)
  br label %if_end15

cond.true:                                        ; preds = %while_block
  %60 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %61 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %60, i32 0, i32 2
  %62 = load i1, i1* %61
  %63 = xor i1 true, %62
  br label %cond.end

cond.false:                                       ; preds = %while_block
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %63, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %while_body, label %while_end

while_block19:                                    ; preds = %while_step21, %while_body
  %64 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this26, i32 33)
  %65 = load %TokenType, %TokenType* %tmp.this26
  %66 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %64, %TokenType %65)
  br i1 %66, label %cond.true23, label %cond.false24

while_body20:                                     ; preds = %cond.end25
  br label %while_step21

while_step21:                                     ; preds = %while_body20
  br label %while_block19

while_end22:                                      ; preds = %cond.end25
  br i1 %66, label %cond_destruct_alt1, label %cond_destruct_alt2

cond.true23:                                      ; preds = %while_block19
  br label %cond.end25

cond.false24:                                     ; preds = %while_block19
  %67 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this27, i32 32)
  %68 = load %TokenType, %TokenType* %tmp.this27
  %69 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %67, %TokenType %68)
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond.res28 = phi i1 [ true, %cond.true23 ], [ %69, %cond.false24 ]
  br i1 %cond.res28, label %while_body20, label %while_end22

cond_destruct_alt1:                               ; preds = %while_end22
  br label %cond_destruct_end

cond_destruct_alt2:                               ; preds = %while_end22
  br label %cond_destruct_end

cond_destruct_end:                                ; preds = %cond_destruct_alt2, %cond_destruct_alt1
  br label %if_block29

if_block29:                                       ; preds = %cond_destruct_end
  %70 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this32, i32 26)
  %71 = load %TokenType, %TokenType* %tmp.this32
  %72 = call i1 @nextIs(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %70, %TokenType %71)
  br i1 %72, label %if_then30, label %if_end31

if_then30:                                        ; preds = %if_block29
  br label %while_end

if_end31:                                         ; preds = %dumy_block33, %if_block29
  call void @ctor.556(%Node* %usingNode)
  br label %if_block34

dumy_block33:                                     ; No predecessors!
  br label %if_end31

if_block34:                                       ; preds = %if_end31
  %73 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %74 = call i1 @parseUsingDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %73, %Node* %usingNode)
  br i1 %74, label %if_then35, label %if_else36

if_then35:                                        ; preds = %if_block34
  %75 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %76 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %75, i32 0, i32 3
  %77 = load %Node, %Node* %children
  %78 = load %Node, %Node* %usingNode
  %79 = call %Node @addToNodeList(%AstBuilder* %76, %Node %77, %Node %78)
  store %Node %79, %Node* %"$tmpForRef38"
  call void @"=.554"(%Node* %children, %Node* %"$tmpForRef38")
  br label %if_end37

if_else36:                                        ; preds = %if_block34
  %80 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseFieldsLine(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %80, %Node* %children)
  br label %if_end37

if_end37:                                         ; preds = %if_else36, %if_then35
  br label %while_block39

while_block39:                                    ; preds = %while_step41, %if_end37
  %81 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this46, i32 33)
  %82 = load %TokenType, %TokenType* %tmp.this46
  %83 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %81, %TokenType %82)
  br i1 %83, label %cond.true43, label %cond.false44

while_body40:                                     ; preds = %cond.end45
  br label %while_step41

while_step41:                                     ; preds = %while_body40
  br label %while_block39

while_end42:                                      ; preds = %cond.end45
  br i1 %83, label %cond_destruct_alt149, label %cond_destruct_alt250

cond.true43:                                      ; preds = %while_block39
  br label %cond.end45

cond.false44:                                     ; preds = %while_block39
  %84 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this47, i32 32)
  %85 = load %TokenType, %TokenType* %tmp.this47
  %86 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %84, %TokenType %85)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond.res48 = phi i1 [ true, %cond.true43 ], [ %86, %cond.false44 ]
  br i1 %cond.res48, label %while_body40, label %while_end42

cond_destruct_alt149:                             ; preds = %while_end42
  br label %cond_destruct_end51

cond_destruct_alt250:                             ; preds = %while_end42
  br label %cond_destruct_end51

cond_destruct_end51:                              ; preds = %cond_destruct_alt250, %cond_destruct_alt149
  br label %while_step

dumy_block55:                                     ; No predecessors!
  call void @dtor.261(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkDatatype(%AstBuilder* %obj, %Location* %loc, %StringRef %name, %Node %params, %Node %underlyingData, %Node %ifClause, %Node %children) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %params.addr = alloca %Node
  store %Node %params, %Node* %params.addr
  %underlyingData.addr = alloca %Node
  store %Node %underlyingData, %Node* %underlyingData.addr
  %ifClause.addr = alloca %Node
  store %Node %ifClause, %Node* %ifClause.addr
  %children.addr = alloca %Node
  store %Node %children, %Node* %children.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 7
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %name.addr
  %8 = load %Node, %Node* %params.addr
  %9 = load %Node, %Node* %underlyingData.addr
  %10 = load %Node, %Node* %ifClause.addr
  %11 = load %Node, %Node* %children.addr
  %12 = call %Node @"().613"(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8, %Node %9, %Node %10, %Node %11)
  ret %Node %12
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().613"(%"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4, %Node %p5, %Node %p6, %Node %p7) #4 {
  %this.addr = alloca %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*
  store %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %this, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  %p7.addr = alloca %Node
  store %Node %p7, %Node* %p7.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"*, %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %StringRef, %StringRef* %p3.addr
  %5 = load %Node, %Node* %p4.addr
  %6 = load %Node, %Node* %p5.addr
  %7 = load %Node, %Node* %p6.addr
  %8 = load %Node, %Node* %p7.addr
  %9 = bitcast %"FunctionPtr7[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node]"* %1 to %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node)**
  %10 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node)** %9
  %11 = call %Node %10(%UntypedPtr %2, %Location* %3, %StringRef %4, %Node %5, %Node %6, %Node %7, %Node %8)
  ret %Node %11
}

; Function Attrs: inlinehint nounwind
define internal void @parseFieldsLine(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %ids = alloca %"Vector[LocString]"
  %tmp.this = alloca %TokenType
  %typeNode = alloca %Node
  %"$tmpForRef" = alloca %Node
  %init = alloca %Node
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef2" = alloca %Node
  %"$rangeVar" = alloca %"ContiguousMemoryRange[LocString]"
  %id = alloca %LocString*
  %v = alloca %Node
  %"$tmpForRef3" = alloca %Node
  %"$tmpForRef4" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseIdList(%"Vector[LocString]"* %ids, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 31)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i1 false)
  store %Node %6, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %typeNode, %Node* %"$tmpForRef")
  call void @ctor.556(%Node* %init)
  br label %if_block

if_block:                                         ; preds = %code
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 36)
  %8 = load %TokenType, %TokenType* %tmp.this1
  %9 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  br i1 %9, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i1 true)
  store %Node %11, %Node* %"$tmpForRef2"
  call void @"=.554"(%Node* %init, %Node* %"$tmpForRef2")
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  call void @all.589(%"ContiguousMemoryRange[LocString]"* %"$rangeVar", %"Vector[LocString]"* %ids)
  br label %while_block

while_block:                                      ; preds = %while_step, %if_end
  %12 = load %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %"$rangeVar"
  %13 = call i1 @isEmpty.591(%"ContiguousMemoryRange[LocString]" %12)
  %14 = xor i1 true, %13
  br i1 %14, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %15 = load %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %"$rangeVar"
  %16 = call %LocString* @front.592(%"ContiguousMemoryRange[LocString]" %15)
  store %LocString* %16, %LocString** %id
  %17 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %18 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %17, i32 0, i32 3
  %19 = load %LocString*, %LocString** %id
  %20 = getelementptr inbounds %LocString, %LocString* %19, i32 0, i32 0
  %21 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %20, i32 0, i32 0
  %22 = load %LocString*, %LocString** %id
  %23 = getelementptr inbounds %LocString, %LocString* %22, i32 0, i32 0
  %24 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %23, i32 0, i32 1
  %25 = call %StringRef @asStringRef(%String* %24)
  %26 = load %Node, %Node* %typeNode
  %27 = load %Node, %Node* %init
  %28 = call %Node @mkField(%AstBuilder* %18, %Location* %21, %StringRef %25, %Node %26, %Node %27)
  store %Node %28, %Node* %"$tmpForRef3"
  call void @ctor.545(%Node* %v, %Node* %"$tmpForRef3")
  %29 = load %Node*, %Node** %res.addr
  %30 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %31 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %30, i32 0, i32 3
  %32 = load %Node*, %Node** %res.addr
  %33 = load %Node, %Node* %32
  %34 = load %Node, %Node* %v
  %35 = call %Node @addToNodeList(%AstBuilder* %31, %Node %33, %Node %34)
  store %Node %35, %Node* %"$tmpForRef4"
  call void @"=.554"(%Node* %29, %Node* %"$tmpForRef4")
  br label %while_step

while_step:                                       ; preds = %while_body
  call void @popFront.594(%"ContiguousMemoryRange[LocString]"* %"$rangeVar")
  br label %while_block

while_end:                                        ; preds = %while_block
  call void @dtor.586(%"Vector[LocString]"* %ids)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkField(%AstBuilder* %obj, %Location* %loc, %StringRef %name, %Node %typeNode, %Node %init) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %init.addr = alloca %Node
  store %Node %init, %Node* %init.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 8
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %name.addr
  %8 = load %Node, %Node* %typeNode.addr
  %9 = load %Node, %Node* %init.addr
  %10 = call %Node @"().593"(%"FunctionPtr5[Node, UntypedPtr, @Location, StringRef, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseConceptDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %tmp.this1 = alloca %TokenType
  %paramName = alloca %String
  %baseConcept = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this2 = alloca %TokenType
  %ifClause = alloca %Node
  %"$tmpForRef3" = alloca %Node
  %tmp.this4 = alloca %TokenType
  %"$tmpForRef5" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 4)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  %4 = xor i1 true, %3
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 0
  call void @ctor.182(%Location* %loc, %Location* %7)
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8)
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 29)
  %10 = load %TokenType, %TokenType* %tmp.this1
  %11 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9, %TokenType %10)
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %paramName, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12)
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = call %Node @parseTypeNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13)
  store %Node %14, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %baseConcept, %Node* %"$tmpForRef")
  %15 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this2, i32 30)
  %16 = load %TokenType, %TokenType* %tmp.this2
  %17 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %15, %TokenType %16)
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %19 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18)
  store %Node %19, %Node* %"$tmpForRef3"
  call void @ctor.545(%Node* %ifClause, %Node* %"$tmpForRef3")
  %20 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this4, i32 32)
  %21 = load %TokenType, %TokenType* %tmp.this4
  %22 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %20, %TokenType %21)
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 1
  %25 = getelementptr inbounds %Token, %Token* %24, i32 0, i32 0
  call void @copyEnd(%Location* %loc, %Location* %25)
  %26 = load %Node*, %Node** %res.addr
  %27 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %28 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %27, i32 0, i32 3
  %29 = call %StringRef @asStringRef(%String* %id)
  %30 = call %StringRef @asStringRef(%String* %paramName)
  %31 = load %Node, %Node* %baseConcept
  %32 = load %Node, %Node* %ifClause
  %33 = call %Node @mkConcept(%AstBuilder* %28, %Location* %loc, %StringRef %29, %StringRef %30, %Node %31, %Node %32)
  store %Node %33, %Node* %"$tmpForRef5"
  call void @"=.554"(%Node* %26, %Node* %"$tmpForRef5")
  call void @dtor.261(%String* %paramName)
  call void @dtor.261(%String* %id)
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end

dumy_block6:                                      ; No predecessors!
  call void @dtor.261(%String* %paramName)
  call void @dtor.261(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkConcept(%AstBuilder* %obj, %Location* %loc, %StringRef %name, %StringRef %paramName, %Node %baseConcept, %Node %ifClause) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %paramName.addr = alloca %StringRef
  store %StringRef %paramName, %StringRef* %paramName.addr
  %baseConcept.addr = alloca %Node
  store %Node %baseConcept, %Node* %baseConcept.addr
  %ifClause.addr = alloca %Node
  store %Node %ifClause, %Node* %ifClause.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 9
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %name.addr
  %8 = load %StringRef, %StringRef* %paramName.addr
  %9 = load %Node, %Node* %baseConcept.addr
  %10 = load %Node, %Node* %ifClause.addr
  %11 = call %Node @"().614"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %StringRef %8, %Node %9, %Node %10)
  ret %Node %11
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().614"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %StringRef %p4, %Node %p5, %Node %p6) #4 {
  %this.addr = alloca %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*
  store %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %this, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %StringRef
  store %StringRef %p4, %StringRef* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"*, %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %StringRef, %StringRef* %p3.addr
  %5 = load %StringRef, %StringRef* %p4.addr
  %6 = load %Node, %Node* %p5.addr
  %7 = load %Node, %Node* %p6.addr
  %8 = bitcast %"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, StringRef, Node, Node]"* %1 to %Node (%UntypedPtr, %Location*, %StringRef, %StringRef, %Node, %Node)**
  %9 = load %Node (%UntypedPtr, %Location*, %StringRef, %StringRef, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %StringRef, %Node, %Node)** %8
  %10 = call %Node %9(%UntypedPtr %2, %Location* %3, %StringRef %4, %StringRef %5, %Node %6, %Node %7)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseVarLikeDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %kind = alloca i32
  %tmp.this = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %ids = alloca %"Vector[LocString]"
  %typeNode = alloca %Node
  %init = alloca %Node
  %tmp.this10 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this14 = alloca %TokenType
  %"$tmpForRef15" = alloca %Node
  %tmp.this16 = alloca %TokenType
  %"$tmpForRef17" = alloca %Node
  %tmp.this18 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  store i32 0, i32* %kind
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 7)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  store i32 0, i32* %kind
  br label %if_end

if_else:                                          ; preds = %if_block
  br label %if_block1

if_end:                                           ; preds = %if_end4, %if_then
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseIdList(%"Vector[LocString]"* %ids, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4)
  call void @ctor.556(%Node* %typeNode)
  call void @ctor.556(%Node* %init)
  br label %if_block6

if_block1:                                        ; preds = %if_else
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 10)
  %6 = load %TokenType, %TokenType* %tmp.this5
  %7 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, %TokenType %6)
  br i1 %7, label %if_then2, label %if_else3

if_then2:                                         ; preds = %if_block1
  store i32 1, i32* %kind
  br label %if_end4

if_else3:                                         ; preds = %if_block1
  ret i1 false

if_end4:                                          ; preds = %dumy_block, %if_then2
  br label %if_end

dumy_block:                                       ; No predecessors!
  br label %if_end4

if_block6:                                        ; preds = %if_end
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this10, i32 31)
  %9 = load %TokenType, %TokenType* %tmp.this10
  %10 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, %TokenType %9)
  br i1 %10, label %if_then7, label %if_else8

if_then7:                                         ; preds = %if_block6
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, i1 false)
  store %Node %12, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %typeNode, %Node* %"$tmpForRef")
  br label %if_block11

if_else8:                                         ; preds = %if_block6
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this16, i32 36)
  %14 = load %TokenType, %TokenType* %tmp.this16
  %15 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, %TokenType %14)
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i1 true)
  store %Node %17, %Node* %"$tmpForRef17"
  call void @"=.554"(%Node* %init, %Node* %"$tmpForRef17")
  br label %if_end9

if_end9:                                          ; preds = %if_else8, %if_end13
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this18, i32 32)
  %19 = load %TokenType, %TokenType* %tmp.this18
  %20 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18, %TokenType %19)
  %21 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %22 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %21, i32 0, i32 3
  %23 = load %Node, %Node* %typeNode
  %24 = load %Node, %Node* %init
  %25 = load i32, i32* %kind
  %26 = load %Node*, %Node** %res.addr
  call void @createFormals(%AstBuilder* %22, %"Vector[LocString]"* %ids, %Node %23, %Node %24, i32 %25, %Node* %26)
  call void @dtor.586(%"Vector[LocString]"* %ids)
  ret i1 true

if_block11:                                       ; preds = %if_then7
  %27 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this14, i32 36)
  %28 = load %TokenType, %TokenType* %tmp.this14
  %29 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %27, %TokenType %28)
  br i1 %29, label %if_then12, label %if_end13

if_then12:                                        ; preds = %if_block11
  %30 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %31 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %30, i1 true)
  store %Node %31, %Node* %"$tmpForRef15"
  call void @"=.554"(%Node* %init, %Node* %"$tmpForRef15")
  br label %if_end13

if_end13:                                         ; preds = %if_then12, %if_block11
  br label %if_end9

dumy_block19:                                     ; No predecessors!
  call void @dtor.586(%"Vector[LocString]"* %ids)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseFunDecl(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %id = alloca %String
  %formals = alloca %Node
  %"$tmpForRef" = alloca %Node
  %retType = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %body = alloca %Node
  %bodyExp = alloca %Node
  %ifClause = alloca %Node
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef6" = alloca %Node
  %"$tmpForRef7" = alloca %Node
  %tmp.this8 = alloca %TokenType
  %"$tmpForRef9" = alloca %Node
  %"$tmpForRef10" = alloca %Node
  %"$tmpForRef11" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 6)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  %4 = xor i1 true, %3
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 false

if_end:                                           ; preds = %dumy_block, %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %Token, %Token* %6, i32 0, i32 0
  call void @ctor.182(%Location* %loc, %Location* %7)
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseFunNameString(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8)
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %10 = call %Node @parseFormalsOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9)
  store %Node %10, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %formals, %Node* %"$tmpForRef")
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = call %Node @parseTypeNode(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11)
  store %Node %12, %Node* %"$tmpForRef1"
  call void @ctor.545(%Node* %retType, %Node* %"$tmpForRef1")
  call void @ctor.556(%Node* %body)
  call void @ctor.556(%Node* %bodyExp)
  call void @ctor.556(%Node* %ifClause)
  br label %if_block2

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block2:                                        ; preds = %if_end
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 36)
  %14 = load %TokenType, %TokenType* %tmp.this5
  %15 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, %TokenType %14)
  br i1 %15, label %if_then3, label %if_else

if_then3:                                         ; preds = %if_block2
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i1 true)
  store %Node %17, %Node* %"$tmpForRef6"
  call void @"=.554"(%Node* %bodyExp, %Node* %"$tmpForRef6")
  %18 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %19 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %18)
  store %Node %19, %Node* %"$tmpForRef7"
  call void @"=.554"(%Node* %ifClause, %Node* %"$tmpForRef7")
  %20 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this8, i32 32)
  %21 = load %TokenType, %TokenType* %tmp.this8
  %22 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %20, %TokenType %21)
  br label %if_end4

if_else:                                          ; preds = %if_block2
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = call %Node @parseIfClauseOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23)
  store %Node %24, %Node* %"$tmpForRef9"
  call void @"=.554"(%Node* %ifClause, %Node* %"$tmpForRef9")
  %25 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %26 = call %Node @parseFunBody(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %25)
  store %Node %26, %Node* %"$tmpForRef10"
  call void @"=.554"(%Node* %body, %Node* %"$tmpForRef10")
  br label %if_end4

if_end4:                                          ; preds = %if_else, %if_then3
  %27 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %28 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %27, i32 0, i32 1
  %29 = getelementptr inbounds %Token, %Token* %28, i32 0, i32 0
  call void @copyEnd(%Location* %loc, %Location* %29)
  %30 = load %Node*, %Node** %res.addr
  %31 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %32 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %31, i32 0, i32 3
  %33 = call %StringRef @asStringRef(%String* %id)
  %34 = load %Node, %Node* %formals
  %35 = load %Node, %Node* %retType
  %36 = load %Node, %Node* %body
  %37 = load %Node, %Node* %bodyExp
  %38 = load %Node, %Node* %ifClause
  %39 = call %Node @mkFun(%AstBuilder* %32, %Location* %loc, %StringRef %33, %Node %34, %Node %35, %Node %36, %Node %37, %Node %38)
  store %Node %39, %Node* %"$tmpForRef11"
  call void @"=.554"(%Node* %30, %Node* %"$tmpForRef11")
  call void @dtor.261(%String* %id)
  ret i1 true

dumy_block12:                                     ; No predecessors!
  call void @dtor.261(%String* %id)
  unreachable
}

; Function Attrs: inlinehint nounwind
define internal void @parseFunNameString(%String* sret %_result, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %tmp.this = alloca %TokenType
  %"$tmpForRef" = alloca %StringRef
  %tmp.StringRef = alloca %StringRef
  %tmp.this4 = alloca %TokenType
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef6" = alloca %StringRef
  %tmp.StringRef7 = alloca %StringRef
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 34)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %String*, %String** %_result.addr
  %5 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %6 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.105, i32 0, i32 0), i8** %5
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.105, i32 0, i32 1), i8** %6
  %7 = load %StringRef, %StringRef* %tmp.StringRef
  store %StringRef %7, %StringRef* %"$tmpForRef"
  call void @ctor.471(%String* %4, %StringRef* %"$tmpForRef")
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %8 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this4, i32 29)
  %9 = load %TokenType, %TokenType* %tmp.this4
  %10 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %8, %TokenType %9)
  br i1 %10, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 30)
  %12 = load %TokenType, %TokenType* %tmp.this5
  %13 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, %TokenType %12)
  %14 = load %String*, %String** %_result.addr
  %15 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef7, i32 0, i32 0
  %16 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef7, i32 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.106, i32 0, i32 0), i8** %15
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.106, i32 0, i32 2), i8** %16
  %17 = load %StringRef, %StringRef* %tmp.StringRef7
  store %StringRef %17, %StringRef* %"$tmpForRef6"
  call void @ctor.471(%String* %14, %StringRef* %"$tmpForRef6")
  ret void

if_end3:                                          ; preds = %dumy_block8, %if_block1
  %18 = load %String*, %String** %_result.addr
  %19 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseIdOrOper(%String* %18, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %19, i1 true)
  ret void

dumy_block8:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkFun(%AstBuilder* %obj, %Location* %loc, %StringRef %name, %Node %formals, %Node %retType, %Node %body, %Node %bodyExp, %Node %ifClause) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %name.addr = alloca %StringRef
  store %StringRef %name, %StringRef* %name.addr
  %formals.addr = alloca %Node
  store %Node %formals, %Node* %formals.addr
  %retType.addr = alloca %Node
  store %Node %retType, %Node* %retType.addr
  %body.addr = alloca %Node
  store %Node %body, %Node* %body.addr
  %bodyExp.addr = alloca %Node
  store %Node %bodyExp, %Node* %bodyExp.addr
  %ifClause.addr = alloca %Node
  store %Node %ifClause, %Node* %ifClause.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 13
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %name.addr
  %8 = load %Node, %Node* %formals.addr
  %9 = load %Node, %Node* %retType.addr
  %10 = load %Node, %Node* %body.addr
  %11 = load %Node, %Node* %bodyExp.addr
  %12 = load %Node, %Node* %ifClause.addr
  %13 = call %Node @"().615"(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8, %Node %9, %Node %10, %Node %11, %Node %12)
  ret %Node %13
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().615"(%"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %StringRef %p3, %Node %p4, %Node %p5, %Node %p6, %Node %p7, %Node %p8) #4 {
  %this.addr = alloca %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*
  store %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %this, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %StringRef
  store %StringRef %p3, %StringRef* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  %p6.addr = alloca %Node
  store %Node %p6, %Node* %p6.addr
  %p7.addr = alloca %Node
  store %Node %p7, %Node* %p7.addr
  %p8.addr = alloca %Node
  store %Node %p8, %Node* %p8.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"*, %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %StringRef, %StringRef* %p3.addr
  %5 = load %Node, %Node* %p4.addr
  %6 = load %Node, %Node* %p5.addr
  %7 = load %Node, %Node* %p6.addr
  %8 = load %Node, %Node* %p7.addr
  %9 = load %Node, %Node* %p8.addr
  %10 = bitcast %"FunctionPtr8[Node, UntypedPtr, @Location, StringRef, Node, Node, Node, Node, Node]"* %1 to %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node, %Node)**
  %11 = load %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %StringRef, %Node, %Node, %Node, %Node, %Node)** %10
  %12 = call %Node %11(%UntypedPtr %2, %Location* %3, %StringRef %4, %Node %5, %Node %6, %Node %7, %Node %8, %Node %9)
  ret %Node %12
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseExprStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = load %Node*, %Node** %res.addr
  %3 = call i1 @parseExprOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %Node* %2, i1 true)
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseIfStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %topLevel) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %loc = alloca %Location
  %tmp.this = alloca %TokenType
  %expr = alloca %Node
  %"$tmpForRef" = alloca %Node
  %thenClause = alloca %Node
  %"$tmpForRef1" = alloca %Node
  %elseClause = alloca %Node
  %tmp.this5 = alloca %TokenType
  %"$tmpForRef6" = alloca %Node
  %"$tmpForRef7" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 16)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i1 true)
  store %Node %6, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %expr, %Node* %"$tmpForRef")
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %8 = load i1, i1* %topLevel.addr
  %9 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, i1 %8)
  store %Node %9, %Node* %"$tmpForRef1"
  call void @ctor.545(%Node* %thenClause, %Node* %"$tmpForRef1")
  call void @ctor.556(%Node* %elseClause)
  br label %if_block2

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block2:                                        ; preds = %if_then
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 24)
  %11 = load %TokenType, %TokenType* %tmp.this5
  %12 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, %TokenType %11)
  br i1 %12, label %if_then3, label %if_end4

if_then3:                                         ; preds = %if_block2
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = load i1, i1* %topLevel.addr
  %15 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i1 %14)
  store %Node %15, %Node* %"$tmpForRef6"
  call void @"=.554"(%Node* %elseClause, %Node* %"$tmpForRef6")
  br label %if_end4

if_end4:                                          ; preds = %if_then3, %if_block2
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i32 0, i32 1
  %18 = getelementptr inbounds %Token, %Token* %17, i32 0, i32 0
  call void @copyEnd(%Location* %loc, %Location* %18)
  %19 = load %Node*, %Node** %res.addr
  %20 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %21 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %20, i32 0, i32 3
  %22 = load %Node, %Node* %expr
  %23 = load %Node, %Node* %thenClause
  %24 = load %Node, %Node* %elseClause
  %25 = call %Node @mkIfStmt(%AstBuilder* %21, %Location* %loc, %Node %22, %Node %23, %Node %24)
  store %Node %25, %Node* %"$tmpForRef7"
  call void @"=.554"(%Node* %19, %Node* %"$tmpForRef7")
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkIfStmt(%AstBuilder* %obj, %Location* %loc, %Node %expr, %Node %thenClause, %Node %elseClause) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %expr.addr = alloca %Node
  store %Node %expr, %Node* %expr.addr
  %thenClause.addr = alloca %Node
  store %Node %thenClause, %Node* %thenClause.addr
  %elseClause.addr = alloca %Node
  store %Node %elseClause, %Node* %elseClause.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 35
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %expr.addr
  %8 = load %Node, %Node* %thenClause.addr
  %9 = load %Node, %Node* %elseClause.addr
  %10 = call %Node @"().616"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %Node %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal %Node @"().616"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this, %UntypedPtr %p1, %Location* %p2, %Node %p3, %Node %p4, %Node %p5) #4 {
  %this.addr = alloca %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*
  store %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %this, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  %p1.addr = alloca %UntypedPtr
  store %UntypedPtr %p1, %UntypedPtr* %p1.addr
  %p2.addr = alloca %Location*
  store %Location* %p2, %Location** %p2.addr
  %p3.addr = alloca %Node
  store %Node %p3, %Node* %p3.addr
  %p4.addr = alloca %Node
  store %Node %p4, %Node* %p4.addr
  %p5.addr = alloca %Node
  store %Node %p5, %Node* %p5.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"*, %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"** %this.addr
  %2 = load %UntypedPtr, %UntypedPtr* %p1.addr
  %3 = load %Location*, %Location** %p2.addr
  %4 = load %Node, %Node* %p3.addr
  %5 = load %Node, %Node* %p4.addr
  %6 = load %Node, %Node* %p5.addr
  %7 = bitcast %"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %1 to %Node (%UntypedPtr, %Location*, %Node, %Node, %Node)**
  %8 = load %Node (%UntypedPtr, %Location*, %Node, %Node, %Node)*, %Node (%UntypedPtr, %Location*, %Node, %Node, %Node)** %7
  %9 = call %Node %8(%UntypedPtr %2, %Location* %3, %Node %4, %Node %5, %Node %6)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseForStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %topLevel) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %loc = alloca %Location
  %tmp.this = alloca %TokenType
  %id = alloca %String
  %typeNode = alloca %Node
  %tmp.this4 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this5 = alloca %TokenType
  %range = alloca %Node
  %"$tmpForRef6" = alloca %Node
  %action = alloca %Node
  %"$tmpForRef7" = alloca %Node
  %"$tmpForRef8" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 15)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @parseId(%String* %id, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5)
  call void @ctor.556(%Node* %typeNode)
  br label %if_block1

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block1:                                        ; preds = %if_then
  %6 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this4, i32 31)
  %7 = load %TokenType, %TokenType* %tmp.this4
  %8 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6, %TokenType %7)
  br i1 %8, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  %9 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %10 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %9, i1 false)
  store %Node %10, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %typeNode, %Node* %"$tmpForRef")
  br label %if_end3

if_end3:                                          ; preds = %if_then2, %if_block1
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this5, i32 36)
  %12 = load %TokenType, %TokenType* %tmp.this5
  %13 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, %TokenType %12)
  %14 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %15 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %14, i1 true)
  store %Node %15, %Node* %"$tmpForRef6"
  call void @ctor.545(%Node* %range, %Node* %"$tmpForRef6")
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = load i1, i1* %topLevel.addr
  %18 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i1 %17)
  store %Node %18, %Node* %"$tmpForRef7"
  call void @ctor.545(%Node* %action, %Node* %"$tmpForRef7")
  %19 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %20 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %19, i32 0, i32 1
  %21 = getelementptr inbounds %Token, %Token* %20, i32 0, i32 0
  call void @copyEnd(%Location* %loc, %Location* %21)
  %22 = load %Node*, %Node** %res.addr
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, i32 0, i32 3
  %25 = call %StringRef @asStringRef(%String* %id)
  %26 = load %Node, %Node* %typeNode
  %27 = load %Node, %Node* %range
  %28 = load %Node, %Node* %action
  %29 = call %Node @mkForStmt(%AstBuilder* %24, %Location* %loc, %StringRef %25, %Node %26, %Node %27, %Node %28)
  store %Node %29, %Node* %"$tmpForRef8"
  call void @"=.554"(%Node* %22, %Node* %"$tmpForRef8")
  call void @dtor.261(%String* %id)
  ret i1 true

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %id)
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkForStmt(%AstBuilder* %obj, %Location* %loc, %StringRef %id, %Node %typeNode, %Node %range, %Node %action) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %id.addr = alloca %StringRef
  store %StringRef %id, %StringRef* %id.addr
  %typeNode.addr = alloca %Node
  store %Node %typeNode, %Node* %typeNode.addr
  %range.addr = alloca %Node
  store %Node %range, %Node* %range.addr
  %action.addr = alloca %Node
  store %Node %action, %Node* %action.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 36
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %StringRef, %StringRef* %id.addr
  %8 = load %Node, %Node* %typeNode.addr
  %9 = load %Node, %Node* %range.addr
  %10 = load %Node, %Node* %action.addr
  %11 = call %Node @"().612"(%"FunctionPtr6[Node, UntypedPtr, @Location, StringRef, Node, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %StringRef %7, %Node %8, %Node %9, %Node %10)
  ret %Node %11
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseWhileStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res, i1 %topLevel) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %topLevel.addr = alloca i1
  store i1 %topLevel, i1* %topLevel.addr
  %loc = alloca %Location
  %tmp.this = alloca %TokenType
  %expr = alloca %Node
  %"$tmpForRef" = alloca %Node
  %stepAction = alloca %Node
  %tmp.this4 = alloca %TokenType
  %"$tmpC" = alloca %String
  %tmp.StringRef = alloca %StringRef
  %"$tmpC8" = alloca %Token
  %tmp.StringRef9 = alloca %StringRef
  %body = alloca %Node
  %"$tmpForRef10" = alloca %Node
  %"$tmpForRef11" = alloca %Node
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @curLoc(%Location* %loc, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1)
  br label %if_block

if_block:                                         ; preds = %code
  %2 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 20)
  %3 = load %TokenType, %TokenType* %tmp.this
  %4 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2, %TokenType %3)
  br i1 %4, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %5 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %6 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %5, i1 true)
  store %Node %6, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %expr, %Node* %"$tmpForRef")
  call void @ctor.556(%Node* %stepAction)
  br label %if_block1

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block1:                                        ; preds = %if_then
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this4, i32 32)
  %8 = load %TokenType, %TokenType* %tmp.this4
  %9 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  br i1 %9, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  br label %if_block5

if_end3:                                          ; preds = %if_end7, %if_block1
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = load i1, i1* %topLevel.addr
  %12 = call %Node @parseStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i1 %11)
  store %Node %12, %Node* %"$tmpForRef10"
  call void @ctor.545(%Node* %body, %Node* %"$tmpForRef10")
  %13 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %14 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %13, i32 0, i32 1
  %15 = getelementptr inbounds %Token, %Token* %14, i32 0, i32 0
  call void @copyEnd(%Location* %loc, %Location* %15)
  %16 = load %Node*, %Node** %res.addr
  %17 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %18 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %17, i32 0, i32 3
  %19 = load %Node, %Node* %expr
  %20 = load %Node, %Node* %stepAction
  %21 = load %Node, %Node* %body
  %22 = call %Node @mkWhileStmt(%AstBuilder* %18, %Location* %loc, %Node %19, %Node %20, %Node %21)
  store %Node %22, %Node* %"$tmpForRef11"
  call void @"=.554"(%Node* %16, %Node* %"$tmpForRef11")
  ret i1 true

if_block5:                                        ; preds = %if_then2
  %23 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %24 = call i1 @parseExprOpt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %23, %Node* %stepAction, i1 true)
  %25 = xor i1 true, %24
  br i1 %25, label %cond.true, label %cond.false

if_then6:                                         ; preds = %cond.end
  %26 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %27 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 0
  %28 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef, i32 0, i32 1
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.107, i32 0, i32 0), i8** %27
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.107, i32 0, i32 25), i8** %28
  %29 = load %StringRef, %StringRef* %tmp.StringRef
  %30 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %31 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %30, i32 0, i32 0
  call void @"pre_*.543"(%Token* %"$tmpC8", %"RangeWithLookahead[SparrowLayoutDecoder[SparrowScanner]]"* %31)
  %32 = getelementptr inbounds %Token, %Token* %"$tmpC8", i32 0, i32 1
  %33 = load %TokenType, %TokenType* %32
  %34 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef9, i32 0, i32 0
  %35 = getelementptr inbounds %StringRef, %StringRef* %tmp.StringRef9, i32 0, i32 1
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @str.108, i32 0, i32 0), i8** %34
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @str.108, i32 0, i32 41), i8** %35
  %36 = load %StringRef, %StringRef* %tmp.StringRef9
  call void @toString.597(%String* %"$tmpC", %StringRef %29, %TokenType %33, %StringRef %36)
  call void @reportError.548(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %26, %String* %"$tmpC")
  call void @dtor.261(%String* %"$tmpC")
  call void @dtor.260(%Token* %"$tmpC8")
  br label %if_end7

if_end7:                                          ; preds = %if_then6, %cond.end
  br label %if_end3

cond.true:                                        ; preds = %if_block5
  %37 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %38 = load i1, i1* %topLevel.addr
  %39 = call i1 @parseBlockStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %37, %Node* %stepAction, i1 %38)
  %40 = xor i1 true, %39
  br label %cond.end

cond.false:                                       ; preds = %if_block5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %40, %cond.true ], [ false, %cond.false ]
  br i1 %cond.res, label %if_then6, label %if_end7

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkWhileStmt(%AstBuilder* %obj, %Location* %loc, %Node %expr, %Node %stepAction, %Node %body) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %expr.addr = alloca %Node
  store %Node %expr, %Node* %expr.addr
  %stepAction.addr = alloca %Node
  store %Node %stepAction, %Node* %stepAction.addr
  %body.addr = alloca %Node
  store %Node %body, %Node* %body.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 37
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %expr.addr
  %8 = load %Node, %Node* %stepAction.addr
  %9 = load %Node, %Node* %body.addr
  %10 = call %Node @"().616"(%"FunctionPtr5[Node, UntypedPtr, @Location, Node, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %Node %8, %Node %9)
  ret %Node %10
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseBreakStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 11)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i32 0, i32 1
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 0
  call void @ctor.182(%Location* %loc, %Location* %6)
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 32)
  %8 = load %TokenType, %TokenType* %tmp.this1
  %9 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  %10 = load %Node*, %Node** %res.addr
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, i32 0, i32 3
  %13 = call %Node @mkBreakStmt(%AstBuilder* %12, %Location* %loc)
  store %Node %13, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %10, %Node* %"$tmpForRef")
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkBreakStmt(%AstBuilder* %obj, %Location* %loc) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 38
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = call %Node @"().600"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %2, %UntypedPtr %5, %Location* %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseContinueStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %tmp.this1 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 13)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i32 0, i32 1
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 0
  call void @ctor.182(%Location* %loc, %Location* %6)
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 32)
  %8 = load %TokenType, %TokenType* %tmp.this1
  %9 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  %10 = load %Node*, %Node** %res.addr
  %11 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %12 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %11, i32 0, i32 3
  %13 = call %Node @mkContinueStmt(%AstBuilder* %12, %Location* %loc)
  store %Node %13, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %10, %Node* %"$tmpForRef")
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkContinueStmt(%AstBuilder* %obj, %Location* %loc) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 39
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = call %Node @"().600"(%"FunctionPtr2[Node, UntypedPtr, @Location]"* %2, %UntypedPtr %5, %Location* %6)
  ret %Node %7
}

; Function Attrs: inlinehint nounwind
define internal i1 @parseReturnStmt(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %Node* %res) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res.addr = alloca %Node*
  store %Node* %res, %Node** %res.addr
  %tmp.this = alloca %TokenType
  %loc = alloca %Location
  %expr = alloca %Node
  %tmp.this3 = alloca %TokenType
  %"$tmpForRef" = alloca %Node
  %tmp.this4 = alloca %TokenType
  %"$tmpForRef5" = alloca %Node
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 17)
  %2 = load %TokenType, %TokenType* %tmp.this
  %3 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, %TokenType %2)
  br i1 %3, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %4 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %5 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %4, i32 0, i32 1
  %6 = getelementptr inbounds %Token, %Token* %5, i32 0, i32 0
  call void @ctor.182(%Location* %loc, %Location* %6)
  call void @ctor.556(%Node* %expr)
  br label %if_block1

if_end:                                           ; preds = %dumy_block, %if_block
  ret i1 false

if_block1:                                        ; preds = %if_then
  %7 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this3, i32 32)
  %8 = load %TokenType, %TokenType* %tmp.this3
  %9 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %7, %TokenType %8)
  br i1 %9, label %if_end2, label %if_else

if_else:                                          ; preds = %if_block1
  %10 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %11 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %10, i1 true)
  store %Node %11, %Node* %"$tmpForRef"
  call void @"=.554"(%Node* %expr, %Node* %"$tmpForRef")
  %12 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this4, i32 32)
  %13 = load %TokenType, %TokenType* %tmp.this4
  %14 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %12, %TokenType %13)
  br label %if_end2

if_end2:                                          ; preds = %if_else, %if_block1
  %15 = load %Node*, %Node** %res.addr
  %16 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %17 = getelementptr inbounds %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]", %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %16, i32 0, i32 3
  %18 = load %Node, %Node* %expr
  %19 = call %Node @mkReturnStmt(%AstBuilder* %17, %Location* %loc, %Node %18)
  store %Node %19, %Node* %"$tmpForRef5"
  call void @"=.554"(%Node* %15, %Node* %"$tmpForRef5")
  ret i1 true

dumy_block:                                       ; No predecessors!
  br label %if_end
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkReturnStmt(%AstBuilder* %obj, %Location* %loc, %Node %expr) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %expr.addr = alloca %Node
  store %Node %expr, %Node* %expr.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 40
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %expr.addr
  %8 = call %Node @"().596"(%"FunctionPtr3[Node, UntypedPtr, @Location, Node]"* %2, %UntypedPtr %5, %Location* %6, %Node %7)
  ret %Node %8
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkModifiers(%AstBuilder* %obj, %Location* %loc, %Node %main, %Node %mods) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %main.addr = alloca %Node
  store %Node %main, %Node* %main.addr
  %mods.addr = alloca %Node
  store %Node %mods, %Node* %mods.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 2
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %main.addr
  %8 = load %Node, %Node* %mods.addr
  %9 = call %Node @"().609"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %Node %8)
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal %Node @mkModule(%AstBuilder* %obj, %Location* %loc, %Node %moduleName, %Node %decls) #4 {
  %obj.addr = alloca %AstBuilder*
  store %AstBuilder* %obj, %AstBuilder** %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %moduleName.addr = alloca %Node
  store %Node %moduleName, %Node* %moduleName.addr
  %decls.addr = alloca %Node
  store %Node %decls, %Node* %decls.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %AstBuilder*, %AstBuilder** %obj.addr
  %2 = getelementptr inbounds %AstBuilder, %AstBuilder* %1, i32 0, i32 3
  %3 = load %AstBuilder*, %AstBuilder** %obj.addr
  %4 = getelementptr inbounds %AstBuilder, %AstBuilder* %3, i32 0, i32 0
  %5 = load %UntypedPtr, %UntypedPtr* %4
  %6 = load %Location*, %Location** %loc.addr
  %7 = load %Node, %Node* %moduleName.addr
  %8 = load %Node, %Node* %decls.addr
  %9 = call %Node @"().609"(%"FunctionPtr4[Node, UntypedPtr, @Location, Node, Node]"* %2, %UntypedPtr %5, %Location* %6, %Node %7, %Node %8)
  ret %Node %9
}

; Function Attrs: noinline nounwind
define %Node @spr_parserIf_parseExpression(%ParserContext* %ctx) #5 {
  %ctx.addr = alloca %ParserContext*
  store %ParserContext* %ctx, %ParserContext** %ctx.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %ParserContext*, %ParserContext** %ctx.addr
  %2 = getelementptr inbounds %ParserContext, %ParserContext* %1, i32 0, i32 2
  %3 = call %Node @parseExpression(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %2)
  ret %Node %3
}

; Function Attrs: inlinehint nounwind
define internal %Node @parseExpression(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this) #4 {
  %this.addr = alloca %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*
  store %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %this, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %res = alloca %Node
  %"$tmpForRef" = alloca %Node
  %tmp.this = alloca %TokenType
  %tmp.this1 = alloca %TokenType
  br label %code

code:                                             ; preds = %0
  %1 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  %2 = call %Node @parseExpr(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %1, i1 true)
  store %Node %2, %Node* %"$tmpForRef"
  call void @ctor.545(%Node* %res, %Node* %"$tmpForRef")
  %3 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this, i32 32)
  %4 = load %TokenType, %TokenType* %tmp.this
  %5 = call i1 @accept(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %3, %TokenType %4)
  %6 = load %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"*, %"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"** %this.addr
  call void @ctor.417(%TokenType* %tmp.this1, i32 0)
  %7 = load %TokenType, %TokenType* %tmp.this1
  %8 = call i1 @expect(%"SparrowParser[SparrowLayoutDecoder[SparrowScanner]]"* %6, %TokenType %7)
  %9 = load %Node, %Node* %res
  ret %Node %9
}

; Function Attrs: inlinehint nounwind
define internal i1 @isOctalDigit(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp sle i8 48, %1
  br i1 %2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %3 = load i8, i8* %c.addr
  %4 = icmp sle i8 %3, 55
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %4, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: inlinehint nounwind
define internal i1 @isBinDigit(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  %2 = icmp eq i8 %1, 48
  br i1 %2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  br label %cond.end

cond.false:                                       ; preds = %code
  %3 = load i8, i8* %c.addr
  %4 = icmp eq i8 %3, 49
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ true, %cond.true ], [ %4, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.617(%LocString* %this) #3 {
  %this.addr = alloca %LocString*
  store %LocString* %this, %LocString** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %this.addr
  %2 = getelementptr inbounds %LocString, %LocString* %1, i32 0, i32 0
  call void @ctor.618(%"Tuple[Location, String]"* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.618(%"Tuple[Location, String]"* %this) #3 {
  %this.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %this, %"Tuple[Location, String]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %2 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %1, i32 0, i32 0
  call void @ctor.130(%Location* %2)
  %3 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %4 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %3, i32 0, i32 1
  call void @ctor.137(%String* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.619"(%LocString* %this, %LocString* %other) #3 {
  %this.addr = alloca %LocString*
  store %LocString* %this, %LocString** %this.addr
  %other.addr = alloca %LocString*
  store %LocString* %other, %LocString** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %this.addr
  %2 = getelementptr inbounds %LocString, %LocString* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %other.addr
  %4 = getelementptr inbounds %LocString, %LocString* %3, i32 0, i32 0
  call void @"=.620"(%"Tuple[Location, String]"* %2, %"Tuple[Location, String]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.620"(%"Tuple[Location, String]"* %this, %"Tuple[Location, String]"* %other) #3 {
  %this.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %this, %"Tuple[Location, String]"** %this.addr
  %other.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %other, %"Tuple[Location, String]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %2 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %1, i32 0, i32 0
  %3 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %4 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %3, i32 0, i32 0
  call void @"=.283"(%Location* %2, %Location* %4)
  %5 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %6 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %5, i32 0, i32 1
  %7 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %8 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %7, i32 0, i32 1
  %9 = call %String* @"=.290"(%String* %6, %String* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.621"(%LocString* %this, %LocString* %other) #3 {
  %this.addr = alloca %LocString*
  store %LocString* %this, %LocString** %this.addr
  %other.addr = alloca %LocString*
  store %LocString* %other, %LocString** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %LocString*, %LocString** %this.addr
  %2 = getelementptr inbounds %LocString, %LocString* %1, i32 0, i32 0
  %3 = load %LocString*, %LocString** %other.addr
  %4 = getelementptr inbounds %LocString, %LocString* %3, i32 0, i32 0
  %5 = call i1 @"==.622"(%"Tuple[Location, String]"* %2, %"Tuple[Location, String]"* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.622"(%"Tuple[Location, String]"* %this, %"Tuple[Location, String]"* %other) #3 {
  %this.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %this, %"Tuple[Location, String]"** %this.addr
  %other.addr = alloca %"Tuple[Location, String]"*
  store %"Tuple[Location, String]"* %other, %"Tuple[Location, String]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %2 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %1, i32 0, i32 0
  %3 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %4 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %3, i32 0, i32 0
  %5 = call i1 @"==.336"(%Location* %2, %Location* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %this.addr
  %7 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %6, i32 0, i32 1
  %8 = load %"Tuple[Location, String]"*, %"Tuple[Location, String]"** %other.addr
  %9 = getelementptr inbounds %"Tuple[Location, String]", %"Tuple[Location, String]"* %8, i32 0, i32 1
  %10 = call i1 @"==.343"(%String* %7, %String* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.623(%LineCol* %this) #3 {
  %this.addr = alloca %LineCol*
  store %LineCol* %this, %LineCol** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.624(%SourceCode* %this, i8* %fdata) #3 {
  %this.addr = alloca %SourceCode*
  store %SourceCode* %this, %SourceCode** %this.addr
  %fdata.addr = alloca i8*
  store i8* %fdata, i8** %fdata.addr
  br label %code

code:                                             ; preds = %0
  %1 = load i8*, i8** %fdata.addr
  %2 = load %SourceCode*, %SourceCode** %this.addr
  %3 = getelementptr inbounds %SourceCode, %SourceCode* %2, i32 0, i32 0
  store i8* %1, i8** %3
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.625(%SourceCode* %this) #3 {
  %this.addr = alloca %SourceCode*
  store %SourceCode* %this, %SourceCode** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.626(%Location* %this) #3 {
  %this.addr = alloca %Location*
  store %Location* %this, %Location** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @mkLineCol(%LineCol* sret %_result, i32 %line, i32 %col) #4 {
  %_result.addr = alloca %LineCol*
  store %LineCol* %_result, %LineCol** %_result.addr
  %line.addr = alloca i32
  store i32 %line, i32* %line.addr
  %col.addr = alloca i32
  store i32 %col, i32* %col.addr
  %res = alloca %LineCol
  br label %code

code:                                             ; preds = %0
  call void @ctor.132(%LineCol* %res)
  %1 = load i32, i32* %line.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %res, i32 0, i32 0
  store i32 %1, i32* %2
  %3 = load i32, i32* %col.addr
  %4 = getelementptr inbounds %LineCol, %LineCol* %res, i32 0, i32 1
  store i32 %3, i32* %4
  %5 = load %LineCol*, %LineCol** %_result.addr
  call void @ctor.184(%LineCol* %5, %LineCol* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @mkLocation(%Location* sret %_result) #4 {
  %_result.addr = alloca %Location*
  store %Location* %_result, %Location** %_result.addr
  %res = alloca %Location
  br label %code

code:                                             ; preds = %0
  call void @ctor.130(%Location* %res)
  call void @setOne(%Location* %res)
  %1 = load %Location*, %Location** %_result.addr
  call void @ctor.182(%Location* %1, %Location* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @setOne(%Location* %l) #4 {
  %l.addr = alloca %Location*
  store %Location* %l, %Location** %l.addr
  %tmp.this = alloca i32
  %tmp.this1 = alloca i32
  %tmp.this2 = alloca i32
  %tmp.this3 = alloca i32
  br label %code

code:                                             ; preds = %0
  store i32 1, i32* %tmp.this
  %1 = load i32, i32* %tmp.this
  %2 = load %Location*, %Location** %l.addr
  %3 = getelementptr inbounds %Location, %Location* %2, i32 0, i32 1
  %4 = getelementptr inbounds %LineCol, %LineCol* %3, i32 0, i32 0
  store i32 %1, i32* %4
  store i32 1, i32* %tmp.this1
  %5 = load i32, i32* %tmp.this1
  %6 = load %Location*, %Location** %l.addr
  %7 = getelementptr inbounds %Location, %Location* %6, i32 0, i32 1
  %8 = getelementptr inbounds %LineCol, %LineCol* %7, i32 0, i32 1
  store i32 %5, i32* %8
  store i32 1, i32* %tmp.this2
  %9 = load i32, i32* %tmp.this2
  %10 = load %Location*, %Location** %l.addr
  %11 = getelementptr inbounds %Location, %Location* %10, i32 0, i32 2
  %12 = getelementptr inbounds %LineCol, %LineCol* %11, i32 0, i32 0
  store i32 %9, i32* %12
  store i32 1, i32* %tmp.this3
  %13 = load i32, i32* %tmp.this3
  %14 = load %Location*, %Location** %l.addr
  %15 = getelementptr inbounds %Location, %Location* %14, i32 0, i32 2
  %16 = getelementptr inbounds %LineCol, %LineCol* %15, i32 0, i32 1
  store i32 %13, i32* %16
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @mkLocation.627(%Location* sret %_result, %SourceCode %sourceCode) #4 {
  %_result.addr = alloca %Location*
  store %Location* %_result, %Location** %_result.addr
  %sourceCode.addr = alloca %SourceCode
  store %SourceCode %sourceCode, %SourceCode* %sourceCode.addr
  %res = alloca %Location
  br label %code

code:                                             ; preds = %0
  call void @ctor.130(%Location* %res)
  %1 = getelementptr inbounds %Location, %Location* %res, i32 0, i32 0
  call void @"=.284"(%SourceCode* %1, %SourceCode* %sourceCode.addr)
  call void @setOne(%Location* %res)
  %2 = load %Location*, %Location** %_result.addr
  call void @ctor.182(%Location* %2, %Location* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @mkLocation.628(%Location* sret %_result, %SourceCode %sourceCode, %LineCol %start, %LineCol %end) #4 {
  %_result.addr = alloca %Location*
  store %Location* %_result, %Location** %_result.addr
  %sourceCode.addr = alloca %SourceCode
  store %SourceCode %sourceCode, %SourceCode* %sourceCode.addr
  %start.addr = alloca %LineCol
  store %LineCol %start, %LineCol* %start.addr
  %end.addr = alloca %LineCol
  store %LineCol %end, %LineCol* %end.addr
  %res = alloca %Location
  br label %code

code:                                             ; preds = %0
  call void @ctor.130(%Location* %res)
  %1 = getelementptr inbounds %Location, %Location* %res, i32 0, i32 0
  call void @"=.284"(%SourceCode* %1, %SourceCode* %sourceCode.addr)
  %2 = getelementptr inbounds %Location, %Location* %res, i32 0, i32 1
  call void @"=.285"(%LineCol* %2, %LineCol* %start.addr)
  %3 = getelementptr inbounds %Location, %Location* %res, i32 0, i32 2
  call void @"=.285"(%LineCol* %3, %LineCol* %end.addr)
  %4 = load %Location*, %Location** %_result.addr
  call void @ctor.182(%Location* %4, %Location* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @copyStart(%Location* %l, %Location* %other) #4 {
  %l.addr = alloca %Location*
  store %Location* %l, %Location** %l.addr
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %l.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 1
  %3 = load %Location*, %Location** %other.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 1
  call void @"=.285"(%LineCol* %2, %LineCol* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @setAsStartOf(%Location* %l, %Location* %other) #4 {
  %l.addr = alloca %Location*
  store %Location* %l, %Location** %l.addr
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %l.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 1
  %3 = load %Location*, %Location** %other.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 1
  call void @"=.285"(%LineCol* %2, %LineCol* %4)
  %5 = load %Location*, %Location** %l.addr
  %6 = getelementptr inbounds %Location, %Location* %5, i32 0, i32 2
  %7 = load %Location*, %Location** %other.addr
  %8 = getelementptr inbounds %Location, %Location* %7, i32 0, i32 1
  call void @"=.285"(%LineCol* %6, %LineCol* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @setAsEndOf(%Location* %l, %Location* %other) #4 {
  %l.addr = alloca %Location*
  store %Location* %l, %Location** %l.addr
  %other.addr = alloca %Location*
  store %Location* %other, %Location** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %Location*, %Location** %l.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 1
  %3 = load %Location*, %Location** %other.addr
  %4 = getelementptr inbounds %Location, %Location* %3, i32 0, i32 2
  call void @"=.285"(%LineCol* %2, %LineCol* %4)
  %5 = load %Location*, %Location** %l.addr
  %6 = getelementptr inbounds %Location, %Location* %5, i32 0, i32 2
  %7 = load %Location*, %Location** %other.addr
  %8 = getelementptr inbounds %Location, %Location* %7, i32 0, i32 2
  call void @"=.285"(%LineCol* %6, %LineCol* %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @"<"(%Location* %lhs, %Location* %rhs) #4 {
  %lhs.addr = alloca %Location*
  store %Location* %lhs, %Location** %lhs.addr
  %rhs.addr = alloca %Location*
  store %Location* %rhs, %Location** %rhs.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %Location*, %Location** %lhs.addr
  %2 = getelementptr inbounds %Location, %Location* %1, i32 0, i32 1
  %3 = getelementptr inbounds %LineCol, %LineCol* %2, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = load %Location*, %Location** %rhs.addr
  %6 = getelementptr inbounds %Location, %Location* %5, i32 0, i32 1
  %7 = getelementptr inbounds %LineCol, %LineCol* %6, i32 0, i32 0
  %8 = load i32, i32* %7
  %9 = icmp slt i32 %4, %8
  br i1 %9, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %10 = load %Location*, %Location** %lhs.addr
  %11 = getelementptr inbounds %Location, %Location* %10, i32 0, i32 1
  %12 = getelementptr inbounds %LineCol, %LineCol* %11, i32 0, i32 0
  %13 = load i32, i32* %12
  %14 = load %Location*, %Location** %rhs.addr
  %15 = getelementptr inbounds %Location, %Location* %14, i32 0, i32 1
  %16 = getelementptr inbounds %LineCol, %LineCol* %15, i32 0, i32 0
  %17 = load i32, i32* %16
  %18 = icmp sgt i32 %13, %17
  br i1 %18, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  br label %if_block5

dumy_block4:                                      ; No predecessors!
  br label %if_end3

if_block5:                                        ; preds = %if_end3
  %19 = load %Location*, %Location** %lhs.addr
  %20 = getelementptr inbounds %Location, %Location* %19, i32 0, i32 1
  %21 = getelementptr inbounds %LineCol, %LineCol* %20, i32 0, i32 1
  %22 = load i32, i32* %21
  %23 = load %Location*, %Location** %rhs.addr
  %24 = getelementptr inbounds %Location, %Location* %23, i32 0, i32 1
  %25 = getelementptr inbounds %LineCol, %LineCol* %24, i32 0, i32 1
  %26 = load i32, i32* %25
  %27 = icmp slt i32 %22, %26
  br i1 %27, label %if_then6, label %if_end7

if_then6:                                         ; preds = %if_block5
  ret i1 true

if_end7:                                          ; preds = %dumy_block8, %if_block5
  br label %if_block9

dumy_block8:                                      ; No predecessors!
  br label %if_end7

if_block9:                                        ; preds = %if_end7
  %28 = load %Location*, %Location** %lhs.addr
  %29 = getelementptr inbounds %Location, %Location* %28, i32 0, i32 1
  %30 = getelementptr inbounds %LineCol, %LineCol* %29, i32 0, i32 1
  %31 = load i32, i32* %30
  %32 = load %Location*, %Location** %rhs.addr
  %33 = getelementptr inbounds %Location, %Location* %32, i32 0, i32 1
  %34 = getelementptr inbounds %LineCol, %LineCol* %33, i32 0, i32 1
  %35 = load i32, i32* %34
  %36 = icmp sgt i32 %31, %35
  br i1 %36, label %if_then10, label %if_end11

if_then10:                                        ; preds = %if_block9
  ret i1 false

if_end11:                                         ; preds = %dumy_block12, %if_block9
  br label %if_block13

dumy_block12:                                     ; No predecessors!
  br label %if_end11

if_block13:                                       ; preds = %if_end11
  %37 = load %Location*, %Location** %lhs.addr
  %38 = getelementptr inbounds %Location, %Location* %37, i32 0, i32 2
  %39 = getelementptr inbounds %LineCol, %LineCol* %38, i32 0, i32 0
  %40 = load i32, i32* %39
  %41 = load %Location*, %Location** %rhs.addr
  %42 = getelementptr inbounds %Location, %Location* %41, i32 0, i32 2
  %43 = getelementptr inbounds %LineCol, %LineCol* %42, i32 0, i32 0
  %44 = load i32, i32* %43
  %45 = icmp slt i32 %40, %44
  br i1 %45, label %if_then14, label %if_end15

if_then14:                                        ; preds = %if_block13
  ret i1 true

if_end15:                                         ; preds = %dumy_block16, %if_block13
  br label %if_block17

dumy_block16:                                     ; No predecessors!
  br label %if_end15

if_block17:                                       ; preds = %if_end15
  %46 = load %Location*, %Location** %lhs.addr
  %47 = getelementptr inbounds %Location, %Location* %46, i32 0, i32 2
  %48 = getelementptr inbounds %LineCol, %LineCol* %47, i32 0, i32 0
  %49 = load i32, i32* %48
  %50 = load %Location*, %Location** %rhs.addr
  %51 = getelementptr inbounds %Location, %Location* %50, i32 0, i32 2
  %52 = getelementptr inbounds %LineCol, %LineCol* %51, i32 0, i32 0
  %53 = load i32, i32* %52
  %54 = icmp sgt i32 %49, %53
  br i1 %54, label %if_then18, label %if_end19

if_then18:                                        ; preds = %if_block17
  ret i1 false

if_end19:                                         ; preds = %dumy_block20, %if_block17
  %55 = load %Location*, %Location** %lhs.addr
  %56 = getelementptr inbounds %Location, %Location* %55, i32 0, i32 2
  %57 = getelementptr inbounds %LineCol, %LineCol* %56, i32 0, i32 1
  %58 = load i32, i32* %57
  %59 = load %Location*, %Location** %rhs.addr
  %60 = getelementptr inbounds %Location, %Location* %59, i32 0, i32 2
  %61 = getelementptr inbounds %LineCol, %LineCol* %60, i32 0, i32 1
  %62 = load i32, i32* %61
  %63 = icmp slt i32 %58, %62
  ret i1 %63

dumy_block20:                                     ; No predecessors!
  br label %if_end19
}

; Function Attrs: inlinehint nounwind
define internal i1 @"<.629"(%LineCol* %lhs, %LineCol* %rhs) #4 {
  %lhs.addr = alloca %LineCol*
  store %LineCol* %lhs, %LineCol** %lhs.addr
  %rhs.addr = alloca %LineCol*
  store %LineCol* %rhs, %LineCol** %rhs.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %LineCol*, %LineCol** %lhs.addr
  %2 = getelementptr inbounds %LineCol, %LineCol* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %LineCol*, %LineCol** %rhs.addr
  %5 = getelementptr inbounds %LineCol, %LineCol* %4, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret i1 true

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %8 = load %LineCol*, %LineCol** %lhs.addr
  %9 = getelementptr inbounds %LineCol, %LineCol* %8, i32 0, i32 0
  %10 = load i32, i32* %9
  %11 = load %LineCol*, %LineCol** %rhs.addr
  %12 = getelementptr inbounds %LineCol, %LineCol* %11, i32 0, i32 0
  %13 = load i32, i32* %12
  %14 = icmp sgt i32 %10, %13
  br i1 %14, label %if_then2, label %if_end3

if_then2:                                         ; preds = %if_block1
  ret i1 false

if_end3:                                          ; preds = %dumy_block4, %if_block1
  %15 = load %LineCol*, %LineCol** %lhs.addr
  %16 = getelementptr inbounds %LineCol, %LineCol* %15, i32 0, i32 1
  %17 = load i32, i32* %16
  %18 = load %LineCol*, %LineCol** %rhs.addr
  %19 = getelementptr inbounds %LineCol, %LineCol* %18, i32 0, i32 1
  %20 = load i32, i32* %19
  %21 = icmp slt i32 %17, %20
  ret i1 %21

dumy_block4:                                      ; No predecessors!
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.630(%String* %this, i64 %count, i8 %ch) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %count.addr = alloca i64
  store i64 %count, i64* %count.addr
  %ch.addr = alloca i8
  store i8 %ch, i8* %ch.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = load i64, i64* %count.addr
  call void @ctor.191(%String* %1, i64 %2)
  %3 = load %String*, %String** %this.addr
  %4 = getelementptr inbounds %String, %String* %3, i32 0, i32 0
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %4
  %6 = call i8* @bytePtr(%"RawPtr[Char]" %5)
  %7 = load i8, i8* %ch.addr
  %8 = load i64, i64* %count.addr
  call void @_spr_memset(i8* %6, i8 %7, i64 %8)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.631(%String* %this, %"RawPtr[Char]" %_begin, %"RawPtr[Char]" %_end) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %_begin.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %_begin, %"RawPtr[Char]"* %_begin.addr
  %_end.addr = alloca %"RawPtr[Char]"
  store %"RawPtr[Char]" %_end, %"RawPtr[Char]"* %_end.addr
  %size = alloca i64
  %tmp.this = alloca i64
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]", %"RawPtr[Char]"* %_end.addr
  %2 = load %"RawPtr[Char]", %"RawPtr[Char]"* %_begin.addr
  %3 = call i64 @diff(%"RawPtr[Char]" %1, %"RawPtr[Char]" %2)
  store i64 %3, i64* %size
  %4 = load %String*, %String** %this.addr
  %5 = load i64, i64* %size
  store i64 %5, i64* %tmp.this
  %6 = load i64, i64* %tmp.this
  call void @ctor.191(%String* %4, i64 %6)
  %7 = load %String*, %String** %this.addr
  %8 = getelementptr inbounds %String, %String* %7, i32 0, i32 0
  %9 = load %"RawPtr[Char]", %"RawPtr[Char]"* %8
  %10 = call i8* @bytePtr(%"RawPtr[Char]" %9)
  %11 = load %"RawPtr[Char]", %"RawPtr[Char]"* %_begin.addr
  %12 = call i8* @bytePtr(%"RawPtr[Char]" %11)
  %13 = load i64, i64* %size
  store i64 %13, i64* %tmp.this1
  %14 = load i64, i64* %tmp.this1
  call void @_spr_memcpy(i8* %10, i8* %12, i64 %14)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @"!="(%String* %this, %String* %other) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %other.addr = alloca %String*
  store %String* %other, %String** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = load %String*, %String** %other.addr
  %3 = call i1 @"==.343"(%String* %1, %String* %2)
  %4 = xor i1 true, %3
  ret i1 %4
}

; Function Attrs: inlinehint nounwind
define internal i8* @at.632(%String* %this, i64 %index) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = load i64, i64* %index.addr
  store i64 %4, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %3, i64 %5)
  %6 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %7 = call i8* @value(%"RawPtr[Char]" %6)
  ret i8* %7
}

; Function Attrs: inlinehint nounwind
define internal i8* @front.633(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = call i8* @value(%"RawPtr[Char]" %3)
  ret i8* %4
}

; Function Attrs: inlinehint nounwind
define internal i8* @back.634(%String* %this) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 1
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  store i64 -1, i64* %tmp.this
  %4 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %3, i64 %4)
  %5 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %6 = call i8* @value(%"RawPtr[Char]" %5)
  ret i8* %6
}

; Function Attrs: inlinehint nounwind
define internal %StringRef @subrange(%String* %this, i64 %index, i64 %num) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %num.addr = alloca i64
  store i64 %num, i64* %num.addr
  %tmp.this = alloca %StringRef
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this1 = alloca i64
  %"$tmpC2" = alloca %"RawPtr[Char]"
  %tmp.this3 = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = getelementptr inbounds %String, %String* %1, i32 0, i32 0
  %3 = load %"RawPtr[Char]", %"RawPtr[Char]"* %2
  %4 = load i64, i64* %index.addr
  store i64 %4, i64* %tmp.this1
  %5 = load i64, i64* %tmp.this1
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %3, i64 %5)
  %6 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %7 = call i8* @bytePtr(%"RawPtr[Char]" %6)
  %8 = load %String*, %String** %this.addr
  %9 = getelementptr inbounds %String, %String* %8, i32 0, i32 0
  %10 = load %"RawPtr[Char]", %"RawPtr[Char]"* %9
  %11 = load i64, i64* %index.addr
  %12 = load i64, i64* %num.addr
  %13 = add i64 %11, %12
  store i64 %13, i64* %tmp.this3
  %14 = load i64, i64* %tmp.this3
  call void @advance(%"RawPtr[Char]"* %"$tmpC2", %"RawPtr[Char]" %10, i64 %14)
  %15 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC2"
  %16 = call i8* @bytePtr(%"RawPtr[Char]" %15)
  call void @ctor.57(%StringRef* %tmp.this, i8* %7, i8* %16)
  %17 = load %StringRef, %StringRef* %tmp.this
  ret %StringRef %17
}

; Function Attrs: inlinehint nounwind
define internal void @resize(%String* %this, i64 %n) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %n.addr = alloca i64
  store i64 %n, i64* %n.addr
  %oldSize = alloca i64
  %newEnd = alloca %"RawPtr[Char]"
  %tmp.this = alloca i64
  %"$tmpC" = alloca %"RawPtr[Char]"
  %tmp.this4 = alloca i64
  %newEnd5 = alloca %"RawPtr[Char]"
  %tmp.this6 = alloca i64
  %"$tmpC11" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = call i64 @size.190(%String* %1)
  store i64 %2, i64* %oldSize
  br label %if_block

if_block:                                         ; preds = %code
  %3 = load i64, i64* %n.addr
  %4 = load i64, i64* %oldSize
  %5 = icmp eq i64 %3, %4
  br i1 %5, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  ret void

if_end:                                           ; preds = %dumy_block, %if_block
  br label %if_block1

dumy_block:                                       ; No predecessors!
  br label %if_end

if_block1:                                        ; preds = %if_end
  %6 = load i64, i64* %n.addr
  %7 = load i64, i64* %oldSize
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %if_then2, label %if_else

if_then2:                                         ; preds = %if_block1
  %9 = load %String*, %String** %this.addr
  %10 = getelementptr inbounds %String, %String* %9, i32 0, i32 0
  %11 = load %"RawPtr[Char]", %"RawPtr[Char]"* %10
  %12 = load i64, i64* %n.addr
  store i64 %12, i64* %tmp.this
  %13 = load i64, i64* %tmp.this
  call void @advance(%"RawPtr[Char]"* %newEnd, %"RawPtr[Char]" %11, i64 %13)
  br label %while_block

if_else:                                          ; preds = %if_block1
  %14 = load %String*, %String** %this.addr
  %15 = load i64, i64* %n.addr
  call void @reserve(%String* %14, i64 %15)
  %16 = load %String*, %String** %this.addr
  %17 = getelementptr inbounds %String, %String* %16, i32 0, i32 0
  %18 = load %"RawPtr[Char]", %"RawPtr[Char]"* %17
  %19 = load i64, i64* %n.addr
  store i64 %19, i64* %tmp.this6
  %20 = load i64, i64* %tmp.this6
  call void @advance(%"RawPtr[Char]"* %newEnd5, %"RawPtr[Char]" %18, i64 %20)
  br label %while_block7

if_end3:                                          ; preds = %while_end10, %while_end
  ret void

while_block:                                      ; preds = %while_step, %if_then2
  %21 = load %String*, %String** %this.addr
  %22 = getelementptr inbounds %String, %String* %21, i32 0, i32 1
  %23 = call i1 @"==.268"(%"RawPtr[Char]"* %22, %"RawPtr[Char]"* %newEnd)
  %24 = xor i1 true, %23
  br i1 %24, label %while_body, label %while_end

while_body:                                       ; preds = %while_block
  %25 = load %String*, %String** %this.addr
  %26 = getelementptr inbounds %String, %String* %25, i32 0, i32 1
  %27 = load %String*, %String** %this.addr
  %28 = getelementptr inbounds %String, %String* %27, i32 0, i32 1
  %29 = load %"RawPtr[Char]", %"RawPtr[Char]"* %28
  store i64 -1, i64* %tmp.this4
  %30 = load i64, i64* %tmp.this4
  call void @advance(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %29, i64 %30)
  call void @"=.200"(%"RawPtr[Char]"* %26, %"RawPtr[Char]"* %"$tmpC")
  %31 = load %String*, %String** %this.addr
  %32 = getelementptr inbounds %String, %String* %31, i32 0, i32 1
  %33 = load %"RawPtr[Char]", %"RawPtr[Char]"* %32
  %34 = call i8* @value(%"RawPtr[Char]" %33)
  %35 = load i8, i8* %34
  br label %while_step

while_step:                                       ; preds = %while_body
  br label %while_block

while_end:                                        ; preds = %while_block
  br label %if_end3

while_block7:                                     ; preds = %while_step9, %if_else
  %36 = load %String*, %String** %this.addr
  %37 = getelementptr inbounds %String, %String* %36, i32 0, i32 1
  %38 = call i1 @"==.268"(%"RawPtr[Char]"* %37, %"RawPtr[Char]"* %newEnd5)
  %39 = xor i1 true, %38
  br i1 %39, label %while_body8, label %while_end10

while_body8:                                      ; preds = %while_block7
  %40 = load %String*, %String** %this.addr
  %41 = getelementptr inbounds %String, %String* %40, i32 0, i32 1
  %42 = load %"RawPtr[Char]", %"RawPtr[Char]"* %41
  %43 = call i8* @value(%"RawPtr[Char]" %42)
  store i8 0, i8* %43
  %44 = load %String*, %String** %this.addr
  %45 = getelementptr inbounds %String, %String* %44, i32 0, i32 1
  %46 = load %String*, %String** %this.addr
  %47 = getelementptr inbounds %String, %String* %46, i32 0, i32 1
  %48 = load %"RawPtr[Char]", %"RawPtr[Char]"* %47
  call void @advance.269(%"RawPtr[Char]"* %"$tmpC11", %"RawPtr[Char]" %48)
  call void @"=.200"(%"RawPtr[Char]"* %45, %"RawPtr[Char]"* %"$tmpC11")
  br label %while_step9

while_step9:                                      ; preds = %while_body8
  br label %while_block7

while_end10:                                      ; preds = %while_block7
  br label %if_end3
}

; Function Attrs: inlinehint nounwind
define internal void @insertAfter(%String* %this, i8 %value, %StringRef %pos) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %value.addr = alloca i8
  store i8 %value, i8* %value.addr
  %pos.addr = alloca %StringRef
  store %StringRef %pos, %StringRef* %pos.addr
  %tmp.this = alloca %StringRef
  %"$tmpC" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = load i8, i8* %value.addr
  %3 = load %StringRef, %StringRef* %pos.addr
  call void @_backPtr(%"RawPtr[Char]"* %"$tmpC", %StringRef %3)
  %4 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %5 = call i8* @bytePtr(%"RawPtr[Char]" %4)
  %6 = load %String*, %String** %this.addr
  %7 = getelementptr inbounds %String, %String* %6, i32 0, i32 1
  %8 = load %"RawPtr[Char]", %"RawPtr[Char]"* %7
  %9 = call i8* @bytePtr(%"RawPtr[Char]" %8)
  call void @ctor.57(%StringRef* %tmp.this, i8* %5, i8* %9)
  %10 = load %StringRef, %StringRef* %tmp.this
  call void @insertBefore.482(%String* %1, i8 %2, %StringRef %10)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @_backPtr(%"RawPtr[Char]"* sret %_result, %StringRef %s) #4 {
  %_result.addr = alloca %"RawPtr[Char]"*
  store %"RawPtr[Char]"* %_result, %"RawPtr[Char]"** %_result.addr
  %s.addr = alloca %StringRef
  store %StringRef %s, %StringRef* %s.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"RawPtr[Char]"*, %"RawPtr[Char]"** %_result.addr
  %2 = getelementptr inbounds %StringRef, %StringRef* %s.addr, i32 0, i32 1
  %3 = load i8*, i8** %2
  call void @ctor.194(%"RawPtr[Char]"* %1, i8* %3)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @remove.635(%String* %this, i64 %index) #4 {
  %this.addr = alloca %String*
  store %String* %this, %String** %this.addr
  %index.addr = alloca i64
  store i64 %index, i64* %index.addr
  %r = alloca %StringRef
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %this.addr
  %2 = call %StringRef @all.485(%String* %1)
  call void @ctor.56(%StringRef* %r, %StringRef %2)
  %3 = load i64, i64* %index.addr
  call void @popFront.60(%StringRef* %r, i64 %3)
  %4 = load %String*, %String** %this.addr
  %5 = call i64 @size.190(%String* %4)
  %6 = load i64, i64* %index.addr
  %7 = call i64 @_SizeType_opMinus(i64 %5, i64 %6)
  store i64 1, i64* %tmp.this
  %8 = load i64, i64* %tmp.this
  %9 = call i64 @_SizeType_opMinus(i64 %7, i64 %8)
  call void @popBack.61(%StringRef* %r, i64 %9)
  %10 = load %String*, %String** %this.addr
  %11 = load %StringRef, %StringRef* %r
  call void @remove(%String* %10, %StringRef %11)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"+.636"(%String* sret %_result, %String %x, %String %y) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %x.addr = alloca %String
  store %String %x, %String* %x.addr
  %y.addr = alloca %String
  store %String %y, %String* %y.addr
  %sz1 = alloca i64
  %sz2 = alloca i64
  %res = alloca %String
  %"$tmpC" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = call i64 @size.190(%String* %x.addr)
  store i64 %1, i64* %sz1
  %2 = call i64 @size.190(%String* %y.addr)
  store i64 %2, i64* %sz2
  %3 = load i64, i64* %sz1
  %4 = load i64, i64* %sz2
  %5 = add i64 %3, %4
  call void @ctor.191(%String* %res, i64 %5)
  %6 = getelementptr inbounds %String, %String* %res, i32 0, i32 0
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %6
  %8 = call i8* @bytePtr(%"RawPtr[Char]" %7)
  %9 = getelementptr inbounds %String, %String* %x.addr, i32 0, i32 0
  %10 = load %"RawPtr[Char]", %"RawPtr[Char]"* %9
  %11 = call i8* @bytePtr(%"RawPtr[Char]" %10)
  %12 = load i64, i64* %sz1
  call void @_spr_memcpy(i8* %8, i8* %11, i64 %12)
  %13 = getelementptr inbounds %String, %String* %res, i32 0, i32 0
  %14 = load %"RawPtr[Char]", %"RawPtr[Char]"* %13
  %15 = load i64, i64* %sz1
  call void @advance.201(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %14, i64 %15)
  %16 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %17 = call i8* @bytePtr(%"RawPtr[Char]" %16)
  %18 = getelementptr inbounds %String, %String* %y.addr, i32 0, i32 0
  %19 = load %"RawPtr[Char]", %"RawPtr[Char]"* %18
  %20 = call i8* @bytePtr(%"RawPtr[Char]" %19)
  %21 = load i64, i64* %sz2
  call void @_spr_memcpy(i8* %17, i8* %20, i64 %21)
  %22 = load %String*, %String** %_result.addr
  call void @ctor.189(%String* %22, %String* %res)
  call void @dtor.261(%String* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %res)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @"+.637"(%String* sret %_result, %String %x, %StringRef %y) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %x.addr = alloca %String
  store %String %x, %String* %x.addr
  %y.addr = alloca %StringRef
  store %StringRef %y, %StringRef* %y.addr
  %sz1 = alloca i64
  %sz2 = alloca i64
  %res = alloca %String
  %"$tmpC" = alloca %"RawPtr[Char]"
  br label %code

code:                                             ; preds = %0
  %1 = call i64 @size.190(%String* %x.addr)
  store i64 %1, i64* %sz1
  %2 = call i64 @size(%StringRef* %y.addr)
  store i64 %2, i64* %sz2
  %3 = load i64, i64* %sz1
  %4 = load i64, i64* %sz2
  %5 = add i64 %3, %4
  call void @ctor.191(%String* %res, i64 %5)
  %6 = getelementptr inbounds %String, %String* %res, i32 0, i32 0
  %7 = load %"RawPtr[Char]", %"RawPtr[Char]"* %6
  %8 = call i8* @bytePtr(%"RawPtr[Char]" %7)
  %9 = getelementptr inbounds %String, %String* %x.addr, i32 0, i32 0
  %10 = load %"RawPtr[Char]", %"RawPtr[Char]"* %9
  %11 = call i8* @bytePtr(%"RawPtr[Char]" %10)
  %12 = load i64, i64* %sz1
  call void @_spr_memcpy(i8* %8, i8* %11, i64 %12)
  %13 = getelementptr inbounds %String, %String* %res, i32 0, i32 0
  %14 = load %"RawPtr[Char]", %"RawPtr[Char]"* %13
  %15 = load i64, i64* %sz1
  call void @advance.201(%"RawPtr[Char]"* %"$tmpC", %"RawPtr[Char]" %14, i64 %15)
  %16 = load %"RawPtr[Char]", %"RawPtr[Char]"* %"$tmpC"
  %17 = call i8* @bytePtr(%"RawPtr[Char]" %16)
  %18 = getelementptr inbounds %StringRef, %StringRef* %y.addr, i32 0, i32 0
  %19 = load i8*, i8** %18
  %20 = load i64, i64* %sz2
  call void @_spr_memcpy(i8* %17, i8* %19, i64 %20)
  %21 = load %String*, %String** %_result.addr
  call void @ctor.189(%String* %21, %String* %res)
  call void @dtor.261(%String* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %res)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.638(%StringOutputStream* %this, %StringOutputStream* %other) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %other.addr = alloca %StringOutputStream*
  store %StringOutputStream* %other, %StringOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load %StringOutputStream*, %StringOutputStream** %other.addr
  %4 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %3, i32 0, i32 0
  call void @ctor.189(%String* %2, %String* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.639"(%StringOutputStream* %this, %StringOutputStream* %other) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %other.addr = alloca %StringOutputStream*
  store %StringOutputStream* %other, %StringOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load %StringOutputStream*, %StringOutputStream** %other.addr
  %4 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %3, i32 0, i32 0
  %5 = call %String* @"=.290"(%String* %2, %String* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.640"(%StringOutputStream* %this, %StringOutputStream* %other) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %other.addr = alloca %StringOutputStream*
  store %StringOutputStream* %other, %StringOutputStream** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load %StringOutputStream*, %StringOutputStream** %other.addr
  %4 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %3, i32 0, i32 0
  %5 = call i1 @"==.343"(%String* %2, %String* %4)
  ret i1 %5
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.641"(%StringOutputStream* %this, %String* %s) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %s.addr = alloca %String*
  store %String* %s, %String** %s.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load %String*, %String** %s.addr
  %4 = call %StringRef @all.485(%String* %3)
  call void @append(%String* %2, %StringRef %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"<<<.642"(%StringOutputStream* %this, double %x) #3 {
  %this.addr = alloca %StringOutputStream*
  store %StringOutputStream* %this, %StringOutputStream** %this.addr
  %x.addr = alloca double
  store double %x, double* %x.addr
  %"$tmpC" = alloca %String
  %tmp.this = alloca i64
  br label %code

code:                                             ; preds = %0
  %1 = load %StringOutputStream*, %StringOutputStream** %this.addr
  %2 = getelementptr inbounds %StringOutputStream, %StringOutputStream* %1, i32 0, i32 0
  %3 = load double, double* %x.addr
  %4 = fptoui double %3 to i64
  store i64 %4, i64* %tmp.this
  %5 = load i64, i64* %tmp.this
  call void @ulongToString(%String* %"$tmpC", i64 %5)
  %6 = call %StringRef @all.485(%String* %"$tmpC")
  call void @append(%String* %2, %StringRef %6)
  call void @dtor.261(%String* %"$tmpC")
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @toString.643(%String* sret %_result) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %String*, %String** %_result.addr
  call void @ctor.137(%String* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.644(%"ContiguousMemoryRange[LocString]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %1, i32 0, i32 0
  call void @ctor.561(%"RawPtr[LocString]"* %2)
  %3 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %3, i32 0, i32 1
  call void @ctor.561(%"RawPtr[LocString]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.645(%"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %other, %"ContiguousMemoryRange[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %3, i32 0, i32 0
  call void @ctor.585(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %4)
  %5 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %5, i32 0, i32 1
  %7 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %8 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %7, i32 0, i32 1
  call void @ctor.585(%"RawPtr[LocString]"* %6, %"RawPtr[LocString]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.646(%"ContiguousMemoryRange[LocString]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.647"(%"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %other, %"ContiguousMemoryRange[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %3, i32 0, i32 0
  call void @"=.571"(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %4)
  %5 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %5, i32 0, i32 1
  %7 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %8 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %7, i32 0, i32 1
  call void @"=.571"(%"RawPtr[LocString]"* %6, %"RawPtr[LocString]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.648"(%"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %this, %"ContiguousMemoryRange[LocString]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[LocString]"*
  store %"ContiguousMemoryRange[LocString]"* %other, %"ContiguousMemoryRange[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %3, i32 0, i32 0
  %5 = call i1 @"==.564"(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %this.addr
  %7 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %6, i32 0, i32 1
  %8 = load %"ContiguousMemoryRange[LocString]"*, %"ContiguousMemoryRange[LocString]"** %other.addr
  %9 = getelementptr inbounds %"ContiguousMemoryRange[LocString]", %"ContiguousMemoryRange[LocString]"* %8, i32 0, i32 1
  %10 = call i1 @"==.564"(%"RawPtr[LocString]"* %7, %"RawPtr[LocString]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.649(%"ContiguousMemoryRange[Char]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 0
  call void @ctor.138(%"RawPtr[Char]"* %2)
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 1
  call void @ctor.138(%"RawPtr[Char]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.650(%"ContiguousMemoryRange[Char]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.651"(%"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %other, %"ContiguousMemoryRange[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 0
  call void @"=.200"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  %5 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %5, i32 0, i32 1
  %7 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %8 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %7, i32 0, i32 1
  call void @"=.200"(%"RawPtr[Char]"* %6, %"RawPtr[Char]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.652"(%"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %this, %"ContiguousMemoryRange[Char]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[Char]"*
  store %"ContiguousMemoryRange[Char]"* %other, %"ContiguousMemoryRange[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %3, i32 0, i32 0
  %5 = call i1 @"==.268"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %this.addr
  %7 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %6, i32 0, i32 1
  %8 = load %"ContiguousMemoryRange[Char]"*, %"ContiguousMemoryRange[Char]"** %other.addr
  %9 = getelementptr inbounds %"ContiguousMemoryRange[Char]", %"ContiguousMemoryRange[Char]"* %8, i32 0, i32 1
  %10 = call i1 @"==.268"(%"RawPtr[Char]"* %7, %"RawPtr[Char]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.653(%"ContiguousMemoryRange[Token]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 0
  call void @ctor.150(%"RawPtr[Token]"* %2)
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 1
  call void @ctor.150(%"RawPtr[Token]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.654(%"ContiguousMemoryRange[Token]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.655"(%"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %other, %"ContiguousMemoryRange[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 0
  call void @"=.212"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  %5 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %5, i32 0, i32 1
  %7 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %8 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %7, i32 0, i32 1
  call void @"=.212"(%"RawPtr[Token]"* %6, %"RawPtr[Token]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.656"(%"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %this, %"ContiguousMemoryRange[Token]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[Token]"*
  store %"ContiguousMemoryRange[Token]"* %other, %"ContiguousMemoryRange[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %3, i32 0, i32 0
  %5 = call i1 @"==.218"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %this.addr
  %7 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %6, i32 0, i32 1
  %8 = load %"ContiguousMemoryRange[Token]"*, %"ContiguousMemoryRange[Token]"** %other.addr
  %9 = getelementptr inbounds %"ContiguousMemoryRange[Token]", %"ContiguousMemoryRange[Token]"* %8, i32 0, i32 1
  %10 = call i1 @"==.218"(%"RawPtr[Token]"* %7, %"RawPtr[Token]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.657(%"ContiguousMemoryRange[UInt]"* %this, %"RawPtr[UInt]" %f_begin, %"RawPtr[UInt]" %f_end) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[UInt]"*
  store %"ContiguousMemoryRange[UInt]"* %this, %"ContiguousMemoryRange[UInt]"** %this.addr
  %f_begin.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %f_begin, %"RawPtr[UInt]"* %f_begin.addr
  %f_end.addr = alloca %"RawPtr[UInt]"
  store %"RawPtr[UInt]" %f_end, %"RawPtr[UInt]"* %f_end.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %1, i32 0, i32 0
  call void @ctor.230(%"RawPtr[UInt]"* %2, %"RawPtr[UInt]"* %f_begin.addr)
  %3 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %3, i32 0, i32 1
  call void @ctor.230(%"RawPtr[UInt]"* %4, %"RawPtr[UInt]"* %f_end.addr)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.658(%"ContiguousMemoryRange[UInt]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[UInt]"*
  store %"ContiguousMemoryRange[UInt]"* %this, %"ContiguousMemoryRange[UInt]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %1, i32 0, i32 0
  call void @ctor.152(%"RawPtr[UInt]"* %2)
  %3 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %3, i32 0, i32 1
  call void @ctor.152(%"RawPtr[UInt]"* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.659(%"ContiguousMemoryRange[UInt]"* %this, %"ContiguousMemoryRange[UInt]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[UInt]"*
  store %"ContiguousMemoryRange[UInt]"* %this, %"ContiguousMemoryRange[UInt]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[UInt]"*
  store %"ContiguousMemoryRange[UInt]"* %other, %"ContiguousMemoryRange[UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %3, i32 0, i32 0
  call void @ctor.230(%"RawPtr[UInt]"* %2, %"RawPtr[UInt]"* %4)
  %5 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %5, i32 0, i32 1
  %7 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %other.addr
  %8 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %7, i32 0, i32 1
  call void @ctor.230(%"RawPtr[UInt]"* %6, %"RawPtr[UInt]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.660(%"ContiguousMemoryRange[UInt]"* %this) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[UInt]"*
  store %"ContiguousMemoryRange[UInt]"* %this, %"ContiguousMemoryRange[UInt]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.661"(%"ContiguousMemoryRange[UInt]"* %this, %"ContiguousMemoryRange[UInt]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[UInt]"*
  store %"ContiguousMemoryRange[UInt]"* %this, %"ContiguousMemoryRange[UInt]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[UInt]"*
  store %"ContiguousMemoryRange[UInt]"* %other, %"ContiguousMemoryRange[UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %3, i32 0, i32 0
  call void @"=.225"(%"RawPtr[UInt]"* %2, %"RawPtr[UInt]"* %4)
  %5 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %6 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %5, i32 0, i32 1
  %7 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %other.addr
  %8 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %7, i32 0, i32 1
  call void @"=.225"(%"RawPtr[UInt]"* %6, %"RawPtr[UInt]"* %8)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.662"(%"ContiguousMemoryRange[UInt]"* %this, %"ContiguousMemoryRange[UInt]"* %other) #3 {
  %this.addr = alloca %"ContiguousMemoryRange[UInt]"*
  store %"ContiguousMemoryRange[UInt]"* %this, %"ContiguousMemoryRange[UInt]"** %this.addr
  %other.addr = alloca %"ContiguousMemoryRange[UInt]"*
  store %"ContiguousMemoryRange[UInt]"* %other, %"ContiguousMemoryRange[UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %2 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %1, i32 0, i32 0
  %3 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %other.addr
  %4 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %3, i32 0, i32 0
  %5 = call i1 @"==.271"(%"RawPtr[UInt]"* %2, %"RawPtr[UInt]"* %4)
  br i1 %5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %code
  %6 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %this.addr
  %7 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %6, i32 0, i32 1
  %8 = load %"ContiguousMemoryRange[UInt]"*, %"ContiguousMemoryRange[UInt]"** %other.addr
  %9 = getelementptr inbounds %"ContiguousMemoryRange[UInt]", %"ContiguousMemoryRange[UInt]"* %8, i32 0, i32 1
  %10 = call i1 @"==.271"(%"RawPtr[UInt]"* %7, %"RawPtr[UInt]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %code
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.663(%"RawPtr[LocString]"* %this) #3 {
  %this.addr = alloca %"RawPtr[LocString]"*
  store %"RawPtr[LocString]"* %this, %"RawPtr[LocString]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.664(%"RawPtr[Token]"* %this) #3 {
  %this.addr = alloca %"RawPtr[Token]"*
  store %"RawPtr[Token]"* %this, %"RawPtr[Token]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.665(%"RawPtr[UInt]"* %this) #3 {
  %this.addr = alloca %"RawPtr[UInt]"*
  store %"RawPtr[UInt]"* %this, %"RawPtr[UInt]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.666(%"NumericRangeInc[Int]"* %this) #3 {
  %this.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %1, i32 0, i32 0
  store i32 0, i32* %2
  %3 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %4 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %3, i32 0, i32 1
  store i32 0, i32* %4
  %5 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %6 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %5, i32 0, i32 2
  store i1 false, i1* %6
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.667(%"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"* %other) #3 {
  %this.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"** %this.addr
  %other.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %other, %"NumericRangeInc[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %5 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %4, i32 0, i32 0
  store i32 %3, i32* %5
  %6 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %7 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %6, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %10 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %9, i32 0, i32 1
  store i32 %8, i32* %10
  %11 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %12 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %11, i32 0, i32 2
  %13 = load i1, i1* %12
  %14 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %15 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %14, i32 0, i32 2
  store i1 %13, i1* %15
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.668"(%"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"* %other) #3 {
  %this.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"** %this.addr
  %other.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %other, %"NumericRangeInc[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %5 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %4, i32 0, i32 0
  store i32 %3, i32* %5
  %6 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %7 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %6, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %10 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %9, i32 0, i32 1
  store i32 %8, i32* %10
  %11 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %12 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %11, i32 0, i32 2
  %13 = load i1, i1* %12
  %14 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %15 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %14, i32 0, i32 2
  store i1 %13, i1* %15
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.669"(%"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"* %other) #3 {
  %this.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %this, %"NumericRangeInc[Int]"** %this.addr
  %other.addr = alloca %"NumericRangeInc[Int]"*
  store %"NumericRangeInc[Int]"* %other, %"NumericRangeInc[Int]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %2 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %5 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %4, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = icmp eq i32 %3, %6
  br i1 %7, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %8 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %9 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %8, i32 0, i32 2
  %10 = load i1, i1* %9
  %11 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %12 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %11, i32 0, i32 2
  %13 = load i1, i1* %12
  %14 = icmp eq i1 %10, %13
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %14, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %15 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %this.addr
  %16 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %15, i32 0, i32 1
  %17 = load i32, i32* %16
  %18 = load %"NumericRangeInc[Int]"*, %"NumericRangeInc[Int]"** %other.addr
  %19 = getelementptr inbounds %"NumericRangeInc[Int]", %"NumericRangeInc[Int]"* %18, i32 0, i32 1
  %20 = load i32, i32* %19
  %21 = icmp eq i32 %17, %20
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %21, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sqrt.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sin.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.cos.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.powi.f32(float, i32) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.pow.f32(float, float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.exp.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.exp2.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.log.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.log10.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.log2.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

declare float @llvm.truc.f32(float)

; Function Attrs: nounwind readnone speculatable
declare float @llvm.rint.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sin.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.powi.f64(double, i32) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.pow.f64(double, double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp2.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log10.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log2.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #6

declare double @llvm.truc.f64(double)

; Function Attrs: nounwind readnone speculatable
declare double @llvm.rint.f64(double) #6

; Function Attrs: alwaysinline nounwind
define internal void @ctor.670(%"Vector[LocString]"* %this, %"Vector[LocString]"* %other) #3 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %other.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %other, %"Vector[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 0
  %3 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %3, i32 0, i32 0
  call void @ctor.585(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %4)
  %5 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %6 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %5, i32 0, i32 1
  %7 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %8 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %7, i32 0, i32 1
  call void @ctor.585(%"RawPtr[LocString]"* %6, %"RawPtr[LocString]"* %8)
  %9 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %10 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %9, i32 0, i32 2
  %11 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %12 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %11, i32 0, i32 2
  call void @ctor.585(%"RawPtr[LocString]"* %10, %"RawPtr[LocString]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.671(%"Vector[LocString]"* %this) #3 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.672"(%"Vector[LocString]"* %this, %"Vector[LocString]"* %other) #3 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %other.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %other, %"Vector[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 0
  %3 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %3, i32 0, i32 0
  call void @"=.571"(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %4)
  %5 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %6 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %5, i32 0, i32 1
  %7 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %8 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %7, i32 0, i32 1
  call void @"=.571"(%"RawPtr[LocString]"* %6, %"RawPtr[LocString]"* %8)
  %9 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %10 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %9, i32 0, i32 2
  %11 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %12 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %11, i32 0, i32 2
  call void @"=.571"(%"RawPtr[LocString]"* %10, %"RawPtr[LocString]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.673"(%"Vector[LocString]"* %this, %"Vector[LocString]"* %other) #3 {
  %this.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %this, %"Vector[LocString]"** %this.addr
  %other.addr = alloca %"Vector[LocString]"*
  store %"Vector[LocString]"* %other, %"Vector[LocString]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %2 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %1, i32 0, i32 0
  %3 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %4 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %3, i32 0, i32 0
  %5 = call i1 @"==.564"(%"RawPtr[LocString]"* %2, %"RawPtr[LocString]"* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %7 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %6, i32 0, i32 2
  %8 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %9 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %8, i32 0, i32 2
  %10 = call i1 @"==.564"(%"RawPtr[LocString]"* %7, %"RawPtr[LocString]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %"Vector[LocString]"*, %"Vector[LocString]"** %this.addr
  %12 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %11, i32 0, i32 1
  %13 = load %"Vector[LocString]"*, %"Vector[LocString]"** %other.addr
  %14 = getelementptr inbounds %"Vector[LocString]", %"Vector[LocString]"* %13, i32 0, i32 1
  %15 = call i1 @"==.564"(%"RawPtr[LocString]"* %12, %"RawPtr[LocString]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.674(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #3 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 0
  call void @ctor.192(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  %5 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %5, i32 0, i32 1
  %7 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %8 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %7, i32 0, i32 1
  call void @ctor.192(%"RawPtr[Char]"* %6, %"RawPtr[Char]"* %8)
  %9 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %10 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %9, i32 0, i32 2
  %11 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %12 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %11, i32 0, i32 2
  call void @ctor.192(%"RawPtr[Char]"* %10, %"RawPtr[Char]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.675(%"Vector[Char]"* %this) #3 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.676"(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #3 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 0
  call void @"=.200"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  %5 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %5, i32 0, i32 1
  %7 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %8 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %7, i32 0, i32 1
  call void @"=.200"(%"RawPtr[Char]"* %6, %"RawPtr[Char]"* %8)
  %9 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %10 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %9, i32 0, i32 2
  %11 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %12 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %11, i32 0, i32 2
  call void @"=.200"(%"RawPtr[Char]"* %10, %"RawPtr[Char]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.677"(%"Vector[Char]"* %this, %"Vector[Char]"* %other) #3 {
  %this.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %this, %"Vector[Char]"** %this.addr
  %other.addr = alloca %"Vector[Char]"*
  store %"Vector[Char]"* %other, %"Vector[Char]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %1, i32 0, i32 0
  %3 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %4 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %3, i32 0, i32 0
  %5 = call i1 @"==.268"(%"RawPtr[Char]"* %2, %"RawPtr[Char]"* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %7 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %6, i32 0, i32 2
  %8 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %8, i32 0, i32 2
  %10 = call i1 @"==.268"(%"RawPtr[Char]"* %7, %"RawPtr[Char]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %"Vector[Char]"*, %"Vector[Char]"** %this.addr
  %12 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %11, i32 0, i32 1
  %13 = load %"Vector[Char]"*, %"Vector[Char]"** %other.addr
  %14 = getelementptr inbounds %"Vector[Char]", %"Vector[Char]"* %13, i32 0, i32 1
  %15 = call i1 @"==.268"(%"RawPtr[Char]"* %12, %"RawPtr[Char]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.678(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #3 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 0
  call void @ctor.217(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  %5 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %5, i32 0, i32 1
  %7 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %8 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %7, i32 0, i32 1
  call void @ctor.217(%"RawPtr[Token]"* %6, %"RawPtr[Token]"* %8)
  %9 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %10 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %9, i32 0, i32 2
  %11 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %12 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %11, i32 0, i32 2
  call void @ctor.217(%"RawPtr[Token]"* %10, %"RawPtr[Token]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.679(%"Vector[Token]"* %this) #3 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.680"(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #3 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 0
  call void @"=.212"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  %5 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %6 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %5, i32 0, i32 1
  %7 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %8 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %7, i32 0, i32 1
  call void @"=.212"(%"RawPtr[Token]"* %6, %"RawPtr[Token]"* %8)
  %9 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %10 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %9, i32 0, i32 2
  %11 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %12 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %11, i32 0, i32 2
  call void @"=.212"(%"RawPtr[Token]"* %10, %"RawPtr[Token]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.681"(%"Vector[Token]"* %this, %"Vector[Token]"* %other) #3 {
  %this.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %this, %"Vector[Token]"** %this.addr
  %other.addr = alloca %"Vector[Token]"*
  store %"Vector[Token]"* %other, %"Vector[Token]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %2 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %1, i32 0, i32 0
  %3 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %4 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %3, i32 0, i32 0
  %5 = call i1 @"==.218"(%"RawPtr[Token]"* %2, %"RawPtr[Token]"* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %7 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %6, i32 0, i32 2
  %8 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %9 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %8, i32 0, i32 2
  %10 = call i1 @"==.218"(%"RawPtr[Token]"* %7, %"RawPtr[Token]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %"Vector[Token]"*, %"Vector[Token]"** %this.addr
  %12 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %11, i32 0, i32 1
  %13 = load %"Vector[Token]"*, %"Vector[Token]"** %other.addr
  %14 = getelementptr inbounds %"Vector[Token]", %"Vector[Token]"* %13, i32 0, i32 1
  %15 = call i1 @"==.218"(%"RawPtr[Token]"* %12, %"RawPtr[Token]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.682(%"Vector[UInt]"* %this, %"Vector[UInt]"* %other) #3 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %other.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %other, %"Vector[UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 0
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %4 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %3, i32 0, i32 0
  call void @ctor.230(%"RawPtr[UInt]"* %2, %"RawPtr[UInt]"* %4)
  %5 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %6 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %5, i32 0, i32 1
  %7 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %8 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %7, i32 0, i32 1
  call void @ctor.230(%"RawPtr[UInt]"* %6, %"RawPtr[UInt]"* %8)
  %9 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %10 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %9, i32 0, i32 2
  %11 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %12 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %11, i32 0, i32 2
  call void @ctor.230(%"RawPtr[UInt]"* %10, %"RawPtr[UInt]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.683(%"Vector[UInt]"* %this) #3 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.684"(%"Vector[UInt]"* %this, %"Vector[UInt]"* %other) #3 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %other.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %other, %"Vector[UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 0
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %4 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %3, i32 0, i32 0
  call void @"=.225"(%"RawPtr[UInt]"* %2, %"RawPtr[UInt]"* %4)
  %5 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %6 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %5, i32 0, i32 1
  %7 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %8 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %7, i32 0, i32 1
  call void @"=.225"(%"RawPtr[UInt]"* %6, %"RawPtr[UInt]"* %8)
  %9 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %10 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %9, i32 0, i32 2
  %11 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %12 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %11, i32 0, i32 2
  call void @"=.225"(%"RawPtr[UInt]"* %10, %"RawPtr[UInt]"* %12)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.685"(%"Vector[UInt]"* %this, %"Vector[UInt]"* %other) #3 {
  %this.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %this, %"Vector[UInt]"** %this.addr
  %other.addr = alloca %"Vector[UInt]"*
  store %"Vector[UInt]"* %other, %"Vector[UInt]"** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %2 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %1, i32 0, i32 0
  %3 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %4 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %3, i32 0, i32 0
  %5 = call i1 @"==.271"(%"RawPtr[UInt]"* %2, %"RawPtr[UInt]"* %4)
  br i1 %5, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %6 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %7 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %6, i32 0, i32 2
  %8 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %9 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %8, i32 0, i32 2
  %10 = call i1 @"==.271"(%"RawPtr[UInt]"* %7, %"RawPtr[UInt]"* %9)
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %10, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %11 = load %"Vector[UInt]"*, %"Vector[UInt]"** %this.addr
  %12 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %11, i32 0, i32 1
  %13 = load %"Vector[UInt]"*, %"Vector[UInt]"** %other.addr
  %14 = getelementptr inbounds %"Vector[UInt]", %"Vector[UInt]"* %13, i32 0, i32 1
  %15 = call i1 @"==.271"(%"RawPtr[UInt]"* %12, %"RawPtr[UInt]"* %14)
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %15, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: alwaysinline nounwind
define internal void @_returnsVoid() #3 {
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.686(%ErrorReporter* %this) #3 {
  %this.addr = alloca %ErrorReporter*
  store %ErrorReporter* %this, %ErrorReporter** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @reportError.687(%ErrorReporter %obj, %Location* %loc, %StringRef %msg) #4 {
  %obj.addr = alloca %ErrorReporter
  store %ErrorReporter %obj, %ErrorReporter* %obj.addr
  %loc.addr = alloca %Location*
  store %Location* %loc, %Location** %loc.addr
  %msg.addr = alloca %StringRef
  store %StringRef %msg, %StringRef* %msg.addr
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %obj.addr, i32 0, i32 1
  %2 = getelementptr inbounds %ErrorReporter, %ErrorReporter* %obj.addr, i32 0, i32 0
  %3 = load %UntypedPtr, %UntypedPtr* %2
  %4 = load %Location*, %Location** %loc.addr
  %5 = load %StringRef, %StringRef* %msg.addr
  call void @"().451"(%"FunctionPtr3[Void, UntypedPtr, @Location, StringRef]"* %1, %UntypedPtr %3, %Location* %4, %StringRef %5)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.688(%AstBuilder* %this) #3 {
  %this.addr = alloca %AstBuilder*
  store %AstBuilder* %this, %AstBuilder** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isAlnum(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isalnum(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @isalnum(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isBlank(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isblank(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @isblank(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isCntrl(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @iscntrl(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @iscntrl(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isGraph(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isgraph(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @isgraph(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isLower(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @islower(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @islower(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isPrint(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isprint(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @isprint(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isPunct(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @ispunct(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @ispunct(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isSpace(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isspace(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @isspace(i32)

; Function Attrs: inlinehint nounwind
define internal i1 @isUpper(i8 %c) #4 {
  %c.addr = alloca i8
  store i8 %c, i8* %c.addr
  %tmp.this = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = load i8, i8* %c.addr
  call void @_ass_32_8z(i32* %tmp.this, i8 %1)
  %2 = load i32, i32* %tmp.this
  %3 = call i32 @isupper(i32 %2)
  %4 = icmp ne i32 0, %3
  ret i1 %4
}

declare i32 @isupper(i32)

declare void @exit(i32)

; Function Attrs: inlinehint nounwind
define internal i32 @systemCall(%StringRef %cmd) #4 {
  %cmd.addr = alloca %StringRef
  store %StringRef %cmd, %StringRef* %cmd.addr
  br label %code

code:                                             ; preds = %0
  %1 = call i8* @cStr(%StringRef* %cmd.addr)
  %2 = call i32 bitcast (void (i8*)* @system to i32 (i8*)*)(i8* %1)
  ret i32 %2
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.689(%File* %this) #3 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  store i8* null, i8** %2
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.690(%File* %this, %File* %other) #3 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %other.addr = alloca %File*
  store %File* %other, %File** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %other.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %File*, %File** %this.addr
  %5 = getelementptr inbounds %File, %File* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.691(%File* %this) #3 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.692"(%File* %this, %File* %other) #3 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %other.addr = alloca %File*
  store %File* %other, %File** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %other.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %File*, %File** %this.addr
  %5 = getelementptr inbounds %File, %File* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.693"(%File* %this, %File* %other) #3 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %other.addr = alloca %File*
  store %File* %other, %File** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %File*, %File** %other.addr
  %5 = getelementptr inbounds %File, %File* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i1 @implOpRefEQ(i8* %3, i8* %6)
  ret i1 %7
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.694(%File* %this) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = load %File*, %File** %this.addr
  %4 = getelementptr inbounds %File, %File* %3, i32 0, i32 0
  store i8* null, i8** %4
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.695(%File* %this, i8* %handle) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %handle.addr = alloca i8*
  store i8* %handle, i8** %handle.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = load i8*, i8** %handle.addr
  %4 = load %File*, %File** %this.addr
  %5 = getelementptr inbounds %File, %File* %4, i32 0, i32 0
  store i8* %3, i8** %5
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.696(%File* %this, %File* %other) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %other.addr = alloca %File*
  store %File* %other, %File** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = load %File*, %File** %other.addr
  %4 = getelementptr inbounds %File, %File* %3, i32 0, i32 0
  %5 = load i8*, i8** %4
  %6 = load %File*, %File** %this.addr
  %7 = getelementptr inbounds %File, %File* %6, i32 0, i32 0
  store i8* %5, i8** %7
  %8 = load %File*, %File** %other.addr
  %9 = getelementptr inbounds %File, %File* %8, i32 0, i32 0
  store i8* null, i8** %9
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @dtor.697(%File* %this) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  call void @close(%File* %1)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @close(%File* %this) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  br label %code

code:                                             ; preds = %0
  br label %if_block

if_block:                                         ; preds = %code
  %1 = load %File*, %File** %this.addr
  %2 = call i1 @isOpen(%File* %1)
  br i1 %2, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %3 = load %File*, %File** %this.addr
  %4 = getelementptr inbounds %File, %File* %3, i32 0, i32 0
  %5 = load i8*, i8** %4
  call void @fclose(i8* %5)
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  %6 = load %File*, %File** %this.addr
  %7 = getelementptr inbounds %File, %File* %6, i32 0, i32 0
  store i8* null, i8** %7
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i1 @isOpen(%File* %this) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = call i1 @implOpRefNE(i8* %3, i8* null)
  ret i1 %4
}

declare void @fclose(i8*)

; Function Attrs: inlinehint nounwind
define internal void @"=.698"(%File* %this, %File* %other) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %other.addr = alloca %File*
  store %File* %other, %File** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %other.addr
  %2 = getelementptr inbounds %File, %File* %1, i32 0, i32 0
  %3 = load i8*, i8** %2
  %4 = load %File*, %File** %this.addr
  %5 = getelementptr inbounds %File, %File* %4, i32 0, i32 0
  store i8* %3, i8** %5
  %6 = load %File*, %File** %other.addr
  %7 = getelementptr inbounds %File, %File* %6, i32 0, i32 0
  store i8* null, i8** %7
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @openFile(%File* sret %_result, %StringRef %filename, %StringRef %mode) #4 {
  %_result.addr = alloca %File*
  store %File* %_result, %File** %_result.addr
  %filename.addr = alloca %StringRef
  store %StringRef %filename, %StringRef* %filename.addr
  %mode.addr = alloca %StringRef
  store %StringRef %mode, %StringRef* %mode.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %_result.addr
  %2 = call i8* @cStr(%StringRef* %filename.addr)
  %3 = call i8* @cStr(%StringRef* %mode.addr)
  %4 = call i8* @fopen(i8* %2, i8* %3)
  call void @ctor.695(%File* %1, i8* %4)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal i32 @flush.699(%File* %this) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %File*, %File** %this.addr
  %2 = call i1 @isOpen(%File* %1)
  br i1 %2, label %cond_alt1, label %cond_alt2

cond_alt1:                                        ; preds = %code
  %3 = load %File*, %File** %this.addr
  %4 = getelementptr inbounds %File, %File* %3, i32 0, i32 0
  %5 = load i8*, i8** %4
  %6 = call i32 bitcast (i32 (%struct._IO_FILE*)* @fflush to i32 (i8*)*)(i8* %5)
  br label %cond_end

cond_alt2:                                        ; preds = %code
  br label %cond_end

cond_end:                                         ; preds = %cond_alt2, %cond_alt1
  %cond = phi i32 [ %6, %cond_alt1 ], [ -1, %cond_alt2 ]
  ret i32 %cond
}

; Function Attrs: inlinehint nounwind
define internal void @readLine(%String* sret %_result, %File* %this) #4 {
  %_result.addr = alloca %String*
  store %String* %_result, %String** %_result.addr
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %res = alloca %String
  %tmp.this = alloca i64
  %cstr = alloca i8*
  %tmp.this1 = alloca i64
  br label %code

code:                                             ; preds = %0
  store i64 256, i64* %tmp.this
  %1 = load i64, i64* %tmp.this
  call void @ctor.191(%String* %res, i64 %1)
  store i64 0, i64* %tmp.this1
  %2 = load i64, i64* %tmp.this1
  %3 = call i8* @"().344"(%String* %res, i64 %2)
  %4 = load %File*, %File** %this.addr
  %5 = getelementptr inbounds %File, %File* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = call i8* @fgets(i8* %3, i32 256, i8* %6)
  store i8* %7, i8** %cstr
  br label %if_block

if_block:                                         ; preds = %code
  %8 = load i8*, i8** %cstr
  %9 = call i1 @implOpRefEQ(i8* %8, i8* null)
  br i1 %9, label %if_then, label %if_else

if_then:                                          ; preds = %if_block
  call void @clear(%String* %res)
  br label %if_end

if_else:                                          ; preds = %if_block
  %10 = load i8*, i8** %cstr
  %11 = call i64 @cStringLen(i8* %10)
  call void @resize(%String* %res, i64 %11)
  br label %if_end

if_end:                                           ; preds = %if_else, %if_then
  %12 = load %String*, %String** %_result.addr
  call void @ctor.189(%String* %12, %String* %res)
  call void @dtor.261(%String* %res)
  ret void

dumy_block:                                       ; No predecessors!
  call void @dtor.261(%String* %res)
  ret void
}

declare i8* @fgets(i8*, i32, i8*)

; Function Attrs: inlinehint nounwind
define internal i32 @write(%File* %this, %StringRef %data) #4 {
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  %data.addr = alloca %StringRef
  store %StringRef %data, %StringRef* %data.addr
  %res = alloca i32
  %tmp.this = alloca i32
  %tmp.this1 = alloca i32
  br label %code

code:                                             ; preds = %0
  %1 = getelementptr inbounds %StringRef, %StringRef* %data.addr, i32 0, i32 0
  %2 = load i8*, i8** %1
  store i32 1, i32* %tmp.this
  %3 = load i32, i32* %tmp.this
  %4 = call i64 @size(%StringRef* %data.addr)
  %5 = trunc i64 %4 to i32
  store i32 %5, i32* %tmp.this1
  %6 = load i32, i32* %tmp.this1
  %7 = load %File*, %File** %this.addr
  %8 = getelementptr inbounds %File, %File* %7, i32 0, i32 0
  %9 = load i8*, i8** %8
  %10 = call i32 @fwrite(i8* %2, i32 %3, i32 %6, i8* %9)
  store i32 %10, i32* %res
  %11 = load i32, i32* %res
  ret i32 %11
}

declare i32 @fwrite(i8*, i32, i32, i8*)

; Function Attrs: inlinehint nounwind
define internal void @all.700(%FileRange* sret %_result, %File* %this) #4 {
  %_result.addr = alloca %FileRange*
  store %FileRange* %_result, %FileRange** %_result.addr
  %this.addr = alloca %File*
  store %File* %this, %File** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %_result.addr
  %2 = load %File*, %File** %this.addr
  call void @ctor.701(%FileRange* %1, %File* %2)
  ret void
}

; Function Attrs: inlinehint nounwind
define internal void @ctor.701(%FileRange* %this, %File* %file) #4 {
  %this.addr = alloca %FileRange*
  store %FileRange* %this, %FileRange** %this.addr
  %file.addr = alloca %File*
  store %File* %file, %File** %file.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %this.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 0
  store %File* null, %File** %2
  %3 = load %FileRange*, %FileRange** %this.addr
  %4 = getelementptr inbounds %FileRange, %FileRange* %3, i32 0, i32 1
  store i1 false, i1* %4
  %5 = load %File*, %File** %file.addr
  %6 = load %FileRange*, %FileRange** %this.addr
  %7 = getelementptr inbounds %FileRange, %FileRange* %6, i32 0, i32 0
  store %File* %5, %File** %7
  %8 = load %FileRange*, %FileRange** %this.addr
  %9 = getelementptr inbounds %FileRange, %FileRange* %8, i32 0, i32 1
  store i1 true, i1* %9
  %10 = load %FileRange*, %FileRange** %this.addr
  %11 = getelementptr inbounds %FileRange, %FileRange* %10, i32 0, i32 2
  store i8 0, i8* %11
  br label %if_block

if_block:                                         ; preds = %code
  %12 = load %FileRange*, %FileRange** %this.addr
  %13 = getelementptr inbounds %FileRange, %FileRange* %12, i32 0, i32 0
  %14 = load %File*, %File** %13
  %15 = call i1 @isEof(%File* %14)
  %16 = xor i1 true, %15
  br i1 %16, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %17 = load %FileRange*, %FileRange** %this.addr
  %18 = getelementptr inbounds %FileRange, %FileRange* %17, i32 0, i32 0
  %19 = load %File*, %File** %18
  %20 = call i8 @readChar(%File* %19)
  %21 = load %FileRange*, %FileRange** %this.addr
  %22 = getelementptr inbounds %FileRange, %FileRange* %21, i32 0, i32 2
  store i8 %20, i8* %22
  %23 = load %FileRange*, %FileRange** %this.addr
  %24 = getelementptr inbounds %FileRange, %FileRange* %23, i32 0, i32 1
  store i1 false, i1* %24
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.702(%FileRange* %this) #3 {
  %this.addr = alloca %FileRange*
  store %FileRange* %this, %FileRange** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %this.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 0
  store %File* null, %File** %2
  %3 = load %FileRange*, %FileRange** %this.addr
  %4 = getelementptr inbounds %FileRange, %FileRange* %3, i32 0, i32 1
  store i1 false, i1* %4
  %5 = load %FileRange*, %FileRange** %this.addr
  %6 = getelementptr inbounds %FileRange, %FileRange* %5, i32 0, i32 2
  store i8 0, i8* %6
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.703(%FileRange* %this, %FileRange* %other) #3 {
  %this.addr = alloca %FileRange*
  store %FileRange* %this, %FileRange** %this.addr
  %other.addr = alloca %FileRange*
  store %FileRange* %other, %FileRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %other.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 0
  %3 = load %File*, %File** %2
  %4 = load %FileRange*, %FileRange** %this.addr
  %5 = getelementptr inbounds %FileRange, %FileRange* %4, i32 0, i32 0
  store %File* %3, %File** %5
  %6 = load %FileRange*, %FileRange** %other.addr
  %7 = getelementptr inbounds %FileRange, %FileRange* %6, i32 0, i32 1
  %8 = load i1, i1* %7
  %9 = load %FileRange*, %FileRange** %this.addr
  %10 = getelementptr inbounds %FileRange, %FileRange* %9, i32 0, i32 1
  store i1 %8, i1* %10
  %11 = load %FileRange*, %FileRange** %other.addr
  %12 = getelementptr inbounds %FileRange, %FileRange* %11, i32 0, i32 2
  %13 = load i8, i8* %12
  %14 = load %FileRange*, %FileRange** %this.addr
  %15 = getelementptr inbounds %FileRange, %FileRange* %14, i32 0, i32 2
  store i8 %13, i8* %15
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.704(%FileRange* %this) #3 {
  %this.addr = alloca %FileRange*
  store %FileRange* %this, %FileRange** %this.addr
  br label %code

code:                                             ; preds = %0
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.705"(%FileRange* %this, %FileRange* %other) #3 {
  %this.addr = alloca %FileRange*
  store %FileRange* %this, %FileRange** %this.addr
  %other.addr = alloca %FileRange*
  store %FileRange* %other, %FileRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %other.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 0
  %3 = load %File*, %File** %2
  %4 = load %FileRange*, %FileRange** %this.addr
  %5 = getelementptr inbounds %FileRange, %FileRange* %4, i32 0, i32 0
  store %File* %3, %File** %5
  %6 = load %FileRange*, %FileRange** %other.addr
  %7 = getelementptr inbounds %FileRange, %FileRange* %6, i32 0, i32 1
  %8 = load i1, i1* %7
  %9 = load %FileRange*, %FileRange** %this.addr
  %10 = getelementptr inbounds %FileRange, %FileRange* %9, i32 0, i32 1
  store i1 %8, i1* %10
  %11 = load %FileRange*, %FileRange** %other.addr
  %12 = getelementptr inbounds %FileRange, %FileRange* %11, i32 0, i32 2
  %13 = load i8, i8* %12
  %14 = load %FileRange*, %FileRange** %this.addr
  %15 = getelementptr inbounds %FileRange, %FileRange* %14, i32 0, i32 2
  store i8 %13, i8* %15
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.706"(%FileRange* %this, %FileRange* %other) #3 {
  %this.addr = alloca %FileRange*
  store %FileRange* %this, %FileRange** %this.addr
  %other.addr = alloca %FileRange*
  store %FileRange* %other, %FileRange** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %this.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 0
  %3 = load %File*, %File** %2
  %4 = bitcast %File* %3 to i8*
  %5 = load %FileRange*, %FileRange** %other.addr
  %6 = getelementptr inbounds %FileRange, %FileRange* %5, i32 0, i32 0
  %7 = load %File*, %File** %6
  %8 = bitcast %File* %7 to i8*
  %9 = call i1 @implOpRefEQ(i8* %4, i8* %8)
  br i1 %9, label %cond.true1, label %cond.false2

cond.true:                                        ; preds = %cond.end3
  %10 = load %FileRange*, %FileRange** %this.addr
  %11 = getelementptr inbounds %FileRange, %FileRange* %10, i32 0, i32 2
  %12 = load i8, i8* %11
  %13 = load %FileRange*, %FileRange** %other.addr
  %14 = getelementptr inbounds %FileRange, %FileRange* %13, i32 0, i32 2
  %15 = load i8, i8* %14
  %16 = icmp eq i8 %12, %15
  br label %cond.end

cond.false:                                       ; preds = %cond.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.res4 = phi i1 [ %16, %cond.true ], [ false, %cond.false ]
  ret i1 %cond.res4

cond.true1:                                       ; preds = %code
  %17 = load %FileRange*, %FileRange** %this.addr
  %18 = getelementptr inbounds %FileRange, %FileRange* %17, i32 0, i32 1
  %19 = load i1, i1* %18
  %20 = load %FileRange*, %FileRange** %other.addr
  %21 = getelementptr inbounds %FileRange, %FileRange* %20, i32 0, i32 1
  %22 = load i1, i1* %21
  %23 = icmp eq i1 %19, %22
  br label %cond.end3

cond.false2:                                      ; preds = %code
  br label %cond.end3

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond.res = phi i1 [ %23, %cond.true1 ], [ false, %cond.false2 ]
  br i1 %cond.res, label %cond.true, label %cond.false
}

; Function Attrs: inlinehint nounwind
define internal i1 @isEmpty.707(%FileRange* %s) #4 {
  %s.addr = alloca %FileRange*
  store %FileRange* %s, %FileRange** %s.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %s.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 1
  %3 = load i1, i1* %2
  ret i1 %3
}

; Function Attrs: inlinehint nounwind
define internal i8 @front.708(%FileRange* %s) #4 {
  %s.addr = alloca %FileRange*
  store %FileRange* %s, %FileRange** %s.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %s.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 2
  %3 = load i8, i8* %2
  ret i8 %3
}

; Function Attrs: inlinehint nounwind
define internal void @popFront.709(%FileRange* %s) #4 {
  %s.addr = alloca %FileRange*
  store %FileRange* %s, %FileRange** %s.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileRange*, %FileRange** %s.addr
  %2 = getelementptr inbounds %FileRange, %FileRange* %1, i32 0, i32 0
  %3 = load %File*, %File** %2
  %4 = call i8 @readChar(%File* %3)
  %5 = load %FileRange*, %FileRange** %s.addr
  %6 = getelementptr inbounds %FileRange, %FileRange* %5, i32 0, i32 2
  store i8 %4, i8* %6
  br label %if_block

if_block:                                         ; preds = %code
  %7 = load %FileRange*, %FileRange** %s.addr
  %8 = getelementptr inbounds %FileRange, %FileRange* %7, i32 0, i32 0
  %9 = load %File*, %File** %8
  %10 = call i1 @isEof(%File* %9)
  br i1 %10, label %if_then, label %if_end

if_then:                                          ; preds = %if_block
  %11 = load %FileRange*, %FileRange** %s.addr
  %12 = getelementptr inbounds %FileRange, %FileRange* %11, i32 0, i32 1
  store i1 true, i1* %12
  br label %if_end

if_end:                                           ; preds = %if_then, %if_block
  ret void
}

declare i32 @fread(i8*, i32, i32, i8*)

; Function Attrs: alwaysinline nounwind
define internal void @ctor.710(%FileCharSource* %this) #3 {
  %this.addr = alloca %FileCharSource*
  store %FileCharSource* %this, %FileCharSource** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileCharSource*, %FileCharSource** %this.addr
  %2 = getelementptr inbounds %FileCharSource, %FileCharSource* %1, i32 0, i32 0
  call void @ctor.694(%File* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @ctor.711(%FileCharSource* %this, %FileCharSource* %other) #3 {
  %this.addr = alloca %FileCharSource*
  store %FileCharSource* %this, %FileCharSource** %this.addr
  %other.addr = alloca %FileCharSource*
  store %FileCharSource* %other, %FileCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileCharSource*, %FileCharSource** %this.addr
  %2 = getelementptr inbounds %FileCharSource, %FileCharSource* %1, i32 0, i32 0
  %3 = load %FileCharSource*, %FileCharSource** %other.addr
  %4 = getelementptr inbounds %FileCharSource, %FileCharSource* %3, i32 0, i32 0
  call void @ctor.696(%File* %2, %File* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @dtor.712(%FileCharSource* %this) #3 {
  %this.addr = alloca %FileCharSource*
  store %FileCharSource* %this, %FileCharSource** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileCharSource*, %FileCharSource** %this.addr
  %2 = getelementptr inbounds %FileCharSource, %FileCharSource* %1, i32 0, i32 0
  call void @dtor.697(%File* %2)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal void @"=.713"(%FileCharSource* %this, %FileCharSource* %other) #3 {
  %this.addr = alloca %FileCharSource*
  store %FileCharSource* %this, %FileCharSource** %this.addr
  %other.addr = alloca %FileCharSource*
  store %FileCharSource* %other, %FileCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileCharSource*, %FileCharSource** %this.addr
  %2 = getelementptr inbounds %FileCharSource, %FileCharSource* %1, i32 0, i32 0
  %3 = load %FileCharSource*, %FileCharSource** %other.addr
  %4 = getelementptr inbounds %FileCharSource, %FileCharSource* %3, i32 0, i32 0
  call void @"=.698"(%File* %2, %File* %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define internal i1 @"==.714"(%FileCharSource* %this, %FileCharSource* %other) #3 {
  %this.addr = alloca %FileCharSource*
  store %FileCharSource* %this, %FileCharSource** %this.addr
  %other.addr = alloca %FileCharSource*
  store %FileCharSource* %other, %FileCharSource** %other.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileCharSource*, %FileCharSource** %this.addr
  %2 = getelementptr inbounds %FileCharSource, %FileCharSource* %1, i32 0, i32 0
  %3 = load %FileCharSource*, %FileCharSource** %other.addr
  %4 = getelementptr inbounds %FileCharSource, %FileCharSource* %3, i32 0, i32 0
  %5 = call i1 @"==.693"(%File* %2, %File* %4)
  ret i1 %5
}

; Function Attrs: inlinehint nounwind
define internal i1 @isValid(%FileCharSource* %this) #4 {
  %this.addr = alloca %FileCharSource*
  store %FileCharSource* %this, %FileCharSource** %this.addr
  br label %code

code:                                             ; preds = %0
  %1 = load %FileCharSource*, %FileCharSource** %this.addr
  %2 = getelementptr inbounds %FileCharSource, %FileCharSource* %1, i32 0, i32 0
  %3 = call i1 @isOpen(%File* %2)
  ret i1 %3
}

attributes #0 = { alwaysinline }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline nounwind }
attributes #4 = { inlinehint nounwind }
attributes #5 = { noinline nounwind }
attributes #6 = { nounwind readnone speculatable }
