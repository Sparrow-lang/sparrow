import parserIf, parser
import parserDefs
import scanner

import os
import std.ranges
import std.vector
import std.newDelete

var _nullNodeImpl: NodeImpl

datatype NodeImpl
    kind: String
    loc: Location
    name: String
    children: Vector(Node)

fun ctor(this: @NodeImpl)
    this.kind ctor "<null>"
fun ctor(this: @NodeImpl, l: Location, kind: StringRef)
    this.kind ctor kind
    this.loc ctor l
    // cout << "Parsed: " << kind << endl
fun ctor(this: @NodeImpl, l: Location, kind: StringRef, r: Range)
    this.kind ctor kind
    this.loc ctor l
    children ctor r
    // cout << "Parsed: " << kind << endl
fun ctor(this: @NodeImpl, l: Location, kind: StringRef, r: Range, name: StringRef)
    this.kind ctor kind
    this.loc ctor l
    this.name ctor name
    children ctor r
    // cout << "Parsed: " << kind << endl

fun toImpl(n: Node): @NodeImpl = ife(n.data.data !== null, reinterpretCast(@NodeImpl, n.data.data), _nullNodeImpl)
fun toNode(impl: @NodeImpl)    = Node(UntypedPtr(reinterpretCast(@Byte, impl)))

fun >> (n: @NodeImpl, os: @OutStream)
    os << n.kind
    if !(n.children isEmpty)
        os << "("
        var first = true
        for c = n.children.all
            if first ; first = false
            else os << ", "
            os << (c toImpl)
        os << ")"
    // os << "/(" << n.loc << ")"

fun createNode(l: Location, kind: StringRef): Node = new(NodeImpl, l, kind) toNode
fun createNode(l: Location, kind: StringRef, children: Range): Node = new(NodeImpl, l, kind, children) toNode
fun createNode(l: Location, kind: StringRef, children: Range, name: StringRef): Node = new(NodeImpl, l, kind, children, name) toNode

[native("comp_parser_reportError")]
fun reportErrorExternal(loc: @Location, msg: StringRef)
    cout << loc << " ERROR: " << msg << endl    // IGNORE-ERROR for test.py

[native("comp_parser_addToNodeList")]
fun addToNodeList(nl, newNode: Node): Node
    if nl isSet
        if newNode isSet
            (nl toImpl).children += newNode
    else if newNode isSet
        nl = createNode((newNode toImpl).loc, "nodeList", repeat(newNode, 1))
    return nl

[native("comp_parser_mkModifiers")]
fun mkModifiers(loc: @Location, main, mods: Node) \
    = ife(mods isSet, createNode(loc, "modifiers", values(main, mods)), main)
[native("comp_parser_mkModule")]
fun mkModule(loc: @Location, moduleName, decls: Node) \
    = createNode(loc, "module", values(moduleName, decls))
[native("comp_parser_mkImportName")]
fun mkImportName(loc: @Location, alias: StringRef, toImport, decls: Node) \
    = createNode(loc, "importName", values(toImport, decls), alias)
[native("comp_parser_mkUsing")]
fun mkUsing(loc: @Location, alias: StringRef, usingNode: Node) \
    = createNode(loc, "using", repeat(usingNode, 1), alias)
[native("comp_parser_mkPackage")]
fun mkPackage(loc: @Location, name: StringRef, children, params, ifClause: Node) \
    = createNode(loc, "package", repeat(children, 1), name)
[native("comp_parser_mkDatatype")]
fun mkDatatype(loc: @Location, name: StringRef, params, underlyingData, ifClause, children: Node) \
    = createNode(loc, "datatype", values(params, underlyingData, ifClause, children), name)
[native("comp_parser_mkField")]
fun mkField(loc: @Location, name: StringRef, typeNode, init: Node): Node \
    = createNode(loc, "field", values(typeNode, init), name)
[native("comp_parser_mkConcept")]
fun mkConcept(loc: @Location, name, paramName: StringRef, baseConcept, ifClause: Node) \
    = createNode(loc, "concept", values(baseConcept, ifClause), name)
[native("comp_parser_mkVar")]
fun mkVar(loc: @Location, name: StringRef, typeNode, init: Node) \
    = createNode(loc, "var", values(typeNode, init), name)
[native("comp_parser_mkParameter")]
fun mkParameter(loc: @Location, name: StringRef, typeNode, init: Node) \
    = createNode(loc, "param", values(typeNode, init), name)
[native("comp_parser_mkFun")]
fun mkFun(loc: @Location, name: StringRef, formals, retType, body, bodyExp, ifClause: Node) \
    = createNode(loc, "fun", values(formals, retType, body, bodyExp, ifClause), name)

[native("comp_parser_mkParenthesisExpr")]
fun mkParenthesisExpr(expr: Node) \
    = createNode((expr toImpl).loc, "paren", repeat(expr, 1))
[native("comp_parser_mkPostfixOp")]
fun mkPostfixOp(loc: @Location, base: Node, op: StringRef) \
    = createNode(loc, "postfix", values(base, createNode(loc, op)))
[native("comp_parser_mkInfixOp")]
fun mkInfixOp(loc: @Location, lhs: Node, op: StringRef, rhs: Node) \
    = createNode(loc, "infix", values(lhs, createNode(loc, op), rhs))
[native("comp_parser_mkPrefixOp")]
fun mkPrefixOp(loc: @Location, op: StringRef, base: Node) \
    = createNode(loc, "prefix", values(createNode(loc, op), base))
[native("comp_parser_mkIdentifier")]
fun mkIdentifier(loc: @Location, id: StringRef) \
    = createNode(loc, id)
[native("comp_parser_mkCompoundExpr")]
fun mkCompoundExpr(loc: @Location, base: Node, id: StringRef) \
    = createNode(loc, "compoundExpr", values(base, createNode(loc, id)))
[native("comp_parser_mkStarExpr")]
fun mkStarExpr(loc: @Location, base: Node, id: StringRef) \
    = createNode(loc, "starExpr", values(base, createNode(loc, id)))
[native("comp_parser_mkDotExpr")]
fun mkDotExpr(loc: @Location, base: Node, id: StringRef) \
    = createNode(loc, "dotExpr", values(base, createNode(loc, id)))
[native("comp_parser_mkFunAppExpr")]
fun mkFunAppExpr(loc: @Location, base, args: Node) \
    = createNode(loc, "funApp", values(base, args))
[native("comp_parser_mkLambdaExpr")]
fun mkLambdaExpr(loc: @Location, closureParams, formals, retType, body, bodyExpr: Node) \
    = createNode(loc, "lambda", values(closureParams, formals, retType, body, bodyExpr))
[native("comp_parser_mkNullLiteral")]
fun mkNullLiteral(loc: @Location) \
    = createNode(loc, "null")
[native("comp_parser_mkBoolLiteral")]
fun mkBoolLiteral(loc: @Location, val: Bool) \
    = createNode(loc, "boolLit")
[native("comp_parser_mkIntLiteral")]
fun mkIntLiteral(loc: @Location, val: Int) \
    = createNode(loc, "intLit")
[native("comp_parser_mkUIntLiteral")]
fun mkUIntLiteral(loc: @Location, val: UInt) \
    = createNode(loc, "uintLit")
[native("comp_parser_mkLongLiteral")]
fun mkLongLiteral(loc: @Location, val: Long) \
    = createNode(loc, "longLit")
[native("comp_parser_mkULongLiteral")]
fun mkULongLiteral(loc: @Location, val: ULong) \
    = createNode(loc, "ulongLit")
[native("comp_parser_mkFloatLiteral")]
fun mkFloatLiteral(loc: @Location, val: Float) \
    = createNode(loc, "floatLit")
[native("comp_parser_mkDoubleLiteral")]
fun mkDoubleLiteral(loc: @Location, val: Double) \
    = createNode(loc, "doubleLit")
[native("comp_parser_mkCharLiteral")]
fun mkCharLiteral(loc: @Location, val: Char) \
    = createNode(loc, "charLit")
[native("comp_parser_mkStringLiteral")]
fun mkStringLiteral(loc: @Location, data: StringRef) \
    = createNode(loc, "stringLit")

[native("comp_parser_mkBlockStmt")]
fun mkBlockStmt(loc: @Location, stmts: Node) \
    = createNode(loc, "block", repeat(stmts, 1))
[native("comp_parser_mkIfStmt")]
fun mkIfStmt(loc: @Location, expr, thenClause, elseClause: Node) \
    = createNode(loc, "if", values(expr, thenClause, elseClause))
[native("comp_parser_mkForStmt")]
fun mkForStmt(loc: @Location, id: StringRef, typeNode, range, action: Node) \
    = createNode(loc, "for", values(createNode(loc, id), typeNode, range, action))
[native("comp_parser_mkWhileStmt")]
fun mkWhileStmt(loc: @Location, expr, stepAction, body: Node) \
    = createNode(loc, "while", values(expr, stepAction, body))
[native("comp_parser_mkBreakStmt")]
fun mkBreakStmt(loc: @Location) \
    = createNode(loc, "break")
[native("comp_parser_mkContinueStmt")]
fun mkContinueStmt(loc: @Location) \
    = createNode(loc, "continue")
[native("comp_parser_mkReturnStmt")]
fun mkReturnStmt(loc: @Location, expr: Node) \
    = createNode(loc, "return", repeat(expr, 1))


fun sprMain
    if programArgs.size() < 2
        return
    var n = programArgs(1) asInt

    if      n == 0 ; doScan(programArgs(2), "")
    else if n == 1 ; doParse(programArgs(2), "")
    else if n == 2 ; test2()
    else if n == 3 ; test3()
    else if n == 4 ; test4()
    else if n == 5 ; test5()
    else if n == 6 ; test6()
    else if n == 7 ; test7()

fun doScan(filename, code: StringRef)
    var loc = mkLocation()
    var parser: @ParserContext = createScanner(filename, code, loc)

    var token: Token
    while true
        nextToken(parser, token)
        cout << token.type.data << " - '" << token.data << "' - " << token.loc << endl
        if token.type == tkEND
            break

    parser destroyParser

fun doParse(filename, code: StringRef)
    var loc = mkLocation()
    var parser: @ParserContext = createParser(filename, code, loc)

    var rootNode = parser parseModule
    cout << (rootNode toImpl) << endl

    parser destroyParser

fun test2
    doScan("", "1 2 3 4 5 0xff, 0b101, 0777, 0789, .123 0.123 1.123 12.34e2f 123_456 1_2.3_4")
/*<<<Scan: numbers test(2)
40 - '1' - 1:1-1:2 @0x0
40 - '2' - 1:3-1:4 @0x0
40 - '3' - 1:5-1:6 @0x0
40 - '4' - 1:7-1:8 @0x0
40 - '5' - 1:9-1:10 @0x0
40 - 'ff' - 1:11-1:15 @0x0
32 - '' - 1:15-1:16 @0x0
40 - '101' - 1:17-1:22 @0x0
32 - '' - 1:22-1:23 @0x0
40 - '0777' - 1:24-1:28 @0x0
32 - '' - 1:28-1:29 @0x0
40 - '0789' - 1:30-1:34 @0x0
32 - '' - 1:34-1:35 @0x0
45 - '.123' - 1:36-1:40 @0x0
45 - '0.123' - 1:41-1:46 @0x0
45 - '1.123' - 1:47-1:52 @0x0
44 - '12.34e2' - 1:53-1:61 @0x0
40 - '123456' - 1:62-1:69 @0x0
44 - '12.34' - 1:70-1:77 @0x0
0 - '' - 1:77-1:77 @0x0
>>>*/

fun test3
    doScan("", "a b c d e if then else abc_def _1 _a a1 a@#$ a.b.c ab.bc.cd abc.*")
/*<<<Scan: ids test(3)
36 - 'a' - 1:1-1:2 @0x0
36 - 'b' - 1:3-1:4 @0x0
36 - 'c' - 1:5-1:6 @0x0
36 - 'd' - 1:7-1:8 @0x0
36 - 'e' - 1:9-1:10 @0x0
15 - 'if' - 1:11-1:13 @0x0
36 - 'then' - 1:14-1:18 @0x0
23 - 'else' - 1:19-1:23 @0x0
36 - 'abc_def' - 1:24-1:31 @0x0
36 - '_1' - 1:32-1:34 @0x0
36 - '_a' - 1:35-1:37 @0x0
36 - 'a1' - 1:38-1:40 @0x0
36 - 'a' - 1:41-1:42 @0x0
37 - '@#$' - 1:42-1:45 @0x0
36 - 'a' - 1:46-1:47 @0x0
33 - '' - 1:47-1:48 @0x0
36 - 'b' - 1:48-1:49 @0x0
33 - '' - 1:49-1:50 @0x0
36 - 'c' - 1:50-1:51 @0x0
36 - 'ab' - 1:52-1:54 @0x0
33 - '' - 1:54-1:55 @0x0
36 - 'bc' - 1:55-1:57 @0x0
33 - '' - 1:57-1:58 @0x0
36 - 'cd' - 1:58-1:60 @0x0
36 - 'abc' - 1:61-1:64 @0x0
33 - '' - 1:64-1:65 @0x0
37 - '*' - 1:65-1:66 @0x0
0 - '' - 1:66-1:66 @0x0
>>>*/

fun test4
    doScan("", ". .. ... !!! .* # !@#$%^&*-+=")
/*<<<Scan: operators test(4)
33 - '' - 1:1-1:2 @0x0
37 - '..' - 1:3-1:5 @0x0
37 - '...' - 1:6-1:9 @0x0
37 - '!!!' - 1:10-1:13 @0x0
33 - '' - 1:14-1:15 @0x0
37 - '*' - 1:15-1:16 @0x0
37 - '#' - 1:17-1:18 @0x0
37 - '!@#$%^&*-+=' - 1:19-1:30 @0x0
0 - '' - 1:30-1:30 @0x0
>>>*/

fun test5
    doScan("", "\"abcd\" 'a' <{abc\\nop}>")
/*<<<Scan: strings test(5)
39 - 'abcd' - 1:1-1:7 @0x0
39 - 'a' - 1:8-1:11 @0x0
39 - 'abc\nop' - 1:12-1:23 @0x0
0 - '' - 1:23-1:23 @0x0
>>>*/

// <<<File scanning test(0 ~/work/sparrow/SparrowImplicitLib/std/ranges.spr)
// <<<File scanning test(0 ~/work/sparrow/SparrowImplicitLib/std/vector.spr)

fun test6
    doParse("", "module a.b.c.d;")
/*<<<Parse: module name only(6)
module(compoundExpr(compoundExpr(compoundExpr(a, b), c), d), <null>)
>>>*/

fun test7
    doParse("", "import x.y.z, k, l(a,b,c);")
/*<<<Parse: just an import(7)
module(<null>, nodeList(nodeList(importName(compoundExpr(compoundExpr(x, y), z), <null>), importName(k, <null>), importName(l, nodeList(a, b, c)))))
>>>*/

//<<<File parsing test(1 ../../../SparrowImplicitLib/std/ranges.spr)
//<<<File parsing test(1 ../../../SparrowImplicitLib/std/vector.spr)
//<<<File parsing test(1 ../../../SparrowImplicitLib/sprCore/basicDecls.spr)
