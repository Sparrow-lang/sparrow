module sparrowc.spr.grammar.rangeWithLookahead

import std.tuple
import std.vector
import std.ranges


/// Helper class that provides lookup functionality over a Range
///
/// This will hold an internal buffer of elements from the given range
/// If there are not enough items in the source range we give back the default-constructed element
datatype RangeWithLookahead(baseRangeType: Type) if Range(#$baseRangeType)
    using RetType = -@(baseRangeType.RetType)
    using _RangeType = baseRangeType

    source: baseRangeType
    buffer: Vector(RetType)

fun ctor(this: !RangeWithLookahead, src: this._RangeType)
    this.source = src
    this.buffer ctor
    this.buffer reserve 10

    // Always have at least one element in the buffer
    if !!source
        buffer += (source++)

fun isEmpty(this: RangeWithLookahead): Bool = buffer.isEmpty
fun front(this: RangeWithLookahead): RetType = buffer.front
fun popFront(this: !RangeWithLookahead)
    buffer remove 0
    // Add a new element in the buffer if the buffer is empty
    if (buffer.isEmpty) && !!source
        buffer += (source++)

fun peek(this: !RangeWithLookahead, n: UInt): RetType
    // If not enough elements in the buffer, add them now
    while n >= buffer.size && !!source
        buffer += (source++)
    if n < buffer.size
        return buffer(n)
    else
        return RetType() // not enough elements in the source

fun hasLessThan(this: !RangeWithLookahead, n: UInt): Bool
    // Try to fill the buffer with the amount of elements
    while n >= buffer.size && !!source
        buffer += (source++)
    // Check if we have enough elements in the buffer
    return n >= buffer.size
