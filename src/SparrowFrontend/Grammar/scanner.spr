module sparrowc.spr.grammar.scanner

import parserDefs, rangeWithLookahead, token, bufferedCharSource, ext
import charType, std.ranges, std.vector

import os = os

// TODO (generics): Be able to generate a concept from a generic
// TODO (convert): Allow to test a range without an operator e.g., '!!'


/// Concept for modeling the source data for the scanner
/// It's basically a range of characters
concept CharRange(x: Range) if -@(x.RetType) == Char

package _ImplLSCR
    /// Helper class used to sync the location with the source range
    ///
    /// This also exposes a CharRange functionality, but it also modifiers an external
    /// location when iterating over the chars
    [initCtor]
    datatype LocationSyncCharRange(sourceType: Type) if CharRange(#$sourceType)
        using RetType = Char

        source: sourceType
        location: @Location

    fun isEmpty(this: LocationSyncCharRange) = source.isEmpty
    fun front(this: LocationSyncCharRange)   = source.front
    fun popFront(this: !LocationSyncCharRange)
        if *source == '\n'.char
            location addLines 1
        else
            location addColumns 1
        source.popFront


/// Our main scanner
///
/// This behaves just like a range transformation. Given the source range, this
/// will represent a range of tokens extracted from the source characters.
///
datatype SparrowScanner
    using RetType = Token

    /// Location that we use to keep track of the source chars
    _curLocation: Location
    /// The buffered source of chars
    _bufferedSource: BufferedCharSource
    /// The source stream of chars (and locations) we are going to use
    _src: _ImplLSCR.LocationSyncCharRange(RangeWithLookahead(BufferedCharSourceRange))
    /// The current token we look at. We will reuse this object for all the
    /// tokens that we parse from the source stream
    _curToken: Token
    /// Indicates if '_curToken' is computed or not
    _tokenIsComputed: Bool
    /// Object used to report errors
    _errorReporter: ErrorReporter
    /// If true, also emit whitespace & comment tokens
    _emitWitespace: Bool

fun ctor(this: !SparrowScanner, chars: CharSource, errorReporter: ErrorReporter, \
        iniLocation: Location, emitWitespace: Bool = false)
    this._curLocation ctor iniLocation
    this._bufferedSource ctor chars
    this._src.ctor(RangeWithLookahead(BufferedCharSourceRange)(_bufferedSource.all), _curLocation)
    this._curToken ctor
    this._tokenIsComputed ctor false
    this._errorReporter ctor errorReporter
    this._emitWitespace = emitWitespace

fun isEmpty(this: SparrowScanner) = false
fun front(this: !SparrowScanner): Token
    if !_tokenIsComputed
        _tokenIsComputed = true
        this.popFront
    return _curToken
fun popFront(this: !SparrowScanner)
    if _src.isEmpty
        _src.location stepOver
        _curToken.type = tkEND
        _curToken.data clear
        _curToken.loc = _src.location
    else
        _curToken.type = _Impl.nextToken(this)
        _curToken.loc = _src.location
        // cout << _curToken.loc << ": token: " << _curToken.type._data << " - '" << _curToken.data << "'" << endl

package _Impl

    fun reportError(this: SparrowScanner, msg: String)
        _errorReporter.reportError(_src.location, msg)

    /// Peeks at the next char; we assume that at least the cur char is valid
    /// Returns Char(0) if no next char is available
    fun peekChar(this: !SparrowScanner): Char
        return _src.source peek 1

    fun peekChar(this: !SparrowScanner, n: Int): Char
        return _src.source peek n

    /// Check if the source to has less than the given number of characters
    fun hasLessThan(this: !SparrowScanner, n: Int): Bool
        return _src.source hasLessThan n

    /// Advances the input stream while the predicate matches
    /// Captures every character that matches
    fun advanceAndCapture(this: !SparrowScanner, pred: AnyType)
        while !!_src && pred(*_src) ; _src.popFront
            _curToken.data += *_src

    /// Advances and captures 1 char
    fun advanceAndCapture1(this: !SparrowScanner)
        _curToken.data += *_src
        _src.popFront

    /// Same as above, but do not capture '_'; we advance past it
    fun advanceAndCaptureDigit(this: !SparrowScanner, pred: AnyType)
        while !!_src && (pred(*_src) || *_src == '_'.char) ; _src.popFront
            if *_src != '_'.char
                _curToken.data += *_src

    /// Computes the next token, for the current characters in the source stream.
    /// Stores the token in _curToken
    fun nextToken(this: !SparrowScanner): TokenType
        var loc: @Location = _src.location


        // Check for a shebang line, and, if found, ignore it
        if loc.start.line == 1 && loc.start.col == 1
            var ch = *_src
            var ch2 = this peekChar
            if ch == '#'.char && ch2 == '!'.char
                _src.popFront
                _src advanceIf (fun c = c!='\n'.char)
                if !!_src ; _src.popFront

        while true
            // The current location starts where the last one ended
            loc stepOver
            _curToken.data clear

            // First check if the source is empty; if so, return an EOF token
            if _src.isEmpty
                return tkEND

            // Get the first character in the source
            var ch = *_src
            var ch2 = this peekChar

            // Check for whitespace -- drop all the whitespace
            if ch == ' '.char
                _src advanceIf (fun c = c==' '.char)
                if _emitWitespace
                    return tkWHITESPACE
                continue

            // Check for tabs -- forbidden
            if ch == '\t'.char
                this reportError toString("Tabs are not valid characters")
                _src advanceIf (fun c = c=='\t'.char)
                if _emitWitespace
                    return tkWHITESPACE
                continue

            // Check for new lines
            if ch == '\n'.char
                _src.popFront
                return tkEOL

            // Check for line comments -- drop everything until the end of line (including eol)
            if ch == '/'.char && ch2 == '/'.char
                _src.popFront
                _src advanceIf (fun c = c!='\n'.char)
                if _emitWitespace
                    return tkCOMMENT
                continue

            // Check for multi-line comments -- drop them
            if ch == '/'.char && ch2 == '*'.char
                _src advance 2
                var c1 = 'a'.char
                var c2 = 'a'.char
                while !!_src && (c1 != "*".char || c2 != "/".char)
                    c1 = c2
                    c2 = ++_src
                if !_src
                    this reportError "End of file found inside comment"
                    return tkEND
                _src.popFront     // move past '/'
                if _emitWitespace
                    return tkCOMMENT
                continue

            // Backslash followed by a new-line collapses
            if ch == '\\'.char && ch2 == '\n'.char
                _src advance 2
                if _emitWitespace
                    return tkLINECONTINUE
                continue

            // Strings
            if ch == "'".char                     return parseString(this, "'".char)
            if ch == '"'.char                     return parseString(this, '"'.char)
            if ch == '<'.char && ch2 == '{'.char  return parseStringNE(this)

            // Symbols
            if ch == '{'.char  { _src.popFront; return tkLCURLY; }
            if ch == '{'.char  { _src.popFront; return tkLCURLY; }
            if ch == '}'.char  { _src.popFront; return tkRCURLY; }
            if ch == '['.char  { _src.popFront; return tkLBRACKET; }
            if ch == ']'.char  { _src.popFront; return tkRBRACKET; }
            if ch == '('.char  { _src.popFront; return tkLPAREN; }
            if ch == ')'.char  { _src.popFront; return tkRPAREN; }
            if ch == ';'.char  { _src.popFront; return tkSEMICOLON; }
            if ch == ','.char  { _src.popFront; return tkCOMMA; }
            if ch == '`'.char  { _src.popFront; return tkBACKSQUOTE; }

            // These two symbols can also be part of operators
            if ch == ':'.char && !isOpChar(this peekChar) { _src.popFront; return tkCOLON; }
            if ch == '='.char && !isOpChar(this peekChar) { _src.popFront; return tkEQUAL; }

            // Is this an operator?
            // If this is just a lonely dot, it will do nothing
            if isOpCharDot(ch)
                if parseOperator(this)
                    return tkOPERATOR

            // Check for dot -- dot followed by a digit is a floating point constant
            if ch == '.'.char && !isDigit(ch2) { _src.popFront; return tkDOT; }

            // Identifiers
            if isAlpha(ch) || ch == '_'.char return parseIdentifer(this)

            // Numeric literals
            if isDigit(ch) || ch == '.'.char return parseNumeric(this)

            this reportError toString("Invalid character found: '", ch, "' (", Int(ch), ')'.char)
            _src.popFront
            return tkEND


    fun isOpChar(c: Char): Bool
        return (
               c == '~'.char || c == '!'.char || c == '@'.char
            || c == '#'.char || c == '$'.char || c == '%'.char
            || c == '^'.char || c == '&'.char || c == '-'.char
            || c == '+'.char || c == '='.char || c == '|'.char
            || c == '\\'.char || c == ':'.char || c == '<'.char
            || c == '>'.char || c == '?'.char || c == '/'.char
            || c == '*'.char)
    fun isOpCharDot(c: Char) = c == '.'.char || isOpChar(c)

    fun isOctalDigit(c: Char) = '0'.char <= c && c <= '7'.char
    fun isBinDigit(c: Char) = c == '0'.char || c == '1'.char

    [native("tolower")]
    fun tolower(c: Int): Int
    fun toLower(c: Char) = Char(tolower(Int(c)))

    /// Parse an operator
    /// We know that the first char is an operator char or dot
    ///
    /// Returns true if this is actually an operator.
    /// If it is, this will capture all the chars in the symbol.
    /// If it's not, this will not consume the input
    ///
    /// If this is called to parse just a '.' without any follow-up operator chars,
    /// this will return false
    fun parseOperator(this: !SparrowScanner): Bool
        var ch = *_src

        // Operators
        if isOpChar(ch)
            this advanceAndCapture \isOpCharDot
            return true
        // If a dot is found in the first position, at least one other dot needs to be in the operators string
        // We need to look-ahead for the whole operator for this
        if ch == '.'.char
            var i = 1
            var c = this peekChar i
            while isOpChar(c)
                c = (this peekChar ++i)
            var hasOtherDot = c == '.'.char
            if hasOtherDot
                this advanceAndCapture \isOpCharDot
                return true

        // this is not an operator
        return false

    /// Parse an identifier; we know that we start with a letter or underscore
    /// Also checked for reserved keywords
    fun parseIdentifer(this: !SparrowScanner): TokenType
        // Match the following:
        //      Identifier      {IdLetters} | {IdLettersOp}
        //      IdLetters       ({Letter} | '_') ({Letter} | '_' | {Digit})*
        //      IdLettersOp     {IdLetters}\_{Operator}
        // try to find an underscore; after underscore we can accept only operator chars
        // before underscore accept only alpha

        // Capture all the characters possible for the identifier
        var allowSymbolChars = false
        _curToken.data += *_src
        _src.popFront     // Skip the first char, we know it matches
        var firstDot = true
        while !!_src ; _src.popFront
            var ch = *_src

            // Check for characters allowed in the identifier
            // At this point we only accept alpha-numeric and underscore
            if !isAlpha(ch) && ch != '_'.char && !isDigit(ch)
                break

            _curToken.data += ch

            // At underscores we may start accepting symbol characters
            // If that's the case, we need to have symbol until the end
            if ch == '_'.char && isOpCharDot(this peekChar)
                _src.popFront
                if parseOperator(this)
                    return tkIDENTIFIER


        var data: StringRef = _curToken.data.asStringRef

        // Check for reserved words
        if      data == "break"     return tkBREAK
        else if data == "catch"     return tkCATCH
        else if data == "concept"   return tkCONCEPT
        else if data == "continue"  return tkCONTINUE
        else if data == "datatype"  return tkDATATYPE
        else if data == "fun"       return tkFUN
        else if data == "if"        return tkIF
        else if data == "else"      return tkELSE
        else if data == "false"     return tkFALSE
        else if data == "finally"   return tkFINALLY
        else if data == "for"       return tkFOR
        else if data == "import"    return tkIMPORT
        else if data == "let"       return tkLET
        else if data == "module"    return tkMODULE
        else if data == "null"      return tkNULLCT
        else if data == "package"   return tkPACKAGE
        else if data == "return"    return tkRETURN
        else if data == "throw"     return tkTHROW
        else if data == "true"      return tkTRUE
        else if data == "try"       return tkTRY
        else if data == "using"     return tkUSING
        else if data == "var"       return tkVAR
        else if data == "while"     return tkWHILE
        else                        return tkIDENTIFIER

    /// Parse a numeric constant (decimal, octal, hex, binary, floating)
    fun parseNumeric(this: !SparrowScanner): TokenType
        var isLong = false
        var isUnsigned = false
        var isFloating = false
        var type = 0    // 0=decimal, 1=hex, 2=binary, 3=octal, 4=floating

        var ch = *_src
        var ch2 = toLower(this peekChar)
        var ch3 = toLower(this peekChar 2)

        // Do the main parsing of all the digits (until the decimal part)
        if ch == '0'.char && ch2 == 'x'.char
            _src advance 2
            _curToken.intData = consumeDigits(_src, 16, _curToken.data)
        else if ch == '0'.char && ch2 == 'b'.char
            _src advance 2
            _curToken.intData = consumeDigits(_src, 2, _curToken.data)
        else if ch == '0'.char && ch2 == 'o'.char
            _src advance 2
            _curToken.intData = consumeDigits(_src, 8, _curToken.data)
        else
            // At this point we assume we are not parsing a floating point number
            // Consume digits as much as possible
            _curToken.intData = consumeDigits(_src, 10, _curToken.data)

            // We are now at the first non-digit; we can check for floating numbers
            if !!_src
                ch = toLower(*_src)

                // If we started as a decimal, and encountered a fractional or an exponential part,
                // or a float suffix, make this a float
                if (ch == '.'.char && !isOpCharDot(this peekChar)) || ch == 'e'.char || ch == 'f'.char || ch == 'd'.char
                    isFloating = true

                    // Do we have fractional part?
                    if ch == '.'.char
                        this advanceAndCapture1    // past the dot
                        this advanceAndCaptureDigit \isDigit

                    // consume exponential part, if any
                    if !!_src
                        ch = toLower(*_src)
                        if ch == 'e'.char
                            this advanceAndCapture1
                            // exponent sign
                            ch = *_src
                            if ch == '+'.char || ch == '-'.char
                                this advanceAndCapture1
                            // exponent number
                            this advanceAndCaptureDigit \isDigit

                    // Suffix for floats -- don't capture these
                    if !!_src
                        isLong = true   // by default double
                        ch = toLower(*_src)
                        if ch == 'f'.char
                            isLong = false
                            _src.popFront
                        else if ch == 'd'.char
                            _src.popFront

        // Check if the number has enough digits
        if _curToken.data.isEmpty
            this reportError "Invalid numeric literal"
            return tkEND

        // Suffix for integers
        if !isFloating
            if !!_src && toLower(*_src) == 'u'.char
                isUnsigned = true
                _src.popFront
            if !!_src && toLower(*_src) == 'l'.char
                isLong = true
                _src.popFront

        // Compute the value and return the token type
        if isFloating
            _curToken.data += Char(0)
            _curToken.floatData = (_curToken.data.asStringRef asFloat)
            _curToken.data popBack
            return ife(isLong, tkDOUBLE_LITERAL, tkFLOAT_LITERAL)

        if isUnsigned
            return ife(isLong, tkULONG_LITERAL, tkUINT_LITERAL)
        else
            return ife(isLong, tkLONG_LITERAL, tkINT_LITERAL)

    fun getDigitVal(c: Char) = (Int(c) - Int('0'.char))
    fun getXdigitVal(c: Char) = ife(isDigit(c), Int(c) - Int('0'.char), 10 + Int(toLower(c)) - Int('a'.char))

    fun consumeDigits(r: !Range, base: Int, capture: !String): UInt64
        var res: UInt64 = 0UL
        if base == 16
            while !!r && (isXdigit(*r) || *r == '_'.char) ; r.popFront
                if *r != '_'.char
                    capture += *r
                    res *= UInt64(base)
                    res += UInt64(getXdigitVal(*r))
        else
            while !!r && (isXdigit(*r) || *r == '_'.char) ; r.popFront
                if *r != '_'.char
                    capture += *r
                    res *= UInt64(base)
                    res += UInt64(getDigitVal(*r))
        return res

    fun checkEscapeChar(this: !SparrowScanner): Bool
        var ch = *_src
        if ch == '\\'.char
            ch = ++_src
            if ch == 'r'.char
                _curToken.data += '\r'.char
            else if ch == 'n'.char
                _curToken.data += '\n'.char
            else if ch == 'b'.char
                _curToken.data += '\b'.char
            else if ch == 'f'.char
                _curToken.data += '\f'.char
            else if ch == 't'.char
                _curToken.data += '\t'.char
            else if ch == '\\'.char
                _curToken.data += '\\'.char
            else if ch == "'".char
                _curToken.data += "'".char
            else if ch == '\"'.char
                _curToken.data += '\"'.char
            else if ch == 'x'.char || ch == 'X'.char
                if this hasLessThan 2
                    this reportError "Not enough digits for character code"
                    return true
                var charVal: Int = 16*getXdigitVal(++_src)
                charVal += getXdigitVal(++_src)
                _curToken.data += Char(charVal)
            else
                // Just use the next character
                _curToken.data += ++_src
            _src.popFront  // Advance past the escape sequence
            return true
        return false

    fun parseString(this: !SparrowScanner, endChar: Char): TokenType
        _src.popFront
        if this hasLessThan 1
            this reportError "End of file found inside string literal"
            return tkEND

        // Get all the characters from the string
        while !!_src && *_src != endChar
            if !checkEscapeChar(this)
                this advanceAndCapture1

        // Now expect closing quote
        // We shouldn't be at the end of the scope
        if !_src
            this reportError "End of file found inside string literal"
            return tkEND
        _src.popFront

        return tkSTRING_LITERAL

    fun parseStringNE(this: !SparrowScanner): TokenType
        _src advance 2

        // Get all the characters from the string
        while !!_src && !(*_src == '}'.char && (this peekChar) == '>'.char)
            this advanceAndCapture1

        if !_src
            this reportError "End of file found inside string literal"
            return tkEND
        _src advance 2
        return tkSTRING_LITERAL
