//!! -t "SparrowImplicitLib.spr" -fno-main -fno-rvo

// Test purpose: Test calling ctor & dtor for objects

datatype MyObj
    v: Int;

fun ctor(this: !MyObj)
    writeLn("MyObj.ctor()");
fun ctor(this: !MyObj, i: Int)
    write("MyObj.ctor("); write(i); writeLn(")");
fun ctor(this: !MyObj, i,j: Int)
    write("MyObj.ctor("); write(i); write(", "); write(j); writeLn(")");
fun ctor(this: !MyObj, src: MyObj)
    writeLn("MyObj.ctor(copy)");

fun dtor(this: !MyObj)
    writeLn("MyObj.dtor");

fun reconstruct(this: @MyObj)
    this.dtor()
    this.ctor(100)

datatype Pair
    first, second: MyObj;

fun ctor(this: !Pair)
    first.ctor()
    second.ctor()
    writeLn("Pair.ctor()")
fun ctor(this: !Pair, i,j: Int)
    first.ctor(i)
    second.ctor(j)
    write("Pair.ctor("); write(i); write(", "); write(j); writeLn(")")
fun ctor(this: !Pair, src: Pair)
    first.ctor(src.first)
    second.ctor(src.second)
    writeLn("Pair.ctor(copy)")
fun dtor(this: !Pair)
    writeLn("Pair.dtor");

[native("test")] fun test(n: Int)
    ;
        let x: MyObj
        let x1 = MyObj(1)
        let x2 = MyObj(1,2)
    writeLn("---")
        var x: MyObj
        x.dtor()
        x.ctor(10)
    writeLn("---")
        var x: MyObj
        x.reconstruct()
    writeLn("---")
        let x: Pair
        let x1 = Pair(15,16)
    writeLn("---")
        var p: @MyObj = reinterpretCast(@MyObj, mallocRt(sizeOf(MyObj)))
        p.ctor(10)
        p.dtor()
        free(reinterpretCast(@Byte, p))
    ;

/*<<<Running()
MyObj.ctor()
MyObj.ctor(1)
MyObj.ctor(copy)
MyObj.dtor
MyObj.ctor(1, 2)
MyObj.ctor(copy)
MyObj.dtor
MyObj.dtor
MyObj.dtor
MyObj.dtor
---
MyObj.ctor()
MyObj.dtor
MyObj.ctor(10)
MyObj.dtor
---
MyObj.ctor()
MyObj.dtor
MyObj.ctor(100)
MyObj.dtor
---
MyObj.ctor()
MyObj.ctor()
Pair.ctor()
MyObj.ctor(15)
MyObj.ctor(16)
Pair.ctor(15, 16)
MyObj.ctor(copy)
MyObj.ctor(copy)
Pair.ctor(copy)
Pair.dtor
MyObj.dtor
MyObj.dtor
Pair.dtor
MyObj.dtor
MyObj.dtor
Pair.dtor
MyObj.dtor
MyObj.dtor
---
MyObj.ctor(10)
MyObj.dtor
>>>*/