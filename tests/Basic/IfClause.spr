//!! -t "SparrowImplicitLib.spr" -fno-main

concept AnyType(x) // Always true

datatype Pair(t1, t2: Type)
    first: t1
    second: t2

fun instanceOfType(t: Type): t
fun instanceOfTypeRef(t: Type): t@

fun f(x: AnyType) if sizeOf(x)<=sizeOf(Float)
    write('S: ')
    writeLn(sizeOf(x))

fun f(x: AnyType) if sizeOf(x)>sizeOf(Float)
    write('B: ')
    writeLn(sizeOf(x))

fun f(x: AnyType) if false
    write('X: ')
    writeLn(sizeOf(x))

fun tst(x: AnyType) if typeOf(x) == Int
    writeLn('Int')

fun tst(x: AnyType) if typeOf(x) == Float
    writeLn('Float')

fun tst(x: AnyType) if isValid(x.second)
    writeLn('Pair')

fun tst2(x: AnyType) if typeOf(x) == Int
    writeLn('Int')

fun tst2(x: AnyType) if typeOf(x) == Float
    writeLn('Float')

fun tst2(x: AnyType) if isValid(x.second)
    writeLn('Pair')

fun tst3(x: AnyType) if typeOf(x) == Int
    writeLn('Int')

fun tst3(x: AnyType) if typeOf(x) == Float
    writeLn('Float')

fun tst3(x: AnyType) if typeOf(x.second) == Float
    writeLn('Pair D')

fun tst3(x: AnyType) if typeOf(x.second) != Float
    writeLn('Pair')

fun ok()
    writeLn('OK')

fun fail()
    writeLn('FAIL')

fun separ()
    writeLn('---')

[native("test")] fun test(n: Int)
    let a: Pair(Int, Int)
    let b: Pair(Float, Float)
    let c: Pair(Int, Pair(Int, Int))
    let d: Pair(Pair(Float, Float), Pair(Float, Float))

    f(1)
    f(3.14)
    f(a)
    f(b)
    f(c)
    f(d)

    separ()

    tst(1)
    tst(3.14)
    tst(a)
    tst(b)
    tst(c)
    tst(d)

    separ()

    tst2(1)
    tst2(3.14)
    tst2(a)
    tst2(b)
    tst2(c)
    tst2(d)

    separ()

    tst3(1)
    tst3(3.14)
    tst3(a)
    tst3(b)
    tst3(c)
    tst3(d)

/*<<<Running()
S: 4
S: 8
S: 8
B: 16
B: 12
B: 32
---
Int
Float
Pair
Pair
Pair
Pair
---
Int
Float
Pair
Pair
Pair
Pair
---
Int
Float
Pair
Pair D
Pair
Pair
>>>*/