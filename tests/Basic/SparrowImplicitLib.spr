
[ct, native("$injectBackendCode")] fun injectBackendCode(code: StringRef)
[ct, native("$injectBackendCodeCt")] fun injectBackendCodeCt(code: StringRef)

injectBackendCode(
"
@.fmtIntN = private unnamed_addr constant [4 x i8] c\"%d\\0A\\00\", align 1
@.fmtUIntN = private unnamed_addr constant [4 x i8] c\"%u\\0A\\00\", align 1
@.fmtCharN = private unnamed_addr constant [4 x i8] c\"%c\\0A\\00\", align 1
@.fmtDoubleN = private unnamed_addr constant [4 x i8] c\"%g\\0A\\00\", align 1
@.fmtStringN = private unnamed_addr constant [4 x i8] c\"%s\\0A\\00\", align 1
@.fmtPointerN = private unnamed_addr constant [4 x i8] c\"%p\\0A\\00\", align 1
@.fmtInt = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1
@.fmtUInt = private unnamed_addr constant [3 x i8] c\"%u\\00\", align 1
@.fmtChar = private unnamed_addr constant [3 x i8] c\"%c\\00\", align 1
@.fmtDouble = private unnamed_addr constant [3 x i8] c\"%g\\00\", align 1
@.fmtString = private unnamed_addr constant [3 x i8] c\"%s\\00\", align 1
@.fmtPointer = private unnamed_addr constant [3 x i8] c\"%p\\00\", align 1


define i32 @mulInt(i32 %x, i32 %y) {
  %1 = mul i32 %x,%y
  ret i32 %1
}

define double @mulDouble(double %x, double %y) {
  %1 = fmul double %x,%y
  ret double %1
}

define i32 @divInt(i32 %x, i32 %y) {
  %1 = sdiv i32 %x,%y
  ret i32 %1
}

define i32 @modInt(i32 %x, i32 %y) {
  %1 = srem i32 %x,%y
  ret i32 %1
}

define i32 @addInt(i32 %x, i32 %y) {
  %1 = add i32 %x,%y
  ret i32 %1
}

define i32 @subInt(i32 %x, i32 %y) {
  %1 = sub i32 %x,%y
  ret i32 %1
}

define double @addDouble(double %x, double %y) {
  %1 = fadd double %x,%y
  ret double %1
}

define double @subDouble(double %x, double %y) {
  %1 = fsub double %x,%y
  ret double %1
}

define i1 @equalInt(i32 %x, i32 %y) {
  %1 = icmp eq i32 %x,%y
  ret i1 %1
}

define i1 @leInt(i32 %x, i32 %y) {
  %1 = icmp sle i32 %x,%y
  ret i1 %1
}

define void @assignInt(i32* %ptr, i32 %val)
{
    store i32 %val, i32* %ptr
    ret void
}

define void @assignRefByte(i8** %ptr, i8* %val)
{
    store i8* %val, i8** %ptr
    ret void
}

define i8* @ptrAdd(i8* %p, i64 %n)
{
    %1 = getelementptr i8, i8* %p, i64 %n
    ret i8* %1
}

define i8* @ptrSub(i8* %p, i64 %n)
{
    %1 = sub i64 0, %n
    %2 = getelementptr i8, i8* %p, i64 %1
    ret i8* %2
}

define i64 @ptrDiff(i8* %p1, i8* %p2)
{
    %1 = ptrtoint i8* %p1 to i64
    %2 = ptrtoint i8* %p2 to i64
    %3 = sub i64 %1, %2
    ret i64 %3
}

%Type = type { i8* }

%struct._IO_FILE = type opaque
declare i32 @fflush(%struct._IO_FILE*) nounwind readonly

declare i32 @atoi(i8*) nounwind readonly
declare i32 @printf(i8*, ...)
declare double @llvm.pow.f64(double,double)
declare i8* @malloc(i64) nounwind
declare i8* @realloc(i8*, i64) nounwind
declare void @free(i8*) nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

define void @memcpyimpl(i8* %dest, i8* %src, i64 %size)
{
    call void @llvm.memcpy.p0i8.p0i8.i64(i8* %dest, i8* %src, i64 %size, i32 1, i1 false)
    ret void
}

define void @flushOutput()
{
    call i32 @fflush(%struct._IO_FILE* null)
    ret void
}


; Initializations
define void @_zero_init_1(i1* %$this) alwaysinline
{
  store i1 0, i1* %$this
  ret void
}
define void @_zero_init_8(i8* %$this) alwaysinline
{
  store i8 0, i8* %$this
  ret void
}
define void @_zero_init_16(i16* %$this) alwaysinline
{
  store i16 0, i16* %$this
  ret void
}
define void @_zero_init_32(i32* %$this) alwaysinline
{
  store i32 0, i32* %$this
  ret void
}
define void @_zero_init_64(i64* %$this) alwaysinline
{
  store i64 0, i64* %$this
  ret void
}
define void @_zero_init_f(float* %$this) alwaysinline
{
  store float 0.0, float* %$this
  ret void
}
define void @_zero_init_d(double* %$this) alwaysinline
{
  store double 0.0, double* %$this
  ret void
}

; Same type assignments
define void @_ass_1_1(i1* %$this, i1 %src) alwaysinline
{
  store i1 %src, i1* %$this
  ret void
}
define void @_ass_8_8(i8* %$this, i8 %src) alwaysinline
{
  store i8 %src, i8* %$this
  ret void
}
define void @_ass_16_16(i16* %$this, i16 %src) alwaysinline
{
  store i16 %src, i16* %$this
  ret void
}
define void @_ass_32_32(i32* %$this, i32 %src) alwaysinline
{
  store i32 %src, i32* %$this
  ret void
}
define void @_ass_64_64(i64* %$this, i64 %src) alwaysinline
{
  store i64 %src, i64* %$this
  ret void
}
define void @_ass_f_f(float* %$this, float %src) alwaysinline
{
  store float %src, float* %$this
  ret void
}
define void @_ass_d_d(double* %$this, double %src) alwaysinline
{
  store double %src, double* %$this
  ret void
}

; Truncates
define void @_ass_8_16(i8* %$this, i16 %src) alwaysinline
{
  %1 = trunc i16 %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_8_32(i8* %$this, i32 %src) alwaysinline
{
  %1 = trunc i32 %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_8_64(i8* %$this, i64 %src) alwaysinline
{
  %1 = trunc i64 %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_16_32(i16* %$this, i32 %src) alwaysinline
{
  %1 = trunc i32 %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_16_64(i16* %$this, i64 %src) alwaysinline
{
  %1 = trunc i64 %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_32_64(i32* %$this, i64 %src) alwaysinline
{
  %1 = trunc i64 %src to i32
  store i32 %1, i32* %$this
  ret void
}

; Extends
define void @_ass_16_8s(i16* %$this, i8 %src) alwaysinline
{
  %1 = sext i8 %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_16_8z(i16* %$this, i8 %src) alwaysinline
{
  %1 = zext i8 %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_32_8s(i32* %$this, i8 %src) alwaysinline
{
  %1 = sext i8 %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_32_8z(i32* %$this, i8 %src) alwaysinline
{
  %1 = zext i8 %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_32_16s(i32* %$this, i16 %src) alwaysinline
{
  %1 = sext i16 %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_32_16z(i32* %$this, i16 %src) alwaysinline
{
  %1 = zext i16 %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_64_8s(i64* %$this, i8 %src) alwaysinline
{
  %1 = sext i8 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_8z(i64* %$this, i8 %src) alwaysinline
{
  %1 = zext i8 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_16s(i64* %$this, i16 %src) alwaysinline
{
  %1 = sext i16 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_16z(i64* %$this, i16 %src) alwaysinline
{
  %1 = zext i16 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_32s(i64* %$this, i32 %src) alwaysinline
{
  %1 = sext i32 %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_64_32z(i64* %$this, i32 %src) alwaysinline
{
  %1 = zext i32 %src to i64
  store i64 %1, i64* %$this
  ret void
}

; Floating to integral
define void @_ass_i8_f(i8* %$this, float %src) alwaysinline
{
  %1 = fptosi float %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_i8_d(i8* %$this, double %src) alwaysinline
{
  %1 = fptosi double %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_u8_f(i8* %$this, float %src) alwaysinline
{
  %1 = fptoui float %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_u8_d(i8* %$this, double %src) alwaysinline
{
  %1 = fptoui double %src to i8
  store i8 %1, i8* %$this
  ret void
}
define void @_ass_i16_f(i16* %$this, float %src) alwaysinline
{
  %1 = fptosi float %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_i16_d(i16* %$this, double %src) alwaysinline
{
  %1 = fptosi double %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_u16_f(i16* %$this, float %src) alwaysinline
{
  %1 = fptoui float %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_u16_d(i16* %$this, double %src) alwaysinline
{
  %1 = fptoui double %src to i16
  store i16 %1, i16* %$this
  ret void
}
define void @_ass_i32_f(i32* %$this, float %src) alwaysinline
{
  %1 = fptosi float %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_i32_d(i32* %$this, double %src) alwaysinline
{
  %1 = fptosi double %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_u32_f(i32* %$this, float %src) alwaysinline
{
  %1 = fptoui float %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_u32_d(i32* %$this, double %src) alwaysinline
{
  %1 = fptoui double %src to i32
  store i32 %1, i32* %$this
  ret void
}
define void @_ass_i64_f(i64* %$this, float %src) alwaysinline
{
  %1 = fptosi float %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_i64_d(i64* %$this, double %src) alwaysinline
{
  %1 = fptosi double %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_u64_f(i64* %$this, float %src) alwaysinline
{
  %1 = fptoui float %src to i64
  store i64 %1, i64* %$this
  ret void
}
define void @_ass_u64_d(i64* %$this, double %src) alwaysinline
{
  %1 = fptoui double %src to i64
  store i64 %1, i64* %$this
  ret void
}

; Something to floating
define void @_ass_f_i8(float* %$this, i8 %src) alwaysinline
{
  %1 = sitofp i8 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_u8(float* %$this, i8 %src) alwaysinline
{
  %1 = uitofp i8 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_i16(float* %$this, i16 %src) alwaysinline
{
  %1 = sitofp i16 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_u16(float* %$this, i16 %src) alwaysinline
{
  %1 = uitofp i16 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_i32(float* %$this, i32 %src) alwaysinline
{
  %1 = sitofp i32 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_u32(float* %$this, i32 %src) alwaysinline
{
  %1 = uitofp i32 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_i64(float* %$this, i64 %src) alwaysinline
{
  %1 = sitofp i64 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_u64(float* %$this, i64 %src) alwaysinline
{
  %1 = uitofp i64 %src to float
  store float %1, float* %$this
  ret void
}
define void @_ass_f_d(float* %$this, double %src) alwaysinline
{
  %1 = fptrunc double %src to float
  store float %1, float* %$this
  ret void
}

define void @_ass_d_i8(double* %$this, i8 %src) alwaysinline
{
  %1 = sitofp i8 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_u8(double* %$this, i8 %src) alwaysinline
{
  %1 = uitofp i8 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_i16(double* %$this, i16 %src) alwaysinline
{
  %1 = sitofp i16 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_u16(double* %$this, i16 %src) alwaysinline
{
  %1 = uitofp i16 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_i32(double* %$this, i32 %src) alwaysinline
{
  %1 = sitofp i32 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_u32(double* %$this, i32 %src) alwaysinline
{
  %1 = uitofp i32 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_i64(double* %$this, i64 %src) alwaysinline
{
  %1 = sitofp i64 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_u64(double* %$this, i64 %src) alwaysinline
{
  %1 = uitofp i64 %src to double
  store double %1, double* %$this
  ret void
}
define void @_ass_d_f(double* %$this, float %src) alwaysinline
{
  %1 = fpext float %src to double
  store double %1, double* %$this
  ret void
}



define i1 @_Bool_opAssign(i1* %x, i1 %y)        {\n  store i1 %y, i1* %x\n  ret i1 %y\n}
define i1 @_Bool_opOr(i1 %x, i1 %y)             {\n  %1 = or i1 %x, %y\n  ret i1 %1\n}
define i1 @_Bool_opXor(i1 %x, i1 %y)            {\n  %1 = xor i1 %x, %y\n  ret i1 %1\n}
define i1 @_Bool_opAnd(i1 %x, i1 %y)            {\n  %1 = and i1 %x, %y\n  ret i1 %1\n}
define i1 @_Bool_opEQ(i1 %x, i1 %y)             {\n  %1 = icmp eq i1 %x, %y\n  ret i1 %1\n}
define i1 @_Bool_opNE(i1 %x, i1 %y)             {\n  %1 = icmp ne i1 %x, %y\n  ret i1 %1\n}
define i1 @_Bool_opNeg(i1 %x)                   {\n  %1 = xor i1 %x, 1\n  ret i1 %1\n}

define i8 @_Int8_opAssign(i8* %x, i8 %y)        {\n  store i8 %y, i8* %x\n  ret i8 %y\n}
define i1 @_Int8_opEQ(i8 %x, i8 %y)             {\n  %1 = icmp eq i8 %x, %y\n  ret i1 %1\n}
define i1 @_Int8_opNE(i8 %x, i8 %y)             {\n  %1 = icmp ne i8 %x, %y\n  ret i1 %1\n}
define i1 @_Int8_opLT(i8 %x, i8 %y)             {\n  %1 = icmp slt i8 %x, %y\n  ret i1 %1\n}
define i1 @_Int8_opGT(i8 %x, i8 %y)             {\n  %1 = icmp sgt i8 %x, %y\n  ret i1 %1\n}
define i1 @_Int8_opLE(i8 %x, i8 %y)             {\n  %1 = icmp sle i8 %x, %y\n  ret i1 %1\n}
define i1 @_Int8_opGE(i8 %x, i8 %y)             {\n  %1 = icmp sge i8 %x, %y\n  ret i1 %1\n}
define i8 @_Int8_opPlus(i8 %x, i8 %y)           {\n  %1 = add i8 %x, %y\n  ret i8 %1\n}
define i8 @_Int8_opMinus(i8 %x, i8 %y)          {\n  %1 = sub i8 %x, %y\n  ret i8 %1\n}
define i8 @_Int8_opMul(i8 %x, i8 %y)            {\n  %1 = mul i8 %x, %y\n  ret i8 %1\n}
define i8 @_Int8_opDiv(i8 %x, i8 %y)            {\n  %1 = sdiv i8 %x, %y\n  ret i8 %1\n}
define i8 @_Int8_opMod(i8 %x, i8 %y)            {\n  %1 = srem i8 %x, %y\n  ret i8 %1\n}
define i8 @_Int8_opPlus1(i8 %x)                 {\n  ret i8 %x\n}
define i8 @_Int8_opMinus1(i8 %x)                {\n  %1 = sub i8 0, %x\n  ret i8 %1\n}

define i8 @_UInt8_opAssign(i8* %x, i8 %y)       {\n  store i8 %y, i8* %x\n  ret i8 %y\n}
define i1 @_UInt8_opEQ(i8 %x, i8 %y)            {\n  %1 = icmp eq i8 %x, %y\n  ret i1 %1\n}
define i1 @_UInt8_opNE(i8 %x, i8 %y)            {\n  %1 = icmp ne i8 %x, %y\n  ret i1 %1\n}
define i1 @_UInt8_opLT(i8 %x, i8 %y)            {\n  %1 = icmp ult i8 %x, %y\n  ret i1 %1\n}
define i1 @_UInt8_opGT(i8 %x, i8 %y)            {\n  %1 = icmp ugt i8 %x, %y\n  ret i1 %1\n}
define i1 @_UInt8_opLE(i8 %x, i8 %y)            {\n  %1 = icmp ule i8 %x, %y\n  ret i1 %1\n}
define i1 @_UInt8_opGE(i8 %x, i8 %y)            {\n  %1 = icmp uge i8 %x, %y\n  ret i1 %1\n}
define i8 @_UInt8_opPlus(i8 %x, i8 %y)          {\n  %1 = add i8 %x, %y\n  ret i8 %1\n}
define i8 @_UInt8_opMinus(i8 %x, i8 %y)         {\n  %1 = sub i8 %x, %y\n  ret i8 %1\n}
define i8 @_UInt8_opMul(i8 %x, i8 %y)           {\n  %1 = mul i8 %x, %y\n  ret i8 %1\n}
define i8 @_UInt8_opDiv(i8 %x, i8 %y)           {\n  %1 = sdiv i8 %x, %y\n  ret i8 %1\n}
define i8 @_UInt8_opMod(i8 %x, i8 %y)           {\n  %1 = srem i8 %x, %y\n  ret i8 %1\n}
define i8 @_UInt8_opPlus1(i8 %x)                {\n  ret i8 %x\n}

define i16 @_Int16_opAssign(i16* %x, i16 %y)    {\n  store i16 %y, i16* %x\n  ret i16 %y\n}
define i1 @_Int16_opEQ(i16 %x, i16 %y)          {\n  %1 = icmp eq i16 %x, %y\n  ret i1 %1\n}
define i1 @_Int16_opNE(i16 %x, i16 %y)          {\n  %1 = icmp ne i16 %x, %y\n  ret i1 %1\n}
define i1 @_Int16_opLT(i16 %x, i16 %y)          {\n  %1 = icmp slt i16 %x, %y\n  ret i1 %1\n}
define i1 @_Int16_opGT(i16 %x, i16 %y)          {\n  %1 = icmp sgt i16 %x, %y\n  ret i1 %1\n}
define i1 @_Int16_opLE(i16 %x, i16 %y)          {\n  %1 = icmp sle i16 %x, %y\n  ret i1 %1\n}
define i1 @_Int16_opGE(i16 %x, i16 %y)          {\n  %1 = icmp sge i16 %x, %y\n  ret i1 %1\n}
define i16 @_Int16_opPlus(i16 %x, i16 %y)       {\n  %1 = add i16 %x, %y\n  ret i16 %1\n}
define i16 @_Int16_opMinus(i16 %x, i16 %y)      {\n  %1 = sub i16 %x, %y\n  ret i16 %1\n}
define i16 @_Int16_opMul(i16 %x, i16 %y)        {\n  %1 = mul i16 %x, %y\n  ret i16 %1\n}
define i16 @_Int16_opDiv(i16 %x, i16 %y)        {\n  %1 = sdiv i16 %x, %y\n  ret i16 %1\n}
define i16 @_Int16_opMod(i16 %x, i16 %y)        {\n  %1 = srem i16 %x, %y\n  ret i16 %1\n}
define i16 @_Int16_opPlus1(i16 %x)              {\n  ret i16 %x\n}
define i16 @_Int16_opMinus1(i16 %x)             {\n  %1 = sub i16 0, %x\n  ret i16 %1\n}

define i16 @_UInt16_opAssign(i16* %x, i16 %y)   {\n  store i16 %y, i16* %x\n  ret i16 %y\n}
define i1 @_UInt16_opEQ(i16 %x, i16 %y)         {\n  %1 = icmp eq i16 %x, %y\n  ret i1 %1\n}
define i1 @_UInt16_opNE(i16 %x, i16 %y)         {\n  %1 = icmp ne i16 %x, %y\n  ret i1 %1\n}
define i1 @_UInt16_opLT(i16 %x, i16 %y)         {\n  %1 = icmp ult i16 %x, %y\n  ret i1 %1\n}
define i1 @_UInt16_opGT(i16 %x, i16 %y)         {\n  %1 = icmp ugt i16 %x, %y\n  ret i1 %1\n}
define i1 @_UInt16_opLE(i16 %x, i16 %y)         {\n  %1 = icmp ule i16 %x, %y\n  ret i1 %1\n}
define i1 @_UInt16_opGE(i16 %x, i16 %y)         {\n  %1 = icmp uge i16 %x, %y\n  ret i1 %1\n}
define i16 @_UInt16_opPlus(i16 %x, i16 %y)      {\n  %1 = add i16 %x, %y\n  ret i16 %1\n}
define i16 @_UInt16_opMinus(i16 %x, i16 %y)     {\n  %1 = sub i16 %x, %y\n  ret i16 %1\n}
define i16 @_UInt16_opMul(i16 %x, i16 %y)       {\n  %1 = mul i16 %x, %y\n  ret i16 %1\n}
define i16 @_UInt16_opDiv(i16 %x, i16 %y)       {\n  %1 = sdiv i16 %x, %y\n  ret i16 %1\n}
define i16 @_UInt16_opMod(i16 %x, i16 %y)       {\n  %1 = srem i16 %x, %y\n  ret i16 %1\n}
define i16 @_UInt16_opPlus1(i16 %x)             {\n  ret i16 %x\n}

define i32 @_Int32_opAssign(i32* %x, i32 %y)      {\n  store i32 %y, i32* %x\n  ret i32 %y\n}
define i1 @_Int32_opEQ(i32 %x, i32 %y)            {\n  %1 = icmp eq i32 %x, %y\n  ret i1 %1\n}
define i1 @_Int32_opNE(i32 %x, i32 %y)            {\n  %1 = icmp ne i32 %x, %y\n  ret i1 %1\n}
define i1 @_Int32_opLT(i32 %x, i32 %y)            {\n  %1 = icmp slt i32 %x, %y\n  ret i1 %1\n}
define i1 @_Int32_opGT(i32 %x, i32 %y)            {\n  %1 = icmp sgt i32 %x, %y\n  ret i1 %1\n}
define i1 @_Int32_opLE(i32 %x, i32 %y)            {\n  %1 = icmp sle i32 %x, %y\n  ret i1 %1\n}
define i1 @_Int32_opGE(i32 %x, i32 %y)            {\n  %1 = icmp sge i32 %x, %y\n  ret i1 %1\n}
define i32 @_Int32_opPlus(i32 %x, i32 %y)         {\n  %1 = add i32 %x, %y\n  ret i32 %1\n}
define i32 @_Int32_opMinus(i32 %x, i32 %y)        {\n  %1 = sub i32 %x, %y\n  ret i32 %1\n}
define i32 @_Int32_opMul(i32 %x, i32 %y)          {\n  %1 = mul i32 %x, %y\n  ret i32 %1\n}
define i32 @_Int32_opDiv(i32 %x, i32 %y)          {\n  %1 = sdiv i32 %x, %y\n  ret i32 %1\n}
define i32 @_Int32_opMod(i32 %x, i32 %y)          {\n  %1 = srem i32 %x, %y\n  ret i32 %1\n}
define i32 @_Int32_opPlus1(i32 %x)                {\n  ret i32 %x\n}
define i32 @_Int32_opMinus1(i32 %x)               {\n  %1 = sub i32 0, %x\n  ret i32 %1\n}

define i32 @_UInt32_opAssign(i32* %x, i32 %y)     {\n  store i32 %y, i32* %x\n  ret i32 %y\n}
define i1 @_UInt32_opEQ(i32 %x, i32 %y)           {\n  %1 = icmp eq i32 %x, %y\n  ret i1 %1\n}
define i1 @_UInt32_opNE(i32 %x, i32 %y)           {\n  %1 = icmp ne i32 %x, %y\n  ret i1 %1\n}
define i1 @_UInt32_opLT(i32 %x, i32 %y)           {\n  %1 = icmp ult i32 %x, %y\n  ret i1 %1\n}
define i1 @_UInt32_opGT(i32 %x, i32 %y)           {\n  %1 = icmp ugt i32 %x, %y\n  ret i1 %1\n}
define i1 @_UInt32_opLE(i32 %x, i32 %y)           {\n  %1 = icmp ule i32 %x, %y\n  ret i1 %1\n}
define i1 @_UInt32_opGE(i32 %x, i32 %y)           {\n  %1 = icmp uge i32 %x, %y\n  ret i1 %1\n}
define i32 @_UInt32_opPlus(i32 %x, i32 %y)        {\n  %1 = add i32 %x, %y\n  ret i32 %1\n}
define i32 @_UInt32_opMinus(i32 %x, i32 %y)       {\n  %1 = sub i32 %x, %y\n  ret i32 %1\n}
define i32 @_UInt32_opMul(i32 %x, i32 %y)         {\n  %1 = mul i32 %x, %y\n  ret i32 %1\n}
define i32 @_UInt32_opDiv(i32 %x, i32 %y)         {\n  %1 = sdiv i32 %x, %y\n  ret i32 %1\n}
define i32 @_UInt32_opMod(i32 %x, i32 %y)         {\n  %1 = srem i32 %x, %y\n  ret i32 %1\n}
define i32 @_UInt32_opPlus1(i32 %x)               {\n  ret i32 %x\n}

define i64 @_Int64_opAssign(i64* %x, i64 %y)     {\n  store i64 %y, i64* %x\n  ret i64 %y\n}
define i1 @_Int64_opEQ(i64 %x, i64 %y)           {\n  %1 = icmp eq i64 %x, %y\n  ret i1 %1\n}
define i1 @_Int64_opNE(i64 %x, i64 %y)           {\n  %1 = icmp ne i64 %x, %y\n  ret i1 %1\n}
define i1 @_Int64_opLT(i64 %x, i64 %y)           {\n  %1 = icmp slt i64 %x, %y\n  ret i1 %1\n}
define i1 @_Int64_opGT(i64 %x, i64 %y)           {\n  %1 = icmp sgt i64 %x, %y\n  ret i1 %1\n}
define i1 @_Int64_opLE(i64 %x, i64 %y)           {\n  %1 = icmp sle i64 %x, %y\n  ret i1 %1\n}
define i1 @_Int64_opGE(i64 %x, i64 %y)           {\n  %1 = icmp sge i64 %x, %y\n  ret i1 %1\n}
define i64 @_Int64_opPlus(i64 %x, i64 %y)        {\n  %1 = add i64 %x, %y\n  ret i64 %1\n}
define i64 @_Int64_opMinus(i64 %x, i64 %y)       {\n  %1 = sub i64 %x, %y\n  ret i64 %1\n}
define i64 @_Int64_opMul(i64 %x, i64 %y)         {\n  %1 = mul i64 %x, %y\n  ret i64 %1\n}
define i64 @_Int64_opDiv(i64 %x, i64 %y)         {\n  %1 = sdiv i64 %x, %y\n  ret i64 %1\n}
define i64 @_Int64_opMod(i64 %x, i64 %y)         {\n  %1 = srem i64 %x, %y\n  ret i64 %1\n}
define i64 @_Int64_opPlus1(i64 %x)               {\n  ret i64 %x\n}
define i64 @_Int64_opMinus1(i64 %x)              {\n  %1 = sub i64 0, %x\n  ret i64 %1\n}

define i64 @_UInt64_opAssign(i64* %x, i64 %y)    {\n  store i64 %y, i64* %x\n  ret i64 %y\n}
define i1 @_UInt64_opEQ(i64 %x, i64 %y)          {\n  %1 = icmp eq i64 %x, %y\n  ret i1 %1\n}
define i1 @_UInt64_opNE(i64 %x, i64 %y)          {\n  %1 = icmp ne i64 %x, %y\n  ret i1 %1\n}
define i1 @_UInt64_opLT(i64 %x, i64 %y)          {\n  %1 = icmp ult i64 %x, %y\n  ret i1 %1\n}
define i1 @_UInt64_opGT(i64 %x, i64 %y)          {\n  %1 = icmp ugt i64 %x, %y\n  ret i1 %1\n}
define i1 @_UInt64_opLE(i64 %x, i64 %y)          {\n  %1 = icmp ule i64 %x, %y\n  ret i1 %1\n}
define i1 @_UInt64_opGE(i64 %x, i64 %y)          {\n  %1 = icmp uge i64 %x, %y\n  ret i1 %1\n}
define i64 @_UInt64_opPlus(i64 %x, i64 %y)       {\n  %1 = add i64 %x, %y\n  ret i64 %1\n}
define i64 @_UInt64_opMinus(i64 %x, i64 %y)      {\n  %1 = sub i64 %x, %y\n  ret i64 %1\n}
define i64 @_UInt64_opMul(i64 %x, i64 %y)        {\n  %1 = mul i64 %x, %y\n  ret i64 %1\n}
define i64 @_UInt64_opDiv(i64 %x, i64 %y)        {\n  %1 = sdiv i64 %x, %y\n  ret i64 %1\n}
define i64 @_UInt64_opMod(i64 %x, i64 %y)        {\n  %1 = srem i64 %x, %y\n  ret i64 %1\n}
define i64 @_UInt64_opPlus1(i64 %x)              {\n  ret i64 %x\n}

define float @_Float32_opAssign(float* %x, float %y)      {\n  store float %y, float* %x\n  ret float %y\n}
define i1 @_Float32_opEQ(float %x, float %y)              {\n  %1 = fcmp oeq float %x, %y\n  ret i1 %1\n}
define i1 @_Float32_opNE(float %x, float %y)              {\n  %1 = fcmp one float %x, %y\n  ret i1 %1\n}
define i1 @_Float32_opLT(float %x, float %y)              {\n  %1 = fcmp olt float %x, %y\n  ret i1 %1\n}
define i1 @_Float32_opGT(float %x, float %y)              {\n  %1 = fcmp ogt float %x, %y\n  ret i1 %1\n}
define i1 @_Float32_opLE(float %x, float %y)              {\n  %1 = fcmp ole float %x, %y\n  ret i1 %1\n}
define i1 @_Float32_opGE(float %x, float %y)              {\n  %1 = fcmp oge float %x, %y\n  ret i1 %1\n}
define float @_Float32_opPlus(float %x, float %y)         {\n  %1 = fadd float %x, %y\n  ret float %1\n}
define float @_Float32_opMinus(float %x, float %y)        {\n  %1 = fsub float %x, %y\n  ret float %1\n}
define float @_Float32_opMul(float %x, float %y)          {\n  %1 = fmul float %x, %y\n  ret float %1\n}
define float @_Float32_opDiv(float %x, float %y)          {\n  %1 = fdiv float %x, %y\n  ret float %1\n}
define float @_Float32_opPlus1(float %x)                  {\n  ret float %x\n}
define float @_Float32_opMinus1(float %x)                 {\n  %1 = fsub float 0.0, %x\n  ret float %1\n}

define double @_Float64_opAssign(double* %x, double %y)  {\n  store double %y, double* %x\n  ret double %y\n}
define i1 @_Float64_opEQ(double %x, double %y)           {\n  %1 = fcmp oeq double %x, %y\n  ret i1 %1\n}
define i1 @_Float64_opNE(double %x, double %y)           {\n  %1 = fcmp one double %x, %y\n  ret i1 %1\n}
define i1 @_Float64_opLT(double %x, double %y)           {\n  %1 = fcmp olt double %x, %y\n  ret i1 %1\n}
define i1 @_Float64_opGT(double %x, double %y)           {\n  %1 = fcmp ogt double %x, %y\n  ret i1 %1\n}
define i1 @_Float64_opLE(double %x, double %y)           {\n  %1 = fcmp ole double %x, %y\n  ret i1 %1\n}
define i1 @_Float64_opGE(double %x, double %y)           {\n  %1 = fcmp oge double %x, %y\n  ret i1 %1\n}
define double @_Float64_opPlus(double %x, double %y)     {\n  %1 = fadd double %x, %y\n  ret double %1\n}
define double @_Float64_opMinus(double %x, double %y)    {\n  %1 = fsub double %x, %y\n  ret double %1\n}
define double @_Float64_opMul(double %x, double %y)      {\n  %1 = fmul double %x, %y\n  ret double %1\n}
define double @_Float64_opDiv(double %x, double %y)      {\n  %1 = fdiv double %x, %y\n  ret double %1\n}
define double @_Float64_opPlus1(double %x)               {\n  ret double %x\n}
define double @_Float64_opMinus1(double %x)              {\n  %1 = fsub double 0.0, %x\n  ret double %1\n}

define i8 @_Char_opAssign(i8* %x, i8 %y)        {\n  store i8 %y, i8* %x\n  ret i8 %y\n}
define i1 @_Char_opEQ(i8 %x, i8 %y)             {\n  %1 = icmp eq i8 %x, %y\n  ret i1 %1\n}
define i1 @_Char_opNE(i8 %x, i8 %y)             {\n  %1 = icmp ne i8 %x, %y\n  ret i1 %1\n}
define i1 @_Char_opLT(i8 %x, i8 %y)             {\n  %1 = icmp slt i8 %x, %y\n  ret i1 %1\n}
define i1 @_Char_opGT(i8 %x, i8 %y)             {\n  %1 = icmp sgt i8 %x, %y\n  ret i1 %1\n}
define i1 @_Char_opLE(i8 %x, i8 %y)             {\n  %1 = icmp sle i8 %x, %y\n  ret i1 %1\n}
define i1 @_Char_opGE(i8 %x, i8 %y)             {\n  %1 = icmp sge i8 %x, %y\n  ret i1 %1\n}

define i1 @implOpRefEQ(i8* %x, i8* %y)             {\n  %1 = icmp eq i8* %x, %y\n  ret i1 %1\n}
define i1 @implOpRefNE(i8* %x, i8* %y)              {\n  %1 = icmp ne i8* %x, %y\n  ret i1 %1\n}

define void @writeLnByte(i8 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtIntN, i32 0, i32 0), i8 %val)
  ret void
}

define void @writeLnShort(i16 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtIntN, i32 0, i32 0), i16 %val)
  ret void
}

define void @writeLnInt(i32 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtIntN, i32 0, i32 0), i32 %val)
  ret void
}

define void @writeLnUInt(i32 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtIntN, i32 0, i32 0), i32 %val)
  ret void
}

define void @writeLnSizeType(i64 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtIntN, i32 0, i32 0), i64 %val)
  ret void
}

define void @writeLnFloat32(float %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtDoubleN, i32 0, i32 0), float %val)
  ret void
}

define void @writeLnFloat64(double %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtDoubleN, i32 0, i32 0), double %val)
  ret void
}

define void @writeLnChar(i8 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtCharN, i32 0, i32 0), i8 %val)
  ret void
}

define void @writeLnStringImpl(i8* %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtStringN, i32 0, i32 0), i8* %val)
  ret void
}

define void @writeLnPointer(i8* %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fmtPointerN, i32 0, i32 0), i8* %val)
  ret void
}

define void @writeByte(i8 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt, i32 0, i32 0), i8 %val)
  ret void
}

define void @writeShort(i16 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt, i32 0, i32 0), i16 %val)
  ret void
}

define void @writeInt(i32 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt, i32 0, i32 0), i32 %val)
  ret void
}

define void @writeLong(i64 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtInt, i32 0, i32 0), i64 %val)
  ret void
}

define void @writeDouble(double %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtDouble, i32 0, i32 0), double %val)
  ret void
}

define void @writeChar(i8 %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtChar, i32 0, i32 0), i8 %val)
  ret void
}

define void @writeStringImpl(i8* %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtString, i32 0, i32 0), i8* %val)
  ret void
}

define void @writePointer(i8* %val) {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.fmtPointer, i32 0, i32 0), i8* %val)
  ret void
}

define void @_Type_ctor(i8** %$this)
{
  store i8* null, i8** %$this
  ret void
}

define void @_Type_copy_ctor(i8** %$this, i8* %other)
{
  store i8* %other, i8** %$this
  ret void
}
"
)

[ct]
    [bitcopiable, native("Type"), noDefault]
    datatype Type {}

[ct, protected]
    [native("_Type_ctor")] fun ctor(this: !Type)
    [native("_Type_copy_ctor")] fun ctor(this: !Type, other: Type)

[noDefault, bitcopiable]
    datatype Uninitialized

    [native("Null")]    datatype Null

    [native("i1")]      datatype Bool

    [native("i8")]      datatype Int8
    [native("u8")]      datatype UInt8
    [native("i16")]     datatype Int16
    [native("u16")]     datatype UInt16
    [native("i32")]     datatype Int
    [native("u32")]     datatype UInt32
    [native("i64")]     datatype Int64
    [native("u64")]     datatype UInt64

    [native("float")]   datatype Float32
    [native("double")]  datatype Float

    [native("i8")]      datatype Char

using Int32 = Int
using Float64 = Float

[protected]
    fun ctor(this: Uninitialized) {}
    fun ctor(this, other: Uninitialized) {}
    fun dtor(this: Uninitialized) {}

[protected]
    fun ctor(this: Null) {}
    fun ctor(this, other: Null) {}
    fun dtor(this: Null) {}

    [native("_zero_init_1")] fun ctor(this: !Bool)
    [native("_ass_1_1")] fun ctor(this: !Bool, src: Bool)
    fun dtor(this: !Bool) {}
    [autoCt, native("_ass_1_1")] fun = (this: !Bool, other: Bool): Bool

    [native("_zero_init_8")] fun ctor(this: !Int8)
    [native("_ass_8_8")] fun ctor(this: !Int8, src: Int8)
    [native("_ass_8_8")] fun ctor(this: !Int8, src: Char)
    [native("_ass_8_8")] fun ctor(this: !Int8, src: UInt8)
    [native("_ass_8_16")] fun ctor(this: !Int8, src: Int16)
    [native("_ass_8_16")] fun ctor(this: !Int8, src: UInt16)
    [native("_ass_8_32")] fun ctor(this: !Int8, src: Int32)
    [native("_ass_8_32")] fun ctor(this: !Int8, src: UInt32)
    [native("_ass_8_64")] fun ctor(this: !Int8, src: Int64)
    [native("_ass_8_64")] fun ctor(this: !Int8, src: UInt64)
    [native("_ass_i8_f")] fun ctor(this: !Int8, src: Float32)
    [native("_ass_i8_d")] fun ctor(this: !Int8, src: Float64)
    fun dtor(this: Int8) {}
    [native("_ass_8_8")] fun = (this: !Int8, other: Int8)

    [native("_zero_init_8")] fun ctor(this: !UInt8)
    [native("_ass_8_8")] fun ctor(this: !UInt8, src: Int8)
    [native("_ass_8_8")] fun ctor(this: !UInt8, src: UInt8)
    [native("_ass_8_16")] fun ctor(this: !UInt8, src: Int16)
    [native("_ass_8_16")] fun ctor(this: !UInt8, src: UInt16)
    [native("_ass_8_32")] fun ctor(this: !UInt8, src: Int32)
    [native("_ass_8_32")] fun ctor(this: !UInt8, src: UInt32)
    [native("_ass_8_64")] fun ctor(this: !UInt8, src: Int64)
    [native("_ass_8_64")] fun ctor(this: !UInt8, src: UInt64)
    [native("_ass_u8_f")] fun ctor(this: !UInt8, src: Float32)
    [native("_ass_u8_d")] fun ctor(this: !UInt8, src: Float64)
    fun dtor(this: UInt8) {}
    [native("_ass_8_8")] fun = (this: !UInt8, other: UInt8)

    [native("_zero_init_16")] fun ctor(this: !Int16)
    [native("_ass_16_8s")] fun ctor(this: !Int16, src: Int8)
    [native("_ass_16_8z")] fun ctor(this: !Int16, src: UInt8)
    [native("_ass_16_16")] fun ctor(this: !Int16, src: Int16)
    [native("_ass_16_16")] fun ctor(this: !Int16, src: UInt16)
    [native("_ass_16_32")] fun ctor(this: !Int16, src: Int32)
    [native("_ass_16_32")] fun ctor(this: !Int16, src: UInt32)
    [native("_ass_16_64")] fun ctor(this: !Int16, src: Int64)
    [native("_ass_16_64")] fun ctor(this: !Int16, src: UInt64)
    [native("_ass_i16_f")] fun ctor(this: !Int16, src: Float32)
    [native("_ass_i16_d")] fun ctor(this: !Int16, src: Float64)
    fun dtor(this: Int16) {}
    [native("_ass_16_16")] fun = (this: !Int16, other: Int16)

    [native("_zero_init_16")] fun ctor(this: !UInt16)
    [native("_ass_16_8z")] fun ctor(this: !UInt16, src: Int8)
    [native("_ass_16_8z")] fun ctor(this: !UInt16, src: UInt8)
    [native("_ass_16_16")] fun ctor(this: !UInt16, src: Int16)
    [native("_ass_16_16")] fun ctor(this: !UInt16, src: UInt16)
    [native("_ass_16_32")] fun ctor(this: !UInt16, src: Int32)
    [native("_ass_16_32")] fun ctor(this: !UInt16, src: UInt32)
    [native("_ass_16_64")] fun ctor(this: !UInt16, src: Int64)
    [native("_ass_16_64")] fun ctor(this: !UInt16, src: UInt64)
    [native("_ass_u16_f")] fun ctor(this: !UInt16, src: Float32)
    [native("_ass_u16_d")] fun ctor(this: !UInt16, src: Float64)
    fun dtor(this: UInt16) {}
    [native("_ass_16_16")] fun = (this: !UInt16, other: UInt16)

    [native("_zero_init_32")] fun ctor(this: !Int32)
    [native("_ass_32_8s")] fun ctor(this: !Int32, src: Int8)
    [native("_ass_32_8z")] fun ctor(this: !Int32, src: UInt8)
    [native("_ass_32_16s")] fun ctor(this: !Int32, src: Int16)
    [native("_ass_32_16z")] fun ctor(this: !Int32, src: UInt16)
    [native("_ass_32_32")] fun ctor(this: !Int32, src: Int32)
    [native("_ass_32_32")] fun ctor(this: !Int32, src: UInt32)
    [native("_ass_32_64")] fun ctor(this: !Int32, src: Int64)
    [native("_ass_32_64")] fun ctor(this: !Int32, src: UInt64)
    [native("_ass_i32_f")] fun ctor(this: !Int32, src: Float32)
    [native("_ass_i32_d")] fun ctor(this: !Int32, src: Float64)
    [native("_ass_32_8z")] fun ctor(this: !Int32, src: Char)
    fun dtor(this: Int32) {}
    [native("_ass_32_32")] fun = (this: !Int32, other: Int32)

    [native("_zero_init_32")] fun ctor(this: !UInt32)
    [native("_ass_32_8z")] fun ctor(this: !UInt32, src: Int8)
    [native("_ass_32_8z")] fun ctor(this: !UInt32, src: UInt8)
    [native("_ass_32_16z")] fun ctor(this: !UInt32, src: Int16)
    [native("_ass_32_16z")] fun ctor(this: !UInt32, src: UInt16)
    [native("_ass_32_32")] fun ctor(this: !UInt32, src: Int32)
    [native("_ass_32_32")] fun ctor(this: !UInt32, src: UInt32)
    [native("_ass_32_64")] fun ctor(this: !UInt32, src: Int64)
    [native("_ass_32_64")] fun ctor(this: !UInt32, src: UInt64)
    [native("_ass_u32_f")] fun ctor(this: !UInt32, src: Float32)
    [native("_ass_u32_d")] fun ctor(this: !UInt32, src: Float64)
    fun dtor(this: UInt32) {}
    [native("_ass_32_32")] fun = (this: !UInt32, other: UInt32)

    [native("_zero_init_64")] fun ctor(this: !Int64)
    [native("_ass_64_8s")] fun ctor(this: !Int64, src: Int8)
    [native("_ass_64_8z")] fun ctor(this: !Int64, src: UInt8)
    [native("_ass_64_16s")] fun ctor(this: !Int64, src: Int16)
    [native("_ass_64_16z")] fun ctor(this: !Int64, src: UInt16)
    [native("_ass_64_32s")] fun ctor(this: !Int64, src: Int32)
    [native("_ass_64_32z")] fun ctor(this: !Int64, src: UInt32)
    [native("_ass_64_64")] fun ctor(this: !Int64, src: Int64)
    [native("_ass_64_64")] fun ctor(this: !Int64, src: UInt64)
    [native("_ass_i64_f")] fun ctor(this: !Int64, src: Float32)
    [native("_ass_i64_d")] fun ctor(this: !Int64, src: Float64)
    fun dtor(this: Int64) {}
    [native("_ass_64_64")] fun = (this: !Int64, other: Int64)

    [native("_zero_init_64")] fun ctor(this: !UInt64)
    [native("_ass_64_8z")] fun ctor(this: !UInt64, src: Int8)
    [native("_ass_64_8z")] fun ctor(this: !UInt64, src: UInt8)
    [native("_ass_64_16z")] fun ctor(this: !UInt64, src: Int16)
    [native("_ass_64_16z")] fun ctor(this: !UInt64, src: UInt16)
    [native("_ass_64_32z")] fun ctor(this: !UInt64, src: Int32)
    [native("_ass_64_32z")] fun ctor(this: !UInt64, src: UInt32)
    [native("_ass_64_64")] fun ctor(this: !UInt64, src: Int64)
    [native("_ass_64_64")] fun ctor(this: !UInt64, src: UInt64)
    [native("_ass_u64_f")] fun ctor(this: !UInt64, src: Float32)
    [native("_ass_u64_d")] fun ctor(this: !UInt64, src: Float64)
    fun dtor(this: UInt64) {}
    [native("_ass_64_64")] fun = (this: !UInt64, other: UInt64)

    [native("_zero_init_f")] fun ctor(this: !Float32)
    [native("_ass_f_i8")] fun ctor(this: !Float32, src: Int8)
    [native("_ass_f_u8")] fun ctor(this: !Float32, src: UInt8)
    [native("_ass_f_i16")] fun ctor(this: !Float32, src: Int16)
    [native("_ass_f_u16")] fun ctor(this: !Float32, src: UInt16)
    [native("_ass_f_i32")] fun ctor(this: !Float32, src: Int32)
    [native("_ass_f_u32")] fun ctor(this: !Float32, src: UInt32)
    [native("_ass_f_i64")] fun ctor(this: !Float32, src: Int64)
    [native("_ass_f_u64")] fun ctor(this: !Float32, src: UInt64)
    [native("_ass_f_f")] fun ctor(this: !Float32, src: Float32)
    [native("_ass_f_d")] fun ctor(this: !Float32, src: Float64)
    fun dtor(this: Float32) {}
    [native("_ass_f_f")] fun = (this: !Float32, other: Float32)

    [native("_zero_init_d")] fun ctor(this: !Float64)
    [native("_ass_d_i8")] fun ctor(this: !Float64, src: Int8)
    [native("_ass_d_u8")] fun ctor(this: !Float64, src: UInt8)
    [native("_ass_d_i16")] fun ctor(this: !Float64, src: Int16)
    [native("_ass_d_u16")] fun ctor(this: !Float64, src: UInt16)
    [native("_ass_d_i32")] fun ctor(this: !Float64, src: Int32)
    [native("_ass_d_u32")] fun ctor(this: !Float64, src: UInt32)
    [native("_ass_d_i64")] fun ctor(this: !Float64, src: Int64)
    [native("_ass_d_u64")] fun ctor(this: !Float64, src: UInt64)
    [native("_ass_d_f")] fun ctor(this: !Float64, src: Float32)
    [native("_ass_d_d")] fun ctor(this: !Float64, src: Float64)
    fun dtor(this: Float64) {}
    [native("_ass_d_d")] fun = (this: !Float64, other: Float64)

    [native("_zero_init_8")] fun ctor(this: !Char)
    [native("_ass_8_8")] fun ctor(this: !Char, src: Char)
    [native("_ass_8_8")] fun ctor(this: !Char, src: Int8)
    [native("_ass_8_32")] fun ctor(this: !Char, src: Int32)
    fun dtor(this: Char) {}
    [native("_ass_8_8")] fun = (this: !Char, other: Char)

[noDefault, bitcopiable, native("StringRef")]
datatype StringRef
    begin: @Int8
    end: @Int8

[protected]
    fun ctor(this: !StringRef)
        begin := null
        end := null
    fun ctor(this: !StringRef, size: Int)
        begin := malloc(size + 1)
        end := ptrAdd(begin, size)
        end = Int8(0)
    fun ctor(this: !StringRef, other: StringRef)
        begin := other.begin
        end := other.end
    fun dtor(this: StringRef) {}

fun size(this: StringRef): Int
    return ptrDiff(end, begin);

fun getChar(this: StringRef, i: Int): Char
    return reinterpretCast(@Char, ptrAdd(begin, i));

fun == (this, other: StringRef): Bool
    let s = this.size()
    if ( s != other.size() ) return false
    var i = 0
    while i<s ; i+=1
        if this.getChar(i) != other.getChar(i)
          return false
    return true

[autoCt] fun = (dest: !StringRef, src: StringRef)
    dest.begin := src.begin
    dest.end := src.end

fun + (x,y: StringRef): StringRef
    let sz1 = x.size()
    let sz2 = y.size()
    let res: StringRef = sz1 + sz2
    memcpy(res.begin, x.begin, sz1)
    memcpy(ptrAdd(res.begin, sz1), y.begin, sz2)
    return res

[autoCt, protected]
    [native("$logicalOr")] fun || (x, y: Bool): Bool
    [native("$logicalAnd")] fun && (x, y: Bool): Bool
    [native("_Bool_opXor")] fun ^^ (x, y: Bool): Bool
    [native("_Bool_opEQ")] fun == (x, y: Bool): Bool
    [native("_Bool_opNE")] fun != (x, y: Bool): Bool
    [native("_Bool_opNeg")] fun ! (x: Bool): Bool

    [native("_Char_opEQ")] fun == (x, y: Char): Bool
    [native("_Char_opNE")] fun != (x, y: Char): Bool
    [native("_Char_opLT")] fun < (x, y: Char): Bool
    [native("_Char_opGT")] fun > (x, y: Char): Bool
    [native("_Char_opLE")] fun <= (x, y: Char): Bool
    [native("_Char_opGE")] fun >= (x, y: Char): Bool

[autoCt, protected]
    [native("_Int8_opEQ")] fun == (x, y: Int8): Bool
    [native("_UInt8_opEQ")] fun == (x, y: UInt8): Bool
    [native("_Int16_opEQ")] fun == (x, y: Int16): Bool
    [native("_UInt16_opEQ")] fun == (x, y: UInt16): Bool
    [native("_Int32_opEQ")] fun == (x, y: Int32): Bool
    [native("_UInt32_opEQ")] fun == (x, y: UInt32): Bool
    [native("_Int64_opEQ")] fun == (x, y: Int64): Bool
    [native("_UInt64_opEQ")] fun == (x, y: UInt64): Bool
    [native("_Float32_opEQ")] fun == (x, y: Float32): Bool
    [native("_Float64_opEQ")] fun == (x, y: Float64): Bool

    [native("_Int8_opNE")] fun != (x, y: Int8): Bool
    [native("_UInt8_opNE")] fun != (x, y: UInt8): Bool
    [native("_Int16_opNE")] fun != (x, y: Int16): Bool
    [native("_UInt16_opNE")] fun != (x, y: UInt16): Bool
    [native("_Int32_opNE")] fun != (x, y: Int32): Bool
    [native("_UInt32_opNE")] fun != (x, y: UInt32): Bool
    [native("_Int64_opNE")] fun != (x, y: Int64): Bool
    [native("_UInt64_opNE")] fun != (x, y: UInt64): Bool
    [native("_Float32_opNE")] fun != (x, y: Float32): Bool
    [native("_Float64_opNE")] fun != (x, y: Float64): Bool

    [native("_Int8_opLT")] fun < (x, y: Int8): Bool
    [native("_UInt8_opLT")] fun < (x, y: UInt8): Bool
    [native("_Int16_opLT")] fun < (x, y: Int16): Bool
    [native("_UInt16_opLT")] fun < (x, y: UInt16): Bool
    [native("_Int32_opLT")] fun < (x, y: Int32): Bool
    [native("_UInt32_opLT")] fun < (x, y: UInt32): Bool
    [native("_Int64_opLT")] fun < (x, y: Int64): Bool
    [native("_UInt64_opLT")] fun < (x, y: UInt64): Bool
    [native("_Float32_opLT")] fun < (x, y: Float32): Bool
    [native("_Float64_opLT")] fun < (x, y: Float64): Bool

    [native("_Int8_opGT")] fun > (x, y: Int8): Bool
    [native("_UInt8_opGT")] fun > (x, y: UInt8): Bool
    [native("_Int16_opGT")] fun > (x, y: Int16): Bool
    [native("_UInt16_opGT")] fun > (x, y: UInt16): Bool
    [native("_Int32_opGT")] fun > (x, y: Int32): Bool
    [native("_UInt32_opGT")] fun > (x, y: UInt32): Bool
    [native("_Int64_opGT")] fun > (x, y: Int64): Bool
    [native("_UInt64_opGT")] fun > (x, y: UInt64): Bool
    [native("_Float32_opGT")] fun > (x, y: Float32): Bool
    [native("_Float64_opGT")] fun > (x, y: Float64): Bool

    [native("_Int8_opLE")] fun <= (x, y: Int8): Bool
    [native("_UInt8_opLE")] fun <= (x, y: UInt8): Bool
    [native("_Int16_opLE")] fun <= (x, y: Int16): Bool
    [native("_UInt16_opLE")] fun <= (x, y: UInt16): Bool
    [native("_Int32_opLE")] fun <= (x, y: Int32): Bool
    [native("_UInt32_opLE")] fun <= (x, y: UInt32): Bool
    [native("_Int64_opLE")] fun <= (x, y: Int64): Bool
    [native("_UInt64_opLE")] fun <= (x, y: UInt64): Bool
    [native("_Float32_opLE")] fun <= (x, y: Float32): Bool
    [native("_Float64_opLE")] fun <= (x, y: Float64): Bool

    [native("_Int8_opGE")] fun >= (x, y: Int8): Bool
    [native("_UInt8_opGE")] fun >= (x, y: UInt8): Bool
    [native("_Int16_opGE")] fun >= (x, y: Int16): Bool
    [native("_UInt16_opGE")] fun >= (x, y: UInt16): Bool
    [native("_Int32_opGE")] fun >= (x, y: Int32): Bool
    [native("_UInt32_opGE")] fun >= (x, y: UInt32): Bool
    [native("_Int64_opGE")] fun >= (x, y: Int64): Bool
    [native("_UInt64_opGE")] fun >= (x, y: UInt64): Bool
    [native("_Float32_opGE")] fun >= (x, y: Float32): Bool
    [native("_Float64_opGE")] fun >= (x, y: Float64): Bool

    [native("_Int8_opPlus")] fun + (x, y: Int8): Int8
    [native("_UInt8_opPlus")] fun + (x, y: UInt8): UInt8
    [native("_Int16_opPlus")] fun + (x, y: Int16): Int16
    [native("_UInt16_opPlus")] fun + (x, y: UInt16): UInt16
    [native("_Int32_opPlus")] fun + (x, y: Int32): Int32
    [native("_UInt32_opPlus")] fun + (x, y: UInt32): UInt32
    [native("_Int64_opPlus")] fun + (x, y: Int64): Int64
    [native("_UInt64_opPlus")] fun + (x, y: UInt64): UInt64
    [native("_Float32_opPlus")] fun + (x, y: Float32): Float32
    [native("_Float64_opPlus")] fun + (x, y: Float64): Float64

    [native("_Int8_opMinus")] fun - (x, y: Int8): Int8
    [native("_UInt8_opMinus")] fun - (x, y: UInt8): UInt8
    [native("_Int16_opMinus")] fun - (x, y: Int16): Int16
    [native("_UInt16_opMinus")] fun - (x, y: UInt16): UInt16
    [native("_Int32_opMinus")] fun - (x, y: Int32): Int32
    [native("_UInt32_opMinus")] fun - (x, y: UInt32): UInt32
    [native("_Int64_opMinus")] fun - (x, y: Int64): Int64
    [native("_UInt64_opMinus")] fun - (x, y: UInt64): UInt64
    [native("_Float32_opMinus")] fun - (x, y: Float32): Float32
    [native("_Float64_opMinus")] fun - (x, y: Float64): Float64

    [native("_Int8_opMul")] fun * (x, y: Int8): Int8
    [native("_UInt8_opMul")] fun * (x, y: UInt8): UInt8
    [native("_Int16_opMul")] fun * (x, y: Int16): Int16
    [native("_UInt16_opMul")] fun * (x, y: UInt16): UInt16
    [native("_Int32_opMul")] fun * (x, y: Int32): Int32
    [native("_UInt32_opMul")] fun * (x, y: UInt32): UInt32
    [native("_Int64_opMul")] fun * (x, y: Int64): Int64
    [native("_UInt64_opMul")] fun * (x, y: UInt64): UInt64
    [native("_Float32_opMul")] fun * (x, y: Float32): Float32
    [native("_Float64_opMul")] fun * (x, y: Float64): Float64

    [native("_Int8_opDiv")] fun / (x, y: Int8): Int8
    [native("_UInt8_opDiv")] fun / (x, y: UInt8): UInt8
    [native("_Int16_opDiv")] fun / (x, y: Int16): Int16
    [native("_UInt16_opDiv")] fun / (x, y: UInt16): UInt16
    [native("_Int32_opDiv")] fun / (x, y: Int32): Int32
    [native("_UInt32_opDiv")] fun / (x, y: UInt32): UInt32
    [native("_Int64_opDiv")] fun / (x, y: Int64): Int64
    [native("_UInt64_opDiv")] fun / (x, y: UInt64): UInt64
    [native("_Float32_opDiv")] fun / (x, y: Float32): Float32
    [native("_Float64_opDiv")] fun / (x, y: Float64): Float64

    [native("_Int8_opMod")] fun % (x, y: Int8): Int8
    [native("_UInt8_opMod")] fun % (x, y: UInt8): UInt8
    [native("_Int16_opMod")] fun % (x, y: Int16): Int16
    [native("_UInt16_opMod")] fun % (x, y: UInt16): UInt16
    [native("_Int32_opMod")] fun % (x, y: Int32): Int32
    [native("_UInt32_opMod")] fun % (x, y: UInt32): UInt32
    [native("_Int64_opMod")] fun % (x, y: Int64): Int64
    [native("_UInt64_opMod")] fun % (x, y: UInt64): UInt64
    [native("_Float32_opMod")] fun % (x, y: Float32): Float32
    [native("_Float64_opMod")] fun % (x, y: Float64): Float64

    // Unary +
    [native("_Int8_opPlus1")] fun + (x: Int8): Int8
    [native("_UInt8_opPlus1")] fun + (x: UInt8): UInt8
    [native("_Int16_opPlus1")] fun + (x: Int16): Int16
    [native("_UInt16_opPlus1")] fun + (x: UInt16): UInt16
    [native("_Int32_opPlus1")] fun + (x: Int32): Int32
    [native("_UInt32_opPlus1")] fun + (x: UInt32): UInt32
    [native("_Int64_opPlus1")] fun + (x: Int64): Int64
    [native("_UInt64_opPlus1")] fun + (x: UInt64): UInt64
    [native("_Float32_opPlus1")] fun + (x: Float32): Float32
    [native("_Float64_opPlus1")] fun + (x: Float64): Float64

    // Unary - (only for signed types)
    [native("_Int8_opMinus1")] fun - (x: Int8): Int8
    [native("_Int16_opMinus1")] fun - (x: Int16): Int16
    [native("_Int32_opMinus1")] fun - (x: Int32): Int32
    [native("_Int64_opMinus1")] fun - (x: Int64): Int64
    [native("_Float32_opMinus1")] fun - (x: Float32): Float32
    [native("_Float64_opMinus1")] fun - (x: Float64): Float64

[ct, native("$ct")] fun ct(t: Type): Type
[ct, native("$rt")] fun rt(t: Type): Type

[ct, native('$const')] fun const(t: Type): Type
[ct, native('$mut')] fun mut(t: Type): Type
[ct, native('$tmp')] fun tmp(t: Type): Type
[ct, native('$mut')] fun pre_!(t: Type): Type

[autoCt, native("implOpRefEQ")] fun implOpRefEQ(x,y: @Int8): Bool
[autoCt, native("implOpRefNE")] fun implOpRefNE(x,y: @Int8): Bool

[ct, native("$typeEQ")] fun == (x, y: Type): Bool
[ct, native("$typeAddRef")] fun @ (t: Type): Type

[native("writeLnByte")] fun writeLn(x: Int8)
[native("writeLnByte")] fun writeLn(x: UInt8)
[native("writeLnShort")] fun writeLn(x: Int16)
[native("writeLnShort")] fun writeLn(x: UInt16)
[native("writeLnInt")] fun writeLn(x: Int32)
[native("writeLnUInt")] fun writeLn(x: UInt32)
[native("writeLnSizeType")] fun writeLn(x: Int64)
[native("writeLnSizeType")] fun writeLn(x: UInt64)
[native("writeLnFloat32")] fun writeLn(x: Float32)
[native("writeLnFloat64")] fun writeLn(x: Float64)
[native("writeLnChar")] fun writeLn(x: Char)

[native("writeByte")] fun write(x: Int8)
[native("writeByte")] fun write(x: UInt8)
[native("writeShort")] fun write(x: Int16)
[native("writeShort")] fun write(x: UInt16)
[native("writeInt")] fun write(x: Int32)
[native("writeUInt")] fun write(x: UInt32)
[native("writeLong")] fun write(x: Int64)
[native("writeULong")] fun write(x: UInt64)
[native("writeFloat")] fun write(x: Float32)
[native("writeDouble")] fun write(x: Float64)
[native("writeChar")] fun write(x: Char)

fun writeLn(x: StringRef) { writeLnStringImpl(reinterpretCast(@Char, x.begin)); }
fun write(x: StringRef) { writeStringImpl(reinterpretCast(@Char, x.begin)); }
[native("writeLnStringImpl")] fun writeLnStringImpl(x: @Char)
[native("writeStringImpl")] fun writeStringImpl(x: @Char)

[native("writeLnPointer")] fun writeLnRef(x: @Int8)
[native("writePointer")] fun writeRef(x: @Int8)

[native("writeLnInt"), rt] fun writeLnInt(x: Int)
[native("writeLnFloat64"), rt] fun writeLnFloat(x: Float)

[native("mulInt"), autoCt] fun mul(x,y: Int): Int
[native("mulDouble"), autoCt] fun mul(x,y: Float): Float
[native("divInt"), autoCt] fun div(x,y: Int): Int
[native("modInt"), autoCt] fun mod(x,y: Int): Int
[native("addInt"), autoCt] fun add(x,y: Int): Int
[native("subInt"), autoCt] fun sub(x,y: Int): Int
[native("addDouble"), autoCt] fun add(x,y: Float): Float
[native("subDouble"), autoCt] fun sub(x,y: Float): Float
[native("equalInt"), autoCt] fun equal(x,y: Int): Bool
[native("leInt"), autoCt] fun le(x,y: Int): Bool
[native("assignInt"), autoCt] fun assignInt(x: !Int, y: Int)
[native("assignRefByte"), autoCt] fun assignRef(x: !(@Int8), y: @Int8)

[native("llvm.pow.f64"), rt] fun mathPow(x,y: Float): Float

[native("malloc")] fun malloc(size: Int): @Int8
[native("malloc")] fun mallocRt(size: Int): @Int8
[native("realloc")] fun realloc(p: @Int8, size: Int): @Int8
[native("free")] fun free(p: @Int8)
[native("ptrAdd"), autoCt] fun ptrAdd(p: @Int8, n: Int): @Int8
[native("ptrSub"), autoCt] fun ptrSub(p: @Int8, n: Int): @Int8
[native("ptrDiff"), autoCt] fun ptrDiff(p1, p2: @Int8): Int
[native("memcpyimpl"), autoCt] fun memcpy(dest, src: @Int8, size: Int)
[native("flushOutput")] fun flushOutput()

[ct, native("$typeNumRef")] fun typeNumRef(t: Type): Int

fun cast()
fun reinterpretCast()
[ct] fun sizeOf(): Int
[ct] fun typeOf(): Type
[ct] fun isValid(): Bool
fun construct()

[ct, native("$convertsTo")] fun convertsTo(src, dest: Type): Bool
[ct, native("$staticBuffer")] fun static_buffer(n: Int): Type
[ct, native("$commonType")] fun commonType(t, u: Type): Type

using oper_precedence_default   = 100
using oper_precedence___dot__   = 10000
using oper_precedence___fapp__  = 10000
using oper_precedence___pre__   = 990

using oper_precedence_=     = 50
using oper_precedence_:=    = 50
using oper_precedence_+=    = 50
using oper_precedence_-=    = 50
using oper_precedence_*=    = 50
using oper_precedence_/=    = 50
using oper_precedence_%=    = 50

using oper_precedence_||    = 200
using oper_precedence_^^    = 220
using oper_precedence_&&    = 240

using oper_precedence_<     = 300
using oper_precedence_>     = 300
using oper_precedence_<=    = 300
using oper_precedence_>=    = 300

using oper_precedence_==    = 400
using oper_precedence_!=    = 400
using oper_precedence_===   = 400
using oper_precedence_!==   = 400

using oper_precedence_+     = 500
using oper_precedence_-     = 500
using oper_precedence_*     = 550
using oper_precedence_/     = 550
using oper_precedence_%     = 550

using oper_precedence_<<    = 50
using oper_precedence_<<<   = 50
using oper_precedence_>>    = 50

using oper_assoc_=          = -1
using oper_assoc_:=         = -1

[native("atoi")]
fun _atoi(str: @Char): Int

[bitcopiable]
datatype _CStr { cstr: @Char; }
[initCtor, bitcopiable]
datatype _CStrPtr { ptr: @_CStr; }

fun _fromInt8Ptr(p: @Int8): _CStrPtr = _CStrPtr(reinterpretCast(@_CStr, p))
fun _toBytePtr(p: _CStrPtr): @Int8 = reinterpretCast(@Int8, p.ptr)
fun _offset(p: _CStrPtr, n: Int): _CStrPtr = _fromInt8Ptr( ptrAdd(_toBytePtr(p), n*(sizeOf(_CStrPtr))) )

// To be defined by the application:
fun test(n: Int)

[native("main"), noInline]
fun main(argc: Int, args: _CStrPtr): Int
    if argc == 1
        test(0)
    else
        let arg1 = args _offset 1
        test(_atoi(arg1.ptr.cstr))
    return 0
