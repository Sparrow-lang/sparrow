//!! -t "SparrowImplicitLib.spr" -fno-main

fun f0
    writeLn('f0')

using my_f0 = f0

fun f1(a: Int)
    writeLn('f1(Int)')
fun f1(a: Double)
    writeLn('f1(Double)')

using my_f1 = f1

package Inner
    fun g1(a: Int)
        writeLn('Inner.g1(Int)')
    fun g1(a: Double)
        writeLn('Inner.g1(Double)')

using my_g1 = Inner.g1

using MyInt = Int

package Inner2
    using MyDouble = Double

using MyDouble = Inner2.MyDouble

package Inner3
    datatype Gen(t: Type)
        using MyType = t

    fun print(this: @Gen) if this.MyType == Int
        writeLn('Gen(Int)')
    fun print(this: @Gen) if this.MyType == Double
        writeLn('Gen(Double)')
    fun print(this: @Gen) if this.MyType != Int && this.MyType != Double
        writeLn('Gen(?)')

using MyGen = Inner3.Gen

package Inner4
    datatype Gen(t: Type)
        using MyType1 = t

    fun print(this: @Gen)
        writeLn('Gen1')
        f1(MyType1())

package Inner5
    datatype Gen(t, u: Type)
        using MyType1 = t
        using MyType2 = u

    fun print(this: @Gen)
        writeLn('Gen2')
        f1(MyType1())
        f1(MyType2())

using MyG = Inner4.Gen
using MyG = Inner5.Gen

[native("test")]
fun test(n: Int)
    my_f0
    my_f1(1)
    my_f1(3.14)
    my_g1(1)
    my_g1(3.14)
    writeLn('---')

    let a: MyInt = 2
    let b: MyDouble = 3.14
    my_f1(a)
    my_f1(b)
    writeLn('---')

    let g1: MyGen(Int)
    let g2: MyGen(Double)
    let g3: MyGen(Char)
    g1.print
    g2.print
    g3.print
    writeLn('---')

    let gg1: MyG(Int)
    let gg2: MyG(Int, Double)
    gg1.print
    gg2.print

/*<<<Running()
f0
f1(Int)
f1(Double)
Inner.g1(Int)
Inner.g1(Double)
---
f1(Int)
f1(Double)
---
Gen(Int)
Gen(Double)
Gen(?)
---
Gen1
f1(Int)
Gen2
f1(Int)
f1(Double)
>>>*/
