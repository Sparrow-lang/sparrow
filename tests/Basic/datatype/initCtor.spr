//!! -t "../SparrowImplicitLib.spr" -fno-main

// Test purpose: Test initCtor for various datatypes

[convert]
datatype Tracer
    _val: Int

fun ctor(this: @Tracer)
    _val ctor
    writeLn('Tracer.ctor()')

[convert]
fun ctor(this: @Tracer, val: Int)
    _val ctor val
    write('Tracer.ctor(')
    write(val)
    writeLn(')')

fun ctor(this, other: @Tracer)
    _val ctor other._val
    write('Tracer.copy_ctor(')
    write(_val)
    writeLn(')')

fun dtor(this: @Tracer)
    write('Tracer.dtor ')
    writeLn(_val)

[initCtor]
datatype S1
    _v1: Tracer
    _v2: Tracer

[initCtor]
datatype S2
    _v1: Tracer
    _v2: Tracer = 20

[initCtor]
datatype S3
    _v1: Tracer = 10
    _v2: Tracer = 20

[native("test")]
fun test(n: Int)
    // format off
    ;
    // format on
        var o1: S1
    writeLn('---')
        var o1: S2
        writeLn('-')
        var o2: S2 = 100
        writeLn('-')
    writeLn('---')
        var o1: S3
    writeLn('------')
        var o1 = S1(50, 60)
        writeLn('-')
        var o2 = o1
        writeLn('-')

/*<<<Running()
Tracer.ctor()
Tracer.ctor()
Tracer.dtor 0
Tracer.dtor 0
---
Tracer.ctor()
Tracer.ctor(20)
-
Tracer.ctor(100)
Tracer.copy_ctor(100)
Tracer.ctor(20)
Tracer.dtor 100
-
Tracer.dtor 20
Tracer.dtor 100
Tracer.dtor 20
Tracer.dtor 0
---
Tracer.ctor(10)
Tracer.ctor(20)
Tracer.dtor 20
Tracer.dtor 10
------
Tracer.ctor(50)
Tracer.ctor(60)
Tracer.copy_ctor(50)
Tracer.copy_ctor(60)
Tracer.dtor 60
Tracer.dtor 50
-
Tracer.copy_ctor(50)
Tracer.copy_ctor(60)
-
Tracer.dtor 60
Tracer.dtor 50
Tracer.dtor 60
Tracer.dtor 50
>>>*/
