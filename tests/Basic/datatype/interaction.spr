//!! -t "../SparrowImplicitLib.spr" -fno-main

// Test purpose: various interaction patterns with datatypes (and their ctors)

concept AnyType(x)
fun ctor(this: !AnyType, nothing: Uninitialized) {}

datatype Book { author, name, isbn: StringRef }
datatype CollectionBook { book: Book, col: StringRef }

datatype Book2 = StringRef * StringRef
datatype Book3 { author, name, isbn: StringRef}
datatype Book4 = Book

datatype Opaque = @Byte

fun Book(author, name, isbn: StringRef): Book
    var res: Book = Uninitialized()
    construct(res.author, StringRef(author))
    construct(res.name, name)
    res.isbn construct isbn
    return res

fun Book3(author, name, isbn: StringRef): Book3
    var res: Book3 = Uninitialized()
    res.author construct author
    res.name construct name
    res.isbn construct isbn
    return res

fun Book4(author, name, isbn: StringRef): Book4
    var res: Book4 = Uninitialized()
    res.data.author ctor author
    res.data.name ctor name
    res.data.isbn ctor isbn
    return res

fun CollectionBook(book: Book, collection: StringRef): CollectionBook
    var res: CollectionBook = Uninitialized()
    res.book ctor book
    res.col ctor collection
    return res

fun CollectionBook(author, name, isbn, collection: StringRef): CollectionBook
    var res: CollectionBook = Uninitialized()
    res.book ctor Book(author, name, isbn)
    res.col ctor collection
    return res

[initCtor] datatype Tuple(t1, t2: Type)
    using arity = 2
    v1: t1
    v2: t2

[ctGeneric] fun *(t1,t2: Type): Type = Tuple(t1, t2)

[native("test")] fun test(n: Int)
    let b = Book("LucTeo", "The wonders of Sparrow", "ISBN")
    writeLn(b.author)
    writeLn(b.name)
    writeLn(b.isbn)
    writeLn("---")
    let cb1 = CollectionBook(b, "Sparrow")
    writeLn(cb1.book.author)
    writeLn(cb1.book.name)
    writeLn(cb1.book.isbn)
    writeLn(cb1.col)
    writeLn("---")
    let cb2 = CollectionBook("LucTeo", "More wonders of Sparrow", "ISBN", "Sparrow")
    writeLn(cb2.book.author)
    writeLn(cb2.book.name)
    writeLn(cb2.book.isbn)
    writeLn(cb2.col)

    writeLn("---")
    let b3 = Book3("LucTeo", "Nice datastructs in Sparrow", "ISBN")
    let b4 = Book4("LucTeo", "Nicer datastructs in Sparrow", "ISBN")
    writeLn(b3.name)
    writeLn(b4.data.name)

    let b4_1 = Book4(b)
    writeLn(b4_1.data.name)

    let o: Opaque = reinterpretCast(@Byte, b)

/*<<<Running()
LucTeo
The wonders of Sparrow
ISBN
---
LucTeo
The wonders of Sparrow
ISBN
Sparrow
---
LucTeo
More wonders of Sparrow
ISBN
Sparrow
---
Nice datastructs in Sparrow
Nicer datastructs in Sparrow
The wonders of Sparrow
>>>*/
