//!! -t "../SparrowImplicitLib.spr" -fno-main

// Test purpose: different syntaxes for declaring datatypes

datatype Empty

datatype Empty2 {}
datatype Empty3

datatype WithFields
    x: Int
    y: Int

datatype WithFields2 {;;,; x: Int ,,,;, y: Int;,;}

datatype WithInit = Int

datatype WithUsing
    using ValueType = Int
    x: Int

datatype Generic(t: Type)
    x: t
    using ValueType = t

datatype Generic2(t: Type)
    using ValueType = t
    x: ValueType

datatype GenericIf(t: Type) if t == Int
    using ValueType = Int
    using IsInt = true
    x: Int

datatype GenericIf2(t: Type) if t != Int
    using ValueType = t
    using IsInt = false
    x: t

[native("test")]
fun test(n: Int)
    ;
        let o1: Empty
        let o2: Empty2
        let o3: Empty3
        writeLn(sizeOf(o1))
        writeLn(sizeOf(o2))
        writeLn(sizeOf(o3))
    writeLn('---')
        let o1: WithFields
        let o2: WithFields2
        writeLn(sizeOf(o1))
        writeLn(sizeOf(o2))
    writeLn('---')
        let o1: WithInit
        writeLn(sizeOf(o1))
    writeLn('---')
        let o1: WithUsing
        writeLn(sizeOf(o1))
    writeLn('---')
        let o1: Generic(Float)
        let o2: Generic2(Char)
        writeLn(sizeOf(o1))
        writeLn(sizeOf(o2))
    writeLn('---')
        let o1: GenericIf(Int)
        let o2: GenericIf2(Char)
        writeLn(sizeOf(o1))
        writeLn(sizeOf(o2))

/*<<<Running()
0
0
0
---
8
8
---
4
---
4
---
8
1
---
4
1
>>>*/
