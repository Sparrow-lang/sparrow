//!! -t "../SparrowImplicitLib.spr" -fno-main

fun assert(b: Bool)
    if ( !b )
        write('F'); write('A'); write('I'); writeLn('L');
    ;

fun fassert(b: Bool)
    if ( ! !b )
        write('F'); write('A'); write('I'); writeLn('L');
    ;

fun pow1(x: Float, n: Int): Float
    if ( n == 0 )
        return 1.0;
    else if ( n == 1 )
        return x;
    else
        return pow1(x*x, n/2) * pow1(x, n%2);

fun pow2(x: Float, n: Int): Float
    if ( n == 0 )
        return 1.0;
    else
        return x * pow2(x, n-1);
    return x;

fun pow3(x: Float, n: Int): Float
    var res: Float
    res = 1.0
    while n>0 ; n=n-1
        res = res * x;
    return res

fun pow4(x: Float, n: Int): Float
    var res: Float
    res = 1.0
    while n>0 ; n-=1
        res *= x;
    return res

datatype MyInt
    x: Int;

fun ctor(this: !MyInt) { x = 0; }
fun ctor(this: !MyInt, other: MyInt) { x = other.x; }

fun + (x,y: MyInt): MyInt
    var res: MyInt
    res.x = x.x + y.x
    return res

fun * (x,y: MyInt): MyInt
    var res: MyInt
    res.x = x.x * y.x
    return res

fun < (x,y: MyInt): Bool
    return x.x < y.x;

fun = (x: MyInt@, y: MyInt)
    x.x = y.x;

package NearClass

    datatype MyInt2
        x: Int;

    fun ctor(this: !MyInt2) { x = 0; }
    fun ctor(this: !MyInt2, other: MyInt2) { x = other.x; }

    fun + (l, r: MyInt2): MyInt2
        var res: MyInt2
        res.x = l.x + r.x
        return res

    fun * (l, r: MyInt2): MyInt2
        var res: MyInt2
        res.x = l.x * r.x
        return res

    fun < (l, r: MyInt2): Bool
        return l.x < r.x;

    fun = (this: !MyInt2, other: MyInt2)
        this.x = other.x;

using NearClass.MyInt2

fun + (x,y: MyInt2): MyInt2
    let res: MyInt2
    writeLn("failure")
    return res

fun * (x,y: MyInt2): MyInt2
    let res: MyInt2
    writeLn("failure")
    return res

fun < (x,y: MyInt2): Bool
    writeLn("failure")
    return false

fun = (x: MyInt2@, y: MyInt2)
    writeLn("failure");

[native("test")] fun test(n: Int)
    writeLn(pow1(2.0, 0))
    writeLn(pow1(2.0, 8))
    writeLn(pow2(3.0, 0))
    writeLn(pow2(3.0, 4))
    writeLn(pow3(3.0, 0))
    writeLn(pow3(3.0, 4))
    writeLn(pow4(2.0, 0))
    writeLn(pow4(2.0, 8))

    // Warning: the following arithmetic operations will be made at compile time. Muhahahaha...
    assert(true)
    fassert(false)

    assert(2+2 == 4)
    assert(3+3 == 6)
    assert(3*3 == 9)
    assert(8/2 == 4)
    assert(8/3 == 2)
    assert(8%3 == 2)
    assert(+2 == 2)
    assert(-2 == (-1)*2)

    assert(2<3)
    fassert(2<2)
    assert(2<=3)
    assert(3<=3)
    fassert(3<=2)
    assert(5>3)
    fassert(5>5)
    assert(5>=3)
    assert(3>=3)
    fassert(3>=5)

    assert(2.0+2.0 == 4.0)
    assert(3.0+3.0 == 6.0)
    assert(3.0*3.0 == 9.0)
    assert(8.0/2.0 == 4.0)
    assert(9.0/2.0 == 4.5)
    assert(+2.0 == 2.0)
    assert(-2.0 == (-1.0)*2.0)

    assert(2.0<3.0)
    fassert(2.0<2.0)
    assert(2.0<=3.0)
    assert(3.0<=3.0)
    fassert(3.0<=2.0)
    assert(5.0>3.0)
    fassert(5.0>5.0)
    assert(5.0>=3.0)
    assert(3.0>=3.0)
    fassert(3.0>=5.0)

    write('-'); write('-'); writeLn('-')
    var doi,trei,t: MyInt
    doi.x = 2
    trei.x = 3

    t = doi+doi
    writeLn(t.x)
    t += doi
    writeLn(t.x)
    t *= trei
    writeLn(t.x)

    assert(doi < trei)
    assert(doi <= trei)
    assert(doi <= doi)
    assert(trei > doi)
    assert(trei >= doi)
    assert(trei >= trei)

    assert(doi === doi)
    fassert(doi === trei)
    fassert(doi !== doi)
    assert(doi !== trei)

    var r1, r2: MyInt@
    r1 := (doi mutToPtr)
    r2 := r1
    assert(r1 === r2)
    r2 := (doi mutToPtr)
    assert(r1 === r2)
    r2 := (trei mutToPtr)
    assert(r1 !== r2)

        write('='); write('='); writeLn('=')
        var doi,trei,t: MyInt2
        doi.x = 2
        trei.x = 3

        t = doi+doi
        writeLn(t.x)
        t += doi
        writeLn(t.x)
        t *= trei
        writeLn(t.x)

        assert(doi < trei)
        assert(doi <= trei)
        assert(doi <= doi)
        assert(trei > doi)
        assert(trei >= doi)
        assert(trei >= trei)

        assert(doi === doi)
        fassert(doi === trei)
        fassert(doi !== doi)
        assert(doi !== trei)

        var r1, r2: MyInt2@
        r1 := (doi mutToPtr)
        r2 := r1
        assert(r1 === r2)
        r2 := (doi mutToPtr)
        assert(r1 === r2)
        r2 := (trei mutToPtr)
        assert(r1 !== r2)

    write('O'); writeLn('K')

/*<<<Running()
1
256
1
81
1
81
1
256
---
4
6
18
===
4
6
18
OK
>>>*/