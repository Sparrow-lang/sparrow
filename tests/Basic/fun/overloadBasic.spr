//!! -t "../SparrowImplicitLib.spr" -fno-main

concept AnyType(x) // Always true

fun f1(x: Int)         { writeLn("f1(Int)"); }
fun f1(x: Float)      { writeLn("f1(Float)"); }
fun f1(x: !Int)        { writeLn("f1(!Int)"); }
fun f1(x: !Float)     { writeLn("f1(!Float)"); }
fun f1(x: @Int)        { writeLn("f1(@Int)"); }
fun f1(x: @Float)     { writeLn("f1(@Float)"); }
//fun f1(x: AnyType)        { writeLn("f1(AnyType)"); }
fun f1(x: !AnyType)       { writeLn("f1(!AnyType)"); }
fun f1(x: @AnyType)       { writeLn("f1(@AnyType)"); }

fun f2(x: Int, y: Int)            { writeLn("f2(Int, Int)"); }
fun f2(x: Float, y: Float)      { writeLn("f2(Float, Float)"); }
fun f2(x: AnyType, y: AnyType)          { writeLn("f2(AnyType, AnyType)"); }
fun f2(x: !Int, y: !Int)          { writeLn("f2(!Int, !Int)"); }
fun f2(x: !Float, y: !Float)    { writeLn("f2(!Float, !Float)"); }
//fun f2(x: !AnyType, y: !AnyType)        { writeLn("f2(!AnyType, !AnyType)"); }

fun f3(x: Int, y: Int)                            { writeLn("f3(Int, Int)"); }
fun f3(x: Float, y: Float)                      { writeLn("f3(Float, Float)"); }
//fun f3(x: AnyType, y: AnyType) if typeOf(x)==typeOf(y)  { writeLn("f3(AnyType, AnyType)"); }
fun f3(x: !Int, y: !Int)                          { writeLn("f3(!Int, !Int)"); }
fun f3(x: !Float, y: !Float)                    { writeLn("f3(!Float, !Float)"); }
fun f3(x: !AnyType, y: !AnyType) if typeOf(x)==typeOf(y){ writeLn("f3(!AnyType, !AnyType)"); }

let a = Int16(1)
let b = 10
let c = 3.14
let ra: !Int16 = a
let rb: !Int = b
let rc: !Float = c

fun getShort(): Int16 { return Int16(1); }
fun getInt(): Int { return 10; }
fun getFloat(): Float { return 3.14; }
fun getShortRef(): !Int16 { return ra; }
fun getIntRef(): !Int { return rb; }
fun getFloatRef(): !Float { return rc; }

[native("test")] fun test(n: Int)
    f1(a)
    f1(b)
    f1(c)
    f1(ra)
    f1(rb)
    f1(rc)
    f1('a')
    f1(10)
    f1(3.14)
    writeLn("---")

    f1(getShort())
    f1(getInt())
    f1(getFloat())
    f1(getShortRef())
    f1(getIntRef())
    f1(getFloatRef())
    writeLn("---")

    f2(a,a)
    f2(b,b)
    f2(c,c)
    f2(ra,ra)
    f2(rb,rb)
    f2(rc,rc)
    writeLn("---")

    f2(a,10)
    f2(b,10)
    f2(c,10)
    writeLn("---")

    //f3(a,10);
    f3(b,10)
    //f3(c,10);
    writeLn("---")

    //f3(a,Int16(1))
    //f3(b,Int16(1));
    //f3(c,Int16(1));

/*<<<Running()
f1(!AnyType)
f1(!Int)
f1(!Float)
f1(!AnyType)
f1(!Int)
f1(!Float)
f1(@AnyType)
f1(Int)
f1(Float)
---
f1(@AnyType)
f1(Int)
f1(Float)
f1(!AnyType)
f1(!Int)
f1(!Float)
---
f2(AnyType, AnyType)
f2(!Int, !Int)
f2(!Float, !Float)
f2(AnyType, AnyType)
f2(!Int, !Int)
f2(!Float, !Float)
---
f2(AnyType, AnyType)
f2(Int, Int)
f2(AnyType, AnyType)
---
f3(Int, Int)
---
>>>*/