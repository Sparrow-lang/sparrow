//!!

concept Regular(x) if (
       isValid(TypeOp.copyVal(x).ctor())  // Default construction
    && isValid(TypeOp.copyVal(x).ctor(x)) // Copy construction
    && isValid(TypeOp.copyVal(x).dtor())  // Destruction
    && typeOf(x == x) == Bool               // Equality is defined
    )

[noDefault, convert]
datatype NullType
    ;

fun ctor(this: !NullType) {}
[convert] fun ctor(this: !NullType, other: AnyType) {}
fun dtor(this: NullType) {}

fun ==(this, other: NullType) = true
fun ==(this, other: AnyType) = false

fun testRegular(x: Regular)
    cout << TypeOp.description(typeOf(x)) << " is Regular\n";

fun testRegular(x: AnyType) if !Regular(x)
    cout << TypeOp.description(typeOf(x)) << " is not Regular\n";

datatype MyType
    ;
    // Operators are implicitly defined

package Isolated
    [noDefault]
    datatype EmptyType
        ;

fun sprMain
    testRegular(1)
    testRegular(1.0)
    let o: NullType
    let o1: MyType
    let o2: Isolated.EmptyType
    testRegular(o)
    testRegular(o1)
    testRegular(o2)
/*<<<Running()
Int is Regular
Float is Regular
NullType is Regular
MyType is Regular
EmptyType is not Regular
>>>*/

