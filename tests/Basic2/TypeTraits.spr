//!!

import std.vector
import std.string
import std.algorithms
import std.tuple

using TypeOp.*

datatype MyRtOnlyType {}
[ct] datatype MyCtOnlyType {}

fun sprMain
    if ( programArgs.size() < 2 )
        return;
    let n = programArgs(1) asInt

    if      n == 1; test1
    else if n == 2; test2
    else if n == 3; test3
    else if n == 4; test4
    else if n == 5; test5

fun getMode(mode: Int): String
    if ( mode == 1 )
        return "rt    ";
    if ( mode == 2 )
        return "ct    ";
    return "???   ";

fun printHeader
    cout << "hasStorage  Mode  rt ref  Description\n"
    cout << "-------------------------------------\n"

fun printType(t: Type)
    cout << ife(hasStorage(t), "storage     ", "no storage  ")
    cout << getMode(mode(t)).asStringRef()
    cout << ife(canBeUsedAtRt(t), "y  ", "n  ")
    cout << numRef(t) << "    "
    cout << description(t) << endl

fun test1
    var x: Float
    var xr: @Float = x
    var xrr: @ @Float = xr

    printHeader()
    printType(Int)
    printType(Int ct)
    printType(Int rt)
    printType(Float)
    printType(typeOf(x))
    printType(typeOf(xr))
    printType(typeOf(xrr))
    printType(Tuple(Int, Float))
    printType(Vector(Int))
    printType(typeOf(1 ... 10))
    printType(Number)
    printType(typeOf(test1()))
    printType(typeOf(test1()) ct)
    printType(typeOf(\test1))
    printType(MyRtOnlyType)
    //printType(MyCtOnlyType);

/*<<<Type properties and description(1)
hasStorage  Mode  rt ref  Description
-------------------------------------
storage     rt    y  0    Int
storage     ct    y  0    Int/ct
storage     rt    y  0    Int
storage     rt    y  0    Float
storage     rt    y  0    Float
storage     rt    y  1    Float ptr
storage     rt    y  2    Float ptr ptr
storage     rt    y  0    Tuple[Int, Float]
storage     rt    y  0    Vector[Int]
storage     rt    y  0    NumericRangeInc[Int]
storage     rt    y  0    #Number
no storage  rt    y  0    Void
no storage  ct    y  0    Void/ct
storage     rt    y  0    FunctionPtr0[Void]
storage     rt    y  0    MyRtOnlyType
>>>*/

fun test2
    printHeader()
    printType(Int)
    printType(Int ct)
    printType(Int rt)
    printType(changeMode(Int, 0))
    printType(changeMode(Int, 1))
    printType(changeMode(Int, 2))

/*<<<Change type mode(2)
hasStorage  Mode  rt ref  Description
-------------------------------------
storage     rt    y  0    Int
storage     ct    y  0    Int/ct
storage     rt    y  0    Int
storage     ???   y  0    Int
storage     rt    y  0    Int
storage     ct    y  0    Int/ct
>>>*/

fun test3
    var x: Float
    var xr: @Float = x
    var xrr: @ @Float = xr

    printHeader()
    printType(typeOf(x))
    printType(typeOf(xr))
    printType(typeOf(xrr))
    printType(removeRef(Int))
    printType(addRef(Int))
    printType(addRef(addRef(Int)))
    printType(removeRef(removeRef(typeOf(xrr))))

/*<<<Change num references(3)
hasStorage  Mode  rt ref  Description
-------------------------------------
storage     rt    y  0    Float
storage     rt    y  1    Float ptr
storage     rt    y  2    Float ptr ptr
storage     rt    y  0    Int
storage     rt    y  1    Int ptr
storage     rt    y  2    Int ptr ptr
storage     rt    y  0    Float
>>>*/

fun test4
    var x: Float
    var xr: @Float = x
    var xrr: @ @Float = xr

    cout << ife(isRef(Int), "ref", "no ref") << endl
    cout << ife(isRef(@Int), "ref", "no ref") << endl
    cout << "---\n"

    cout << description(addRef(Int)) << endl
    cout << description(addRef(@Int)) << endl
    cout << "---\n"

    cout << description(removeRef(Int)) << endl
    cout << description(removeRef(@Int)) << endl
    cout << description(removeRef(@ @Int)) << endl

/*<<<Type traits class(4)
no ref
ref
---
Int ptr
Int ptr ptr
---
Int
Int
Int ptr
>>>*/

fun test5
    var a: Int
    var b: Int const
    var c: Int mut
    var d: !Int
    var e: Int tmp

    printHeader()
    printType(typeOf(a))
    printType(typeOf(b))
    printType(typeOf(c))
    printType(typeOf(d))
    printType(typeOf(e))
    printType(Int)
    printType(Int const)
    printType(Int mut)
    printType(!Int)
    printType(Int tmp)

/*<<<Type categories(5)
hasStorage  Mode  rt ref  Description
-------------------------------------
storage     rt    y  0    Int
storage     rt    y  0    Int
storage     rt    y  0    Int
storage     rt    y  0    Int
storage     rt    y  0    Int
storage     rt    y  0    Int
storage     rt    y  1    Int const
storage     rt    y  1    Int mut
storage     rt    y  1    Int mut
storage     rt    y  1    Int tmp
>>>*/

