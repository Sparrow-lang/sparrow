//!! -O2

import std.staticArray
import std.ranges
import std.algorithms
import std.string

fun write(r: Range, length: Int) if isValid(Char(r.front))
    using lineLength = 60
    var line: String = lineLength
    for n = length..0 ../ (-lineLength)
        let len = min(n, lineLength)
        for i = 0..len
            line(i) = (r++);
        if ( len < lineLength )
            line.resize(len);
        cout << line << "\n";
    ;

var seed: Int = 42
fun nextRandom: Double
    using IM = 139968
    seed = (seed * 3877 + 29573) % IM
    return seed * 1.0/IM
var randomRange = generate(\nextRandom)

[initCtor]
datatype RandomCharRange(distribValsRangeType: Type)
    using RetType = Char
    distribStr: StringRef
    distribVals: distribValsRangeType

fun isEmpty(this: @RandomCharRange) = false
fun popFront(this: @RandomCharRange) {}
fun front(this: @RandomCharRange): Char
    let randVal: Float = (randomRange++)
    var i = 0
    var r = distribVals
    while !r.isEmpty; r.popFront()
        if ( randVal < *r )
            break;
        ++i;
    return distribStr(i)

fun mkRandomCharRange(s: StringRef, v: Range) = RandomCharRange(typeOf(v))(s,v)

fun sprMain
    let n = (programArgs(1) asInt)

    let alu: String = (
        "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG" +
        "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA" +
        "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT" +
        "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA" +
        "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG" +
        "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC" +
        "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA")

    let iubStr = "acgtBDHKMNRSVWY"
    let iubDist = mkValues(0.27f, 0.12f, 0.12f, 0.27f).all ++ repeat(0.02f, 11)
    let iubCum = scanLeft(0.0f, iubDist, (fun acc,v = acc+v))

    let homoSapiensStr = "acgt"
    let hsDist = mkValues(
        0.3029549426680f, 0.1979883004921f, 0.1975473066391f, 0.3015094502008f);
    let hsCum = scanLeft(0.0f, hsDist.all, (fun acc,v = acc+v))

    cout << ">ONE Homo sapiens alu\n"
    write(alu.all cycle, n*2)

    cout << ">TWO IUB ambiguity codes\n"
    write(mkRandomCharRange(iubStr, iubCum), n*3)

    cout << ">THREE Homo sapiens frequency\n"
    write(mkRandomCharRange(homoSapiensStr, hsCum), n*5)

/*<<<fasta (10)
>ONE Homo sapiens alu
GGCCGGGCGCGGTGGCTCAC
>TWO IUB ambiguity codes
cttBtatcatatgctaKggNcataaaSatg
>THREE Homo sapiens frequency
taaatcttgtgcttcgttagaagtctcgactacgtgtagcctagtgtttg
>>>*/

/*<<<fasta (80)
>ONE Homo sapiens alu
GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGA
TCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACT
AAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTG
>TWO IUB ambiguity codes
cttBtatcatatgctaKggNcataaaSatgtaaaDcDRtBggDtctttataattcBgtcg
tactDtDagcctatttSVHtHttKtgtHMaSattgWaHKHttttagacatWatgtRgaaa
NtactMcSMtYtcMgRtacttctWBacgaaatatagScDtttgaagacacatagtVgYgt
cattHWtMMWcStgttaggKtSgaYaaccWStcgBttgcgaMttBYatcWtgacaYcaga
>THREE Homo sapiens frequency
ggattgtaagggtctagtggttcagtgagcggaatatcattcgtcggtggtgttaatcta
tctcggtgtagcttataaatgcatccgtaagaatattatgtttatttgtcggtacgttca
tggtagtggtgtcgccgatttagacgtaaaggcatgtatggatcttgatctatgcaaagg
taggtccatctatatacgttgcacagcggatacaaataagataagaatttactaacattt
aaattttcttattgtcgagcatagattggaggaaaaacttatttacttggtatttaaacg
gaagtttctaatgtttatgattggatgcacggacagtttactgcttactttcttaggttt
cttgaacaacaggatgcactagtaacatgtctcgttcatg
>>>*/

/*<<<fasta (120)
>ONE Homo sapiens alu
GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGA
TCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACT
AAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAG
GCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCG
>TWO IUB ambiguity codes
cttBtatcatatgctaKggNcataaaSatgtaaaDcDRtBggDtctttataattcBgtcg
tactDtDagcctatttSVHtHttKtgtHMaSattgWaHKHttttagacatWatgtRgaaa
NtactMcSMtYtcMgRtacttctWBacgaaatatagScDtttgaagacacatagtVgYgt
cattHWtMMWcStgttaggKtSgaYaaccWStcgBttgcgaMttBYatcWtgacaYcaga
gtaBDtRacttttcWatMttDBcatWtatcttactaBgaYtcttgttttttttYaaScYa
HgtgttNtSatcMtcVaaaStccRcctDaataataStcYtRDSaMtDttgttSagtRRca
>THREE Homo sapiens frequency
tggtagtggtgtcgccgatttagacgtaaaggcatgtatggatcttgatctatgcaaagg
taggtccatctatatacgttgcacagcggatacaaataagataagaatttactaacattt
aaattttcttattgtcgagcatagattggaggaaaaacttatttacttggtatttaaacg
gaagtttctaatgtttatgattggatgcacggacagtttactgcttactttcttaggttt
cttgaacaacaggatgcactagtaacatgtctcgttcatgcttccattaagttcttctta
aacttacacaaactacctaatttagagttgacgagatggttgaacgtgttgtgacaaacg
tttgcaaaatgcacagtatcgttaccaaaaagtacatttaagtgtgtgcgtaggaattct
gctacgtccattgcaggccacattcacatcccacccctgaatatatggactgaatcacac
acaccaaatttcatctaccttatcgtagcataactattaacaaacatatacagacttcgc
ggtaaataaaatatattagtacacaaccgtatactggttgaactattgcccagctttaag
>>>*/

/* <<<fasta speed test (25000000)
>>>*/

