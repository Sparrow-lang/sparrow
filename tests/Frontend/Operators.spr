
fun pow(x,y: Double) = 1
fun **(x,y: Double) = 2
fun !@#$%^&*(x,y: Double) = 3
fun <>(x,y: Double) = 4
fun ::(x,y: Double) = 5
fun a_::(x,y: Double) = 6

fun ..(x,y: Int) = x+y

[autoCt] fun ~(n: Int): Int = 0xffffffff - n

fun +++(l,r: Int): Int
    cout << l << " +++ " << r << " = " << (l+r) << endl
    return l+r

fun +++:(l,r: Int): Int
    cout << l << " +++: " << r << " = " << (l+r) << endl
    return l+r

fun +++(x: @Int): Int
    var r = x
    x += 1
    return r

fun inc(x: @Int): Int
    var r = x
    x += 1
    return r

using oper_assoc_+++: = -1
using oper_assoc_:: = -1

fun sprMain
    if ( programArgs.size() < 2 )
        return;
    let n = programArgs(1) asInt

    if      n == 1  ; test1
    else if n == 2  ; test2
    else if n == 3  ; test3
    else if n == 4  ; test4
    else if n == 5  ; test5
    else if n == 6  ; test6
    else if n == 7  ; test7
    else if n == 8  ; test8
    else if n == 9  ; test9
    else if n == 10 ; test10
    else if n == 11 ; test11

fun test1
    cout << ( 1 + 2 ) << endl
    cout << ( 1 + 2*3 ) << endl
    cout << ( 2*3 + 4 ) << endl
    var x = 10
    x = 2 + 3
    cout << (x) << endl
    cout << (2 < 1+3) << endl
    cout << (2 < 3 && 3 > 2) << endl
    cout << (true && false || false && true || true && true) << endl
    cout << (2 == 2 || 1 == 3) << endl
    cout << (2 != 2 || 1 != 3) << endl
/*<<<Standard operator precedence(1)
3
7
10
5
true
true
true
true
true
>>>*/

fun test2
    var b = true
    b = b && false
    cout << (b) << endl

    var x = 10
    x *= 2+2
    cout << (x) << endl

    x += 1+1
    cout << (x) << endl
/*<<<Assignments(2)
false
40
42
>>>*/

fun test3
    cout << (1 pow 2) << endl
    cout << (1 ** 2) << endl
    cout << (1 !@#$%^&* 2) << endl
    cout << (1 <> 2) << endl
    cout << (1 :: 2) << endl
    cout << (1 a_:: 2) << endl
/*<<<Binary operators call(3)
1
2
3
4
5
6
>>>*/

fun test4
    cout << (-2) << endl
    cout << (+2) << endl
    cout << (~2) << endl
    cout << (!true) << endl
    cout << (!false) << endl
    cout << (! !true) << endl
    cout << (! !false) << endl
/*<<<Unary operators call(4)
-2
2
-3
false
true
true
false
>>>*/

fun test5
    cout << (2 +++ 3 +++ 4 +++ 5) << endl
    cout << (2 +++: 3 +++: 4 +++: 5) << endl
/*<<<Associativity(5)
2 +++ 3 = 5
5 +++ 4 = 9
9 +++ 5 = 14
14
4 +++: 5 = 9
3 +++: 9 = 12
2 +++: 12 = 14
14
>>>*/

fun test6
    cout << ( 2+2*3 ) << endl
    cout << ( (2+2)*3 ) << endl
    cout << ( 2+(2*3) ) << endl
/*<<<Paranthesis(6)
8
12
8
>>>*/

fun test7
    let x: StringRef = "42"
    cout << ( x size ) << endl
    cout << ( x front ) << endl
/*<<<Postfix function call(7)
2
4
>>>*/

fun test8
    var x = 24
    cout << (x) << endl
    cout << (x+++) << endl
    cout << (x) << endl
    cout << (x inc) << endl
    cout << (x) << endl
/*<<<Postfix operator call(8)
24
24
25
25
26
>>>*/

fun test9
    var x = 24
    cout << (x) << endl
    cout << (+++x) << endl
    cout << (x) << endl
    cout << (`inc` x) << endl
    cout << (x) << endl
/*<<<Prefix operator call(9)
24
24
25
25
26
>>>*/

fun test10
    var x = 3
    var y = 4
    cout << ( x + y ) << endl
    cout << (+++3 + +++4) << endl
    cout << ((3+++) + (4+++)) << endl
    cout << ((3+++) + (+++4)) << endl

    cout << (3+++ + +++4) << endl // similar to 3 +++ (+ (+++4))

    // Both +, and +++ are unary and binary
/*<<<Postfix, prefix, infix operator call(10)
7
7
7
7
3 +++ 4 = 7
7
>>>*/

fun test11
    let x = 3
    let y = 4
    let z = 5
    cout << ( x..y ) << endl
    cout << ( x..y..z ) << endl
/*<<<Dot-dot(11)
7
12
>>>*/
