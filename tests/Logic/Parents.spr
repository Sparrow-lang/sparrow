//!!
import logic.predicates
import logic.recurse
//import assert;

fun children(child, parent: @LStr) = (
       child /=/ "Sam"    && parent /=/ "Mary"
    || child /=/ "Denise" && parent /=/ "Mary"
    || child /=/ "Sam"    && parent /=/ "Frank"
    || child /=/ "Denise" && parent /=/ "Frank"
    || child /=/ "Frank"  && parent /=/ "Gary"
    )

fun gender(name, g: @LStr) = (
       name /=/ "Frank"   && g /=/ "male"
    || name /=/ "Sam"     && g /=/ "male"
    || name /=/ "Mary"    && g /=/ "female"
    || name /=/ "Denise"  && g /=/ "female"
    || name /=/ "Gary"    && g /=/ "male"
    )

fun male(name: @LStr) = gender(name, "male")
fun female(name: @LStr) = gender(name, "female")

fun parent(parent, child: @LStr) = children(child, parent)

fun father(name, child: @LStr) = children(child, name) && gender(name, "male")
fun mother(name, child: @LStr) = children(child, name) && gender(name, "female")

fun ancestor(a, c: @LStr): Predicate
    var parent: LStr
    return children(c, a) \
        || children(c, parent) && rec(\ancestor, a, parent)

fun sprMain
    if ( programArgs.size() < 2 )
        return
    var n = programArgs(1) asInt

    if      n == 1; test1
    else if n == 2; test2
    else if n == 3; test3
    else if n == 4; test4
    else if n == 5; test5
    else if n == 6; test6
    else if n == 7; test7

fun test1
    var x, y: LStr
    var pred = children(x, y)
    while pred()
        //assert(x.isSet());
        //assert(y.isSet());
        cout << x.get() << " is a child of " << y.get() << endl
    cout << "---\n"
    var x2, y2: LStr
    var pred2 = gender(x2, y2)
    while pred2()
        //assert(x2.isSet());
        //assert(y2.isSet());
        cout << x2.get() << " is " << y2.get() << endl
/*<<< All facts(1)
Sam is a child of Mary
Denise is a child of Mary
Sam is a child of Frank
Denise is a child of Frank
Frank is a child of Gary
---
Frank is male
Sam is male
Mary is female
Denise is female
Gary is male
>>>*/

fun test2
    var x: LStr
    var pred = male(x)
    while pred()
        //assert(x.isSet());
        cout << "Male: " << x.get() << endl
/*<<< All males KNOWN-PROBLEM(2)
Male: Frank
Male: Sam
Male: Gary
>>>*/

fun test3
    var x: LStr
    var pred = female(x)
    while pred()
        //assert(x.isSet());
        cout << "Female: " << x.get() << endl
/*<<< All females KNOWN-PROBLEM(3)
Female: Mary
Female: Denise
>>>*/

fun test4
    var x, y: LStr
    var pred = parent(x, y)
    while pred()
        //assert(x.isSet());
        //assert(y.isSet());
        cout << x.get() << " is a parent of " << y.get() << endl
/*<<< All parents(4)
Mary is a parent of Sam
Mary is a parent of Denise
Frank is a parent of Sam
Frank is a parent of Denise
Gary is a parent of Frank
>>>*/

fun test5
    var x, y: LStr
    var pred = father(x, y)
    while pred()
        //assert(x.isSet());
        //assert(y.isSet());
        cout << x.get() << " is the father of " << y.get() << endl
/*<<< All fathers KNOWN-PROBLEM(5)
Frank is the father of Sam
Frank is the father of Denise
Gary is the father of Frank
>>>*/

fun test6
    var x, y: LStr
    var pred = mother(x, y)
    while pred()
        //assert(x.isSet());
        //assert(y.isSet());
        cout << x.get() << " is the mother of " << y.get() << endl
/*<<< All mothers KNOWN-PROBLEM(6)
Mary is the mother of Sam
Mary is the mother of Denise
>>>*/

fun test7
    var x, y: LStr
    var pred = ancestor(x, y)
    while pred()
        //assert(x.isSet());
        //assert(y.isSet());
        cout << x.get() << " is an ancestor of " << y.get() << endl
/*-<<< All ancestors (7)
Mary is an ancestor of Sam
Mary is an ancestor of Denise
Frank is an ancestor of Sam
Frank is an ancestor of Denise
Gary is an ancestor of Frank
Gary is an ancestor of Sam
Gary is an ancestor of Denise
>>>*/
