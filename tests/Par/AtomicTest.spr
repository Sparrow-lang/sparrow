//! ! -dump-assembly

import std.compilerInfo

[ct] if platformName == 'Darwin'
    import par.thread
    import par.atomic
    import std.ranges
    import std.vector
    import os
    import test

    [native("rand")] fun rand(): Int;
    [native("srand")] fun srand(seed: UInt);
    [native("time")] fun time(timer: @Int): Int;

    datatype UserDefined
        lo, hi: Short

    fun ctor(this: @UserDefined, val: Int)
        lo = Short(val % 0xffff)
        hi = Short(val / 0xffff)
    fun >> (os: OutStream)
        os << "(" << hi << "," << lo << ")"
    fun testOneLoad(t: Type, val: AnyType)
        let atomic: t Atomic = val
        assertEq(atomic load, val)
    fun testLoadNumeric(t: Type, count: Int)
        for i=0..count
            let val: t = rand()
            testOneLoad(t, val)
    fun testLoadPtr(t: Type, count: Int)
        for i=0..count
            let val: t = rand()
            var p: t Ptr = new(t, val)
            testOneLoad(t Ptr, p)
            p release

    fun testOneStore(atomic: AnyType, val: AnyType)
        atomic store val
        assertEq(atomic load, val)
    fun testStoreNumeric(t: Type, count: Int)
        var atomic: t Atomic
        for i=0..count
            let val: t = rand()
            testOneStore(atomic, val)
    fun testStorePtr(t: Type, count: Int)
        var atomic: (t Ptr) Atomic
        for i=0..count
            let val: t = rand()
            var p: t Ptr = new(t, val)
            testOneStore(atomic, p)
            p release

    fun testOneFetchAndStore(atomic: AnyType, val1, val2: AnyType)
        atomic store val1
        assertEq(atomic load, val1)
        let x = atomic fetchAndStore val2
        assertEq(atomic load, val2)
        assertEq(x, val1)
    fun testFetchAndStoreNumeric(t: Type, count: Int)
        var atomic: t Atomic
        for i=0..count
            let val1: t = rand()
            let val2: t = rand()
            testOneFetchAndStore(atomic, val1, val2)
    fun testFetchAndStorePtr(t: Type, count: Int)
        var atomic: (t Ptr) Atomic
        for i=0..count
            let val1: t = rand()
            let val2: t = rand()
            var p1: t Ptr = new(t, val1)
            var p2: t Ptr = new(t, val2)
            testOneFetchAndStore(atomic, p1, p2)
            p2 release
            p1 release

    fun testOneFetchAndAdd(atomic: AnyType, val, add: AnyType)
        atomic store val
        assertEq(atomic load, val)
        let x = atomic fetchAndAdd add
        assertEq(atomic load, val+add)
        assertEq(x, val)
    fun testFetchAndAddNumeric(t: Type, count: Int)
        var atomic: t Atomic
        for i=0..count
            let val: t = rand()
            let add: t = rand()
            testOneFetchAndAdd(atomic, val, add)

    fun testOneCompareAndSwap(atomic: AnyType, val1, val2: AnyType)
        if val1 == val2
            return
        atomic store val1
        assertEq(atomic load, val1)
        let x1 = compareAndSwap(atomic, val2, val2)
        assertEq(atomic load, val1, "CAS shouldn't change the value")
        assertTrue(!x1, "CAS should return false if not changing the value")
        let x2 = compareAndSwap(atomic, val2, val1)
        assertEq(atomic load, val2, "CAS should change the value")
        assertTrue(x2, "CAS should return true when value is changed")
    fun testCompareAndSwapNumeric(t: Type, count: Int)
        var atomic: t Atomic
        for i=0..count
            let val1: t = rand()
            let val2: t = rand()
            testOneCompareAndSwap(atomic, val1, val2)
    fun testCompareAndSwapPtr(t: Type, count: Int)
        var atomic: (t Ptr) Atomic
        for i=0..count
            let val1: t = rand()
            let val2: t = rand()
            var p1: t Ptr = new(t, val1)
            var p2: t Ptr = new(t, val2)
            testOneCompareAndSwap(atomic, p1, p2)
            p2 release
            p1 release

    fun testAll(t: Type, count: Int)
        testLoadNumeric(t, count)
        testLoadPtr(t, count)

        testStoreNumeric(t, count)
        testStorePtr(t, count)

        testFetchAndStoreNumeric(t, count)
        testFetchAndStorePtr(t, count)

        testCompareAndSwapNumeric(t, count)
        testCompareAndSwapPtr(t, count)

        [ct] if Integer(#$t)
            testFetchAndAddNumeric(t, count)

    fun testAll(count: Int)
        testAll(Int, count)
        testAll(UInt, count)
        testAll(Byte, count)
        testAll(UShort, count)
        testAll(SizeType, count)
        testAll(Float, count)
        testAll(UserDefined, count)

    fun sprMain
        if programArgs.size() < 2
            return
        let n = programArgs(1) asInt

        // Initialize random number generator
        srand(time(null))

        // Run all the tests
        testAll(n)
else
    fun sprMain
        ;
/*<<<Test small (10)
>>>*/

/*<<<Test large (10000)
>>>*/

