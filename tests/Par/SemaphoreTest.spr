//! ! -dump-assembly
import std.compilerInfo

[ct] if platformName == 'Darwin'
    import par.thread
    import par.atomic
    import par.semaphore
    import std.vector
    import std.ranges
    import test

    var numResources: Int
    var numUsers: Int Atomic = 0
    var numExecutions: Int Atomic = 0

    fun doJob(sem: @Semaphore, waitTime: Int)
        sem acquire
        ++numUsers
        //cout << (numUsers load) << ' '
        assertLe(numUsers load, numResources, "numUsers should be less or equal to the number of resources")
        ++numExecutions
        sleep(waitTime)
        --numUsers
        sem release

    [initCtor] datatype Worker
        sem: @Semaphore
        amountOfWork: Int

    fun ()(this: @Worker)
        for i = 0..amountOfWork
            doJob(sem, i % 5 + 1)
        assertGe(numExecutions load, amountOfWork, "all our job should be executed")

    datatype WorkManager
        sem: @Semaphore
        amountOfWork, numWorkers: Int
        threads: (Thread Ptr) Vector

    fun ctor(this: @WorkManager, sem: @Semaphore, amountOfWork, numWorkers: Int)
        this.amountOfWork ctor amountOfWork
        this.numWorkers ctor numWorkers
        for i=0..numWorkers
            let p: Thread Ptr = new(Thread, Worker(sem, amountOfWork))
            threads.pushBack(p)

    fun dtor(this: @WorkManager)
        for t = threads.all
            t.get join
            t.release
        assertEq(numExecutions load, amountOfWork*numWorkers, "numExecutions should be equal to the total amount of work")
    fun sprMain
        if programArgs.size() < 4
            return
        numResources = (programArgs(1) asInt)
        let amountOfWork = programArgs(2) asInt
        let numWorkers = programArgs(3) asInt

        // Initialize the semaphore
        var sem: Semaphore = numResources

        // Do the work
        let work = WorkManager(sem, amountOfWork, numWorkers)
else
    fun sprMain
        ;

/*<<<Binary semaphore with 1 thread (1 20 1)
>>>*/

/*<<<Binary semaphore with 5 threads (1 20 5)
>>>*/

/*<<<5-slot semaphore with 7 threads (5 20 7)
>>>*/

