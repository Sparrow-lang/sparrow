//!! -O3
// -g -O1 -dump-assembly

import std.compilerInfo

[ct] if platformName == 'Darwin'
    import par.tasks
    import test
    import std.newDelete

    using useDescriptions = true

    using cutoff = 16
    //using cutoff = 30

    fun serialFib(n: Int): Int64
        return ife(n<2, Int64(n), serialFib(n-1)+serialFib(n-2))

    package StackSpawnStyle
        datatype FibTask
            prefix: TaskPrefix
            n: Int
            result: @Int64

        fun ctor(this: !FibTask, n: Int, result: @Int64)
            this.n ctor n
            this.result := result
            [ct] if isValidAndTrue(useDescriptions)
                this.prefix.desc = this.description

        [ct] if isValidAndTrue(useDescriptions)
        fun description(task: !FibTask): String
            var res: String = "Fib "
            res += intToString(Int(task.n))
            return res

        fun execute(task: !FibTask)
            if task.n < cutoff
                task.result = serialFib(task.n)
            else
                // Create the children tasks
                var x, y: Int64
                let t1 = FibTask(task.n-1, x)
                let t2 = FibTask(task.n-2, y)

                spawnAndWait(task, t1, t2)

                // Do the sum
                task.result = x + y

        fun parFib(n: Int): Int64
            var res: Int64
            spawnRootAndWait(tmpToMut(FibTask(n, res)))
            return res

    package DynSpawnStyle
        datatype FibTask
            prefix: TaskPrefix
            n: Int
            result: @Int64

        fun ctor(this: !FibTask, n: Int, result: @Int64)
            this.n ctor n
            this.result := result

        [ct] if isValidAndTrue(useDescriptions)
        fun description(task: !FibTask): String
            var res: String = "Fib "
            res += intToString(Int(task.n))
            return res

        fun execute(task: !FibTask)
            if task.n < cutoff
                task.result = serialFib(task.n)
            else
                // Create the children tasks
                var x, y: Int64
                var t1: @FibTask = new(FibTask, task.n-1, x)
                var t2: @FibTask = new(FibTask, task.n-2, y)

                spawnAndWait(task, t1, t2)

                delete(t2)
                delete(t1)

                // Do the sum
                task.result = x + y

        fun parFib(n: Int): Int64
            var res: Int64
            spawnRootAndWait(tmpToMut(FibTask(n, res)))
            return res

    package ContStyle
        datatype FibTask
            prefix: TaskPrefix
            n: Int
            result: Int64 Ptr

        fun ctor(this: !FibTask, n: Int, result: Int64 Ptr)
            this.n ctor n
            this.result ctor result

        [ct] if isValidAndTrue(useDescriptions)
        fun description(task: !FibTask): String
            var res: String = "Fib "
            res += intToString(Int(task.n))
            return res

        fun execute(task: !FibTask)
            if task.n < cutoff
                task.result.get = serialFib(task.n)
            else
                var cont: @FibContTask = new(FibContTask, task.n, task.result)
                setContinuation(task, cont)

                var t1: @FibTask = new(FibTask, task.n-1, (Int64 Ptr)(cont.s1))
                var t2: @FibTask = new(FibTask, task.n-2, (Int64 Ptr)(cont.s2))
                spawn(cont, t1, t2)

        datatype FibContTask
            prefix: TaskPrefix
            n: Int
            s1, s2: Int64
            result: Int64 Ptr

        fun ctor(this: !FibContTask, n: Int, result: Int64 Ptr)
            this.n ctor n
            this.result ctor result

        [ct] if isValidAndTrue(useDescriptions)
        fun description(task: !FibContTask): String
            var res: String = "Cont "
            res += intToString(Int(task.n))
            return res

        fun execute(task: !FibContTask)
            task.result.get = task.s1 + task.s2

        fun parFib(n: Int): Int64
            var res: Int64
            spawnRootAndWait(tmpToMut(FibTask(n, (Int64 Ptr)(res))))
            return res

    fun sprMain
        if programArgs.size() < 2
            return
        var style = programArgs(1) asInt
        var n = programArgs(2) asInt

        var res: Int64

        if style == 0
            res = serialFib(n)
        else if style == 1
            res = StackSpawnStyle.parFib(n)
        else if style == 2
            res = DynSpawnStyle.parFib(n)
        else if style == 3
            res = ContStyle.parFib(n)

        cout << "Final result: fib(" << n << ")=" << res << endl
else
    fun sprMain
        cout << 'Final result: fib(30)=832040\n'

/*<<<Serial fib (0 30)
Final result: fib(30)=832040
>>>*/

/*<<<Spawn on stack (1 30)
Final result: fib(30)=832040
>>>*/

/*<<<Spawn dynamic (2 30)
Final result: fib(30)=832040
>>>*/

/*<<<Continuation style (3 30)
Final result: fib(30)=832040
>>>*/

/*-<<<Serial fib - big (0 30)
Final result: fib(30)=832040
>>>*/

/*-<<<Spawn on stack - big (1 47)
Final result: fib(47)=2971215073
>>>*/

/*-<<<Spawn dynamic - big (2 47)
Final result: fib(47)=2971215073
>>>*/

/*-<<<Continuation style - big (3 47)
Final result: fib(47)=2971215073
>>>*/

