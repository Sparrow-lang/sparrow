//!! -O2
import std.vector, std.list, std.map, std.set
import std.utils, std.ranges, std.algorithms
import std.ptr, std.newDelete

// BasicBlockEdge only maintains two pointers to BasicBlocks.
//
datatype BasicBlockEdge
    from, to: BasicBlock Ptr

fun ctor(this: !BasicBlockEdge, cfg: !MaoCFG, fromName, toName: Int)
    from ctor cfg.createNode(fromName)
    to   ctor cfg.createNode(toName)

    from.addOutEdge(to)
    to.addInEdge(from)
    cfg.addEdge(this mkPtr)

// BasicBlock only maintains a vector of in-edges and
// a vector of out-edges.
//
datatype BasicBlock
    _inEdges, _outEdges: Vector(BasicBlock Ptr)
    _name: Int

fun ctor(this: !BasicBlock, name: Int)
    this._name ctor name

fun numPred(this: !BasicBlock) = _inEdges.size
fun numSucc(this: !BasicBlock) = _outEdges.size

fun addOutEdge(this: !BasicBlock, to: BasicBlock Ptr)  = _outEdges += to
fun addInEdge(this: !BasicBlock, from: BasicBlock Ptr) = _inEdges += from

fun inEdgesRange(this: !BasicBlock)  = _inEdges all
fun outEdgesRange(this: !BasicBlock) = _outEdges all

fun hash(this: !BasicBlock) = _name

// MaoCFG maintains a list of nodes.
datatype MaoCFG
    startNode: BasicBlock Ptr
    _basicBlockMap: Map(Int, BasicBlock Ptr)
    _edges: List(BasicBlockEdge Ptr)

fun dtor(this: !MaoCFG)
    _basicBlockMap.values delete
    _edges.all delete

fun createNode(this: !MaoCFG, name: Int): BasicBlock Ptr
    var node: @Ptr(BasicBlock) = _basicBlockMap(name)
    if !node
        node = new(BasicBlock, name)
    if _basicBlockMap.size == 1
        startNode = node
    return node

fun addEdge(this: !MaoCFG, edge: BasicBlockEdge Ptr)   = _edges += edge
fun getNumNodes(this: !MaoCFG)                         = _basicBlockMap.size

fun basicBlocksRange(this: !MaoCFG) = _basicBlockMap.values()

//
// SimpleLoop
//
// Basic representation of loops, a loop has an entry point,
// one or more exit edges, a set of basic blocks, and potentially
// an outer loop - a "parent" loop.
//
// Furthermore, it can have any set of properties, e.g.,
// it can be an irreducible loop, have control flow, be
// a candidate for transformations, and what not.
//
datatype SimpleLoop
    children: Set(SimpleLoop Ptr)

    isRoot: Bool
    nestingLevel: Int
    depthLevel: Int
    counter: Int

    _parent: SimpleLoop Ptr
    _basicBlocks: Set(BasicBlock Ptr)

fun addNode(this: !SimpleLoop, bb: BasicBlock Ptr)         = _basicBlocks += bb
fun addChildLoop(this: !SimpleLoop, loop: SimpleLoop Ptr)  = this.children += loop

fun setParent(this: !SimpleLoop, parent: SimpleLoop Ptr)
    this._parent = parent
    this._parent.addChildLoop(this mkPtr)
fun setNestingLevel(this: !SimpleLoop, level: Int)
    nestingLevel = level
    isRoot = (level == 0)

fun hash(this: !SimpleLoop) = counter

fun >>(this: !SimpleLoop, os: !OutStream)
    os << "loop-" << counter << ", nest: " << nestingLevel << ", depth: " << depthLevel << endl

//
// LoopStructureGraph
//
// Maintain loop structure for a given CFG.
//
// Two values are maintained for this loop graph, depth, and nesting level.
// For example:
//
// loop        nesting level    depth
//----------------------------------------
// loop-0      2                0
//   loop-1    1                1
//   loop-3    1                1
//     loop-2  0                2
//
datatype LoopStructureGraph
    _root: SimpleLoop Ptr
    _loops: List(SimpleLoop Ptr)
    _loopCounter: Int

fun ctor(this: !LoopStructureGraph)
    _loopCounter ctor 1
    _root ctor new(SimpleLoop)
    _root.counter = 0
    _root.setNestingLevel(0)
    _loops += _root

fun dtor(this: !LoopStructureGraph) = this.killAll

fun killAll(this: !LoopStructureGraph)
    for loop = _loops.all
        loop.release
    _loops.clear

fun createNewLoop(this: !LoopStructureGraph): SimpleLoop Ptr
    var loop: SimpleLoop Ptr = new(SimpleLoop)
    loop.counter = (_loopCounter++)
    return loop

fun addLoop(this: !LoopStructureGraph, loop: SimpleLoop Ptr)   = _loops += loop

fun calculateNestingLevel(this: !LoopStructureGraph)
    // link up all 1st level _loops to artificial root node.
    for loop = _loops.all
        if !loop.isRoot && !loop._parent
            loop.setParent(_root)

    // recursively traverse the tree and assign levels.
    _calculateNestingLevelRec(_root, 0)

fun _calculateNestingLevelRec(loop: SimpleLoop Ptr, depth: Int)
    loop.depthLevel = depth
    for c = loop.children.all
        _calculateNestingLevelRec(c, depth+1)
        loop.setNestingLevel(max(loop.nestingLevel, 1+c.nestingLevel))

fun numLoops(this: !LoopStructureGraph) = _loops.size

fun >>(this: !LoopStructureGraph, os: !OutStream) = _dumpRec(os, _root, 0)

fun _dumpRec(os: !OutStream, loop: SimpleLoop Ptr, indent: Int)
    os << loop.get
    for c = loop.children.all
        _dumpRec(os, c, indent+1)

//
// Union/Find algorithm after Tarjan, R.E., 1983, Data Structures
// and Network Algorithms.
//
datatype UnionFindNode
    bb: BasicBlock Ptr
    loop: SimpleLoop Ptr
    dfsNumber: Int
    _parent: UnionFindNode Ptr

// Initialize this node.
//
fun init(this: !UnionFindNode, bb: BasicBlock Ptr, dfsNumber: Int)
    this._parent     ctor this
    this.bb         ctor bb
    this.dfsNumber  ctor dfsNumber

// Union/Find Algorithm - The find routine.
//
// Implemented with Path Compression (inner loops are only
// visited and collapsed once, however, deep nests would still
// result in significant traversals).
//
fun findSet(this: UnionFindNode const): UnionFindNode Ptr
    var nodeList: List(UnionFindNode Ptr)

    var node: UnionFindNode Ptr = this
    while node != node._parent ; node = node._parent
        if node._parent != node._parent._parent
            nodeList += node

    for n = nodeList.all
        n._parent = node._parent

    return node

// Union/Find Algorithm - The union routine.
//
// We rely on path compression.
//
fun union(this: !UnionFindNode, b: UnionFindNode Ptr)
    _parent = b

//------------------------------------------------------------------
// Loop Recognition
//
// based on:
//   Paul Havlak, Nesting of Reducible and Irreducible Loops,
//      Rice University.
//
//   We avoid doing tree balancing and instead use path compression
//   to avoid traversing parent pointers over and over.
//
//   Most of the variable names and identifiers are taken literally
//   from this paper (and the original Tarjan paper mentioned above).
//-------------------------------------------------------------------

//
// Local types used for Havlak algorithm, all carefully
// selected to guarantee minimal complexity.
//
using NodeVector = UnionFindNode Vector
using BasicBlockMap = Map(BasicBlock Ptr, Int)
using IntList = Int List
using IntSet = Int Set
using NodeList = (UnionFindNode Ptr) List
using IntListVector = IntList Vector
using IntSetVector = IntSet Vector
using IntVector = Int Vector
using CharVector = Byte Vector

using BB_TOP            = Byte(0)  // uninitialized
using BB_NONHEADER      = Byte(1)  // a regular BB
using BB_REDUCIBLE      = Byte(2)  // reducible loop
using BB_SELF           = Byte(3)  // single BB loop
using BB_IRREDUCIBLE    = Byte(4)  // irreducible loop
using BB_DEAD           = Byte(5)  // a dead BB
using BB_LAST           = Byte(6)  // Sentinel

using kUnvisited = -1              // Marker for uninitialized nodes.
using kMaxNonBackPreds = 32*1024   // Safeguard against pathologic algorithm behavior.

datatype HavlakLoopFinder
    _cfg: @MaoCFG
    _lsg: @LoopStructureGraph

fun ctor(this: !HavlakLoopFinder, cfg: !MaoCFG, lsg: !LoopStructureGraph)
    this._cfg := cfg
    this._lsg := lsg

//
// IsAncestor
//
// As described in the paper, determine whether a node 'w' is a
// "true" ancestor for node 'v'.
//
// Dominance can be tested quickly using a pre-order trick
// for depth-first spanning trees. This is why DFS is the first
// thing we run below.
//
fun isAncestor(w, v: SizeType, last: !IntVector) = (w <= v) && (v <= last(w))

//
// DFS - Depth-First-Search
//
// DESCRIPTION:
// Simple depth first traversal along out edges with node numbering.
//
fun doDFS(currentNode: BasicBlock Ptr, nodes: !NodeVector, number: !BasicBlockMap, last: !IntVector, current: Int): Int
    nodes(current).init(currentNode, current)
    number(currentNode) = current

    var lastId = current
    for target = currentNode.outEdgesRange
        if number(target) == kUnvisited
            lastId = doDFS(target, nodes, number, last, lastId+1)
    last(number(currentNode)) = lastId
    return lastId

//
// FindLoops
//
// Find loops and build loop forest using Havlak's algorithm, which
// is derived from Tarjan. Variable names and step numbering has
// been chosen to be identical to the nomenclature in Havlak's
// paper (which is similar to the one used by Tarjan).
//
fun findLoops(this: !HavlakLoopFinder)
    if !_cfg.startNode
        return

    let size = _cfg.getNumNodes

    var nonBackPreds: IntSetVector = size
    var backPreds: IntListVector = size
    var header: IntVector = size
    var type: CharVector = size
    var last: IntVector = size
    var nodes: NodeVector = size
    var number: BasicBlockMap

    // Step a:
    //   - initialize all nodes as unvisited.
    //   - depth-first traversal and numbering.
    //   - unreached BB's are marked as dead.
    //
    for bb = _cfg.basicBlocksRange
        number.insert(bb, kUnvisited)

    doDFS(_cfg.startNode, nodes, number, last, 0)

    // Step b:
    //   - iterate over all nodes.
    //
    //   A backedge comes from a descendant in the DFS tree, and non-backedges
    //   from non-descendants (following Tarjan).
    //
    //   - check incoming edges 'v' and add them to either
    //     - the list of backedges (backPreds) or
    //     - the list of non-backedges (nonBackPreds)
    //
    for w = 0..size
        header(w) = 0
        type(w) = BB_NONHEADER

        let nodeW: BasicBlock Ptr = nodes(w).bb
        if !nodeW
            type(w) = BB_DEAD
            continue   // dead BB

        if nodeW.numPred > 0
            for nodeV = nodeW.inEdgesRange
                let v = number(nodeV)
                if v == kUnvisited
                    continue   // dead node

                if isAncestor(w, v, last)
                    backPreds(w) += v
                else
                    nonBackPreds(w) += v

    // Start node is root of all other loops.
    header(0) = 0

    // Step c:
    //
    // The outer loop, unchanged from Tarjan. It does nothing except
    // for those nodes which are the destinations of backedges.
    // For a header node w, we chase backward from the sources of the
    // backedges adding nodes to the set P, representing the body of
    // the loop headed by w.
    //
    // By running through the nodes in reverse of the DFST preorder,
    // we ensure that inner loop headers will be processed before the
    // headers for surrounding loops.
    //
    for w = Int(size-1)...0 ../ (-1)
        var nodePool: NodeList       // this is 'P' in Havlak's paper
        let nodeW = nodes(w).bb
        if !nodeW
            continue   // dead BB

        // Step d:
        for v = backPreds(w).all
            if v != w
                nodePool += nodes(v).findSet
            else
                type(w) = BB_SELF

        // Copy node_pool to worklist.
        //
        //var workList: NodeList = nodePool
        var workList: NodeList = nodePool.all
        if nodePool.isEmpty
            type(w) = BB_REDUCIBLE

        // work the list...
        //
        while !workList.isEmpty
            let x = workList.front
            workList.popFront

            // Step e:
            //
            // Step e represents the main difference from Tarjan's method.
            // Chasing upwards from the sources of a node w's backedges. If
            // there is a node y' that is not a descendant of w, w is marked
            // the header of an irreducible loop, there is another entry
            // into this loop that avoids w.

            // The algorithm has degenerated. Break and
            // return in this case.
            //
            let nonBackSize = nonBackPreds(x.dfsNumber).size
            if nonBackSize > kMaxNonBackPreds
                _lsg.killAll
                return

            for t = nonBackPreds(x.dfsNumber).all
                let y: @UnionFindNode = nodes(t)
                let yDash = y.findSet

                if !isAncestor(w, yDash.dfsNumber, last)
                    type(w) = BB_IRREDUCIBLE
                    nonBackPreds(w).insert(yDash.dfsNumber)
                else
                    if yDash.dfsNumber != w
                        if find(nodePool.all, yDash).isEmpty
                            workList += yDash
                            nodePool += yDash

        // Collapse/Unionize nodes in a SCC to a single node
        // For every SCC found, create a loop descriptor and link it in.
        //
        if !nodePool.isEmpty || type(w) == BB_SELF
            var loop = _lsg.createNewLoop

            // At this point, one can set attributes to the loop, such as:
            //
            // the bottom node:
            //    IntList::iterator iter  = [w] back_preds.begin
            //    loop bottom is: [*backp_iter] nodes.node)
            //
            // the number of backedges:
            //    [w] back_preds.size
            //
            // whether this loop is reducible:
            //    [w] type != BB_IRREDUCIBLE
            //
            // TODO(rhundt): Define those interfaces in the Loop Forest.
            //
            nodes(w).loop = loop

            for node = nodePool.all
                header(node.dfsNumber) = w
                node.union(nodes(w) mkPtr)

                if node.loop.isSet
                    node.loop.setParent(loop)
                else
                    loop.addNode(node.bb)
            _lsg.addLoop(loop)

// External entry point.
fun findHavlakLoops(cfg: !MaoCFG, lsg: !LoopStructureGraph): SizeType
    var finder = HavlakLoopFinder(cfg, lsg)
    finder.findLoops
    return lsg.numLoops

//--- TESTING CODE -------------------

fun buildDiamond(cfg: !MaoCFG, start: Int): Int
    new(BasicBlockEdge, cfg, start  , start+1)
    new(BasicBlockEdge, cfg, start  , start+2)
    new(BasicBlockEdge, cfg, start+1, start+3)
    new(BasicBlockEdge, cfg, start+2, start+3)
    return start+3

fun buildConnect(cfg: !MaoCFG, start, end: Int)
    new(BasicBlockEdge, cfg, start, end)

fun buildStraight(cfg: !MaoCFG, start, n: Int): Int
    for i = 0..n
        buildConnect(cfg, start + i, start + i + 1)
    return start + n

fun buildBaseLoop(cfg: !MaoCFG, from: Int): Int
    var header   = buildStraight(cfg, from, 1)
    var diamond1 = buildDiamond(cfg, header)
    var d11      = buildStraight(cfg, diamond1, 1)
    var diamond2 = buildDiamond(cfg, d11)
    var footer   = buildStraight(cfg, diamond2, 1)
    buildConnect(cfg, diamond2, d11)
    buildConnect(cfg, diamond1, header)

    buildConnect(cfg, footer, from)
    footer = buildStraight(cfg, footer, 1)
    return footer

fun sprMain
    cout << "Welcome to LoopTesterApp, Sparrow edition" << endl
    cout << "Constructing cfg..." << endl
    var cfg: MaoCFG
    cout << "Constructing lsg..." << endl
    var lsg: LoopStructureGraph

    cout << "Constructing Simple CFG..." << endl
    cfg.createNode(0)  // top
    buildBaseLoop(cfg, 0)
    cfg.createNode(1)  // bottom
    new(BasicBlockEdge, cfg, 0, 2)

    cout << "15000 dummy loops" << endl
    for dummyLoop = 0..15000
        findHavlakLoops(cfg, LoopStructureGraph())

    cout << "Constructing CFG..." << endl
    var n = 2

    for parlooptrees = 0..10
        cfg.createNode(n + 1)
        buildConnect(cfg, 2, n + 1)
        ++n

        for i = 0..100
            let top = n
            n = buildStraight(cfg, n, 1)
            for j = 0..25
                n = buildBaseLoop(cfg, n)
            let bottom = buildStraight(cfg, n, 1)
            buildConnect(cfg, n, top)
            n = bottom
        buildConnect(cfg, n, 1)

    cout << "Performing Loop Recognition\n1 Iteration" << endl
    let numLoops = findHavlakLoops(cfg, lsg)

    cout << "Another 50 iterations..." << endl
    let numIterations = programArgs(1) asInt
    var sum: SizeType = 0
    for i = 0..numIterations
        cout << '.' << flush
        sum += findHavlakLoops(cfg, LoopStructureGraph())
    cout << endl << "Found " << numLoops << " loops (including artificial root node)(" << sum << ')' << endl
    cout << lsg
//<<<Running(1)
/*<<<Running(2)
Welcome to LoopTesterApp, Sparrow edition
Constructing cfg...
Constructing lsg...
Constructing Simple CFG...
15000 dummy loops
Constructing CFG...
Performing Loop Recognition
1 Iteration
Another 50 iterations...
..
Found 76002 loops (including artificial root node)(152004)
loop-0, nest: 0, depth: 0
>>>*/
