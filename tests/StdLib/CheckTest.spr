//!!
import check
import std.string(String)
import std.tuple
import std.ranges

using enableChecks = true

fun check_associativity(x: Int) = x+2 == 2+x

fun check_IntIdentity(x: Int) = (x+0) == x && (0+x) == x

fun classifier(x: Int): String 
    if ( x < 10 )   return "<10"
    if ( x < 20 )   return "<20"
    if ( x < 30 )   return "<30"
    return ">=30"

fun isTrivial(x: Int) = x<5

fun sprMain 
    if ( programArgs.size() < 2 )
        return
    var n = programArgs(1) asInt

    if      n == 1; testOk
    else if n == 2; testFailure

fun testOk 
    forAll(Int) check (fun x = true) ~ "that we have something running"

    forAll(Int) check \check_associativity ~ "Int associativity"

    forAll(Int) check (fun x = (x+0) == x && (0+x) == x) ~ "that Int has 0 as identity"

    forAll(Int) forWhich (fun x = x>0) take 10 check \check_IntIdentity ~ "that positive Ints have 0 as identity"

    forAll(1..100) withClassifier \classifier withTrivials \isTrivial check (fun x = true) ~ "with classifier"

    forAll(elements(10..20)) check (fun x = 10<=x && x<20) ~ "that elements works"

    var g1 = elements(10..15)
    var g2 = elements(20..25)
    var g3 = elements(30..35)
    var g4 = oneOf(values(g1, g2, g3))
    forAll(g4) check (fun x = 10<=x && x<50 && x % 10 < 5) ~ "that oneOf works"

    var g5 = frequency(values(1 ~ g1, 6 ~ g2, 2 ~ g3))
    forAll(g5) check (fun x = 10<=x && x<50 && x % 10 < 5) ~ "that frequency works"

//<<<Check non-failure cases (1)


fun testFailure 
    forAll(0..10) check (fun x = x < 5) ~ "than we can report failures"

/*<<<Report failures (2)
* Checking than we can report failures
FAILURE: Falsifiable after 6 tests, for input:
5
>>>*/
