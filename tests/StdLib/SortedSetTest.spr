import std.sortedSet
import std.sortedTable(Less)
import std.ranges
import std.list
import std.vector

fun sprMain
    if ( programArgs.size() < 2 )
        return
    var n = programArgs(1) asInt

    if      n == 1  ; test1
    else if n == 2  ; test2
    else if n == 3  ; test3
    else if n == 4  ; test4
    else if n == 5  ; test5
    else if n == 6  ; test6
    else if n == 7  ; test7
    else if n == 8  ; test8
    else if n == 9  ; test9
    else if n == 10 ; test10
    else if n == 11 ; test11
    else if n == 12 ; test12
    else if n == 13 ; test13
    else if n == 14 ; test14
    else if n == 15 ; test15
    else if n == 16 ; test16
    else if n == 17 ; test17
    else if n == 18 ; test18
    else if n == 19 ; test19

fun makeList(): List(Int)
    var li: List(Int)

    li.pushBack(3)
    li.pushBack(145)
    li.pushBack(834)
    li.pushBack(8)
    li.pushBack(73)
    li.pushBack(73)
    li.pushBack(101)
    li.pushBack(4)
    li.pushBack(8)
    li.pushBack(4)
    li.pushBack(106)
    li.pushBack(3)
    li.pushBack(5)
    li.pushBack(53)
    li.pushBack(62)

    return li

fun printRange(nr: AnyType)
    var v: Vector(Int) = nr

    var r = v.all()
    while !r.isEmpty()
        cout << r.front()
        r.popFront()
        if (r.isEmpty() )
            cout << endl
        else
            cout << ' '

datatype Equal(type: Type)
    using ValueType = type
fun ()(this: Equal, x, y: this.ValueType): Bool = x == y

fun test1()
    var ss: SortedSet(Int, Less(Int), Equal(Int))

    cout << ss.isEmpty() << endl
    cout << ss.size() << endl
    cout << ss.capacity() << endl
    cout << ss.contains(10) << endl
/*<<<Default constructor(1)
true
0
0
false
>>>*/

fun test2()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(60)

    cout << ss.isEmpty() << endl
    cout << ss.size() << endl
    cout << ss.capacity() << endl
    cout << ss.contains(10) << endl
/*<<<Capacity constructor(2)
true
0
60
false
>>>*/

fun test3()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(makeList().all())

    cout << ss.isEmpty() << endl
    cout << ss.size() << endl
    cout << ss.capacity() << endl
    cout << ss.contains(53) << endl
    cout << ss.contains(106) << endl
    cout << ss.contains(4) << endl
    cout << ss.contains(9999) << endl
/*<<<Range constructor(3)
false
11
15
true
true
true
false
>>>*/

fun test4()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(makeList().all())
    var ss2 = SortedSet(Int, Less(Int), Equal(Int))(ss)

    cout << ss2.isEmpty() << endl
    cout << ss2.size() << endl
    cout << ss2.capacity() << endl
    cout << ss2.contains(53) << endl
    cout << ss2.contains(106) << endl
    cout << ss2.contains(4) << endl
    cout << ss2.contains(9999) << endl
/*<<<Copy constructor(4)
false
11
11
true
true
true
false
>>>*/

fun test5()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(makeList().all())
    var ss2 = SortedSet(Int, Less(Int), Equal(Int))(60)

    ss.swap(ss2)
    cout << ss2.isEmpty() << endl
    cout << ss2.size() << endl
    cout << ss2.capacity() << endl
    cout << ss2.contains(53) << endl
    cout << ss2.contains(106) << endl
    cout << ss2.contains(4) << endl
    cout << ss2.contains(9999) << endl
    cout << ss.isEmpty() << endl
    cout << ss.size() << endl
    cout << ss.capacity() << endl
    cout << ss.contains(10) << endl
/*<<<Swapping(5)
false
11
15
true
true
true
false
true
0
60
false
>>>*/

fun test6()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(makeList().all())

    ss.reserve(1000)
    cout << ss.isEmpty() << endl
    cout << ss.size() << endl
    cout << ss.capacity() << endl
    cout << ss.contains(53) << endl
    cout << ss.contains(106) << endl
    cout << ss.contains(4) << endl
    cout << ss.contains(9999) << endl
/*<<<Reserving(6)
false
11
1000
true
true
true
false
>>>*/

fun test7()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(makeList().all())

    printRange(ss.all())
/*<<<Range access(7)
3 4 5 8 53 62 73 101 106 145 834
>>>*/

fun test8()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(0 .. 10)

    ss.insert(5)
    cout << ss.contains(5) << endl
/*<<<Element insertion(8)
true
>>>*/

fun test9()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(0 .. 10)

    ss.insert(5 .. 15)
    printRange(ss.all())
/*<<<Range insertion(9)
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
>>>*/

fun test10()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(0 .. 10)

    ss.remove(5)
    printRange(ss.all())
    ss.remove(20)
    printRange(ss.all())
/*<<<Element removal(10)
0 1 2 3 4 6 7 8 9
0 1 2 3 4 6 7 8 9
>>>*/

fun test11()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(makeList().all())

    ss.remove(ss.equalRange(8))
    printRange(ss.all())
    cout << ss.size() << endl
    ss.remove(ss.equalRange(106))
    printRange(ss.all())
    cout << ss.size() << endl
    ss.remove(ss.equalRange(101))
    printRange(ss.all())
    cout << ss.size() << endl
    ss.remove(ss.equalRange(1000))
    printRange(ss.all())
    cout << ss.size() << endl
    ss.remove(ss.all())
    printRange(ss.all())
    cout << ss.size() << endl
    ss = SortedSet(Int, Less(Int), Equal(Int))(makeList().all())

    var r = ss.all()

    r.popFront()
    ss.remove(r)
    printRange(ss.all())
    cout << ss.size() << endl
/*<<<Range removal(11)
3 4 5 53 62 73 101 106 145 834
10
3 4 5 53 62 73 101 145 834
9
3 4 5 53 62 73 145 834
8
3 4 5 53 62 73 145 834
8
0
3
1
>>>*/

fun test12()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(0 .. 10)

    cout << ss.contains(7) << endl
    cout << ss.contains(53) << endl
    cout << ss.contains(12) << endl
/*<<<Containment checking(12)
true
false
false
>>>*/

fun test13()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(0 .. 10)

    ss.insert(5)
    cout << ss.count(5) << endl
    cout << ss.count(1) << endl
    cout << ss.count(53) << endl
/*<<<Counting(13)
1
1
0
>>>*/

fun test14()
    var ss: SortedSet(Int, Less(Int), Equal(Int))

    ss.insert(0 .. 10)
    printRange(ss.equalRange(5))
    ss.insert(5)
    printRange(ss.equalRange(5))
    ss.insert(58)
    printRange(ss.equalRange(5))
    printRange(ss.equalRange(58))
    printRange(ss.equalRange(111))
    printRange(ss.equalRange(100))
/*<<<Equal range(14)
5
5
5
58
>>>*/

fun test15()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(0 .. 10)

    printRange(ss.find(5))
    printRange(ss.find(10))
    printRange(ss.find(53))
/*<<<Finding(15)
5 6 7 8 9
>>>*/

fun test16()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(0 .. 10)

    ss.clear()
    cout << ss.isEmpty() << endl
    printRange(ss.all())
    cout << ss.contains(4) << endl
/*<<<Clearing(16)
true
false
>>>*/

fun test17()
    var ss1 = SortedSet(Int, Less(Int), Equal(Int))(0 .. 10)
    var ss2: SortedSet(Int, Less(Int), Equal(Int))

    ss2 = ss1
    printRange(ss2.all())
    ss1 = ss1
    printRange(ss1.all())
/*<<<Assignment operator(17)
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
>>>*/

fun test18()
    var ss1 = SortedSet(Int, Less(Int), Equal(Int))(makeList().all())
    var ss2 = ss1
    var ss3: SortedSet(Int, Less(Int), Equal(Int))
    var ss4 = SortedSet(Int, Less(Int), Equal(Int))(0 .. 10)

    cout << ss1 == ss2 << endl
    cout << ss1 != ss2 << endl
    cout << ss1 == ss3 << endl
    cout << ss1 != ss3 << endl
    cout << ss1 == ss4 << endl
    cout << ss1 != ss4 << endl
    cout << ss3 == ss3 << endl
    cout << ss3 != ss3 << endl
    ss4.clear()
    cout << ss3 == ss4 << endl
    cout << ss3 != ss4 << endl
    ss2.remove(53)
    cout << ss1 == ss2 << endl
    cout << ss1 != ss2 << endl
/*<<<Equality and inequality operators(18)
true
false
false
true
false
true
true
false
true
false
false
true
>>>*/

fun test19()
    var ss = SortedSet(Int, Less(Int), Equal(Int))(0 .. 1000)

    for i = numericRange(0, 1000)
        if ( !ss.contains(i) )
            cout << "Test failed" << endl
/*<<<Large set(19)
>>>*/
