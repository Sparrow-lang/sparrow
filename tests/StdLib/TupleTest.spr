//!!
import std.tuple
import std.ranges
import check

[initCtor] datatype MyObj1
    x: Int

[initCtor] datatype MyObj2
    x, y: Int

fun >>(o: MyObj1, os: @OutStream)
    os << o.x;
fun >>(o: MyObj2, os: @OutStream)
    os << o.x << '#' << o.y;

using T2 = Tuple(MyObj1, MyObj2)
using T4 = Tuple(MyObj1, MyObj2, Int rt, Bool rt)

fun arbitrary(t: Type): T2 Gen if t == T2
    return mkGen(T2, \generateT2);

fun arbitrary(t: Type): T4 Gen if t == T4
    return mkGen(T4, \generateT4);

//! Generate an arbitrary tuple 2
fun generateT2(sizeHint: UInt): T2
    var res: T2
    let h: Int = sizeHint + 5
    res.v1.x = randBetween(-h, h+1)
    res.v2.x = randBetween(-h, h+1)
    res.v2.y = randBetween(-h, h+1)
    return res
//! Generate an arbitrary tuple 4
fun generateT4(sizeHint: UInt): T4
    var res: T4
    let h: Int = sizeHint + 5
    res.v1.x = randBetween(-h, h+1)
    res.v2.x = randBetween(-h, h+1)
    res.v2.y = randBetween(-h, h+1)
    res.v3 = randBetween(-h, h+1)
    res.v4 = randBetween(0, 1) > 0
    return res

fun isDefault2(t: T2) = t.v1.x == 0 && t.v2.x == 0 && t.v2.y == 0
fun isDefault4(t: T4) = t.v1.x == 0 && t.v2.x == 0 && t.v2.y == 0 && t.v3 == 0 && t.v4 == false

fun sprMain
    var t2_1 = MyObj1(3) ~ MyObj2(4,5)
    var t4_1 = MyObj1(3) ~ MyObj2(4,5) ~ 6 ~ true
    var t2_2 = t2_1
    var t4_2 = t4_1
    var t2_3 = MyObj1(9999) ~ MyObj2(4,5)
    var t4_3 = MyObj1(9999) ~ MyObj2(4,5) ~ 6 ~ true

    forAll(repeat(T2(), 3)) check \isDefault2 ~ "tuple's default ctor"
    forAll(repeat(T4(), 3)) check \isDefault4 ~ "tuple's default ctor"

    forAll(repeat(t2_1, 3)) check (fun x = !isDefault2(x)) ~ "tuple's values ctor"
    forAll(repeat(t4_1, 3)) check (fun x = !isDefault4(x)) ~ "tuple's values ctor"

    forAll(repeat(t2_2, 3)) check (fun.{t2_1} x = x == t2_1) ~ "tuple's copy ctor (and equality)"
    forAll(repeat(t4_2, 3)) check (fun.{t4_1} x = x == t4_1) ~ "tuple's copy ctor (and equality)"

    forAll(T2 arbitrary) check (fun.{t2_3} x = x != t2_3) ~ "tuple's inequality"

    // Assignment
    t2_2 = t2_3
    t4_2 = t4_3
    forAll(repeat(t2_2, 3)) check (fun.{t2_3} x = x == t2_3) ~ "tuple's assignment"
    forAll(repeat(t4_2, 3)) check (fun.{t4_3} x = x == t4_3) ~ "tuple's assignment"

    forAll(T2 arbitrary) check (fun x = (x first) == x.v1) ~ "first function"
    forAll(T4 arbitrary) check (fun x = (x first) == x.v1) ~ "first function"
    forAll(T2 arbitrary) check (fun x = (x second) == x.v2) ~ "second function"
    forAll(T4 arbitrary) check (fun x = (x second) == x.v2) ~ "second function"

    forAll(T4 arbitrary) check (fun x = (x tail).v1 == x.v2 && tail(tail(x)).v1 == x.v3 && tail(tail(x)).v2 == x.v4) ~ "tail function"

    // Constructing types
    let a: Int * Bool
    let b: MyObj1 * MyObj2
    //var b: MyObj1 * MyObj2 * Int;
    //var b: MyObj1 * MyObj2 * Int * Bool;
    [ct] if ( MyObj1 * MyObj2 != T2 ) { cout << "FAILURE: cannot construct tuple types (T2)" << endl; }
    //[ct] if ( MyObj1 * MyObj2 * Int * Bool != T4 ) { cout << "FAILURE: cannot construct tuple types (T4)" << endl; }

//<<< Tuple checks
