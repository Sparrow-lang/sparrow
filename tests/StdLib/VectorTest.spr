//!!
import std.vector(Vector)
import std.contiguousMemoryRange(ContiguousMemoryRange)
import std.rawPtr(RawPtr, allocRawPtr)
import std.ranges(.., rangeSize, repeat, skip, take, map)
import std.algorithms(equal)
import std.tuple
import check

fun sprMain
    forAll(repeat(Vec(), 3)) check (fun x = x.isEmpty && x.size == 0) ~ "that a vector can be empty"
    forAll(Vec arbitrary) check (fun x = x.isEmpty || x.size > 0) ~ "that size is syncrhonized with isEmpty"

    forAll(TestRange arbitrary) check (fun r: Bool {
            var v: Vec = r
            if ( v.isEmpty != r.isEmpty ) return false
            if ( v.size != (r rangeSize) ) return false
            var sz = v.size
            var rc = r
            for i = 0..sz
                if ( v(i) != rc.front ) return false
                rc.popFront
            return true
    }) ~ "vector's range constructor"

    forAll(Vec arbitrary) check (fun vec: Bool {
            var vec2: Vec = vec
            if ( vec2.isEmpty != vec.isEmpty ) return false
            if ( vec2.size != vec.size ) return false
            for i = 0..vec.size
                if ( vec2(i) != vec(i) ) return false
            return true
    }) ~ "vector's copy constructor"

    forAll(DataVec arbitrary) check (fun (vec: DataVec): Bool {
            copyCtorCnt = 0

            var vec2: DataVec = vec

            if vec2.isEmpty != vec.isEmpty
                return false
            if vec2.size != vec.size
                return false
            for i = 0..vec.size
                if vec2(i) != vec(i)
                    return false
            if copyCtorCnt != 0
                return false
            return true
    }) ~ "vector's copy constructor (Data); no copy ctor"

    forAll(SizeType) check (fun sz: Bool {
            var vec: Vec = sz
            if ( vec.size != sz ) return false
            for i = 0..sz
                if ( vec(i) != Vec.ValueType() ) return false
            return true
    }) ~ "vector's sized constructor"

    // TODO: swap

    forAll(Vec arbitrary) check(fun vec: Bool {
            return vec.capacity >= vec.size
    }) ~ "that capacity is always greater or equal to size"

    forAll(repeat(Vec(), 3)) check (fun vec: Bool {
            return vec.capacity == 0
    }) ~ "that we have zero capacity of empty vectors"

    forAll(Vec arbitrary) check(fun vec: Bool {
            for i = 0..vec.size
                if ( vec(i) != vec.at(i) ) return false
            return true
    }) ~ "that at function yields the same as call operator"

    forAll(Vec arbitrary) check(fun vec: Bool {
            return vec.isEmpty \
                || vec.front == vec(0)
    }) ~ "vector's front"

    forAll(Vec arbitrary) check(fun vec: Bool {
            return vec.isEmpty \
                || vec.back == vec(vec.size-1)
    }) ~ "vector's back"

    forAll(Vec arbitrary) check(fun vec: Bool {
            var r = vec.all
            if ( vec.size != (r rangeSize) ) return false
            for i = 0..vec.size
                if ( vec(i) != r.front ) return false
                r.popFront
            return r.isEmpty
    }) ~ "vector's returning range"

    forAll(SubrangeTestData arbitrary) check(fun td: Bool {
            var r = td.vec.all skip td.start take td.count
            return td.vec.subrange(td.start, td.count) equal r

    }) ~ "vector's subrange"

    forAll(InsertValueTestData arbitrary) check(fun td: Bool {
            var v = td.vec
            var r = v.subrange(td.idx, v.size-td.idx)
            v.insertBefore(td.value, r)

            return (
                   v.size == td.vec.size+1
                && (v.all take td.idx equal (td.vec.all take td.idx))
                && v(td.idx) == td.value
                && (v.all skip (td.idx+1) equal (td.vec.all skip td.idx))
            )
    }) ~ "vector's insertBefore with a value"

    forAll(InsertRangeTestData arbitrary) check(fun td: Bool {
            var v = td.vec
            var r = v.subrange(td.idx, v.size-td.idx)
            v.insertBefore(td.values.all, r)

            var diff = td.values.size
            return (
                   v.size == td.vec.size+diff
                && (v.all take td.idx equal (td.vec.all take td.idx))
                && (v.subrange(td.idx, diff) equal td.values.all)
                && (v.all skip (td.idx+diff) equal (td.vec.all skip td.idx))
            )
    }) ~ "vector's insertBefore with a range"

    forAll(InsertValueTestData arbitrary) check(fun td: Bool {
            var v = td.vec
            var r = v.subrange(0, td.idx)
            v.insertAfter(td.value, r)

            return (
                   v.size == td.vec.size+1
                && (v.all take td.idx equal (td.vec.all take td.idx))
                && v(td.idx) == td.value
                && (v.all skip (td.idx+1) equal (td.vec.all skip td.idx))
            )
    }) ~ "vector's insertAfter with a value"

    forAll(InsertRangeTestData arbitrary) check(fun td: Bool {
            var v = td.vec
            var r = v.subrange(0, td.idx)
            v.insertAfter(td.values.all, r)

            var diff = td.values.size
            return (
                   v.size == td.vec.size+diff
                && (v.all take td.idx equal (td.vec.all take td.idx))
                && (v.subrange(td.idx, diff) equal td.values.all)
                && (v.all skip (td.idx+diff) equal (td.vec.all skip td.idx))
            )
    }) ~ "vector's insertAfter with a range"

    forAll(InsertValueTestData arbitrary) check(fun td: Bool {
            var v = td.vec
            v.pushBack(td.value)
            return (
                   v.size == td.vec.size+1
                && (v.subrange(0, td.vec.size) equal td.vec.all)
                && v.back == td.value
            )
    }) ~ "vector's pushBack"

    forAll(InsertValueTestData arbitrary) check(fun td: Bool {
            var v = td.vec
            v += td.value
            return (
                   v.size == td.vec.size+1
                && (v.subrange(0, td.vec.size) equal td.vec.all)
                && v.back == td.value
            )
    }) ~ "vector's pushBack operator"

    forAll(InsertRangeTestData arbitrary) check(fun td: Bool {
            var v = td.vec
            for x = td.values.all
                v += x

            var diff = td.values.size
            return (
                   v.size == td.vec.size+diff
                && (v.all take td.vec.size equal td.vec.all)
                && (v.all skip td.vec.size equal td.values.all)
            )
    }) ~ "vector's pushBack operator with multiple values"

    forAll(InsertValueTestData arbitrary) check(fun td: Bool {
            if ( td.vec.isEmpty ) return true
            var v = td.vec
            v popBack
            return v.size == td.vec.size-1
    }) ~ "vector's popBack"

    forAll(SubrangeTestData arbitrary) check(fun td: Bool {
            var v = td.vec
            v.remove(v.subrange(td.start, td.count))
            return (
                   v.size == td.vec.size-td.count
                && (v.all take td.start equal (td.vec.all take td.start))
                && (v.all skip td.start equal (td.vec.all skip td.start+td.count))
            )
    }) ~ "vector's remove of ranges"

    forAll(SubrangeTestData arbitrary) check(fun td: Bool {
            if ( td.vec.isEmpty ) return true
            var v = td.vec
            v.remove(td.start)
            return (
                   v.size == td.vec.size-1
                && (v.all take td.start equal (td.vec.all take td.start))
                && (v.all skip td.start equal (td.vec.all skip td.start+1))
            )
    }) ~ "vector's remove of an index"

    forAll(SubrangeTestData arbitrary) check(fun td: Bool {
            var v = td.vec
            v.resize(td.start)
            return (
                   v.size == td.start
                && (v.all take td.start equal (td.vec.all take td.start))
            )
    }) ~ "vector's resize shrink"

    forAll(SubrangeTestData arbitrary) check ((fun td: Bool {
            var v = td.vec
            v.resize(v.size + td.start)
            return (
                   v.size == td.vec.size + td.start
                && (v.all take td.start equal (td.vec.all take td.start))
                && (v.all skip td.vec.size equal repeat(Int(), td.start))
            )
    }) ~ "vector's resize grow")

    forAll(SubrangeTestData arbitrary) check ((fun (td: !SubrangeTestData): Bool {
            td.vec clear
            return td.vec.isEmpty && td.vec.size == 0
    }) ~ "that we can clear a vector")

    forAll(InsertRangeTestData arbitrary) check ((fun td: Bool {
            var v: Vec
            v = td.vec
            v = td.values
            return v.size == td.values.size && v == td.values
    }) ~ "assignment operator for vector")

    forAll(Vec arbitrary) check ((fun v: Bool {
            var vec = v
            return vec == v && vec == vec && !(vec != v)
    }) ~ "vector's equality comparison")

//<<< Vector checks

using Vec = Vector(Int)
using TestRange = ContiguousMemoryRange(Int)

fun arbitrary(t: Type): Vec Gen if t == Vec
    return mkGen(Vec, \generateVec)

fun arbitrary(t: Type): TestRange Gen if t == TestRange
    return mkGen(t, \generateTestRange)

//! Generate an arbitrary vector
fun generateVec(sizeHint: UInt): Vec
    var res: Vec
    var h: Int = sizeHint + 5
    var size = randBetween(0, h)
    res.resize(size)
    for i = 0..size
        res(i) = randBetween(-h, h+1)
    return res

//! Generate an arbitrary test range
fun generateTestRange(sizeHint: UInt): TestRange
    var h: Int = sizeHint + 3
    var size = randBetween(0, h+1)

    // Allocate a buffer of memory to hold the values
    var ptr = allocRawPtr(Int, size)
    var ptrEnd = ptr.advance(size)

    // Populate with values
    var i = 0
    while i < size ; i = i + 1
        var val: @AnyType = ptr.advance(i).value()
        val = randBetween(-h, h+1)
    return ContiguousMemoryRange(Int)(ptr, ptrEnd)

datatype SubrangeTestData
    vec: Vec
    start, count: SizeType

fun >>(this: SubrangeTestData const, os: !OutStream)
    os << vec << ", start=" << start << ", count=" << count

fun arbitrary(t: Type): SubrangeTestData Gen if t == SubrangeTestData
    return mkGen(SubrangeTestData, (fun (sizeHint: UInt): SubrangeTestData {
        var res: SubrangeTestData
        res.vec = generateVec(sizeHint)
        res.count = randBetween(0, res.vec.size)
        res.start = randBetween(0, res.vec.size-res.count)
        return res

    }))

datatype InsertValueTestData
    vec: Vec
    idx: SizeType
    value: Int

fun >>(this: InsertValueTestData const, os: !OutStream)
    os << vec << ", idx=" << idx << ", value=" << value

fun arbitrary(t: Type): InsertValueTestData Gen if t == InsertValueTestData
    return mkGen(InsertValueTestData, (fun (sizeHint: UInt): InsertValueTestData {
        var res: InsertValueTestData
        res.vec = generateVec(sizeHint)
        res.idx = randBetween(0, res.vec.size)
        res.value = randBetween(-1000, 1000)
        return res
    }))

datatype InsertRangeTestData
    vec: Vec
    idx: SizeType
    values: Vec

fun >>(this: InsertRangeTestData const, os: !OutStream)
    os << vec << ", idx=" << idx << ", values=" << values

fun arbitrary(t: Type): InsertRangeTestData Gen if t == InsertRangeTestData
    return mkGen(InsertRangeTestData, (fun (sizeHint: UInt): InsertRangeTestData {
        var res: InsertRangeTestData
        res.vec = generateVec(sizeHint)
        res.idx = randBetween(0, res.vec.size)
        res.values = generateVec(sizeHint)
        return res
    }))

using DataVec = Data Vector

[initCtor, bitcopiable]
datatype Data
    x: Int

fun >>(this: Data const, os: !OutStream)
    os << 'Data(' << x << ')\n'

fun ctor(this: !Data, other: Data)
    copyCtorCnt++

var copyCtorCnt = 0

fun arbitrary(t: Type): DataVec Gen if t == DataVec
    return mkGen(DataVec, \generateDataVec)

fun generateDataVec(sizeHint: UInt): DataVec
    return DataVec(generateVec(sizeHint).all map (fun x = Data(x)))

