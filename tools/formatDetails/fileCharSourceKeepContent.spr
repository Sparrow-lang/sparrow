module formatTool.formatDetails.fileCharSourceKeepContent

import ext

import os, assert, std.ranges

//! A char source that reads the content of a file; it also keeps around the content of the file.
//! This content can be queried then by location. Old content can be dropped, by specifying the
//! start location
datatype FileCharSourceKeepContent
    _file: File             //!< The file we are reading from
    _content: String        //!< The content read from the file (all file)
    _contentStart: LineCol  //!< The start position for the current token
    _contentEnd: LineCol    //!< The last position seen in the file
    _contentStartIdx: Int   //!< The index in the content string of the start position

using _This = FileCharSourceKeepContent

fun ctor(this: @_This, filename: StringRef)
    _file ctor filename
    _contentStart = mkLineCol(1, 1)
    _contentEnd = mkLineCol(1, 1)
    _contentStartIdx = 0

fun isValid(this: @_This) = _file.isOpen

fun readChars(this: @_This, dest: @String, numChars: Int)
    for i = 0..numChars
        // Read into the given buffer
        var ch = _file.readChar
        if _file.isEof
            break
        dest += ch

        // Also keep track of the read content
        _content += ch
        _incrementPosition(_contentEnd, ch)

//! Retrieves the content between the two given positions
fun getContent(this: @_This, start, end: LineCol): StringRef
    assert(start >= _contentStart)
    assert(end <= _contentEnd)
    assert(start < end)

    // Find the start & end indices in the content string
    var curPos = _contentStart
    var idxStart = this._findIndexInContent(curPos, start, _contentStartIdx)
    var idxEnd = this._findIndexInContent(curPos, end, idxStart)

    return _content.subrange(idxStart, idxEnd - idxStart)

//! Update the start position in the content, for easier lookup
fun updateStartPos(this: @_This, newPos: LineCol)
    assert(newPos >= _contentStart)
    assert(newPos <= _contentEnd)

    // Find the start char & update start pos
    _contentStartIdx = this._findIndexInContent(_contentStart, newPos, _contentStartIdx)

//! Increments the location based on the given char
fun _incrementPosition(pos: @LineCol, ch: Char)
    if ch == '\n'.char
        pos.line++
        pos.col = 1
    else
        pos.col++

fun _findIndexInContent(this: @_This, curPos: @LineCol, targetPos: LineCol, idxStart: Int): Int
    var idx = idxStart
    while idx < _content.size && curPos < targetPos
        var ch = _content(idx)
        _incrementPosition(curPos, ch)
        idx++
    return idx
