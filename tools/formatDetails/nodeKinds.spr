//! Defines the node kinds we extract from Sparrow parser.
module formatTool.formatDetails.nodeKinds

import meta.location
import std.string

//! An AST node kind; identifies the AST construct
datatype NodeKind = Int

// The list of all node kinds
using nkNodeList        = NodeKind(0)
using nkModifiers       = NodeKind(1)
using nkModule          = NodeKind(2)
using nkImportName      = NodeKind(3)
using nkUsing           = NodeKind(4)
using nkPackage         = NodeKind(5)
using nkDatatype        = NodeKind(6)
using nkField           = NodeKind(7)
using nkConcept         = NodeKind(8)
using nkLet             = NodeKind(9)
using nkVar             = NodeKind(10)
using nkParameter       = NodeKind(11)
using nkFun             = NodeKind(12)
using nkParenthesisExpr = NodeKind(13)
using nkPostfixOp       = NodeKind(14)
using nkInfixOp         = NodeKind(15)
using nkPrefixOp        = NodeKind(16)
using nkIdentifier      = NodeKind(17)
using nkCompoundExpr    = NodeKind(18)
using nkStarExpr        = NodeKind(19)
using nkDotExpr         = NodeKind(20)
using nkFunAppExpr      = NodeKind(21)
using nkLambdaExpr      = NodeKind(22)
using nkNullLiteral     = NodeKind(23)
using nkBoolLiteral     = NodeKind(24)
using nkIntLiteral      = NodeKind(25)
using nkUIntLiteral     = NodeKind(26)
using nkLongLiteral     = NodeKind(27)
using nkULongLiteral    = NodeKind(28)
using nkFloatLiteral    = NodeKind(29)
using nkDoubleLiteral   = NodeKind(30)
using nkCharLiteral     = NodeKind(31)
using nkStringLiteral   = NodeKind(32)
using nkBlockStmt       = NodeKind(33)
using nkIfStmt          = NodeKind(34)
using nkForStmt         = NodeKind(35)
using nkWhileStmt       = NodeKind(36)
using nkBreakStmt       = NodeKind(37)
using nkContinueStmt    = NodeKind(38)
using nkReturnStmt      = NodeKind(39)

// Not actually a node kind; just to represent a null node
using nkNULL            = NodeKind(255)

fun _asString(nk: NodeKind): StringRef
    if      nk == nkNodeList        return 'NodeList'
    else if nk == nkModifiers       return 'Modifiers'
    else if nk == nkModule          return 'Module'
    else if nk == nkImportName      return 'ImportName'
    else if nk == nkUsing           return 'Using'
    else if nk == nkPackage         return 'Package'
    else if nk == nkDatatype        return 'Datatype'
    else if nk == nkField           return 'Field'
    else if nk == nkConcept         return 'Concept'
    else if nk == nkVar             return 'Var'
    else if nk == nkParameter       return 'Parameter'
    else if nk == nkFun             return 'Fun'

    else if nk == nkParenthesisExpr return 'ParenthesisExpr'
    else if nk == nkPostfixOp       return 'PostfixOp'
    else if nk == nkInfixOp         return 'InfixOp'
    else if nk == nkPrefixOp        return 'PrefixOp'
    else if nk == nkIdentifier      return 'Identifier'
    else if nk == nkCompoundExpr    return 'CompoundExpr'
    else if nk == nkStarExpr        return 'StarExpr'
    else if nk == nkDotExpr         return 'DotExpr'
    else if nk == nkFunAppExpr      return 'FunAppExpr'
    else if nk == nkLambdaExpr      return 'LambdaExpr'
    else if nk == nkNullLiteral     return 'NullLiteral'
    else if nk == nkBoolLiteral     return 'BoolLiteral'
    else if nk == nkIntLiteral      return 'IntLiteral'
    else if nk == nkUIntLiteral     return 'UIntLiteral'
    else if nk == nkLongLiteral     return 'LongLiteral'
    else if nk == nkULongLiteral    return 'ULongLiteral'
    else if nk == nkFloatLiteral    return 'FloatLiteral'
    else if nk == nkDoubleLiteral   return 'DoubleLiteral'
    else if nk == nkCharLiteral     return 'CharLiteral'
    else if nk == nkStringLiteral   return 'StringLiteral'

    else if nk == nkBlockStmt       return 'BlockStmt'
    else if nk == nkIfStmt          return 'IfStmt'
    else if nk == nkForStmt         return 'ForStmt'
    else if nk == nkWhileStmt       return 'WhileStmt'
    else if nk == nkBreakStmt       return 'BreakStmt'
    else if nk == nkContinueStmt    return 'ContinueStmt'
    else if nk == nkReturnStmt      return 'ReturnStmt'
    else if nk == nkNULL            return '<null>'

fun >>(nk: NodeKind, os: @OutStream)
    os << (nk _asString)

