//! Defines the SourceData datatype and a method for loading it from a given source file.
module formatTool.formatDetails.sourceData

import tokenData, tokenDataSource, astNodes, consoleErrorReporter
import node
import std.string

//! Data used to represent a source file.
//!
//! This is intended to be read/transformed by the tokens vector. This will contain the full source
//! data information. By contrast, the AST tree may contain gaps in the tokens (i.e., whitespaces,
//! comments, punctuation, etc.)
datatype SourceData
    //! The filename from which we read the SourceData
    filename: String
    //! The tokens contained in the source data
    //! This set of tokens will point to AST nodes
    tokens: TokenVector
    //! The root node of the AST representing the syntax of the file
    rootNode: Node


//! Load the source data from the given filename.
//! Ensures that all the tokens are link to their appropriate AST nodes
fun load(res: @SourceData, filename: StringRef)
    res.filename = filename

    // Open the source filename & read the tokens
    var src: TokenDataSource = filename
    res.tokens assign src.all

    // Do another pass to read the AST
    res.rootNode = readAst(filename)
    // printAst(res.rootNode)

    // Set the parents for the AST nodes
    _setAstParents(res.rootNode)

    // Link AST nodes to the tokens
    _setAstToTokens(res.tokens, res.rootNode)

fun _setAstParents(node: @Node)
    if node.isNull
        return
    for child = (node children)
        child setParent = node
        _setAstParents(child)

fun _setAstToTokens(tokens: @TokenVector, rootNode: Node)
    var startToken = 0
    if rootNode.isSet && !tokens.isEmpty
        while startToken < (tokens size)
            _astToTokensImpl(rootNode, tokens, startToken)
            startToken++
            // We increase the startToken and repeat, as we might have tokens that are outside the
            // whole module; i.e., initial comments

fun _astToTokensImpl(node: Node, tokens: @TokenVector, startToken: @Int)
    while startToken < tokens.size
        // Basic overlap check; we have to overlap the token before our children
        var tok: @TokenData = tokens(startToken)
        var nodeLoc = node location
        if !(nodeLoc _containsLoc tok.loc)
            return

        // Try first to match the children against our current token
        var origStartToken = startToken
        for child = (node children)
            if child.isSet
                _astToTokensImpl(child, tokens, startToken)
        // Check if the children couldn't match this token
        if origStartToken == startToken
            // I guess not; but we know the we match the token
            tok.parentAst = node
            startToken++

fun _containsLoc(bigLoc, tokenLoc: Location): Bool
    return (bigLoc.start <= tokenLoc.start) && (bigLoc.end >= tokenLoc.end)

fun printAst(node: Node, indent: Int = 0)
    for i = 0..indent
        cout << '  '
    cout << '- '
    if node.isNull
        cout << '<null>\n'
        return
    cout << (node kind) << ' ' << (node location)
    if !(node name).isEmpty
        cout << ' name:"' << (node name) << '"'
    if (node parent) isSet
        cout << ' parent:' << ((node parent) kind)
    cout << '\n'
    for child = (node children)
        printAst(child, indent+1)

