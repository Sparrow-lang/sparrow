//!! -I../src/SparrowFrontend/Grammar
import formatDetails.sourceData

import os

//! The type of a basic transformation function
using TransformFun = FunctionPtr(VoidType, @SourceData)

fun sprMain
    if programArgs.size() < 2
        _printArgsError('not enough arguments')
    var filename = ''

    var inPlace = false
    var transformFun: TransformFun

    for i=1..programArgs.size
        var arg = programArgs(i)

        if arg == '-format'             ; transformFun = \_defaultFormat
        else if arg == '-f=empty'       ; transformFun = \_emptyTransform
        else if arg == '-f=ref-to-mut'  ; transformFun = \_refToMut
        else if arg == '-i'             ; inPlace = true
        else if arg.size > 0 && arg(0) == '-'.char
            // This looks like a flag, but we don't recognize it
            _printArgsError(toString('invalid argument: "', arg, '"').asStringRef)
        else if !filename.isEmpty
            // Another filename?
            _printArgsError('can only have one filename')
        else
            filename = arg

    if filename.isEmpty
        // No filename?
        _printArgsError('no filename given')

    // TODO -c == check

    // Load the source data
    var sourceData: SourceData
    sourceData load filename

    // Transform the tokens
    _checkDisableFormatting(sourceData)
    transformFun(sourceData)

    // Write the output
    if inPlace
        sourceData.tokens _writeToFile filename
    else
        sourceData.tokens _writeToStdout

fun _printArgsError(msg: StringRef)
    cout << 'ERROR: Invalid arguments passed (' << msg << ')\n\n' // IGNORE-ERROR for test.py
    cout << 'Usage:\n'
    cout << '  ' << programArgs(0) << ' -i -format <sparrowSourceFile>\n\n'
    exit(1)

fun _writeToStdout(tokens: @TokenVector)
    for token = tokens.all
        cout << token.content
        //cout << '<' << (token.parentAst kind) << '>'

fun _writeToFile(tokens: @TokenVector, filename: StringRef)
    var destFile = File(filename, 'w')
    if !destFile.isOpen
        reportError(Location(), toString('cannot open output file: ', filename).asStringRef)

    for token = tokens.all
        destFile write token.content

fun _checkDisableFormatting(src: @SourceData)
    var formatOffCount = 0
    for token: @TokenData = src.tokens.all
        // Disable formatting if we are in a marked area
        if formatOffCount > 0
            token.canFormat = false

        // Check fort star/end of the formatting-off area
        if token.type == tkCOMMENT
            var commentContent = _getCommentContent(token.content)
            if commentContent == 'format off'
                formatOffCount++
            else if commentContent == 'format on' && formatOffCount > 0
                formatOffCount--

fun _getCommentContent(tokenStr: StringRef): StringRef
    var res = tokenStr
    if res.subrange(0, 2) == '//'
        res popFront 2
    else if res.subrange(0, 2) == '/*'
        res popFront 2
        res popBack 2
    // Trim spaces
    while !res.isEmpty && isSpace(res.front)
        res popFront
    while !res.isEmpty && isSpace(res.back)
        res popBack
    return res

fun _emptyTransform(src: @SourceData)
    ;

fun _defaultFormat(src: @SourceData)
    for token: @TokenData = src.tokens.all
        if !token.canFormat
            continue
        if token.type == tkWHITESPACE && token.content.size > 2 && token.loc.start.col > 1
            token.content = " "

fun _refToMut(src: @SourceData)
    for i = 2..src.tokens.size
        var prev2 = src.tokens(i-2)
        var prev1 = src.tokens(i-1)
        var cur: @TokenData = src.tokens(i)
        if !cur.canFormat
            continue
        if prev2.type == tkCOLON && prev1.type == tkWHITESPACE && cur.content == '@'
            cur.content = '!'


//<<<File scanning test(-format ../SparrowImplicitLib/std/ranges.spr)
// <<<File scanning test(-f=ref-to-mut ../SparrowImplicitLib/std/ranges.spr)
